import {
	ComponentRef,
	computed,
	Directive,
	ElementRef,
	inject,
	input,
	InputSignal,
	OnInit,
	Renderer2,
	Signal,
	ViewContainerRef,
} from '@angular/core';

import { NgxDisplayContentComponent } from '../../abstracts';
import { NgxButtonConfigurationToken } from '../../tokens';
import {
	NgxButtonConfiguration,
	NgxButtonDisplayType,
	NgxButtonIconPosition,
	NgxButtonPriority,
	NgxButtonType,
	NgxButtonWidth,
} from '../../types';

/**
 * A directive that adds the classic button states, priority, loading and icon handling
 */
@Directive({
	selector: '[ngxButton]',
	host: {
		'[attr.class]': 'buttonClasses()',
	},
})
export class NgxButtonDirective implements OnInit {
	/**
	 * An instance of the viewContainer
	 */
	protected readonly viewContainer: ViewContainerRef = inject(ViewContainerRef);

	/**
	 * An instance of the elementRef
	 */
	protected readonly elementRef: ElementRef<HTMLButtonElement> = inject(
		ElementRef<HTMLButtonElement>
	);

	/**
	 * An instance of the NativeElement
	 */
	protected readonly nativeElement = this.elementRef.nativeElement;

	/**
	 * An instance of the renderer
	 */
	protected readonly renderer: Renderer2 = inject(Renderer2);

	/**
	 * An optional set of configuration
	 */
	protected readonly configuration: NgxButtonConfiguration = inject(NgxButtonConfigurationToken, {
		optional: true,
	});

	/**
	 * The icon element in case we did not configure an icon component
	 */
	protected iconElement: HTMLElement;

	/**
	 * The icon component in case we did configure an icon component
	 */
	protected iconComponent: ComponentRef<NgxDisplayContentComponent>;

	protected loadingComponent: ComponentRef<NgxDisplayContentComponent>;

	/**
	 * The classes of the button generated by its configuration
	 */
	protected buttonClasses: Signal<string> = computed(() => {
		// Iben: Inserts the icon
		this.handleIcon();

		// Iben: Inserts the loading component when needed
		this.handleLoading();

		return `
    ngx-button
    ngx-button-${this.buttonType()}
    ngx-button-${this.priority()}
    ngx-button-${this.buttonWidth()}
    ${this.display() !== 'both' ? `ngx-button-${this.display()}-only ` : ''}
    ${this.loading() ? 'ngx-button-loading ' : ''}
    ${this.icon() ? 'ngx-button-with-icon ' : ''}`;
	});

	/**
	 * Whether the button is currently loading
	 */
	public loading: InputSignal<boolean> = input(false);

	/**
	 * Optional loading data
	 */
	public loadingData: InputSignal<any> = input();

	/**
	 * Whether the button is a regular, outline, text or fab button. By default, this is regular.
	 */
	public buttonType: InputSignal<NgxButtonType> = input('regular');

	/**
	 * Whether the button has primary, secondary, tertiary or danger priority. By default, this is primary.
	 */
	public priority: InputSignal<NgxButtonPriority> = input('primary');

	/**
	 * Whether the button has to show only the icon, the text or both. By default, this is both.
	 */
	public display: InputSignal<NgxButtonDisplayType> = input('both');

	/**
	 * The width of the button, either full or fit. By default, this is fit.
	 */
	public buttonWidth: InputSignal<NgxButtonWidth> = input('fit');

	/**
	 * An optional icon we wish to display alongside the button text
	 */
	public icon: InputSignal<any> = input();

	/**
	 * The position of the icon when provided, by default this is Left unless overwritten in the configuration
	 */
	public iconPosition: InputSignal<NgxButtonIconPosition> = input(
		this.configuration?.iconPosition || 'left'
	);

	ngOnInit() {
		// Iben: Wrap the base text in an element
		const wrapperElement: HTMLSpanElement = this.renderer.createElement(
			this.configuration?.labelWrapper || 'span'
		);

		// Iben: Append all the child nodes
		this.nativeElement.childNodes.forEach((node) => {
			this.renderer.appendChild(wrapperElement, node);
		});

		this.renderer.setAttribute(wrapperElement, 'class', 'ngx-button-label');

		// Iben: Remove all the nodes
		this.nativeElement.childNodes.forEach((node) => {
			this.renderer.removeChild(wrapperElement, node);
		});

		// Iben: Remove the current innerHtml and replace it with a span element
		this.renderer.appendChild(this.nativeElement, wrapperElement);
	}

	/**
	 * Adds or removes the loading component
	 */
	private handleLoading(): void {
		// Iben: If the loading state is on and a loading component is provided we add it
		if (this.loading() && this.configuration?.loading) {
			// Iben: Create the loading component and set its data
			this.loadingComponent = this.viewContainer.createComponent(this.configuration.loading);
			this.loadingComponent.setInput('data', this.loadingData());

			// Iben: Add the loading component to the button
			this.renderer.appendChild(
				this.nativeElement,
				this.loadingComponent.instance.elementRef.nativeElement
			);
		} else {
			// Iben: If the loading has stopped and a loading component is present, remove it
			if (!this.loading() && this.loadingComponent) {
				this.loadingComponent.destroy();
				this.loadingComponent = undefined;
			}
		}
	}

	/**
	 * Adds or removes an icon
	 */
	private handleIcon(): void {
		// Iben: Check if we need to add an icon
		if (this.icon()) {
			// Iben: Check if the button already has an icon, if not, add it
			if (!this.iconElement && !this.iconComponent) {
				// Iben: If no icon component exists, we create a regular i element
				if (!this.configuration?.icon) {
					// Iben: Create a new icon element
					this.iconElement = this.renderer.createElement('i');
					this.iconElement.className = `ngx-button-icon ${this.icon()}`;
				} else {
					// Iben: Create new component and add the icon
					this.iconComponent =
						this.viewContainer.createComponent<NgxDisplayContentComponent>(
							this.configuration.icon,
							{ index: 0 }
						);
					this.iconComponent.setInput('data', this.icon());
					this.renderer.addClass(
						this.iconComponent.instance.elementRef.nativeElement,
						'ngx-button-icon'
					);
				}

				// Iben: Add the icon depending on whether we want to add it on the left or the right
				this.iconPosition() === 'left'
					? this.renderer.insertBefore(
							this.nativeElement,
							this.iconElement ||
								this.iconComponent.instance.elementRef.nativeElement,
							this.nativeElement.firstChild
					  )
					: this.renderer.appendChild(
							this.nativeElement,
							this.iconElement || this.iconComponent.instance.elementRef.nativeElement
					  );
			}
		}
		// Iben: If an icon already exists and we no longer have an icon presented, we remove it
		else if (this.iconElement || this.iconComponent) {
			if (!this.configuration?.icon) {
				this.renderer.removeChild(this.nativeElement, this.iconElement);
				this.iconElement = undefined;
			} else {
				this.iconComponent?.destroy();
				this.iconComponent = undefined;
			}
		}
	}
}
