import { Directive, ElementRef, HostListener, Type, inject, input } from '@angular/core';
import { v4 as uuid } from 'uuid';

import { NgxTooltipAbstractComponent } from '../../abstracts';
import { NgxTooltipService } from '../../services';
import { NgxTooltipPosition } from '../../types';

/**
 * A directive that adds a ARIA compliant tooltip to a component
 *
 * @export
 * @class NgxTooltipDirective
 */
@Directive({
	selector: '[ngxTooltip]',
	standalone: true,
	host: {
		'[attr.aria-describedby]': 'ngxTooltipId()',
		tabIndex: '0',
	},
})
export class NgxTooltipDirective {
	private readonly tooltipService = inject(NgxTooltipService);
	private readonly elementRef = inject(ElementRef);

	/**
	 * Show the tooltip on hover
	 */
	@HostListener('mouseenter') showOnMouseEnter() {
		this.showTooltip();
	}

	/**
	 * Show the tooltip on focus
	 */
	@HostListener('focus') showOnFocus() {
		this.showTooltip();
	}

	/**
	 * Remove the tooltip on leaving hover
	 */
	@HostListener('mouseleave') removeOnMouseOut() {
		this.removeTooltip();
	}

	/**
	 * Remove the tooltip on blur
	 */
	@HostListener('blur') removeOnBlur() {
		this.removeTooltip();
	}

	/**
	 * Remove the tooltip on escape pressed
	 */
	@HostListener('document:keydown.escape') onEscape() {
		this.tooltipService.removeToolTip();
	}

	/**
	 * The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.
	 */
	/**
	 * The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.
	 */
	public readonly ngxTooltipId = input<string>(uuid());

	/**
	 * The text of the tooltip
	 */
	public readonly ngxTooltip = input.required<string>();

	/**
	 * An optional component we can pass to replace the default configured component
	 */
	public readonly ngxTooltipComponent = input<Type<NgxTooltipAbstractComponent>>();

	/**
	 * An optional position we can pass to tooltip, by default this is 'above'.
	 */
	// Iben: The default is set in the NgxTooltipService
	public readonly ngxTooltipPosition = input<NgxTooltipPosition>();

	/**
	 * Prevent the tooltip from being shown, by default this is false.
	 */
	public readonly ngxTooltipDisabled = input<boolean>(false);

	/**
	 * Show the tooltip if it is not visible yet
	 */
	private showTooltip(): void {
		// Iben: Early exit when the tooltip is disabled
		if (this.ngxTooltipDisabled()) {
			return;
		}

		// Iben: Show the tooltip
		this.tooltipService.setToolTipEvent({
			text: this.ngxTooltip(),
			position: this.ngxTooltipPosition(),
			component: this.ngxTooltipComponent(),
			elementRef: this.elementRef,
			id: this.ngxTooltipId(),
			source: 'element',
			active: true,
		});
	}

	/**
	 * Remove the tooltip
	 */
	private removeTooltip(): void {
		// Iben: Early exit when the tooltip is disabled
		if (this.ngxTooltipDisabled()) {
			return;
		}

		// Iben: Emit a remove event
		this.tooltipService.setToolTipEvent({
			id: this.ngxTooltipId(),
			source: 'element',
			active: false,
		});
	}
}
