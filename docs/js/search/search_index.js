var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AtLeastOneRequiredValidatorOptions.html",[0,0.122,1,3.921]],["body/interfaces/AtLeastOneRequiredValidatorOptions.html",[0,0.139,1,6.55,2,0.878,3,0.086,4,0.058,5,0.066,6,5.432,7,3.573,8,4.846,9,5.432,10,0.154,11,0.233,12,0.799,13,8.635,14,7.563,15,2.811,16,0.233,17,0.006,18,6.149,19,0.249,20,6.127,21,3.2,22,6.55,23,4.46,24,5.432,25,5.432,26,2.753,27,0.086,28,1.518,29,1.155,30,6.371,31,3.942,32,0.822,33,6.371,34,1.57,35,4.078,36,2.055,37,2.413,38,2.614,39,2.753,40,3.942,41,2.49,42,2.733,43,4.846,44,2.154,45,4.846,46,7.117,47,1.616,48,3.573,49,2.014,50,3.315,51,5.371,52,5.432,53,5.432,54,3.2,55,2.378,56,5.432,57,2.378,58,5.432,59,5.432,60,5.432,61,1.681,62,5.432,63,5.432,64,4.547,65,5.432,66,2.433,67,4.46,68,2.37,69,7.141,70,4.526,71,5.432,72,3.405,73,2.701,74,2.138,75,3.586,76,3.206,77,7.978,78,5.432,79,5.432,80,5.432,81,1.803,82,5.863,83,3.353,84,4.846,85,5.432,86,5.182,87,5.432,88,0.004,89,0.004]],["title/classes/BaseFormAccessor.html",[90,0.422,91,3.668]],["body/classes/BaseFormAccessor.html",[3,0.091,4,0.081,5,0.091,17,0.006,27,0.091,74,2.971,88,0.005,89,0.005,90,0.774,91,6.723,92,4.782,93,7.546,94,6.732,95,7.546,96,1.161,97,3.543,98,4.168,99,4.446,100,6.196,101,4.605,102,3.825,103,6.732,104,6.732,105,4.982,106,2.181,107,5.476,108,7.546,109,1.282]],["title/interfaces/BaseStore.html",[0,0.122,110,3.466]],["body/interfaces/BaseStore.html",[0,0.228,2,1.008,3,0.075,4,0.067,5,0.075,10,0.177,11,0.255,16,0.291,17,0.006,19,0.266,27,0.108,28,1.896,29,1.555,68,3.111,88,0.005,89,0.005,98,3.444,110,5.662,111,4.789,112,4.789,113,5.445,114,3.409,115,5.445,116,7.056,117,4.789,118,3.674,119,6.187,120,4.117,121,6.065,122,3.167,123,4.761,124,3.249,125,4.525,126,5.151,127,3.554,128,2.67,129,5.387,130,3.444,131,3.249,132,5.387,133,3.554,134,3.805,135,2.406,136,2.455,137,1.283,138,5.257,139,2.73,140,4.117,141,4.117,142,4.117,143,4.117]],["title/interfaces/BaseStoreActions.html",[0,0.122,129,3.297]],["body/interfaces/BaseStoreActions.html",[0,0.227,2,0.993,3,0.074,4,0.066,5,0.074,10,0.174,11,0.252,12,0.683,16,0.309,17,0.006,19,0.264,27,0.107,28,1.305,29,1.435,68,3.099,88,0.005,89,0.005,98,3.391,110,4.455,111,4.715,112,4.715,113,3.747,114,3.393,115,4.715,116,6.494,117,4.715,118,3.617,119,6.553,120,4.053,121,6.037,122,3.155,123,4.715,124,3.199,125,4.455,126,6.037,127,3.499,128,2.629,129,5.837,130,3.391,131,3.199,132,5.334,133,3.499,134,3.747,135,2.369,136,2.417,137,1.503,138,5.228,139,3.885,140,4.053,141,4.053,142,4.053,143,4.053,144,4.025]],["title/interfaces/BaseStoreAssets.html",[0,0.122,127,2.722]],["body/interfaces/BaseStoreAssets.html",[0,0.229,2,1.019,3,0.076,4,0.068,5,0.076,10,0.179,11,0.256,16,0.279,17,0.006,19,0.267,27,0.108,28,1.338,29,1.448,68,2.839,88,0.005,89,0.005,98,3.479,110,4.571,111,4.837,112,4.837,113,3.844,114,2.913,115,4.791,116,6.57,117,4.837,118,3.711,119,6.202,120,4.158,121,6.083,122,3.175,123,5.465,124,3.281,125,4.571,126,5.183,127,4.475,128,3.835,129,6.182,130,4.946,131,4.665,132,6.182,133,3.59,134,3.844,135,2.43,136,2.479,137,1.291,138,5.276,139,2.758,140,4.158,141,4.158,142,4.158,143,4.158]],["title/interfaces/BaseStoreAssetsGeneratorOptions.html",[0,0.122,145,3.466]],["body/interfaces/BaseStoreAssetsGeneratorOptions.html",[0,0.218,2,1.17,3,0.087,4,0.078,5,0.087,10,0.205,11,0.279,12,0.755,16,0.279,17,0.006,19,0.226,27,0.103,88,0.005,89,0.005,115,5.728,145,6.197,146,5.25,147,4.776,148,4.415,149,6.454,150,8.543,151,6.611,152,1.351,153,6.559,154,4.776,155,5.25,156,4.995]],["title/interfaces/BaseStoreSelectors.html",[0,0.122,132,3.297]],["body/interfaces/BaseStoreSelectors.html",[0,0.228,2,1.008,3,0.075,4,0.067,5,0.075,10,0.177,11,0.255,16,0.291,17,0.006,19,0.266,27,0.108,28,1.325,29,1.443,68,2.827,88,0.005,89,0.005,98,4.928,110,4.525,111,4.789,112,4.789,113,3.805,114,2.895,115,4.761,116,6.54,117,4.789,118,3.674,119,6.187,120,4.117,121,6.541,122,3.167,123,4.761,124,3.249,125,4.525,126,5.151,127,3.554,128,2.67,129,5.387,130,3.444,131,3.249,132,5.879,133,3.554,134,3.805,135,2.406,136,2.455,137,1.283,138,5.257,139,2.73,140,4.117,141,5.891,142,5.891,143,5.891]],["title/interfaces/BasicEntityAdapterReducerActions.html",[0,0.122,157,3.921]],["body/interfaces/BasicEntityAdapterReducerActions.html",[0,0.214,2,1.131,3,0.084,4,0.075,5,0.084,10,0.198,11,0.273,16,0.315,17,0.006,19,0.218,27,0.101,29,1.353,49,1.558,68,2.321,88,0.005,89,0.005,113,4.267,114,2.594,124,3.643,128,2.994,135,3.581,137,1.526,154,4.616,157,6.871,158,4.827,159,4.827,160,5.741,161,6.128,162,4.064,163,7.466,164,4.616,165,6.238,166,6.238,167,5.741,168,5.741,169,5.37,170,4.827,171,1.772,172,6.238,173,5.074]],["title/interfaces/BasicEntityState.html",[0,0.122,170,3.297]],["body/interfaces/BasicEntityState.html",[0,0.216,2,1.147,3,0.086,4,0.076,5,0.086,10,0.201,11,0.276,16,0.311,17,0.006,19,0.221,27,0.102,29,1.365,49,1.581,68,2.355,88,0.005,89,0.005,113,4.329,114,2.632,124,3.696,128,3.038,135,2.737,137,1.166,144,4.398,154,4.683,157,5.825,158,4.898,159,4.898,160,5.825,161,4.683,162,3.106,163,8.039,164,4.683,165,6.329,166,6.329,167,5.825,168,5.825,169,5.448,170,5.828,171,2.139,172,8.321,173,5.148]],["title/pipes/BtwPipe.html",[174,1.404,175,4.261]],["body/pipes/BtwPipe.html",[3,0.073,4,0.066,5,0.073,10,0.218,12,0.538,16,0.199,17,0.006,19,0.19,27,0.073,32,1.495,34,1.76,42,1.76,44,2.068,47,1.557,49,1.713,66,2.727,88,0.005,89,0.005,90,0.538,96,0.937,152,1.39,174,2.259,175,7.892,176,3.086,177,3.587,178,6.088,179,1.674,180,1.296,181,8.846,182,2.506,183,1.176,184,1.327,185,4.12,186,5.074,187,0.735,188,6.088,189,7.686,190,3.347,191,4.004,192,6.619,193,1.447,194,2.852,195,6.112,196,1.157,197,6.088,198,6.088,199,6.088,200,3.587,201,6.088,202,6.088,203,2.397,204,4.12,205,0.55,206,1.852,207,4.999,208,6.088,209,3.587,210,6.088,211,4.418,212,7.686,213,6.088,214,6.088,215,4.999,216,6.088,217,6.088,218,4.999,219,4.999,220,6.088,221,6.088,222,7.686,223,4.676,224,6.088,225,5.432]],["title/interfaces/ComponentTypeWrapper.html",[0,0.122,226,4.261]],["body/interfaces/ComponentTypeWrapper.html",[0,0.235,2,1.013,3,0.076,4,0.067,5,0.076,7,3.504,17,0.006,19,0.266,21,3.689,27,0.076,34,1.81,42,1.81,44,1.464,47,1.585,49,1.902,61,1.938,70,3.969,88,0.005,89,0.005,90,0.754,91,6.008,96,0.964,100,5.142,109,1.634,203,3.08,205,0.565,226,7.612,227,6.262,228,6.262,229,6.262,230,7.823,231,5.677,232,7.823,233,4.321,234,4.774,235,6.979,236,6.008,237,3.586,238,3.504,239,6.979,240,5.401,241,7.065,242,8.937,243,7.823,244,6.979,245,1.666,246,5.587,247,6.262,248,6.262,249,4.324,250,3.822,251,6.979,252,6.262,253,6.553,254,7.612,255,3.5,256,6.191,257,6.979,258,6.262]],["title/injectables/EffectsService.html",[259,1.478,260,3.921]],["body/injectables/EffectsService.html",[3,0.082,4,0.073,5,0.082,10,0.192,12,0.725,16,0.268,17,0.006,19,0.287,27,0.082,29,1.428,44,2.065,88,0.005,89,0.005,90,0.598,147,4.466,152,1.271,180,1.263,183,1.585,184,1.65,187,0.991,193,1.949,196,1.56,205,0.611,259,2.538,260,6.736,261,3.03,262,6.765,263,6.736,264,6.736,265,8.204,266,6.765,267,8.204,268,2.764,269,8.204,270,6.765,271,2.057,272,1.633,273,2.416,274,3.34,275,6.765,276,6.765,277,6.765,278,6.765,279,6.765,280,6.765,281,6.765]],["title/interfaces/EntityStoreActions.html",[0,0.122,282,3.466]],["body/interfaces/EntityStoreActions.html",[0,0.208,2,0.917,3,0.068,4,0.061,5,0.068,10,0.161,11,0.24,12,0.649,16,0.314,17,0.006,19,0.254,27,0.098,29,1.188,68,2.86,88,0.005,89,0.005,114,3.197,115,5.447,119,6.664,120,3.744,121,5.892,122,3.308,123,4.482,124,2.954,126,5.892,128,2.428,130,4.056,131,2.954,135,3.444,137,1.467,138,5.664,139,3.772,140,3.744,141,3.744,142,3.744,143,3.744,144,3.826,158,3.915,159,3.915,161,5.892,162,3.907,170,3.915,274,2.8,282,5.911,283,4.115,284,4.355,285,4.115,286,3.341,287,5.33,288,4.656,289,4.656,290,4.656,291,4.656]],["title/interfaces/EntityStoreAssets.html",[0,0.122,286,2.814]],["body/interfaces/EntityStoreAssets.html",[0,0.213,2,0.961,3,0.072,4,0.064,5,0.072,10,0.169,11,0.247,16,0.272,17,0.006,19,0.26,27,0.1,29,1.224,68,1.972,88,0.005,89,0.005,114,2.204,115,5.525,119,6.472,120,3.921,121,5.977,122,3.353,123,5.35,124,3.095,126,4.995,128,3.754,130,5.001,131,4.567,135,2.919,137,1.244,138,5.708,139,2.601,140,3.921,141,3.921,142,3.921,143,3.921,158,4.101,159,4.101,161,4.995,162,3.313,170,4.101,274,2.933,282,6.362,283,4.31,284,4.562,285,4.31,286,4.458,287,6.362,288,4.877,289,4.877,290,4.877,291,4.877]],["title/interfaces/EntityStoreAssetsGeneratorOptions.html",[0,0.122,155,3.466]],["body/interfaces/EntityStoreAssetsGeneratorOptions.html",[0,0.216,2,1.153,3,0.086,4,0.077,5,0.086,10,0.202,11,0.276,12,0.826,16,0.295,17,0.006,19,0.223,27,0.102,88,0.005,89,0.005,115,5.701,145,5.173,146,5.173,147,4.706,148,4.35,149,6.36,150,8.51,151,6.586,152,1.344,153,7.175,154,4.706,155,6.143,156,6.449]],["title/interfaces/EntityStoreSelectors.html",[0,0.122,287,3.466]],["body/interfaces/EntityStoreSelectors.html",[0,0.212,2,0.957,3,0.071,4,0.064,5,0.071,10,0.168,11,0.246,16,0.286,17,0.006,19,0.259,27,0.1,29,1.22,68,1.964,88,0.005,89,0.005,114,2.195,115,5.519,119,6.468,120,3.905,121,6.498,122,3.327,123,4.606,124,3.082,126,4.982,128,2.533,130,4.168,131,3.082,135,2.912,137,1.241,138,5.704,139,2.59,140,3.905,141,5.779,142,5.779,143,5.779,158,4.084,159,4.084,161,4.982,162,3.304,170,4.084,274,2.921,282,5.476,283,4.293,284,4.543,285,4.293,286,3.485,287,6.031,288,7.188,289,4.857,290,4.857,291,4.857]],["title/directives/FocusClickDirective.html",[292,0.723,293,2.298]],["body/directives/FocusClickDirective.html",[3,0.062,4,0.056,5,0.062,10,0.147,11,0.226,12,0.458,15,2.722,16,0.226,17,0.006,19,0.162,27,0.062,32,1.179,47,1.578,66,3.488,76,2.947,81,2.296,88,0.004,89,0.004,90,0.458,135,2.668,137,0.851,177,3.049,179,1.423,180,0.796,182,2.255,183,1.336,184,1.659,187,1.099,193,1.23,196,1.315,200,3.049,203,2.037,205,0.467,292,1.4,293,4.17,294,1.27,295,9.248,296,9.248,297,5.175,298,2.067,299,8.664,300,1.668,301,5.981,302,6.915,303,8.313,304,2.215,305,3.82,306,5.864,307,6.915,308,1.327,309,6.915,310,3.755,311,3.389,312,6.915,313,6.915,314,6.915,315,3.328,316,6.915,317,1.606,318,6.915,319,4.439,320,4.302,321,5.175,322,6.949,323,5.982,324,3.005,325,6.033,326,7.789,327,7.789,328,4.589,329,7.417,330,3.571,331,6.17,332,4.302,333,3.707,334,3.71,335,2.266,336,5.175,337,5.175,338,3.158,339,5.678,340,3.049,341,1.601,342,4.617,343,3.328,344,5.175,345,3.049,346,3.755,347,2.491,348,5.175,349,2.949,350,2.318,351,2.858,352,4.249,353,6.915,354,6.17,355,5.175,356,5.175,357,3.755,358,3.416,359,5.175,360,5.175]],["title/directives/FormAccessorContainer.html",[292,0.723,361,2.298]],["body/directives/FormAccessorContainer.html",[2,0.629,3,0.047,4,0.042,5,0.047,10,0.11,11,0.185,12,0.649,15,1.531,16,0.24,17,0.006,19,0.254,21,2.291,26,1.971,27,0.047,32,1.272,34,2.429,35,4.643,42,1.124,49,1.262,57,3.415,61,1.752,66,1.742,73,1.471,83,1.826,88,0.004,89,0.004,90,0.344,91,4.35,94,3.469,96,1.129,99,5.615,100,4.651,101,2.373,103,3.469,106,2.489,109,1.535,122,2.911,180,1.129,183,1.094,184,1.578,187,1.015,193,1.744,196,1.483,203,2.889,205,0.351,206,1.722,250,2.373,251,3.469,272,0.939,292,0.857,294,0.954,300,1.523,304,2.759,308,1.161,317,1.746,335,1.703,347,3.918,350,3.287,361,2.726,362,8.612,363,7.743,364,8.612,365,3.889,366,2.925,367,3.69,368,3.754,369,1.777,370,5.664,371,5.664,372,5.664,373,3.213,374,6.68,375,5.664,376,3.889,377,4.234,378,6.68,379,1.572,380,5.325,381,5.664,382,6.873,383,5.067,384,5.636,385,6.685,386,8.612,387,4.848,388,5.664,389,7.325,390,7.325,391,3.889,392,3.019,393,7.339,394,5.664,395,4.848,396,5.664,397,3.889,398,3.889,399,3.739,400,3.889,401,3.889,402,3.739,403,5.664,404,4.35,405,5.664,406,5.664,407,3.889,408,2.796,409,5.664,410,5.664,411,5.053,412,2.527,413,3.889,414,3.889,415,3.889,416,5.664,417,3.889,418,5.664,419,6.68,420,3.889,421,7.339,422,3.889,423,3.889,424,2.291,425,2.465,426,3.036,427,3.889,428,2.567,429,3.889,430,3.889,431,2.026,432,2.373,433,3.889,434,3.889]],["title/interfaces/FormStateOptionsEntity.html",[0,0.122,390,3.921]],["body/interfaces/FormStateOptionsEntity.html",[0,0.19,2,1.2,3,0.09,4,0.08,5,0.09,10,0.21,11,0.283,12,0.837,16,0.283,17,0.006,27,0.09,29,1.579,88,0.005,89,0.005,390,7.116,392,2.601,435,6.618,436,7.418,437,8.442,438,9.462]],["title/pipes/HasObserversPipe.html",[174,1.404,439,4.261]],["body/pipes/HasObserversPipe.html",[3,0.081,4,0.072,5,0.081,12,0.59,16,0.218,17,0.006,19,0.208,27,0.098,29,1.316,44,1.902,47,1.778,66,2.988,73,2.524,88,0.005,89,0.005,90,0.719,109,1.382,136,2.627,174,2.391,176,3.382,177,3.931,179,1.835,180,1.351,182,2.653,183,1.289,184,1.515,185,3.577,187,0.806,193,1.585,196,1.268,200,5.171,203,2.627,204,4.361,205,0.602,206,2.029,298,1.995,320,4.848,439,8.151,440,8.135,441,7.258,442,5.953,443,9.137,444,7.258,445,8.605,446,6.672,447,6.672,448,8.135,449,4.842,450,6.672,451,6.672,452,6.672,453,4.405,454,5.953,455,6.672]],["title/pipes/IbanPipe.html",[174,1.404,456,4.261]],["body/pipes/IbanPipe.html",[3,0.08,4,0.071,5,0.08,12,0.583,15,2.595,16,0.215,17,0.006,19,0.206,27,0.08,32,1.321,44,1.888,47,1.636,88,0.005,89,0.005,90,0.583,152,1.309,174,2.374,176,3.342,177,3.884,179,1.812,180,1.343,182,2.633,183,1.273,184,1.394,185,3.534,186,5.331,187,0.796,190,2.494,192,5.86,193,1.566,196,1.253,200,4.757,203,2.595,204,4.329,205,0.595,206,2.005,223,5.063,308,0.981,456,8.118,457,6.592,458,9.099,459,6.592,460,6.592,461,6.592,462,6.592,463,6.592,464,6.592,465,6.592,466,6.592,467,4.023,468,6.592,469,9.099,470,6.592,471,7.204,472,5.881,473,6.592,474,7.204,475,6.592,476,2.762,477,6.592]],["title/components/MockTourHolderComponent.html",[109,0.811,478,2.358]],["body/components/MockTourHolderComponent.html",[3,0.057,4,0.051,5,0.057,10,0.134,11,0.212,17,0.006,19,0.25,27,0.057,28,1.784,32,1.125,47,1.317,49,1.053,61,2.011,88,0.004,89,0.004,90,0.418,106,1.365,109,1.262,179,1.299,180,1.516,182,2.119,183,1.256,184,1.498,187,0.967,196,0.898,205,0.426,272,1.14,292,0.715,293,2.273,294,1.159,298,3.049,300,1.719,308,1.106,317,0.912,361,2.273,369,2.308,478,3.953,479,2.559,480,1.787,481,1.822,482,7.489,483,4.723,484,4.506,485,3.444,486,6.63,487,7.432,488,5.393,489,8.006,490,4.723,491,6.5,492,5.337,493,6.5,494,5.799,495,4.723,496,6.5,497,5.799,498,4.723,499,4.717,500,4.723,501,1.365,502,2.461,503,6.5,504,4.214,505,3.628,506,2.332,507,4.358,508,4.723,509,1.568,510,4.723,511,3.261,512,1.568,513,2.273,514,2.332,515,3.209,516,1.595,517,4.058,518,2.394,519,2.394,520,2.332,521,2.068,522,2.394,523,2.332,524,2.956,525,2.394,526,2.332,527,2.394,528,3.295,529,2.394,530,3.209,531,2.394,532,2.332,533,2.273,534,2.332,535,3.428,536,2.394,537,4.058,538,2.332,539,2.273,540,2.332,541,2.218,542,2.394,543,2.273,544,2.273,545,2.394,546,2.165,547,2.394,548,2.332,549,2.394,550,2.332,551,3.295,552,2.332,553,2.332,554,2.394,555,2.332,556,2.394,557,2.332,558,2.273,559,2.394,560,2.394,561,2.394,562,2.115,563,1.626,564,2.218,565,2.218,566,2.394,567,2.273,568,2.394,569,2.394,570,2.394,571,2.218,572,2.273,573,2.394,574,2.115,575,2.218,576,2.394,577,2.394,578,2.165,579,2.273,580,2.394,581,2.273,582,2.394,583,2.273,584,2.394,585,2.218,586,2.218,587,2.273,588,2.394,589,2.273,590,2.394,591,1.787,592,2.273,593,2.218,594,2.273,595,2.218,596,2.218,597,2.218,598,1.938,599,2.218,600,2.394,601,2.115,602,2.394,603,2.273,604,2.394,605,2.068,606,2.218,607,2.394,608,2.218,609,2.394,610,2.273,611,2.394,612,2.394]],["title/components/MockTourStepComponent.html",[109,0.811,520,2.358]],["body/components/MockTourStepComponent.html",[3,0.044,4,0.04,5,0.044,10,0.184,11,0.178,12,0.481,16,0.234,17,0.006,19,0.17,27,0.044,28,1.803,32,1.155,47,1.674,49,0.822,55,1.614,72,3.066,88,0.003,89,0.003,90,0.731,106,1.065,109,1.441,137,0.895,152,0.784,171,1.38,179,1.013,180,1.475,182,1.776,183,1.052,184,1.688,187,1.173,194,2.021,196,1.231,203,2.144,205,0.333,245,0.981,271,1.97,292,0.558,293,1.774,294,0.904,298,3.017,300,1.786,304,1.745,305,3.008,308,1.136,315,2.621,317,1.251,319,2.101,320,2.036,357,3.952,361,1.774,367,3.008,369,1.449,478,1.82,479,2.144,480,1.394,481,1.422,482,3.289,484,3.868,485,3.71,488,3.952,499,2.675,507,3.844,509,1.224,511,5.856,512,2.651,514,1.82,515,2.689,516,1.96,517,3.626,518,1.869,519,1.869,520,3.531,521,4.197,522,1.869,523,1.82,524,2.876,525,1.869,526,1.82,527,1.869,528,2.76,529,1.869,530,2.689,531,1.869,532,1.82,533,1.774,534,1.82,535,3.063,536,1.869,537,3.626,538,1.82,539,1.774,540,1.82,541,1.731,542,1.869,543,1.774,544,1.774,545,1.869,546,1.69,547,1.869,548,1.82,549,1.869,550,1.82,551,2.76,552,1.82,553,1.82,554,1.869,555,1.82,556,1.869,557,1.82,558,1.774,559,1.869,560,1.869,561,1.869,562,1.651,563,1.269,564,1.731,565,1.731,566,1.869,567,1.774,568,1.869,569,1.869,570,1.869,571,1.731,572,1.774,573,1.869,574,1.651,575,1.731,576,1.869,577,1.869,578,1.69,579,1.774,580,1.869,581,1.774,582,1.869,583,1.774,584,1.869,585,1.731,586,1.731,587,1.774,588,1.869,589,1.774,590,1.869,591,1.394,592,1.774,593,1.731,594,1.774,595,1.731,596,1.731,597,1.731,598,1.512,599,1.731,600,1.869,601,1.651,602,1.869,603,1.774,604,1.869,605,4.292,606,1.731,607,1.869,608,1.731,609,1.869,610,1.774,611,1.869,612,1.869,613,3.686,614,6.381,615,6.381,616,4.938,617,4.858,618,3.197,619,4.858,620,5.191,621,4.858,622,4.858,623,3.815,624,4.7,625,4.974,626,4.182,627,4.974,628,5.363,629,5.446,630,4.858,631,3.104,632,4.858,633,5.446,634,5.446,635,5.446,636,5.446,637,3.008,638,5.446,639,2.689,640,5.446,641,5.446,642,5.446,643,2.144,644,4.182,645,3.686,646,3.686,647,2.831,648,3.686,649,1.976,650,2.545,651,3.289,652,1.92,653,3.686,654,3.027,655,3.289,656,3.686,657,3.289,658,2.675,659,2.433,660,3.686,661,1.731,662,1.976,663,3.686]],["title/directives/NgxAbstractTableCellDirective.html",[292,0.723,562,2.139]],["body/directives/NgxAbstractTableCellDirective.html",[3,0.049,4,0.044,5,0.049,10,0.115,11,0.191,12,0.605,16,0.278,17,0.006,19,0.214,27,0.049,32,1.25,34,1.173,38,3.294,47,1.387,48,3.813,49,1.669,54,2.391,72,1.631,81,2.826,88,0.004,89,0.004,90,0.605,96,0.625,106,1.688,137,1.499,152,0.841,179,1.116,180,1.152,182,1.905,183,1.128,184,1.729,187,1.152,193,0.964,196,1.301,205,0.366,231,2.945,234,2.477,237,3.137,292,0.884,294,0.996,298,1.746,300,1.724,304,1.871,306,3.565,308,1.321,311,2.399,317,1.596,319,3.9,320,3.78,333,3.669,341,1.807,345,3.441,346,4.239,349,2.313,379,1.4,512,2.272,524,1.839,535,3.646,562,2.616,563,2.01,649,3.131,652,2.114,664,4.058,665,5.558,666,4.966,667,4.966,668,6.186,669,5.756,670,5.317,671,4.966,672,4.725,673,5.236,674,6.688,675,5.756,676,5.75,677,5.75,678,4.486,679,5.841,680,4.966,681,5.841,682,3.78,683,4.337,684,4.725,685,5.256,686,5.256,687,5.256,688,5.256,689,3.137,690,5.841,691,2.027,692,5.841,693,4.058,694,3.702,695,5.395,696,4.058,697,4.486,698,4.13,699,3.441,700,4.486,701,5.236,702,4.058,703,2.961,704,2.694,705,4.058,706,4.315,707,4.058,708,4.058,709,4.239,710,4.058,711,4.058,712,4.058,713,1.776,714,3.621,715,3.621,716,2.945,717,2.945,718,1.347,719,5.841,720,6.106,721,2.572,722,4.058,723,4.058,724,7.933,725,4.058,726,4.058,727,4.058,728,4.058]],["title/directives/NgxAccessibleAbstractDragAndDropItemDirective.html",[292,0.723,564,2.242]],["body/directives/NgxAccessibleAbstractDragAndDropItemDirective.html",[3,0.064,4,0.057,5,0.064,10,0.151,11,0.23,12,0.773,15,2.097,16,0.275,17,0.006,19,0.22,27,0.064,29,0.861,32,1.067,81,1.768,88,0.004,89,0.004,90,0.698,96,1.085,122,2.67,137,1.159,171,1.786,180,0.82,183,1.362,184,1.684,187,1.166,193,1.265,196,1.743,205,0.481,239,6.289,271,2.144,292,1.067,294,1.307,300,1.319,305,3.893,308,1.049,315,3.393,317,1.819,325,3.865,330,4.01,367,3.893,379,0.996,385,5.788,476,2.954,501,1.539,516,1.729,563,3.242,564,3.31,586,4.557,628,5.253,659,5.216,691,1.307,713,1.62,729,6.487,730,6.068,731,6.068,732,4.752,733,5.788,734,7.049,735,7.049,736,7.049,737,7.901,738,3.855,739,6.522,740,7.502,741,5.115,742,7.049,743,7.049,744,6.068,745,5.733,746,5.115,747,7.049,748,6.459,749,7.049,750,5.326,751,2.742,752,5.806,753,4.302,754,5.326,755,3.865,756,5.326,757,5.326,758,5.326,759,3.865,760,3.865,761,5.326,762,5.414,763,7.049,764,5.326,765,5.326,766,5.326]],["title/classes/NgxAccessibleDragAndDropAbstractService.html",[90,0.422,767,3.921]],["body/classes/NgxAccessibleDragAndDropAbstractService.html",[3,0.045,4,0.04,5,0.045,10,0.105,11,0.179,12,0.634,16,0.288,17,0.006,19,0.258,26,1.881,27,0.045,28,1.163,32,0.562,34,1.879,41,2.509,42,2.212,44,1.872,48,2.451,49,2.039,68,1.817,73,2.07,88,0.003,89,0.003,90,0.328,92,2.352,96,1.464,99,3.224,106,2.314,137,1.258,152,1.303,162,2.396,174,1.609,177,3.224,180,0.842,183,1.057,184,1.498,187,0.967,193,1.3,196,1.522,205,0.335,238,1.662,249,4.955,268,2.55,271,2.435,272,0.896,300,1.216,308,1.139,311,1.301,334,3.073,345,3.224,350,2.451,369,1.909,377,3.468,379,1.432,426,3.847,453,4.292,467,4.67,479,2.155,501,1.073,516,1.878,563,2.47,639,3.953,661,1.743,703,2.774,713,2.182,718,1.232,729,6.8,730,6.36,731,6.955,751,2.12,753,2.265,767,6.284,768,3.711,769,2.769,770,4.548,771,7.435,772,3.847,773,5.473,774,5.473,775,6.502,776,6.502,777,5.473,778,5.473,779,4.994,780,6.502,781,2.541,782,3.711,783,5.512,784,3.778,785,2.851,786,6.502,787,5.473,788,3.711,789,3.508,790,6.827,791,5.473,792,3.053,793,3.711,794,4.203,795,5.473,796,4.203,797,2.265,798,4.494,799,5.473,800,5.208,801,3.711,802,4.263,803,2.85,804,3.711,805,5.473,806,5.528,807,3.711,808,3.711,809,3.711,810,2.45,811,3.706,812,3.387,813,1.701,814,2.45,815,4.121,816,5.473,817,2.693,818,3.711,819,3.129,820,3.129,821,6.827,822,3.83,823,4.292,824,3.023,825,5.473,826,2.85,827,3.047,828,3.711,829,5.467,830,3.711,831,2.265,832,3.711,833,2.85,834,2.85,835,3.711,836,6.502,837,6.502,838,6.502,839,2.693,840,3.711,841,5.473,842,5.473,843,3.711,844,5.473,845,2.693,846,3.711,847,3.711,848,3.711,849,3.711,850,3.711,851,3.711,852,3.073,853,3.711,854,2.265,855,3.711,856,3.711,857,2.693,858,3.711,859,3.711,860,1.989,861,3.047,862,3.711,863,3.711]],["title/interfaces/NgxAccessibleDragAndDropBaseMessage.html",[0,0.122,864,3.466]],["body/interfaces/NgxAccessibleDragAndDropBaseMessage.html",[0,0.226,2,1.092,3,0.082,4,0.073,5,0.082,10,0.192,11,0.268,16,0.321,17,0.006,18,6.403,27,0.111,28,1.95,88,0.005,89,0.005,96,1.04,152,1.27,190,3.471,273,3.152,751,2.203,753,4.122,800,4.902,817,4.902,833,5.188,834,5.188,839,5.948,845,5.948,854,4.122,864,6.658,865,5.188,866,5.188,867,6.777,868,5.546,869,5.546,870,5.546,871,5.546,872,5.546,873,5.546,874,7.245,875,5.188,876,5.188,877,5.546,878,5.546,879,5.546,880,5.546]],["title/directives/NgxAccessibleDragAndDropContainerDirective.html",[292,0.723,565,2.242]],["body/directives/NgxAccessibleDragAndDropContainerDirective.html",[3,0.076,4,0.068,5,0.076,10,0.267,11,0.257,12,0.696,17,0.006,19,0.197,27,0.076,32,1.191,47,1.595,57,3.447,88,0.005,89,0.005,90,0.559,96,0.973,106,2.275,179,1.739,182,2.567,184,1.623,187,0.951,205,0.571,292,1.423,294,1.552,298,2.354,300,1.76,308,1.172,311,2.76,341,1.957,565,3.696,652,4.101,730,6.583,731,7.325,771,7.364,772,4.22,783,6.046,854,4.804,881,7.646,882,6.326,883,7.023,884,7.023,885,6.464,886,7.023,887,8.969,888,7.023,889,4.676,890,7.364,891,7.872,892,6.326,893,6.464,894,7.872,895,6.326]],["title/directives/NgxAccessibleDragAndDropHostDirective.html",[292,0.723,567,2.298]],["body/directives/NgxAccessibleDragAndDropHostDirective.html",[3,0.055,4,0.049,5,0.055,10,0.255,11,0.207,12,0.732,16,0.257,17,0.006,19,0.227,27,0.055,32,1.254,34,1.831,44,1.064,47,1.597,49,1.015,50,5.055,57,2.774,75,4.183,88,0.004,89,0.004,90,0.402,96,1.403,135,1.756,152,1.049,179,1.251,180,1.122,182,2.066,183,1.224,184,1.695,187,1.101,190,2.757,193,1.731,196,1.63,205,0.411,206,1.927,245,1.211,271,2.396,292,1.298,294,1.117,298,1.894,300,1.76,308,1.233,317,1.657,334,2.713,341,1.408,369,1.939,379,1.185,408,3.89,501,1.316,513,2.191,564,3.7,565,3.422,567,3.049,623,4.642,682,2.514,704,2.494,730,7.089,731,7.61,738,3.612,740,5.652,751,2.797,767,3.737,771,7.878,772,3.396,781,1.894,854,4.809,881,8.234,883,5.652,884,5.652,885,5.202,886,5.652,888,5.652,890,5.202,893,5.202,896,4.551,897,4.447,898,7.88,899,8.284,900,7.288,901,6.335,902,6.335,903,6.335,904,4.551,905,6.335,906,4.551,907,3.866,908,3.212,909,4.551,910,6.335,911,4.551,912,6.335,913,6.335,914,4.551,915,6.335,916,4.551,917,6.335,918,5.202,919,6.335,920,4.551,921,5.202,922,4.551,923,4.551,924,4.061,925,4.551,926,4.551,927,4.551,928,4.551,929,4.551,930,4.551,931,4.551,932,4.551]],["title/interfaces/NgxAccessibleDragAndDropMessageRecord.html",[0,0.122,817,3.466]],["body/interfaces/NgxAccessibleDragAndDropMessageRecord.html",[0,0.218,2,1.008,3,0.075,4,0.067,5,0.075,10,0.177,11,0.255,16,0.328,17,0.006,18,4.525,27,0.108,28,1.325,88,0.005,89,0.005,96,1.373,144,4.883,152,1.395,190,3.376,273,2.227,509,3.111,751,2.91,753,5.445,800,4.525,817,5.662,833,6.853,834,6.853,839,6.667,845,6.667,854,5.445,864,6.179,865,4.789,866,4.789,867,7.303,868,5.12,869,5.12,870,5.12,871,5.12,872,5.12,873,5.12,874,6.992,875,4.789,876,4.789,877,5.12,878,5.12,879,5.12,880,5.12]],["title/interfaces/NgxAccessibleDragAndDropMoveEvent.html",[0,0.122,876,3.668]],["body/interfaces/NgxAccessibleDragAndDropMoveEvent.html",[0,0.223,2,1.069,3,0.08,4,0.071,5,0.08,10,0.188,11,0.264,16,0.317,17,0.006,18,4.798,27,0.11,28,1.405,88,0.005,89,0.005,96,1.018,152,1.258,190,3.761,273,2.362,751,2.156,753,4.035,800,4.798,817,4.798,833,5.078,834,5.078,839,5.871,845,5.871,854,4.035,864,6.344,865,5.078,866,5.078,867,6.714,868,5.429,869,5.429,870,5.429,871,5.429,872,5.429,873,5.429,874,7.178,875,5.078,876,6.214,877,7.479,878,7.479,879,7.479,880,7.479]],["title/components/NgxAccordionComponent.html",[109,0.811,523,2.358]],["body/components/NgxAccordionComponent.html",[3,0.039,4,0.035,5,0.039,10,0.242,11,0.162,12,0.531,16,0.267,17,0.006,19,0.21,27,0.039,28,1.054,32,0.91,34,1.943,42,1.943,44,1.16,49,1.822,50,5.212,57,2.172,61,2.08,66,2.222,74,1.282,75,4.438,88,0.003,89,0.003,90,0.439,96,1.034,109,1.021,152,0.865,179,0.895,180,1.469,183,0.958,184,1.603,187,1.032,193,1.428,196,1.278,203,1.282,205,0.294,206,1.509,236,2.501,271,2.411,272,0.786,292,0.493,293,1.567,294,0.799,298,2.997,304,1.59,308,0.895,311,2.357,317,1.531,330,2.275,334,2.125,341,1.535,361,1.567,366,2.632,368,3.235,369,2.028,373,2.943,392,1.739,408,2.45,412,3.371,426,1.745,476,1.364,478,1.608,479,1.953,480,1.232,481,1.256,484,2.515,485,2.035,507,3.669,509,1.647,514,1.608,515,2.45,516,1.217,517,3.408,518,1.65,519,1.65,520,1.608,521,1.426,522,1.65,523,3.319,524,2.835,525,1.65,526,4.217,527,4.802,528,2.515,529,1.65,530,2.45,531,1.65,532,1.608,533,1.567,534,1.608,535,2.879,536,1.65,537,3.408,538,1.608,539,1.567,540,1.608,541,1.529,542,1.65,543,1.567,544,1.567,545,1.65,546,1.493,547,1.65,548,1.608,549,1.65,550,1.608,551,2.515,552,1.608,553,1.608,554,1.65,555,1.608,556,1.65,557,1.608,558,1.567,559,1.65,560,1.65,561,1.65,562,1.458,563,1.121,564,1.529,565,1.529,566,1.65,567,1.567,568,1.65,569,1.65,570,1.65,571,1.529,572,1.567,573,1.65,574,1.458,575,1.529,576,1.65,577,1.65,578,1.493,579,1.567,580,1.65,581,1.567,582,1.65,583,1.567,584,1.65,585,1.529,586,1.529,587,1.567,588,1.65,589,1.567,590,1.65,591,1.232,592,1.567,593,1.529,594,1.567,595,1.529,596,1.529,597,1.529,598,1.336,599,1.529,600,1.65,601,1.458,602,1.65,603,1.567,604,1.65,605,1.426,606,1.529,607,1.65,608,1.529,609,1.65,610,1.567,611,1.65,612,1.65,698,3.578,713,1.509,718,1.081,751,3.008,790,2.905,812,1.696,813,2.275,819,1.567,820,1.567,827,2.674,854,4.102,933,3.256,934,4.074,935,3.6,936,2.74,937,3.811,938,4.426,939,3.276,940,3.811,941,5.363,942,6.011,943,5.759,944,4.962,945,4.962,946,3.276,947,2.415,948,6.011,949,3.604,950,4.962,951,3.968,952,5.52,953,4.671,954,5.251,955,3.256,956,3.811,957,5.363,958,3.256,959,4.962,960,3.256,961,2.923,962,4.962,963,3.256,964,3.811,965,3.256,966,4.102,967,3.256,968,4.074,969,3.256,970,2.501,971,3.144,972,2.905,973,3.256,974,3.256,975,1.696,976,3.256,977,3.256,978,4.074,979,2.501,980,2.501,981,3.256,982,3.256,983,3.256,984,3.256,985,3.256,986,3.256,987,3.256,988,3.256,989,3.256,990,3.256,991,4.426,992,1.185,993,3.256,994,3.256,995,3.256,996,2.515,997,2.248,998,3.6,999,4.962,1000,3.256,1001,3.256,1002,1.856,1003,3.256,1004,2.905,1005,3.256,1006,3.256]],["title/components/NgxAccordionItemComponent.html",[109,0.811,526,2.358]],["body/components/NgxAccordionItemComponent.html",[3,0.03,4,0.027,5,0.03,7,3.199,10,0.07,11,0.131,12,0.561,15,0.974,16,0.263,17,0.006,19,0.18,27,0.03,28,0.849,29,1.097,32,1.244,34,1.155,36,1.512,39,2.55,42,0.715,44,1.176,49,1.592,81,1.327,88,0.002,89,0.002,90,0.353,96,0.774,109,0.854,122,2.512,137,0.95,152,0.575,162,1.083,179,0.68,180,1.427,183,0.772,184,1.662,187,1.125,193,1.507,196,1.533,205,0.223,206,1.216,231,1.795,271,1.929,292,0.374,293,1.19,294,0.607,298,2.946,300,1.742,301,5.567,304,1.281,305,2.208,306,1.509,308,1.261,310,2.901,311,3.125,315,2.781,317,1.693,330,4.233,334,1.712,340,1.457,341,0.765,345,2.355,346,1.795,354,2.206,361,1.19,366,2.203,368,1.924,369,2.283,373,2.53,379,0.748,392,2.606,402,3.321,426,1.326,449,2.901,453,4.908,476,1.675,478,1.221,479,1.574,480,0.936,481,0.954,484,2.026,485,1.64,501,0.715,507,3.266,509,2.106,512,1.327,514,1.221,515,2.853,516,1.665,517,2.929,518,1.254,519,1.254,520,1.221,521,1.083,522,1.254,523,2.853,524,2.668,525,1.254,526,2.853,527,4.86,528,2.026,529,1.254,530,1.974,531,1.254,532,1.221,533,1.19,534,1.221,535,2.474,536,1.254,537,2.929,538,1.221,539,1.19,540,1.221,541,1.161,542,1.254,543,1.19,544,1.19,545,1.254,546,1.134,547,1.254,548,1.221,549,1.254,550,1.221,551,2.026,552,1.221,553,1.221,554,1.254,555,1.221,556,1.254,557,1.221,558,1.19,559,1.254,560,1.254,561,1.254,562,1.108,563,0.851,564,1.161,565,1.161,566,1.254,567,1.19,568,1.254,569,1.254,570,1.254,571,1.161,572,1.19,573,1.254,574,1.108,575,1.161,576,1.254,577,1.254,578,1.134,579,1.19,580,1.254,581,1.19,582,1.254,583,1.19,584,1.254,585,1.161,586,1.161,587,1.19,588,1.254,589,1.19,590,1.254,591,0.936,592,1.19,593,1.161,594,1.19,595,1.161,596,1.161,597,1.161,598,1.015,599,1.161,600,1.254,601,1.108,602,1.254,603,1.19,604,1.254,605,1.083,606,1.161,607,1.254,608,1.161,609,1.254,610,1.19,611,1.254,612,1.254,623,3.404,624,4.193,658,4.603,659,1.633,672,3.473,691,1.884,703,1.254,706,1.254,713,2.261,738,1.134,739,4.603,741,2.901,745,2.901,751,3.156,752,2.76,755,2.901,814,1.633,815,3.662,819,1.19,820,1.19,897,3.07,934,3.282,935,2.901,936,2.208,937,3.07,938,3.566,939,2.639,940,3.07,943,4.02,951,1.633,952,2.031,953,3.404,954,4.193,956,6.312,961,2.355,970,1.899,1007,9.347,1008,2.206,1009,3.864,1010,2.278,1011,4.488,1012,3.566,1013,3.566,1014,3.997,1015,2.964,1016,5.031,1017,5.778,1018,5.155,1019,4.488,1020,5.031,1021,3.997,1022,3.997,1023,4.193,1024,5.778,1025,3.997,1026,3.566,1027,3.566,1028,4.488,1029,4.488,1030,3.997,1031,2.473,1032,3.997,1033,2.473,1034,3.997,1035,2.484,1036,3.997,1037,3.997,1038,3.997,1039,3.566,1040,3.997,1041,3.566,1042,3.566,1043,2.473,1044,5.778,1045,2.473,1046,4.488,1047,3.566,1048,2.473,1049,2.964,1050,5.208,1051,2.473,1052,2.473,1053,3.997,1054,2.473,1055,3.997,1056,2.473,1057,3.997,1058,3.566,1059,2.964,1060,2.355,1061,2.473,1062,3.997,1063,2.473,1064,3.997,1065,2.473,1066,5.155,1067,2.473,1068,3.997,1069,2.473,1070,2.083,1071,2.473,1072,2.473,1073,3.997,1074,2.473,1075,4.488,1076,3.566,1077,2.473,1078,3.997,1079,2.473,1080,1.366,1081,1.707,1082,1.795,1083,2.473,1084,5.155,1085,5.031,1086,5.031,1087,5.778,1088,2.473,1089,2.473,1090,2.031,1091,1.366,1092,1.567,1093,2.473,1094,2.473,1095,2.473,1096,2.206,1097,2.473,1098,2.473,1099,1.509,1100,1.707,1101,1.326,1102,3.997,1103,2.206,1104,2.473,1105,2.473,1106,2.473,1107,1.633,1108,1.899]],["title/pipes/NgxAriaSortPipe.html",[174,1.404,1109,3.921]],["body/pipes/NgxAriaSortPipe.html",[3,0.081,4,0.072,5,0.081,12,0.595,16,0.288,17,0.006,19,0.275,27,0.081,32,1.238,42,1.946,44,1.913,47,1.658,88,0.005,89,0.005,90,0.595,144,4.262,174,2.405,176,3.414,179,1.851,180,1.356,182,2.668,183,1.301,185,3.61,186,5.401,187,0.813,193,1.6,196,1.28,204,4.386,205,0.608,206,2.048,479,2.651,562,3.664,665,5.191,717,5.937,718,2.235,1109,6.717,1110,8.181,1111,8.181,1112,6.734,1113,8.181,1114,6.734,1115,5.378,1116,7.862,1117,7.862,1118,6.008,1119,6.734,1120,6.734]],["title/injectables/NgxAuthenticatedHttpClient.html",[259,1.478,1121,3.668]],["body/injectables/NgxAuthenticatedHttpClient.html",[3,0.034,4,0.03,5,0.034,10,0.079,11,0.144,12,0.847,16,0.281,17,0.006,19,0.224,22,6.379,23,2.293,27,0.034,29,1.463,32,1.134,34,2.744,40,7.1,42,0.807,44,1.816,47,1.896,49,0.623,54,1.646,88,0.003,89,0.003,90,0.247,96,1.195,101,3.329,118,1.646,137,1.395,152,1.357,161,4.449,174,0.821,180,1.154,183,0.851,184,1.562,187,0.989,193,2.017,194,3.357,196,1.425,205,0.252,259,1.363,261,1.251,268,2.531,272,0.674,273,2.407,300,1.021,308,1.356,324,3.275,369,2.127,379,1.588,501,0.807,691,2.083,718,0.927,770,2.792,794,3.383,797,5.255,811,1.592,947,2.192,1121,3.383,1122,8.348,1123,7.611,1124,8.348,1125,2.793,1126,4.405,1127,2.295,1128,5.196,1129,2.362,1130,3.617,1131,4.405,1132,5.756,1133,4.405,1134,3.93,1135,4.479,1136,5.455,1137,4.405,1138,5.534,1139,6.012,1140,4.891,1141,4.405,1142,2.793,1143,9.55,1144,9.55,1145,9.576,1146,2.793,1147,8.488,1148,6.145,1149,7.439,1150,6.699,1151,8.071,1152,6.519,1153,6.519,1154,2.793,1155,2.793,1156,4.405,1157,4.405,1158,2.793,1159,2.793,1160,4.405,1161,2.793,1162,2.793,1163,7.571,1164,2.793,1165,2.793,1166,2.793,1167,2.793,1168,2.793,1169,3.93,1170,2.793,1171,4.405,1172,2.793,1173,1.379,1174,2.145,1175,1.543,1176,1.017,1177,5.455,1178,2.793,1179,2.793,1180,2.793,1181,7.161,1182,2.793,1183,7.161,1184,5.455,1185,2.793,1186,2.793,1187,5.455,1188,2.793,1189,2.492,1190,2.293,1191,2.793,1192,2.793,1193,2.793,1194,2.793,1195,2.793,1196,2.793,1197,5.455,1198,2.793,1199,2.793]],["title/interfaces/NgxAuthenticatedHttpClientConfiguration.html",[0,0.122,1174,3.668]],["body/interfaces/NgxAuthenticatedHttpClientConfiguration.html",[0,0.198,2,0.998,3,0.075,4,0.066,5,0.075,10,0.175,11,0.253,12,0.867,15,3.68,16,0.299,17,0.006,19,0.265,27,0.094,37,2.621,88,0.005,89,0.005,101,4.732,106,2.45,118,3.637,137,1.015,148,4.732,152,0.888,205,0.557,245,1.643,255,2.533,338,4.732,379,1.586,408,3.828,431,4.04,769,2.382,936,3.41,1121,7.035,1128,5.627,1132,5.119,1135,7.301,1148,6.324,1149,5.955,1150,5.353,1153,6.829,1174,6.51,1200,5.07,1201,5.508,1202,7.932,1203,8.34,1204,4.283,1205,4.157,1206,4.568,1207,7.932,1208,6.96,1209,4.568,1210,4.48,1211,5.508,1212,5.07,1213,4.263,1214,5.508]],["title/interfaces/NgxAuthenticatedRoute.html",[0,0.122,1215,3.921]],["body/interfaces/NgxAuthenticatedRoute.html",[0,0.221,2,1.039,3,0.078,4,0.069,5,0.078,7,2.879,10,0.182,11,0.282,12,0.703,16,0.294,17,0.006,19,0.201,27,0.096,28,1.917,29,1.396,47,1.611,76,2.432,88,0.005,89,0.005,96,0.989,106,2.298,144,4.142,152,1.144,171,2.015,173,4.664,308,1.183,324,2.48,358,4.243,379,1.487,691,2.118,1132,4.243,1209,4.684,1215,7.088,1216,5.734,1217,5.734,1218,7.951,1219,3.827,1220,6.528,1221,5.699,1222,4.243,1223,6.528,1224,7.951,1225,4.664,1226,6.528,1227,5.278,1228,6.528,1229,7.951,1230,4.664,1231,6.528,1232,5.278,1233,6.428,1234,5.734,1235,6.428,1236,7.093,1237,5.734,1238,3.787,1239,5.734,1240,5.734,1241,4.664,1242,5.734]],["title/classes/NgxAuthenticationAbstractService.html",[90,0.422,1209,2.814]],["body/classes/NgxAuthenticationAbstractService.html",[3,0.032,4,0.028,5,0.032,10,0.074,11,0.137,12,0.738,16,0.289,17,0.006,19,0.163,27,0.032,28,1.742,29,1.126,32,1.106,34,2.32,42,1.209,44,2.054,47,1.538,49,1.86,55,3.323,61,2.348,64,2.978,72,3.591,88,0.003,89,0.003,90,0.231,92,1.658,96,1.204,99,2.464,106,1.725,137,0.981,179,2.009,180,1.168,183,1.009,184,1.6,187,1.08,193,1.803,195,1.899,196,1.734,203,1.647,233,2.31,268,2.758,272,0.632,274,3.607,294,1.026,300,1.626,308,1.22,317,1.344,324,3.748,367,4.609,369,2.22,379,0.782,392,2.926,408,2.065,412,2.633,432,4.632,476,1.096,479,1.647,502,4.077,509,1.981,563,2.694,691,2.155,703,2.12,718,0.868,769,1.614,770,1.658,797,2.552,810,1.727,811,3.967,813,1.917,826,4.584,936,2.31,964,3.212,992,0.952,1046,3.731,1058,5.325,1132,5.852,1152,5.345,1153,3.212,1189,7.974,1190,2.148,1209,2.464,1210,6.486,1223,7.339,1227,5.359,1228,6.426,1232,5.359,1237,3.731,1243,2.616,1244,2.242,1245,4.182,1246,5.225,1247,5.225,1248,5.225,1249,5.225,1250,5.325,1251,5.969,1252,6.527,1253,4.901,1254,4.901,1255,5.225,1256,4.182,1257,5.225,1258,4.182,1259,5.225,1260,4.182,1261,5.444,1262,3.434,1263,2.616,1264,4.182,1265,2.616,1266,3.731,1267,2.616,1268,3.11,1269,2.013,1270,3.731,1271,5.969,1272,5.829,1273,5.969,1274,4.584,1275,3.212,1276,2.616,1277,3.731,1278,5.325,1279,2.616,1280,2.616,1281,2.616,1282,3.434,1283,2.616,1284,6.518,1285,2.616,1286,5.225,1287,2.616,1288,2.616,1289,5.225,1290,2.616,1291,2.616,1292,2.978,1293,3.434,1294,4.182,1295,7.59,1296,2.616,1297,5.969,1298,5.969,1299,6.527,1300,8.783,1301,2.616,1302,2.616,1303,4.182,1304,8.475,1305,2.616,1306,4.079,1307,5.225,1308,2.616,1309,2.616,1310,4.182,1311,7.307,1312,2.616,1313,2.616,1314,2.616,1315,2.616,1316,2.616,1317,2.616,1318,4.182,1319,2.334,1320,1.806,1321,2.009,1322,2.334,1323,4.182,1324,2.616,1325,2.616,1326,2.616,1327,5.225,1328,2.616,1329,2.616,1330,2.616,1331,4.182,1332,2.616,1333,2.616,1334,2.616,1335,2.616,1336,2.616,1337,4.182,1338,2.616,1339,2.616,1340,2.616,1341,2.334,1342,1.899,1343,2.148,1344,1.899,1345,2.616,1346,4.182,1347,2.616,1348,2.616,1349,2.616,1350,2.616,1351,2.616,1352,2.616,1353,2.616,1354,4.182,1355,2.616,1356,2.616,1357,2.616,1358,1.806,1359,2.148,1360,2.616]],["title/interfaces/NgxAuthenticationConfiguration.html",[0,0.122,1212,3.921]],["body/interfaces/NgxAuthenticationConfiguration.html",[0,0.202,2,1.029,3,0.077,4,0.068,5,0.077,10,0.181,11,0.258,12,0.833,15,2.505,16,0.308,17,0.006,19,0.268,27,0.095,37,3.037,88,0.005,89,0.005,96,0.979,101,3.883,106,2.484,118,3.748,137,1.299,148,3.883,152,0.916,205,0.574,245,1.693,255,3.241,338,3.883,379,1.608,408,3.141,431,3.315,769,3.468,936,4.364,1121,6.902,1128,4.617,1132,4.2,1135,5.224,1148,5.933,1149,4.887,1150,4.393,1153,6.068,1174,6.902,1200,5.224,1201,5.676,1202,5.676,1203,7.048,1204,3.514,1205,3.411,1206,3.748,1207,7.048,1208,7.056,1209,5.063,1210,5.733,1211,7.048,1212,6.487,1213,5.455,1214,8.018]],["title/injectables/NgxBroadcastChannelService.html",[259,1.478,1361,4.261]],["body/injectables/NgxBroadcastChannelService.html",[3,0.046,4,0.041,5,0.046,10,0.108,11,0.182,12,0.684,16,0.285,17,0.006,19,0.206,27,0.046,32,0.845,34,2.337,41,2.56,42,1.102,44,1.953,49,0.85,61,2.044,64,3.765,86,2.768,88,0.003,89,0.003,90,0.337,96,1.244,98,3.084,102,2.831,138,3.29,152,1.31,161,2.518,180,1.455,183,1.079,184,1.612,187,1.009,193,2.035,196,1.588,205,0.344,209,4.284,246,4.982,259,1.728,261,1.708,268,2.746,272,0.921,300,1.236,308,0.831,310,4.052,311,3.003,317,1.562,335,2.445,350,3.978,369,2.151,454,6.487,501,1.102,704,2.198,753,5.494,769,2.155,781,2.174,783,5.074,785,2.909,802,4.251,822,4.284,936,3.084,947,2.244,1129,3.898,1139,3.403,1149,4.289,1151,4.982,1175,2.107,1176,1.388,1204,2.107,1244,2.045,1277,6.487,1361,4.982,1362,8.566,1363,8.566,1364,3.814,1365,5.584,1366,9.505,1367,7.874,1368,4.982,1369,5.584,1370,3.892,1371,8.086,1372,8.086,1373,8.086,1374,8.353,1375,8.353,1376,5.584,1377,3.814,1378,4.982,1379,5.42,1380,9.106,1381,8.882,1382,5.584,1383,6.606,1384,3.814,1385,4.982,1386,5.584,1387,8.086,1388,3.814,1389,5.584,1390,4.052,1391,3.814,1392,3.814,1393,7.739,1394,5.584,1395,7.272,1396,3.814,1397,3.814,1398,5.584,1399,3.814,1400,4.982,1401,5.584,1402,3.408,1403,3.814,1404,2.107,1405,1.987,1406,4.982,1407,3.814,1408,1.749,1409,2.93,1410,6.487,1411,3.814,1412,8.566,1413,3.814,1414,7.272,1415,3.814,1416,3.814,1417,5.074,1418,2.93,1419,3.814,1420,5.584,1421,3.814]],["title/components/NgxConfigurableLayoutItemComponent.html",[109,0.811,532,2.358]],["body/components/NgxConfigurableLayoutItemComponent.html",[3,0.052,4,0.047,5,0.052,10,0.123,11,0.2,12,0.628,17,0.006,19,0.135,27,0.052,28,1.302,32,0.657,47,1.439,50,3.739,51,3.883,72,1.744,74,2.412,76,3.457,84,5.466,88,0.004,89,0.004,90,0.384,96,0.668,97,3.623,106,2.053,109,1.474,179,1.193,180,1.503,182,1.998,184,1.556,187,0.983,205,0.392,292,0.657,293,2.089,294,1.065,298,3.039,300,1.687,304,1.963,308,0.646,341,2.388,361,2.089,379,1.58,383,4.23,449,4.446,478,2.142,479,2.412,480,1.642,481,1.674,484,3.106,485,2.514,507,4.065,509,2.804,514,2.142,515,3.025,516,1.503,517,3.912,518,2.2,519,2.2,520,2.142,521,1.9,522,2.2,523,2.142,524,2.961,525,2.2,526,2.142,527,2.2,528,3.106,529,2.2,530,4.17,531,2.2,532,3.81,533,4.767,534,2.142,535,3.304,536,2.2,537,3.912,538,2.142,539,2.089,540,2.142,541,2.038,542,2.2,543,2.089,544,2.089,545,2.2,546,1.989,547,2.2,548,2.142,549,2.2,550,2.142,551,3.106,552,2.142,553,2.142,554,2.2,555,2.142,556,2.2,557,2.142,558,2.089,559,2.2,560,2.2,561,2.2,562,1.944,563,1.494,564,2.038,565,2.038,566,2.2,567,2.089,568,2.2,569,2.2,570,2.2,571,2.038,572,2.089,573,2.2,574,1.944,575,2.038,576,2.2,577,2.2,578,1.989,579,2.089,580,2.2,581,2.089,582,2.2,583,2.089,584,2.2,585,2.038,586,2.038,587,2.089,588,2.2,589,2.089,590,2.2,591,1.642,592,2.089,593,2.038,594,2.089,595,2.038,596,2.038,597,2.038,598,1.78,599,2.038,600,2.2,601,1.944,602,2.2,603,2.089,604,2.2,605,1.9,606,2.038,607,2.2,608,2.038,609,2.2,610,2.089,611,2.2,612,2.2,652,2.261,706,2.2,751,2.98,762,5.455,854,4.709,889,4.495,1008,3.872,1012,5.466,1081,2.996,1422,8.447,1423,8.447,1424,6.127,1425,3.623,1426,4.706,1427,4.706,1428,6.127,1429,6.127,1430,5.832,1431,7.103,1432,6.127,1433,4.34,1434,3.285]],["title/interfaces/NgxConfigurableLayoutItemDropEvent.html",[0,0.122,1435,3.921]],["body/interfaces/NgxConfigurableLayoutItemDropEvent.html",[0,0.209,2,1.087,3,0.081,4,0.072,5,0.081,10,0.191,11,0.267,16,0.318,17,0.006,27,0.113,29,1.518,76,2.544,88,0.005,89,0.005,152,0.968,190,3.331,301,4.642,512,2.232,516,2.247,670,4.103,695,5.581,1435,6.711,1436,5.521,1437,5.521,1438,8.173,1439,8.173,1440,7.522,1441,8.173,1442,7.522,1443,6.812,1444,7.856,1445,5.164,1446,5.164,1447,5.164,1448,5.164,1449,5.521,1450,4.261,1451,5.521]],["title/interfaces/NgxConfigurableLayoutItemEntity.html",[0,0.122,1443,3.466]],["body/interfaces/NgxConfigurableLayoutItemEntity.html",[0,0.212,2,1.115,3,0.083,4,0.074,5,0.083,10,0.196,11,0.271,12,0.734,16,0.313,17,0.006,27,0.114,29,1.57,76,3.495,88,0.005,89,0.005,152,1.281,190,2.608,301,6.378,512,2.288,516,1.691,670,4.207,695,4.368,1435,5.66,1436,5.66,1437,5.66,1438,6.149,1439,6.149,1440,5.66,1441,6.149,1442,6.813,1443,6.704,1444,6.149,1445,5.294,1446,5.294,1447,5.294,1448,5.294,1449,5.66,1450,4.368,1451,7.585]],["title/pipes/NgxConfigurableLayoutItemSizePipe.html",[174,1.404,1452,4.261]],["body/pipes/NgxConfigurableLayoutItemSizePipe.html",[3,0.067,4,0.078,5,0.067,12,0.492,16,0.264,17,0.006,19,0.227,27,0.067,28,1.184,29,0.901,32,0.843,34,2.334,42,1.61,44,2.128,47,1.798,48,3.251,49,1.8,50,4.928,51,5.873,55,3.178,74,2.193,88,0.004,89,0.004,90,0.492,96,0.857,106,2.334,109,1.233,144,3.782,174,2.134,176,2.823,179,1.531,180,1.243,182,2.367,183,1.076,185,3.891,187,0.673,193,1.323,196,1.535,203,2.193,204,3.891,205,0.503,206,1.694,218,4.573,237,2.553,308,1.08,379,1.042,474,4.969,509,2.41,512,2.84,524,2.285,530,3.584,533,4.118,631,4.137,691,1.366,704,2.193,718,1.849,781,2.17,829,3.677,951,3.677,1269,2.681,1427,4.278,1440,7.471,1443,5.268,1445,6.572,1446,5.575,1447,5.575,1448,5.575,1452,6.476,1453,7.259,1454,7.259,1455,5.57,1456,7.259,1457,5.57,1458,9.655,1459,5.57,1460,7.259,1461,7.471,1462,2.615,1463,4.573,1464,4.042,1465,7.259,1466,5.57,1467,7.634,1468,5.57,1469,4.969,1470,5.57,1471,3.399,1472,5.57,1473,5.57,1474,5.57,1475,5.57,1476,5.57,1477,5.57,1478,5.57,1479,5.57,1480,5.57]],["title/interfaces/NgxCookie.html",[0,0.122,1481,3.297]],["body/interfaces/NgxCookie.html",[0,0.231,2,0.948,3,0.071,4,0.063,5,0.071,10,0.166,11,0.245,12,0.865,16,0.306,17,0.006,19,0.183,27,0.111,29,1.536,76,2.217,88,0.005,89,0.005,152,1.44,171,1.485,180,1.342,190,3.411,308,0.872,781,1.752,1115,5.049,1176,2.133,1306,2.82,1408,2.687,1481,5.712,1482,4.046,1483,3.869,1484,6.33,1485,6.33,1486,5.759,1487,6.33,1488,6.33,1489,6.004,1490,6.004,1491,3.714,1492,5.444,1493,6.004,1494,4.875,1495,3.869,1496,3.714,1497,3.869,1498,3.869,1499,4.253,1500,3.869,1501,4.253,1502,3.453,1503,4.253,1504,4.253,1505,4.253,1506,3.869,1507,3.142,1508,5.444,1509,4.253,1510,4.253,1511,4.253,1512,4.253,1513,4.253,1514,4.253,1515,4.754,1516,4.952,1517,3.869,1518,4.253,1519,4.253]],["title/interfaces/NgxCookieChangedEvent.html",[0,0.122,1517,3.153]],["body/interfaces/NgxCookieChangedEvent.html",[0,0.235,2,1.01,3,0.075,4,0.067,5,0.075,10,0.177,11,0.255,16,0.3,17,0.006,19,0.195,27,0.113,29,1.516,76,2.362,88,0.005,89,0.005,144,4.068,152,1.435,171,1.979,180,0.961,190,3.223,308,0.929,781,1.867,1115,3.811,1176,2.273,1306,3.005,1408,2.863,1481,5.391,1482,4.311,1483,4.123,1484,4.531,1485,4.531,1486,4.123,1487,4.531,1488,4.531,1489,4.531,1490,4.531,1491,3.957,1492,5.667,1493,6.183,1494,5.02,1495,4.123,1496,3.957,1497,4.123,1498,4.123,1499,4.531,1500,4.123,1501,4.531,1502,3.679,1503,4.531,1504,4.531,1505,4.531,1506,4.123,1507,3.348,1508,5.667,1509,4.531,1510,4.531,1511,4.531,1512,4.531,1513,4.531,1514,4.531,1515,4.949,1516,5.625,1517,5.155,1518,6.478,1519,6.478]],["title/interfaces/NgxCookieConfiguration.html",[0,0.122,1506,3.153]],["body/interfaces/NgxCookieConfiguration.html",[0,0.228,2,0.909,3,0.068,4,0.06,5,0.068,10,0.159,11,0.238,12,0.883,16,0.316,17,0.006,19,0.175,27,0.11,29,1.6,76,2.126,88,0.005,89,0.005,152,1.419,171,1.424,180,0.865,190,3.367,308,0.836,781,1.68,1115,3.43,1176,3.125,1306,3.903,1408,2.576,1481,5.928,1482,3.88,1483,3.71,1484,4.078,1485,4.078,1486,3.71,1487,4.078,1488,4.078,1489,4.078,1490,4.078,1491,3.562,1492,5.298,1493,6.832,1494,4.778,1495,3.71,1496,3.562,1497,3.71,1498,3.71,1499,4.078,1500,3.71,1501,4.078,1502,3.311,1503,4.078,1504,4.078,1505,4.078,1506,4.82,1507,4.603,1508,6.619,1509,6.231,1510,6.231,1511,6.231,1512,6.231,1513,6.231,1514,6.231,1515,5.64,1516,4.82,1517,3.71,1518,4.078,1519,4.078]],["title/interfaces/NgxCookieEvent.html",[0,0.122,1516,3.153]],["body/interfaces/NgxCookieEvent.html",[0,0.236,2,1.026,3,0.077,4,0.068,5,0.077,10,0.18,11,0.257,16,0.257,17,0.006,19,0.198,27,0.114,29,1.522,76,2.4,88,0.005,89,0.005,152,1.429,171,1.607,180,0.976,190,3.247,308,0.944,781,1.897,1115,3.872,1176,2.309,1306,3.053,1408,2.908,1481,5.445,1482,4.38,1483,4.188,1484,4.604,1485,4.604,1486,4.188,1487,4.604,1488,4.604,1489,4.604,1490,4.604,1491,4.021,1492,6.515,1493,6.228,1494,5.056,1495,4.188,1496,4.021,1497,4.188,1498,4.188,1499,4.604,1500,4.188,1501,4.604,1502,3.737,1503,4.604,1504,4.604,1505,4.604,1506,4.188,1507,3.401,1508,5.723,1509,4.604,1510,4.604,1511,4.604,1512,4.604,1513,4.604,1514,4.604,1515,5.852,1516,5.666,1517,4.188,1518,4.604,1519,4.604]],["title/interfaces/NgxCookieLanguageConfiguration.html",[0,0.122,1498,3.153]],["body/interfaces/NgxCookieLanguageConfiguration.html",[0,0.233,2,0.976,3,0.073,4,0.065,5,0.073,10,0.171,11,0.25,12,0.78,16,0.308,17,0.006,19,0.188,27,0.112,29,1.503,76,2.284,88,0.005,89,0.005,144,3.983,152,1.444,171,1.53,180,0.929,190,3.174,308,1.313,781,1.805,1115,3.685,1176,2.198,1306,2.906,1408,3.846,1481,5.278,1482,4.169,1483,3.986,1484,4.382,1485,4.382,1486,3.986,1487,4.382,1488,4.382,1489,4.382,1490,4.382,1491,3.827,1492,5.548,1493,6.088,1494,4.943,1495,3.986,1496,3.827,1497,3.986,1498,5.047,1499,6.4,1500,5.539,1501,6.4,1502,5.196,1503,4.382,1504,4.382,1505,4.382,1506,3.986,1507,3.237,1508,5.548,1509,4.382,1510,4.382,1511,4.382,1512,4.382,1513,4.382,1514,4.382,1515,4.845,1516,5.047,1517,3.986,1518,4.382,1519,4.382]],["title/injectables/NgxCookieService.html",[259,1.478,1520,3.921]],["body/injectables/NgxCookieService.html",[3,0.029,4,0.026,5,0.029,7,1.07,10,0.068,11,0.127,12,0.706,16,0.295,17,0.006,19,0.195,27,0.029,32,1.303,34,2.393,37,2.564,41,1.782,42,2.193,44,2.013,49,2.026,54,4.147,57,1.702,61,2.413,66,1.07,68,0.793,72,0.96,73,2.357,81,1.29,88,0.002,89,0.002,90,0.211,96,1.2,137,1.361,152,1.333,162,2.152,174,1.143,180,1.47,183,0.751,184,1.674,187,1.085,193,1.896,194,2.101,196,1.483,205,0.216,206,1.182,209,1.408,233,2.147,249,2.684,259,1.203,261,1.07,268,2.602,272,0.577,273,2.022,300,1.769,308,1.188,311,3.127,317,1.572,324,2.185,335,1.702,338,2.372,369,2.336,377,1.514,379,1.166,412,3.533,476,2.799,486,2.132,501,0.691,502,3.246,649,2.635,691,1.639,703,1.971,713,0.727,718,0.793,769,3.08,785,2.025,797,1.458,798,1.962,806,4.86,811,3.227,819,1.871,820,1.871,822,1.408,951,2.566,953,2.29,966,4.759,992,1.415,1175,1.32,1176,0.87,1204,1.32,1206,4.323,1244,1.281,1272,2.986,1320,3.393,1370,2.895,1379,2.372,1402,2.372,1404,2.714,1405,1.245,1408,1.095,1462,1.825,1491,5.762,1495,1.577,1496,4.462,1497,3.738,1498,3.738,1506,3.738,1507,2.084,1515,6.08,1516,1.577,1517,1.577,1520,3.192,1521,2.389,1522,3.887,1523,3.192,1524,6.679,1525,4.914,1526,4.914,1527,4.914,1528,4.914,1529,4.914,1530,4.914,1531,4.914,1532,6.231,1533,4.914,1534,3.887,1535,3.887,1536,3.887,1537,3.887,1538,3.887,1539,3.887,1540,3.887,1541,3.887,1542,4.914,1543,5.662,1544,3.887,1545,2.389,1546,5.662,1547,6.8,1548,7.981,1549,3.887,1550,2.389,1551,3.887,1552,2.389,1553,3.887,1554,2.389,1555,3.887,1556,2.389,1557,4.649,1558,5.484,1559,3.887,1560,2.389,1561,2.999,1562,3.887,1563,2.389,1564,3.887,1565,4.649,1566,2.389,1567,2.389,1568,2.389,1569,3.192,1570,3.887,1571,3.887,1572,4.649,1573,2.389,1574,2.87,1575,3.887,1576,2.389,1577,5.484,1578,2.389,1579,3.887,1580,2.389,1581,4.649,1582,3.887,1583,3.887,1584,7.337,1585,2.389,1586,3.887,1587,3.887,1588,2.389,1589,3.468,1590,5.662,1591,3.192,1592,3.192,1593,2.389,1594,6.231,1595,3.887,1596,2.389,1597,3.468,1598,3.887,1599,2.389,1600,6.231,1601,3.887,1602,2.389,1603,2.56,1604,2.684,1605,2.389,1606,2.389,1607,2.986,1608,1.962,1609,1.281,1610,1.962,1611,2.132,1612,2.132,1613,1.962,1614,1.577,1615,2.389,1616,1.577,1617,2.389,1618,2.389,1619,4.786,1620,2.389,1621,2.389,1622,2.389,1623,2.389,1624,4.384,1625,2.389,1626,2.389,1627,4.914,1628,2.389,1629,2.389,1630,4.914,1631,2.389,1632,2.389,1633,2.389,1634,3.887,1635,3.887,1636,2.389,1637,2.389,1638,2.389,1639,2.389,1640,2.389,1641,3.887,1642,2.389,1643,2.389,1644,2.389,1645,2.389,1646,2.389,1647,5.662,1648,3.887,1649,2.389,1650,2.389,1651,3.468,1652,3.192,1653,3.887,1654,3.887,1655,2.389]],["title/interfaces/NgxCookieValue.html",[0,0.122,1565,3.921]],["body/interfaces/NgxCookieValue.html",[0,0.191,2,1.21,3,0.09,4,0.081,5,0.09,10,0.212,11,0.284,16,0.284,17,0.006,27,0.09,32,1.436,88,0.005,89,0.005,152,1.326,180,1.46,273,3.291,1565,7.151,1656,7.481,1657,7.481]],["title/directives/NgxCookiesFallBackComponent.html",[292,0.723,571,2.242]],["body/directives/NgxCookiesFallBackComponent.html",[3,0.084,4,0.075,5,0.084,10,0.197,11,0.272,17,0.006,19,0.26,27,0.084,32,1.05,72,3.346,88,0.005,89,0.005,90,0.613,96,1.067,106,2.407,109,1.414,187,0.838,205,0.626,211,6.044,292,1.261,294,1.702,300,1.67,308,1.032,341,2.762,512,3.073,563,3.072,571,3.911,718,2.303,1462,3.911,1547,7.467,1558,6.839,1658,8.329,1659,8.329,1660,6.937,1661,7.43,1662,5.278,1663,7.43,1664,6.937,1665,5.328]],["title/components/NgxCurrencyTableCellComponent.html",[109,0.811,534,2.358]],["body/components/NgxCurrencyTableCellComponent.html",[3,0.04,4,0.036,5,0.04,10,0.095,11,0.165,12,0.295,16,0.261,17,0.006,19,0.19,27,0.04,28,1.074,32,1.322,38,2.432,47,1.236,48,2.732,72,1.34,81,2.853,88,0.003,89,0.003,90,0.539,96,0.513,109,1.036,137,1.119,152,0.727,171,1.28,179,0.917,180,1.473,183,0.976,184,1.69,187,1.126,192,3.667,193,0.792,196,1.16,205,0.301,237,2.317,250,3.084,255,2.073,256,3.667,292,0.505,293,1.605,294,0.818,298,3.001,300,1.634,304,1.619,306,2.035,308,1.358,311,1.169,315,2.936,317,1.178,319,1.901,320,1.842,333,2.709,341,1.032,345,1.965,361,1.605,379,1.273,478,1.647,479,1.989,480,1.262,481,1.287,484,2.561,485,2.073,507,3.704,509,2.733,512,1.677,514,1.647,515,2.495,516,1.24,517,3.45,518,1.691,519,1.691,520,1.647,521,1.46,522,1.691,523,1.647,524,2.873,525,1.691,526,1.647,527,1.691,528,2.561,529,1.691,530,2.495,531,1.691,532,1.647,533,1.605,534,3.799,535,3.68,536,4.663,537,3.45,538,1.647,539,1.605,540,1.647,541,1.566,542,1.691,543,1.605,544,1.605,545,1.691,546,1.529,547,1.691,548,1.647,549,1.691,550,1.647,551,2.561,552,1.647,553,1.647,554,1.691,555,1.647,556,1.691,557,1.647,558,3.52,559,1.691,560,1.691,561,1.691,562,4.272,563,1.148,564,1.566,565,1.566,566,1.691,567,1.605,568,1.691,569,1.691,570,1.691,571,1.566,572,1.605,573,1.691,574,1.494,575,1.566,576,1.691,577,1.691,578,1.529,579,1.605,580,1.691,581,1.605,582,1.691,583,1.605,584,1.691,585,1.566,586,1.566,587,1.605,588,1.691,589,1.605,590,1.691,591,1.262,592,1.605,593,1.566,594,1.605,595,1.566,596,1.566,597,1.566,598,1.368,599,1.566,600,1.691,601,1.494,602,1.691,603,1.605,604,1.691,605,1.46,606,1.566,607,1.691,608,1.566,609,1.691,610,1.605,611,1.691,612,1.691,628,5.116,631,2.88,649,1.788,665,5.521,666,4.427,667,4.427,668,5.565,669,4.939,670,4.696,671,4.427,672,4.212,673,3.866,674,5.975,675,4.427,676,4.685,677,4.685,678,3.881,680,3.667,682,2.791,683,3.202,684,3.489,685,3.881,686,3.881,687,3.881,688,3.881,689,2.317,691,1.67,694,2.114,695,3.202,697,2.562,698,3.202,699,1.965,700,2.562,701,3.866,703,1.691,704,1.313,706,4.052,713,1.014,751,1.989,992,2.801,1010,2.88,1070,2.633,1080,1.842,1081,4.212,1082,2.42,1450,4.877,1666,5.053,1667,2.976,1668,6.1,1669,4.149,1670,4.149,1671,4.149,1672,4.149,1673,2.739,1674,2.739,1675,2.739,1676,3.335,1677,4.149,1678,4.508,1679,4.508,1680,3.335,1681,4.149,1682,5.053,1683,3.335,1684,5.053,1685,3.335,1686,5.053,1687,4.149,1688,3.335,1689,2.977,1690,4.149,1691,3.335,1692,2.739,1693,2.739,1694,2.739,1695,3.335]],["title/directives/NgxCypressTagDirective.html",[292,0.723,572,2.298]],["body/directives/NgxCypressTagDirective.html",[3,0.079,4,0.07,5,0.079,10,0.185,11,0.262,16,0.284,17,0.006,19,0.251,27,0.079,32,0.989,44,1.878,47,1.762,72,2.625,88,0.005,89,0.005,90,0.578,179,1.796,182,2.619,184,1.636,187,1.05,205,0.59,292,1.215,294,1.603,298,2.401,304,2.573,308,0.972,334,2.798,341,2.021,572,3.865,652,3.404,659,5.741,682,5.304,684,6.003,703,4.408,949,4.863,1696,9.071,1697,9.071,1698,6.533,1699,9.603,1700,8.031,1701,8.695,1702,8.031,1703,6.533,1704,5.018,1705,6.533,1706,6.533]],["title/components/NgxDateTableCellComponent.html",[109,0.811,538,2.358]],["body/components/NgxDateTableCellComponent.html",[3,0.034,4,0.03,5,0.034,10,0.08,11,0.145,12,0.25,16,0.246,17,0.006,19,0.195,27,0.034,28,0.946,32,1.289,36,2.082,38,2.143,47,1.115,48,2.465,64,2.538,72,1.137,76,2.725,81,2.728,83,3.382,88,0.003,89,0.003,90,0.486,96,0.436,109,0.935,137,1.026,152,0.641,171,1.128,179,0.778,180,1.442,183,0.86,184,1.691,187,1.127,192,6.08,193,0.673,196,1.046,205,0.256,237,2.041,250,2.717,255,3.202,256,3.231,292,0.428,293,1.363,294,0.695,298,2.973,300,1.719,304,1.426,306,1.728,308,1.328,311,0.993,315,2.648,317,1.063,319,1.613,320,1.564,333,2.387,341,1.703,345,1.668,361,1.363,379,1.167,478,1.398,479,1.753,480,1.071,481,1.092,484,2.257,485,1.827,507,3.466,509,2.591,512,1.478,514,1.398,515,2.198,516,1.092,517,3.163,518,1.435,519,1.435,520,1.398,521,1.239,522,1.435,523,1.398,524,2.783,525,1.435,526,1.398,527,1.435,528,2.257,529,1.435,530,2.198,531,1.435,532,1.398,533,1.363,534,1.398,535,3.519,536,1.435,537,3.163,538,3.556,539,4.529,540,1.398,541,1.329,542,1.435,543,1.363,544,1.363,545,1.435,546,1.298,547,1.435,548,1.398,549,1.435,550,1.398,551,2.257,552,1.398,553,1.398,554,1.435,555,1.398,556,1.435,557,1.398,558,3.265,559,1.435,560,1.435,561,1.435,562,4.18,563,0.974,564,1.329,565,1.329,566,1.435,567,1.363,568,1.435,569,1.435,570,1.435,571,1.329,572,1.363,573,1.435,574,1.268,575,1.329,576,1.435,577,1.435,578,1.298,579,1.363,580,1.435,581,1.363,582,1.435,583,1.363,584,1.435,585,1.329,586,1.329,587,1.363,588,1.435,589,1.363,590,1.435,591,1.071,592,1.363,593,1.329,594,1.363,595,1.329,596,1.329,597,1.329,598,1.161,599,1.329,600,1.435,601,1.268,602,1.435,603,1.363,604,1.435,605,1.239,606,1.329,607,1.435,608,1.329,609,1.435,610,1.363,611,1.435,612,1.435,628,4.971,649,1.518,665,5.38,666,3.993,667,3.993,668,5.3,669,4.527,670,4.395,671,3.993,672,3.799,673,3.487,674,5.664,675,3.993,676,4.226,677,4.226,678,3.42,680,3.231,682,2.459,683,2.822,684,3.074,685,3.42,686,3.42,687,3.42,688,3.42,689,2.041,691,1.531,694,1.794,695,2.822,697,2.174,698,2.97,699,1.668,700,2.174,701,3.487,703,1.435,704,1.115,706,3.819,713,0.861,751,2.348,823,4.755,889,2.257,992,2.621,1010,2.538,1070,2.32,1080,1.564,1081,3.799,1082,2.054,1450,4.564,1471,4.395,1667,2.526,1669,3.656,1670,3.656,1671,3.656,1672,3.656,1673,2.325,1674,2.325,1675,2.325,1677,3.656,1678,3.972,1679,3.972,1681,3.656,1687,3.656,1689,2.623,1690,3.656,1692,2.325,1693,2.325,1694,2.325,1707,7.534,1708,5.503,1709,4.518,1710,8.378,1711,4.909,1712,7.202,1713,8.028,1714,7.805,1715,5.503,1716,4.452,1717,5.914,1718,4.452,1719,2.831,1720,2.831,1721,4.452,1722,2.831,1723,2.623,1724,4.452,1725,2.831,1726,4.452,1727,2.831,1728,4.452,1729,2.831,1730,2.831,1731,2.831]],["title/directives/NgxDisplayContentComponent.html",[292,0.723,574,2.139]],["body/directives/NgxDisplayContentComponent.html",[3,0.082,4,0.073,5,0.082,10,0.193,11,0.269,12,0.782,17,0.006,19,0.212,27,0.082,28,2.112,88,0.005,89,0.005,90,0.782,96,1.046,136,3.483,164,5.841,187,0.994,203,3.239,205,0.614,255,3.63,292,1.245,294,1.667,300,1.655,304,2.636,341,2.913,479,3.483,563,3.045,574,3.685,575,3.863,639,4.062,1662,5.607,1732,8.848,1733,7.893,1734,6.797,1735,7.34,1736,8.227,1737,8.227]],["title/interfaces/NgxDisplayContentConfiguration.html",[0,0.122,1738,3.921]],["body/interfaces/NgxDisplayContentConfiguration.html",[0,0.173,2,1.092,3,0.082,4,0.073,5,0.082,10,0.192,11,0.268,12,0.811,16,0.323,17,0.006,19,0.256,27,0.115,28,1.435,29,1.545,68,2.242,88,0.005,89,0.005,114,2.506,169,5.188,205,0.61,245,1.797,479,3.612,574,3.025,706,3.424,1738,6.73,1739,6.026,1740,6.026,1741,9.175,1742,9.175,1743,8.186,1744,5.546,1745,3.979,1746,5.546,1747,5.546,1748,5.546,1749,8.186,1750,4.122,1751,5.546]],["title/directives/NgxDisplayContentDirective.html",[292,0.723,575,2.242]],["body/directives/NgxDisplayContentDirective.html",[3,0.03,4,0.027,5,0.03,10,0.071,11,0.132,12,0.603,16,0.284,17,0.006,19,0.213,27,0.03,28,0.858,29,0.82,32,1.386,34,1.845,37,2.787,42,1.466,44,1.803,47,1.028,49,2.107,57,1.767,61,1.975,68,1.931,72,1.006,73,0.947,74,2.512,83,1.175,88,0.002,89,0.002,90,0.221,96,0.982,102,2.046,109,1.505,114,2.531,135,0.966,137,1.301,139,1.096,162,3.269,174,1.186,179,0.688,180,0.895,182,1.316,183,0.78,184,1.423,187,1.106,191,1.304,193,1.382,194,2.159,196,1.364,203,1.997,205,0.226,206,1.227,234,1.527,236,1.922,237,2.325,245,0.666,254,3.601,255,1.656,272,0.604,292,0.611,294,0.614,298,1.207,300,1.745,304,1.293,308,1.319,317,1.642,328,2.378,332,1.382,341,1.249,358,1.652,366,2.221,368,1.942,369,2.59,373,2.547,379,1.543,392,1.415,402,2.665,412,3.17,426,2.719,431,1.304,453,4.213,479,1.589,492,2.055,501,1.466,506,1.236,509,2.856,512,1.684,513,1.942,516,1.427,558,3.81,574,1.121,575,2.997,623,3.428,639,2.504,652,1.304,661,3.717,682,3.768,691,0.99,694,2.558,703,2.949,704,2.512,706,2.949,713,1.941,718,0.831,721,3.214,738,2.667,751,2.514,789,3.71,792,1.175,813,2.667,819,3.072,820,3.072,822,1.474,823,1.652,854,1.527,861,3.314,889,2.949,897,3.095,918,2.055,947,2.038,949,3.847,951,1.652,971,3.214,1015,2.988,1049,2.378,1059,1.474,1060,2.378,1091,1.382,1092,1.586,1115,1.527,1173,1.236,1204,2.229,1213,3.502,1219,1.205,1238,5.262,1266,2.233,1272,3.1,1274,5.921,1292,1.426,1342,1.816,1368,3.601,1609,3.657,1616,2.665,1619,1.922,1651,4.525,1662,3.214,1717,2.055,1733,8.213,1738,2.055,1744,4.777,1745,3.76,1746,2.055,1747,5.24,1748,5.893,1750,4.164,1751,4.164,1752,6.078,1753,2.503,1754,3.314,1755,7.177,1756,5.072,1757,6.382,1758,3.895,1759,5.072,1760,5.072,1761,5.072,1762,3.348,1763,5.818,1764,5.072,1765,4.036,1766,4.036,1767,4.036,1768,4.036,1769,4.036,1770,6.403,1771,4.036,1772,2.503,1773,2.503,1774,2.503,1775,4.406,1776,2.503,1777,2.503,1778,4.036,1779,4.18,1780,4.036,1781,2.503,1782,6.382,1783,4.164,1784,4.036,1785,2.503,1786,4.036,1787,2.503,1788,3.68,1789,2.503,1790,2.503,1791,5.191,1792,5.072,1793,2.503,1794,4.036,1795,4.036,1796,2.929,1797,2.503,1798,2.503,1799,2.558,1800,4.036,1801,2.503,1802,2.503,1803,2.929,1804,2.503,1805,2.503,1806,2.786,1807,3.29,1808,2.665,1809,2.503,1810,1.175,1811,1.236,1812,2.055,1813,4.525,1814,2.503,1815,2.503,1816,2.503,1817,2.503,1818,3.348,1819,5.818,1820,2.503,1821,2.503,1822,2.503,1823,2.503,1824,2.503,1825,1.652,1826,2.503,1827,1.816,1828,2.503,1829,1.652,1830,2.503,1831,2.503,1832,2.503,1833,2.503,1834,2.503,1835,2.503,1836,2.503,1837,2.055,1838,2.503,1839,2.503,1840,2.503,1841,4.036,1842,2.503,1843,2.503,1844,2.503,1845,2.233,1846,1.652,1847,2.233,1848,2.055,1849,2.055,1850,2.055,1851,2.503,1852,2.503,1853,2.503,1854,2.055,1855,2.503,1856,2.503,1857,2.503,1858,2.503,1859,2.503,1860,2.503,1861,4.036,1862,4.036,1863,2.503,1864,2.503,1865,2.503,1866,2.503,1867,5.072,1868,2.055,1869,5.818,1870,2.503,1871,1.586,1872,1.527,1873,2.503]],["title/directives/NgxFormsErrorAbstractComponent.html",[292,0.723,578,2.189]],["body/directives/NgxFormsErrorAbstractComponent.html",[3,0.079,4,0.07,5,0.079,10,0.185,11,0.262,17,0.006,19,0.25,21,3.843,27,0.079,28,1.978,32,1.214,36,3.287,47,1.322,51,5.085,68,3.187,70,5.507,72,2.621,86,6.306,88,0.005,89,0.005,90,0.577,184,1.687,187,1.095,205,0.589,292,1.214,294,1.6,300,1.828,304,2.57,308,1.194,341,2.018,379,1.626,432,5.533,578,3.678,652,4.849,783,6.162,1425,4.257,1874,6.523,1875,7.752,1876,8.024,1877,6.523,1878,6.523,1879,5.356]],["title/interfaces/NgxFormsErrorConfigurationOptions.html",[0,0.122,1880,3.921]],["body/interfaces/NgxFormsErrorConfigurationOptions.html",[0,0.154,2,0.971,3,0.072,4,0.065,5,0.072,7,3.412,10,0.17,11,0.249,12,0.821,16,0.317,17,0.006,19,0.238,27,0.101,37,2.575,68,3.222,76,2.882,86,7.043,88,0.005,89,0.005,90,0.674,96,0.924,106,2.202,109,1.621,190,2.272,194,3.266,205,0.542,245,1.598,255,3.126,292,1.153,308,1.134,379,1.425,387,6.073,395,6.073,404,5.852,524,2.771,578,2.753,631,4.342,682,4.208,781,2.716,802,3.493,831,4.65,1206,4.489,1462,4.557,1616,5.811,1779,4.462,1806,5.26,1880,6.256,1881,5.357,1882,9.282,1883,5.852,1884,6.797,1885,4.489,1886,7.853,1887,7.853]],["title/directives/NgxFormsErrorsDirective.html",[292,0.723,579,2.298]],["body/directives/NgxFormsErrorsDirective.html",[2,0.434,3,0.032,4,0.029,5,0.032,10,0.076,11,0.139,12,0.715,16,0.291,17,0.006,19,0.23,21,1.581,26,1.36,27,0.032,28,1.857,29,1.138,32,1.272,34,1.536,36,1.015,42,1.75,44,1.726,47,1.552,48,2.38,49,2.073,51,1.701,55,1.175,57,1.869,61,2.283,68,3.041,70,5.734,73,2.01,83,2.004,86,6.097,88,0.003,89,0.003,90,0.377,96,0.818,107,4.394,109,1.547,135,2.55,137,0.995,144,1.398,151,1.853,152,1.013,162,1.175,174,0.789,179,0.738,180,0.818,182,1.392,183,0.824,184,1.362,187,1.113,193,1.262,194,2.611,196,1.403,203,2.092,205,0.242,206,1.298,233,2.357,238,1.202,245,0.714,268,1.562,272,0.648,292,1,294,0.658,298,1.276,300,1.793,308,1.25,317,1.359,328,2.514,333,2.288,341,2.442,366,3.231,369,2.632,373,2.651,379,1.667,389,6.289,395,4.394,399,3.508,404,2.061,412,2.01,426,1.439,453,1.772,476,1.125,479,1.056,480,1.615,501,1.75,509,2.45,513,1.292,516,1.622,524,0.845,578,2.436,579,2.054,623,3.568,639,2.99,682,2.357,691,1.727,704,2.771,706,3.883,713,1.298,738,3.227,813,1.957,819,2.914,820,2.914,824,1.482,890,3.504,893,3.504,897,3.243,918,2.204,947,2.433,992,2.204,996,1.36,998,1.947,1015,3.131,1019,4.741,1049,3.131,1059,3.131,1060,2.514,1075,4.741,1076,3.808,1091,3.345,1092,1.701,1107,2.818,1173,1.325,1206,1.581,1274,2.061,1292,3.028,1320,2.947,1344,1.947,1434,3.246,1462,2.843,1572,3.504,1604,1.853,1608,2.204,1616,4.363,1717,2.204,1758,4.081,1762,3.508,1770,5.402,1779,1.36,1796,3.097,1799,2.705,1807,1.23,1808,2.818,1810,2.495,1811,1.325,1829,1.772,1846,1.772,1847,2.394,1854,5.779,1875,5.896,1879,5.427,1880,4.363,1884,5.402,1888,2.684,1889,6.056,1890,3.263,1891,5.314,1892,5.314,1893,7.038,1894,5.314,1895,4.268,1896,4.268,1897,4.268,1898,4.268,1899,4.268,1900,2.684,1901,4.268,1902,2.684,1903,6.609,1904,7.38,1905,4.268,1906,2.684,1907,2.684,1908,2.684,1909,2.684,1910,2.684,1911,2.684,1912,3.856,1913,5.314,1914,2.684,1915,2.684,1916,2.684,1917,2.684,1918,4.268,1919,2.684,1920,5.314,1921,4.268,1922,2.684,1923,2.684,1924,2.684,1925,2.684,1926,2.684,1927,3.808,1928,2.684,1929,2.684,1930,2.684,1931,2.394,1932,2.394,1933,1.947,1934,2.684,1935,2.204,1936,2.684,1937,2.684,1938,2.684,1939,3.808,1940,2.684,1941,4.268,1942,4.268,1943,5.314,1944,2.684,1945,2.684,1946,2.684,1947,2.684,1948,2.684,1949,2.684,1950,2.684,1951,2.684,1952,2.684,1953,4.268,1954,2.684,1955,2.684,1956,2.684,1957,5.314,1958,3.808,1959,5.402,1960,1.947,1961,2.394,1962,2.684,1963,2.684,1964,5.314,1965,2.684,1966,2.684,1967,2.684,1968,7.038,1969,2.684,1970,4.268,1971,2.684,1972,2.684,1973,2.684,1974,2.394,1975,2.684,1976,2.684,1977,2.684,1978,2.684,1979,2.684,1980,5.314,1981,2.684,1982,4.268,1983,3.808,1984,6.609,1985,1.853,1986,2.684,1987,2.684,1988,2.684]],["title/interfaces/NgxHasCookieConfiguration.html",[0,0.122,1665,3.668]],["body/interfaces/NgxHasCookieConfiguration.html",[0,0.19,2,1.204,3,0.09,4,0.08,5,0.09,10,0.211,11,0.284,12,0.768,16,0.284,17,0.006,27,0.09,88,0.005,89,0.005,152,1.406,506,4.677,1483,4.914,1491,6.003,1515,4.717,1665,6.669,1989,7.443]],["title/directives/NgxHasCookieDirective.html",[292,0.723,581,2.298]],["body/directives/NgxHasCookieDirective.html",[3,0.039,4,0.035,5,0.039,10,0.092,11,0.162,12,0.438,16,0.299,17,0.006,19,0.247,27,0.039,32,1.332,42,0.939,44,1.69,47,1.465,48,3.658,49,2.041,55,2.94,61,1.532,72,1.305,73,2.735,74,1.95,75,3.27,83,2.326,88,0.003,89,0.003,90,0.287,96,0.5,109,1.421,133,1.852,137,1.188,139,1.422,162,1.422,174,0.955,179,0.893,182,1.615,183,0.957,184,1.444,187,1.128,191,2.581,194,1.838,196,1.374,205,0.293,206,1.506,233,1.794,238,1.455,245,0.864,272,0.784,292,1.236,294,0.797,298,1.481,300,1.646,304,1.587,308,1.245,317,1.649,324,1.911,332,1.794,335,2.169,338,1.983,341,1.857,366,2.628,368,3.479,369,2.634,373,2.94,379,1.425,392,2.105,399,2.145,402,3.27,408,3.569,412,2.54,424,1.914,431,2.581,467,1.983,501,1.735,506,2.964,509,2.778,513,1.564,571,1.525,581,2.384,639,1.604,652,1.693,689,2.271,691,1.215,704,2.363,706,4.327,709,2.358,713,2.042,718,1.078,751,1.957,769,1.254,811,1.852,813,1.489,819,1.564,820,1.564,947,2.412,949,4.084,971,3.804,992,1.183,1015,3.537,1059,3.537,1060,2.918,1091,1.794,1092,2.059,1173,1.604,1320,4.144,1491,3.139,1515,4.828,1520,6.255,1547,6.427,1558,5.935,1662,3.804,1665,4.61,1704,2.495,1762,3.963,1779,4.562,1799,2.059,1807,3.078,1808,3.27,1810,2.819,1811,1.604,1818,2.145,1829,2.145,1846,2.145,1854,6.255,1885,1.914,1912,4.356,1927,4.419,1935,2.668,1958,2.898,1959,5.355,1960,2.358,1961,2.898,1990,9.384,1991,9.384,1992,3.249,1993,4.953,1994,3.42,1995,4.953,1996,4.953,1997,8.367,1998,4.356,1999,6.003,2000,4.872,2001,5.23,2002,6.714,2003,6.714,2004,4.872,2005,4.953,2006,4.953,2007,3.249,2008,3.421,2009,3.249,2010,3.249,2011,4.953,2012,4.953,2013,3.249,2014,3.249,2015,4.067,2016,3.249,2017,6.003,2018,3.249,2019,3.249,2020,3.249,2021,3.249,2022,3.249,2023,4.953,2024,3.249,2025,3.249,2026,3.249,2027,3.594,2028,3.249,2029,3.249,2030,3.249,2031,2.495,2032,2.668,2033,3.594,2034,3.249,2035,4.953,2036,2.668,2037,3.594,2038,4.953,2039,3.27,2040,2.358,2041,3.27,2042,1.742,2043,3.249,2044,3.249,2045,3.249,2046,2.668,2047,3.249,2048,3.249,2049,3.249,2050,3.249,2051,3.249,2052,3.249,2053,3.249,2054,1.983,2055,2.059,2056,3.249,2057,3.249,2058,4.953,2059,3.249]],["title/directives/NgxHasFeatureDirective.html",[292,0.723,583,2.298]],["body/directives/NgxHasFeatureDirective.html",[3,0.039,4,0.035,5,0.039,10,0.091,11,0.16,16,0.298,17,0.006,19,0.224,26,1.628,27,0.039,29,1.163,32,1.31,38,2.363,42,1.419,47,1.724,48,4.174,49,1.814,55,2.922,61,1.519,72,1.972,73,2.255,74,1.932,83,2.798,88,0.003,89,0.003,90,0.284,96,0.494,133,1.83,139,1.406,174,0.944,179,0.883,183,0.948,184,1.564,187,1.151,191,2.557,196,1.133,205,0.29,206,1.493,238,1.438,245,0.854,272,0.775,292,1.148,294,0.788,298,1.468,300,1.418,304,1.573,308,1.37,317,1.465,332,1.773,338,1.959,341,2.225,366,2.609,368,3.461,369,2.621,373,2.922,379,1.592,392,2.089,402,3.241,408,3.55,412,2.525,424,1.892,501,1.722,509,2.768,513,1.545,583,2.363,691,2.153,704,2.831,706,4.313,709,2.33,713,2.03,751,1.943,813,1.472,936,2.711,947,2.394,949,4.763,971,3.777,1015,3.511,1059,3.511,1060,2.892,1091,1.773,1092,2.035,1173,1.585,1209,1.892,1223,6.681,1225,6.516,1226,5.48,1227,4.893,1253,4.031,1613,7.296,1762,3.934,1779,3.645,1803,3.562,1807,3.296,1808,3.241,1810,2.798,1811,1.585,1818,2.12,1829,3.934,1846,2.12,1912,3.562,1933,3.562,1935,2.636,1998,4.325,2000,4.325,2001,5.208,2004,4.843,2008,3.396,2015,4.031,2027,3.562,2033,4.325,2037,2.33,2039,3.241,2040,2.33,2041,3.241,2042,1.721,2054,1.959,2055,2.035,2060,8.53,2061,8.53,2062,3.211,2063,3.241,2064,5.954,2065,2.488,2066,3.77,2067,7.038,2068,5.218,2069,4.577,2070,7.191,2071,7.191,2072,7.191,2073,5.959,2074,4.577,2075,5.959,2076,4.909,2077,4.909,2078,4.909,2079,3.211,2080,3.211,2081,3.211,2082,4.325,2083,3.211,2084,3.211,2085,3.211,2086,3.211,2087,5.523,2088,3.211,2089,3.211,2090,3.211,2091,3.211,2092,3.211,2093,3.211,2094,3.211,2095,3.211,2096,2.466,2097,2.864,2098,2.864,2099,2.636,2100,4.909,2101,3.211,2102,4.909,2103,3.211,2104,3.211,2105,3.211,2106,4.577,2107,3.211,2108,5.126,2109,2.864,2110,3.211,2111,3.211,2112,4.379,2113,3.77,2114,3.77]],["title/pipes/NgxHasFeaturePipe.html",[174,1.404,2115,4.261]],["body/pipes/NgxHasFeaturePipe.html",[3,0.052,4,0.047,5,0.052,11,0.142,12,0.542,16,0.266,17,0.006,19,0.254,26,2.2,27,0.052,29,1.248,32,1.365,34,1.771,38,2.949,42,1.254,44,1.015,48,3.181,49,1.976,55,1.9,57,1.9,61,2.198,73,1.642,81,1.44,83,2.038,88,0.004,89,0.004,90,0.384,96,1.093,109,1.041,139,1.9,162,1.9,174,2.65,176,2.2,179,1.193,180,1.188,183,0.838,184,1.332,185,2.326,187,1.089,193,1.456,196,1.686,203,1.708,204,3.285,205,0.392,206,1.32,238,1.944,245,1.155,268,2.852,272,1.048,300,1.444,308,0.912,317,1.632,366,2.683,368,4.178,369,2.52,373,3.11,379,1.687,392,2.148,399,2.865,408,3.025,412,3.284,424,2.557,501,1.254,513,2.949,683,3.883,691,2.072,694,3.883,713,2.16,721,3.883,813,1.989,907,2.648,936,4.262,939,4.045,947,1.744,966,3.739,1015,4.977,1059,4.795,1060,3.61,1099,3.739,1107,2.865,1152,3.333,1173,2.142,1209,2.557,1225,6.632,1226,6.936,1253,6.936,1379,4.709,1811,2.142,1912,4.446,2001,5.952,2008,3.492,2039,4.045,2041,4.045,2054,2.648,2055,2.75,2061,8.153,2064,5.466,2067,5.466,2068,4.446,2082,3.149,2096,3.333,2115,5.466,2116,8.153,2117,4.34,2118,4.34,2119,4.34,2120,5.466,2121,4.34,2122,6.683,2123,6.127,2124,4.34,2125,5.466,2126,5.466,2127,4.34,2128,4.34,2129,4.34,2130,3.285,2131,5.031,2132,5.031,2133,6.884,2134,5.466,2135,4.34,2136,4.34,2137,3.872,2138,3.872,2139,5.466,2140,5.466,2141,3.285,2142,5.466,2143,3.563,2144,3.563,2145,2.261,2146,4.34,2147,6.127,2148,3.872,2149,3.333,2150,3.872,2151,3.872,2152,3.333]],["title/directives/NgxHasFocusDirective.html",[292,0.723,585,2.242]],["body/directives/NgxHasFocusDirective.html",[3,0.066,4,0.059,5,0.066,10,0.155,11,0.234,12,0.484,15,2.154,16,0.234,17,0.006,19,0.171,27,0.066,29,1.374,32,0.828,34,1.582,44,1.28,47,1.454,57,3.142,81,2.658,88,0.004,89,0.004,90,0.484,96,1.104,101,5.187,106,2.074,122,3.119,128,3.073,137,1.316,180,0.842,182,1.784,183,1.386,184,1.563,187,1.115,193,1.3,196,1.721,205,0.494,292,1.286,294,1.343,305,3.963,308,0.814,315,3.454,317,1.749,325,5.207,330,4.381,340,3.224,367,4.422,379,1.342,476,3.355,516,2.085,563,2.756,585,3.369,691,1.761,713,2.182,739,6.871,741,5.207,744,6.527,745,6.167,746,5.207,748,6.955,751,2.34,752,6.463,755,5.207,759,5.207,760,5.207,1108,6.527,2153,9.362,2154,9.362,2155,4.882,2156,7.582,2157,7.176,2158,7.176,2159,5.472,2160,5.472,2161,5.472]],["title/directives/NgxHasFocusDragAndDropAbstractDirective.html",[292,0.723,586,2.242]],["body/directives/NgxHasFocusDragAndDropAbstractDirective.html",[3,0.061,4,0.054,5,0.061,10,0.143,11,0.222,12,0.759,15,1.981,16,0.251,17,0.006,19,0.157,27,0.061,29,1.098,32,1.027,34,1.455,47,1.375,49,1.122,57,3.362,81,2.549,88,0.004,89,0.004,90,0.445,96,1.044,101,5.016,106,1.962,122,3.054,128,2.906,133,2.868,137,1.262,180,0.774,182,1.641,183,1.311,184,1.711,187,1.137,193,1.196,196,1.681,205,0.454,292,1.244,294,1.235,300,1.437,305,3.749,308,1.01,315,3.266,317,1.86,325,4.925,330,4.054,340,2.965,367,4.242,379,1.27,476,3.218,501,2.22,516,2.017,563,2.643,586,3.187,691,1.665,713,2.064,729,7.797,738,4.213,739,6.757,741,4.925,742,7.333,743,7.333,744,6.313,745,5.965,746,4.925,748,6.791,752,6.105,755,4.925,759,4.925,760,4.925,957,4.49,1108,5.898,1306,2.422,1885,2.965,2031,3.865,2032,4.132,2155,4.49,2162,9.496,2163,6.787,2164,6.787,2165,5.032,2166,5.032,2167,5.032,2168,5.032,2169,5.032,2170,5.032,2171,3.865,2172,4.49,2173,6.787,2174,6.787,2175,4.49]],["title/directives/NgxHasPermissionDirective.html",[292,0.723,587,2.298]],["body/directives/NgxHasPermissionDirective.html",[3,0.04,4,0.036,5,0.04,10,0.094,11,0.164,16,0.3,17,0.006,19,0.228,26,1.68,27,0.04,29,1.179,32,1.299,38,2.421,42,1.454,47,1.739,48,4.194,49,1.832,55,2.97,61,1.556,72,2.021,73,2.299,74,1.98,83,2.854,88,0.003,89,0.003,90,0.293,96,0.51,133,1.889,139,1.451,174,0.974,179,0.911,183,0.972,184,1.574,187,1.151,191,2.621,196,1.155,205,0.299,206,1.53,238,1.485,245,0.882,272,0.8,292,1.162,294,0.813,298,1.504,300,1.436,304,1.611,308,1.368,317,1.483,332,1.831,338,2.023,341,2.257,366,2.661,368,3.51,369,2.628,373,2.97,379,0.941,392,2.131,402,3.321,408,3.601,412,2.567,424,1.953,501,1.757,509,2.648,513,1.596,587,2.421,691,2.169,704,2.871,706,4.044,709,2.406,713,2.063,751,1.982,813,1.52,947,2.442,949,4.795,971,3.852,1015,3.581,1059,1.953,1060,2.963,1091,1.831,1092,2.101,1173,1.637,1209,1.953,1228,6.748,1230,6.557,1231,5.571,1232,4.991,1254,4.991,1613,7.345,1762,4.013,1779,3.697,1803,2.406,1807,3.344,1808,3.321,1810,1.557,1811,1.637,1818,2.189,1829,4.013,1846,2.189,1933,3.65,1998,4.411,2000,4.411,2001,5.267,2004,4.923,2008,3.464,2015,4.13,2027,3.65,2033,4.411,2037,2.406,2039,3.321,2040,2.406,2041,3.321,2042,1.777,2054,2.023,2055,2.101,2060,8.534,2063,3.321,2065,2.55,2066,3.863,2068,4.411,2069,4.668,2074,4.668,2082,4.411,2087,5.602,2096,2.546,2097,2.958,2098,2.958,2099,2.722,2106,4.668,2108,5.211,2109,2.958,2112,4.487,2113,3.863,2114,3.863,2176,8.534,2177,3.315,2178,5.03,2179,7.117,2180,7.294,2181,7.294,2182,7.294,2183,6.078,2184,6.078,2185,5.03,2186,5.03,2187,5.03,2188,3.315,2189,3.315,2190,3.315,2191,3.315,2192,3.315,2193,3.315,2194,3.315,2195,3.315,2196,3.315,2197,4.487,2198,3.315,2199,3.315,2200,3.315,2201,3.315,2202,3.315,2203,5.03,2204,3.315,2205,5.03,2206,3.315,2207,3.315,2208,3.315,2209,3.315,2210,3.315,2211,3.315]],["title/pipes/NgxHasPermissionPipe.html",[174,1.404,2212,4.261]],["body/pipes/NgxHasPermissionPipe.html",[3,0.052,4,0.047,5,0.052,11,0.141,12,0.541,16,0.266,17,0.006,19,0.254,26,2.195,27,0.052,29,1.247,32,1.364,34,1.768,38,2.945,42,1.252,44,1.013,48,3.178,49,1.975,55,1.896,57,1.896,61,2.195,73,1.638,81,1.438,83,2.034,88,0.004,89,0.004,90,0.383,96,1.092,109,1.039,139,1.896,162,1.896,174,2.649,176,2.195,179,1.191,180,1.186,183,0.837,184,1.331,185,2.322,187,1.089,193,1.454,196,1.685,203,1.705,204,3.28,205,0.391,206,1.317,238,1.94,245,1.152,268,2.852,272,1.046,300,1.442,308,0.911,317,1.631,366,2.679,368,4.176,369,2.519,373,3.106,379,1.686,392,2.145,399,2.859,408,3.021,412,3.283,424,2.552,501,1.252,513,2.945,683,3.878,691,2.071,694,3.878,713,2.158,721,3.878,813,1.985,907,2.643,936,4.258,939,4.039,947,1.74,966,3.734,1015,4.973,1059,4.791,1060,3.605,1099,3.734,1107,2.859,1152,3.326,1173,2.138,1209,2.552,1230,6.629,1231,6.931,1254,6.931,1379,4.705,1811,2.138,1912,4.44,2001,5.95,2008,3.487,2039,4.039,2041,4.039,2054,2.643,2055,2.745,2068,4.44,2082,3.143,2096,3.326,2116,8.15,2120,5.459,2122,6.678,2125,5.459,2126,5.459,2130,3.28,2131,5.024,2132,5.024,2133,6.878,2134,5.459,2137,3.864,2138,3.864,2139,5.459,2140,5.459,2141,3.28,2142,5.459,2143,3.556,2144,3.556,2145,2.256,2148,3.864,2149,3.326,2150,3.864,2151,3.864,2152,3.326,2176,8.15,2179,5.459,2197,5.459,2212,5.459,2213,4.331,2214,4.331,2215,4.331,2216,4.331,2217,6.119,2218,4.331,2219,4.331,2220,4.331,2221,4.331,2222,4.331,2223,4.331,2224,4.331,2225,4.331,2226,6.119]],["title/classes/NgxI18nAbstractService.html",[90,0.422,2227,3.921]],["body/classes/NgxI18nAbstractService.html",[3,0.091,4,0.082,5,0.091,10,0.215,17,0.006,27,0.091,88,0.005,89,0.005,90,0.669,92,4.799,99,5.167,184,1.307,187,0.915,563,3.019,779,7.111,803,5.815,806,5.228,2227,7.201,2228,8.77,2229,7.572,2230,7.572]],["title/interfaces/NgxI18nConfiguration.html",[0,0.122,2231,3.466]],["body/interfaces/NgxI18nConfiguration.html",[0,0.159,2,1.003,3,0.075,4,0.067,5,0.102,10,0.176,11,0.254,12,0.827,16,0.299,17,0.006,27,0.075,32,1.177,88,0.005,89,0.005,152,1.434,200,4.58,237,3.564,333,4.168,379,1.454,823,5.133,996,3.941,1148,5.367,1358,5.367,1408,3.564,1494,5.246,2122,6.384,2231,5.642,2232,6.2,2233,7.312,2234,9.756,2235,8.905,2236,7.312,2237,7.944,2238,6.936,2239,6.936,2240,8.349,2241,7.774,2242,6.384,2243,4.744,2244,7.774,2245,5.642,2246,7.774,2247,6.936,2248,7.312,2249,7.774,2250,7.774,2251,6.936,2252,7.774,2253,7.774]],["title/components/NgxI18nEmptyComponent.html",[109,0.811,540,2.358]],["body/components/NgxI18nEmptyComponent.html",[3,0.064,4,0.057,5,0.064,17,0.006,19,0.165,27,0.064,28,1.491,47,1.421,55,3.071,64,4.779,88,0.004,89,0.004,90,0.467,96,0.814,106,2.028,109,1.482,179,1.454,180,1.533,182,2.287,205,0.477,292,0.8,293,2.545,294,1.297,298,3.062,361,2.545,478,2.61,479,2.762,480,2,481,2.04,484,3.556,485,2.878,507,4.317,509,1.755,514,2.61,515,3.463,516,1.721,517,4.25,518,2.68,519,2.68,520,2.61,521,2.315,522,2.68,523,2.61,524,3.052,525,2.68,526,2.61,527,2.68,528,3.556,529,2.68,530,3.463,531,2.68,532,2.61,533,2.545,534,2.61,535,3.591,536,2.68,537,4.25,538,2.61,539,2.545,540,4.14,541,3.697,542,2.68,543,2.545,544,2.545,545,2.68,546,2.424,547,2.68,548,2.61,549,2.68,550,2.61,551,3.556,552,2.61,553,2.61,554,2.68,555,2.61,556,2.68,557,2.61,558,2.545,559,2.68,560,2.68,561,2.68,562,2.368,563,1.82,564,2.483,565,2.483,566,2.68,567,2.545,568,2.68,569,2.68,570,2.68,571,2.483,572,2.545,573,2.68,574,2.368,575,2.483,576,2.68,577,2.68,578,2.424,579,2.545,580,2.68,581,2.545,582,2.68,583,2.545,584,2.68,585,2.483,586,2.483,587,2.545,588,2.68,589,2.545,590,2.68,591,2,592,2.545,593,2.483,594,2.545,595,2.483,596,2.483,597,2.483,598,2.169,599,2.483,600,2.68,601,2.368,602,2.68,603,2.545,604,2.68,605,2.315,606,2.483,607,2.68,608,2.483,609,2.68,610,2.545,611,2.68,612,2.68,2254,5.287,2255,5.287,2256,7.015,2257,5.76,2258,7.015]],["title/injectables/NgxI18nLoadingService.html",[259,1.478,2259,3.668]],["body/injectables/NgxI18nLoadingService.html",[3,0.047,4,0.042,5,0.047,10,0.111,11,0.185,12,0.591,16,0.255,17,0.006,19,0.229,27,0.047,32,1.233,34,2.124,41,2.602,44,2.015,47,1.15,49,1.959,61,2.521,66,2.542,73,1.475,88,0.004,89,0.004,90,0.345,96,1.03,114,3.568,122,2.754,128,3.691,135,3.013,137,1.284,152,1.124,180,1.03,183,1.096,184,1.666,187,1.093,193,1.59,196,1.484,205,0.352,259,1.756,261,1.746,268,2.773,272,0.941,274,3.303,300,1.754,308,1.213,317,1.292,333,2.09,347,1.877,369,2.433,392,2.857,408,2.802,412,3.083,431,2.031,432,4.083,472,5.063,476,2.378,502,3.486,513,2.731,541,1.831,781,2.669,811,2.222,829,2.574,907,3.463,966,3.463,1175,2.154,1176,1.419,1359,4.66,1494,3.942,1502,5.739,1603,3.828,1609,3.042,1985,4.619,2008,2.222,2242,4.66,2245,4.118,2259,4.359,2260,7.509,2261,7.509,2262,3.899,2263,6.69,2264,6.69,2265,6.69,2266,6.69,2267,6.69,2268,6.69,2269,5.675,2270,5.675,2271,6.555,2272,5.675,2273,7.348,2274,5.675,2275,3.899,2276,5.893,2277,4.359,2278,5.675,2279,6.691,2280,3.899,2281,5.063,2282,3.899,2283,5.063,2284,5.675,2285,3.899,2286,5.675,2287,6.691,2288,3.899,2289,5.675,2290,3.899,2291,5.675,2292,3.899,2293,5.063,2294,3.899,2295,5.675,2296,5.675,2297,5.675,2298,5.675,2299,5.675,2300,5.675,2301,5.675,2302,5.675,2303,5.675,2304,5.675,2305,3.899,2306,3.899,2307,3.899,2308,3.899,2309,5.675,2310,2.692,2311,3.899,2312,2.692,2313,3.479,2314,3.899,2315,3.899,2316,5.675,2317,6.69,2318,2.031,2319,3.899,2320,3.899,2321,3.479,2322,3.479,2323,3.202,2324,3.899,2325,3.899]],["title/modules/NgxI18nModule.html",[2326,3.921,2327,3.668]],["body/modules/NgxI18nModule.html",[3,0.069,4,0.061,5,0.069,12,0.651,15,3.213,16,0.24,17,0.006,19,0.295,27,0.069,42,2.359,44,2.018,47,1.492,49,1.641,61,1.761,88,0.005,89,0.005,90,0.503,118,3.354,180,1.133,183,1.1,184,1.271,187,0.889,193,1.749,196,1.4,205,0.514,250,5.586,255,3.348,308,0.847,317,1.422,501,2.128,506,2.811,524,1.792,797,4.493,1010,3.245,1123,7.085,1450,5.468,1890,4.412,2231,6.261,2327,6.627,2328,4.372,2329,5.079,2330,7.363,2331,5.693,2332,7.751,2333,5.693,2334,9.315,2335,8.936,2336,7.363,2337,5.693,2338,5.693,2339,8.629,2340,7.281,2341,8.161,2342,4.372,2343,4.674,2344,6.701,2345,7.698,2346,6.046,2347,5.693,2348,6.268,2349,6.046,2350,5.693,2351,5.079,2352,4.674,2353,5.693,2354,5.693,2355,5.079,2356,5.693,2357,7.363,2358,6.569,2359,7.363,2360,5.693,2361,5.693,2362,5.693,2363,5.693]],["title/classes/NgxI18nMultiTranslationHttpLoader.html",[90,0.422,2344,3.921]],["body/classes/NgxI18nMultiTranslationHttpLoader.html",[3,0.054,4,0.048,5,0.076,10,0.127,11,0.204,12,0.554,16,0.255,17,0.006,19,0.283,27,0.054,32,0.948,34,1.81,36,2.733,37,2.117,38,2.155,42,2.261,44,2.048,49,2.072,61,1.385,68,2.079,83,2.102,88,0.004,89,0.004,90,0.396,92,2.837,96,0.689,106,1.81,114,1.661,118,2.638,134,2.732,135,2.417,152,1.228,180,0.964,183,1.21,184,1.247,187,0.945,193,1.488,195,3.249,196,0.851,205,0.404,206,1.905,233,2.473,268,2.123,272,1.081,274,4.212,300,1.672,308,0.932,358,2.956,369,2.378,379,1.351,384,3.439,426,2.4,431,2.332,501,1.294,506,2.21,524,1.409,721,2.837,769,2.787,806,4.324,810,2.956,811,3.569,813,2.052,822,2.638,823,4.135,907,2.732,947,2.516,1002,2.552,1128,3.249,1134,3.994,1148,3.091,1173,2.21,1190,3.676,1236,3.994,1269,2.155,1306,2.155,1408,2.052,1417,3.439,1486,5.165,1494,5.35,1502,5.57,1591,3.676,1603,3.763,1610,5.931,1788,4.545,1890,3.566,1939,3.994,1985,3.091,2231,5.242,2238,5.588,2239,3.994,2242,3.676,2245,4.545,2247,3.994,2257,3.676,2259,5.548,2276,4.769,2277,3.439,2283,5.588,2287,3.676,2310,3.091,2321,3.994,2322,3.994,2327,4.81,2332,7.006,2340,6.444,2342,3.439,2343,3.676,2344,5.143,2349,3.676,2352,5.143,2364,8.234,2365,8.234,2366,4.477,2367,7.224,2368,5.588,2369,4.477,2370,7.224,2371,6.263,2372,5.588,2373,4.477,2374,6.263,2375,4.477,2376,5.588,2377,6.263,2378,5.588,2379,3.994,2380,4.477,2381,4.477,2382,4.477,2383,4.477,2384,4.477,2385,4.477,2386,8.234,2387,4.477,2388,4.477,2389,4.477,2390,4.477,2391,4.477,2392,3.994,2393,6.263,2394,4.477,2395,4.477,2396,4.477,2397,3.439,2398,3.994,2399,4.477,2400,4.477,2401,3.994,2402,3.439,2403,4.477,2404,4.477,2405,4.477,2406,4.477,2407,4.477,2408,4.477,2409,4.477,2410,3.676,2411,4.477,2412,4.477,2413,4.477,2414,4.477,2415,3.994,2416,4.477,2417,4.477,2418,4.477,2419,3.994,2420,2.837,2421,4.477,2422,4.477,2423,4.477,2424,4.477]],["title/injectables/NgxI18nRootService.html",[259,1.478,2425,3.921]],["body/injectables/NgxI18nRootService.html",[3,0.04,4,0.054,5,0.04,7,2.246,10,0.094,11,0.164,12,0.536,16,0.284,17,0.006,19,0.227,27,0.04,31,3.64,32,1.16,34,2.105,37,2.461,42,0.955,44,1.863,47,1.016,49,1.992,61,2.465,66,2.246,73,1.897,88,0.003,89,0.003,90,0.292,96,0.933,99,2.955,106,1.957,133,1.882,137,1.53,152,1.339,162,1.446,180,0.933,183,0.969,184,1.638,187,1.091,193,1.441,196,1.515,203,2.666,205,0.298,233,2.77,234,3.701,259,1.552,261,1.479,268,2.342,272,0.797,300,1.741,308,1.367,317,1.481,332,2.77,369,2.424,379,0.938,408,3.785,412,2.755,425,2.093,428,2.18,467,2.016,492,4.118,501,0.955,502,4.38,506,1.631,541,2.355,649,2.689,703,3.433,713,2.718,779,5.888,803,2.537,806,6.952,810,2.18,819,2.414,820,2.414,821,5.41,831,2.016,947,2.436,966,4.132,992,1.826,1100,2.28,1173,1.631,1175,1.824,1176,1.202,1219,4.126,1221,3.311,1240,2.946,1244,3.251,1269,4.193,1379,4.132,1402,3.061,1404,4.022,1405,3.159,1408,2.299,1417,2.537,1603,1.721,1609,1.77,1775,4.186,1871,2.093,1885,3.572,1890,1.631,2031,2.537,2032,2.712,2063,4.003,2231,4.4,2233,4.979,2236,4.979,2237,5.41,2277,5.201,2312,2.28,2343,2.712,2349,2.712,2352,4.118,2376,4.475,2410,2.712,2420,3.179,2425,4.118,2426,9.111,2427,8.128,2428,3.303,2429,6.064,2430,6.064,2431,6.064,2432,5.016,2433,6.772,2434,5.016,2435,5.016,2436,5.016,2437,5.016,2438,3.303,2439,6.772,2440,3.303,2441,3.419,2442,5.061,2443,5.016,2444,3.303,2445,7.974,2446,5.016,2447,3.303,2448,6.064,2449,5.016,2450,5.016,2451,3.303,2452,4.118,2453,3.303,2454,3.303,2455,5.016,2456,3.303,2457,3.303,2458,3.303,2459,3.303,2460,3.303,2461,3.303,2462,2.946,2463,3.303,2464,3.303,2465,6.772,2466,3.303,2467,3.303,2468,3.303,2469,3.303,2470,3.303,2471,7.281,2472,3.303,2473,3.64,2474,2.946,2475,5.016,2476,3.303,2477,3.303,2478,3.303,2479,3.303,2480,3.303,2481,3.303,2482,3.303,2483,3.303,2484,3.303,2485,2.946]],["title/injectables/NgxI18nService.html",[259,1.478,2348,3.668]],["body/injectables/NgxI18nService.html",[3,0.052,4,0.046,5,0.052,10,0.122,11,0.199,12,0.766,16,0.275,17,0.006,19,0.253,27,0.052,32,1.071,34,2.436,40,7.009,44,2.026,49,0.961,76,3.554,88,0.004,89,0.004,90,0.381,96,1.184,99,3.592,137,1.455,152,1.395,180,1.184,183,1.178,184,1.652,187,1.102,193,1.929,196,1.836,205,0.389,206,1.311,207,3.539,245,1.147,259,1.887,261,1.93,268,2.547,272,1.04,300,1.577,308,1.254,317,0.832,343,2.074,369,2.242,379,1.727,501,1.246,524,2.228,704,3.484,713,2.34,769,1.663,779,5.434,797,3.721,803,3.31,806,6.694,1176,2.219,1219,4.26,1269,2.935,1379,4.695,1385,5.44,1494,5.215,1502,5.105,1603,3.177,2227,5.007,2233,5.81,2236,5.81,2271,3.845,2276,4.025,2342,3.31,2348,4.683,2368,5.44,2425,5.81,2427,3.845,2445,5.44,2486,4.31,2487,7.076,2488,7.076,2489,8.851,2490,7.076,2491,6.097,2492,6.097,2493,4.31,2494,6.097,2495,4.31,2496,4.31,2497,4.31,2498,6.097,2499,4.31,2500,6.097,2501,4.31,2502,6.097,2503,4.31,2504,6.097,2505,4.31,2506,6.097,2507,4.31,2508,4.31,2509,4.31,2510,4.31,2511,4.31,2512,4.31,2513,4.31,2514,4.31,2515,4.31,2516,4.31,2517,6.097,2518,6.097,2519,4.31,2520,4.31,2521,4.31,2522,4.31,2523,4.31]],["title/injectables/NgxI18nTranslationLoaderResolver.html",[259,1.478,2346,3.921]],["body/injectables/NgxI18nTranslationLoaderResolver.html",[3,0.068,4,0.061,5,0.068,10,0.16,11,0.239,16,0.239,17,0.006,19,0.268,27,0.068,32,1.108,42,1.631,44,1.319,47,1.483,49,1.986,55,2.47,88,0.005,89,0.005,90,0.499,96,0.868,114,2.093,137,0.927,183,1.414,184,1.403,187,0.982,196,1.072,205,0.509,253,4.333,259,2.265,261,2.527,268,2.388,271,2.615,272,1.362,300,1.708,308,1.089,369,2.429,392,2.566,501,1.631,506,2.785,691,1.796,769,2.824,770,4.639,811,4.631,814,3.724,815,5.15,823,3.724,947,2.941,1140,5.312,1176,2.664,1221,4.832,1379,5.248,1390,5.312,1502,5.476,1592,6.01,1609,3.924,2259,6.843,2276,6.136,2277,4.333,2281,6.53,2326,6.01,2328,5.622,2345,6.53,2346,7.061,2348,6.843,2372,6.53,2524,5.641,2525,5.622,2526,7.32,2527,6.01,2528,7.32,2529,8.599,2530,7.249,2531,7.249,2532,6.53,2533,8.126,2534,8.126,2535,8.599,2536,5.641,2537,5.641,2538,7.32,2539,5.641,2540,6.53,2541,7.32,2542,5.641,2543,5.641]],["title/interfaces/NgxImageMarkerBase.html",[0,0.122,2544,3.297]],["body/interfaces/NgxImageMarkerBase.html",[0,0.228,2,0.915,3,0.068,4,0.061,5,0.068,10,0.16,11,0.239,12,0.648,15,2.886,16,0.291,17,0.006,19,0.254,27,0.112,29,1.186,37,1.912,81,2.434,88,0.005,89,0.005,137,1.205,171,1.858,190,2.774,194,2.099,268,2.391,272,1.366,300,1.058,308,1.281,317,1.093,392,2.57,643,3.388,691,1.996,713,2.23,718,2.701,781,2.192,789,2.593,824,4.05,996,2.867,1127,2.947,1462,2.656,1507,5.054,1807,4.463,2042,3.032,2141,3.032,2544,5.942,2545,3.905,2546,3.905,2547,6.14,2548,5.942,2549,5.321,2550,4.475,2551,4.841,2552,3.734,2553,5.975,2554,4.841,2555,3.585,2556,2.947,2557,4.841,2558,3.734,2559,3.224,2560,3.905,2561,4.104,2562,5.253,2563,3.905,2564,4.104,2565,4.104,2566,3.905,2567,5.062,2568,4.104,2569,4.841,2570,4.647,2571,4.841,2572,4.647,2573,3.585]],["title/components/NgxImageMarkerComponent.html",[109,0.811,543,2.298]],["body/components/NgxImageMarkerComponent.html",[3,0.031,4,0.028,5,0.031,10,0.074,11,0.136,12,0.691,16,0.267,17,0.006,19,0.203,27,0.031,28,1.384,32,1.147,37,2.201,42,1.505,44,0.609,47,1.535,49,1.825,55,1.14,61,1.611,72,1.674,73,0.985,88,0.003,89,0.003,90,0.368,96,0.916,109,1.106,133,1.484,174,1.225,179,0.716,180,1.411,183,0.805,184,1.635,187,1.133,193,0.619,194,2.899,196,1.132,205,0.235,206,1.267,234,1.589,238,2.333,272,0.629,292,0.394,293,1.253,294,0.639,298,2.957,300,1.81,304,1.335,308,1.218,317,1.409,319,4.156,320,2.877,334,1.784,341,2.149,361,1.253,366,2.28,369,2.376,373,2.606,379,1.114,392,2.435,399,3.439,411,2.323,412,2.866,478,1.286,479,1.64,480,0.985,481,1.005,484,2.112,485,1.709,501,0.753,506,1.286,507,3.343,509,1.383,513,2.005,514,1.286,515,2.057,516,1.46,517,3.018,518,1.32,519,1.32,520,1.286,521,1.14,522,1.32,523,1.286,524,2.701,525,1.32,526,1.286,527,1.32,528,2.112,529,1.32,530,2.057,531,1.32,532,1.286,533,1.253,534,1.286,535,2.549,536,1.32,537,3.018,538,1.286,539,1.253,540,1.286,541,1.223,542,1.32,543,2.865,544,4.388,545,1.32,546,1.194,547,1.32,548,1.286,549,1.32,550,1.286,551,2.112,552,1.286,553,1.286,554,1.32,555,1.286,556,1.32,557,1.286,558,1.253,559,1.32,560,1.32,561,1.32,562,1.166,563,0.896,564,1.223,565,1.223,566,1.32,567,1.253,568,1.32,569,1.32,570,1.32,571,1.223,572,1.253,573,1.32,574,1.166,575,1.223,576,1.32,577,1.32,578,1.194,579,1.253,580,1.32,581,1.253,582,1.32,583,1.253,584,1.32,585,1.223,586,1.223,587,1.253,588,1.32,589,1.253,590,1.32,591,0.985,592,1.253,593,1.223,594,1.253,595,1.223,596,1.223,597,1.223,598,1.068,599,1.223,600,1.32,601,1.166,602,1.32,603,1.253,604,1.32,605,1.14,606,1.223,607,1.32,608,1.223,609,1.32,610,1.253,611,1.32,612,1.32,623,3.507,631,2.375,643,1.64,649,3.723,652,2.171,661,2.446,691,1.278,704,2.343,713,1.81,718,1.976,721,1.65,738,3.184,770,1.65,781,1.557,813,1.194,819,1.253,820,1.253,897,3.179,935,3.78,939,2.751,940,3.2,970,2,992,1.896,1013,3.717,1049,1.534,1081,1.798,1091,2.301,1127,2.171,1150,3.596,1244,1.396,1306,2.507,1370,3.069,1400,3.717,1402,2.543,1404,2.877,1405,1.357,1408,1.194,1409,2,1425,2.446,1507,3.191,1603,2.171,1609,1.396,1775,1.798,1779,3.961,1796,3.024,1807,3.674,1811,1.286,1818,3.439,1825,1.719,1885,1.534,2042,2.234,2149,3.2,2172,2.323,2547,4.298,2550,4.45,2553,5.613,2554,1.719,2555,1.65,2557,1.719,2559,2.968,2560,1.798,2563,1.798,2566,4.795,2567,1.798,2569,4.585,2571,1.719,2573,3.301,2574,9.411,2575,8.396,2576,2.604,2577,3.717,2578,4.277,2579,4.167,2580,6.511,2581,5.208,2582,7.577,2583,6.511,2584,5.208,2585,5.208,2586,6.511,2587,5.208,2588,6.511,2589,6.511,2590,6.945,2591,5.953,2592,3.717,2593,4.167,2594,4.167,2595,4.167,2596,4.277,2597,4.167,2598,4.167,2599,5.208,2600,4.167,2601,4.647,2602,4.167,2603,4.167,2604,4.277,2605,4.167,2606,2.604,2607,3.421,2608,2.604,2609,4.167,2610,2.604,2611,2.604,2612,2.604,2613,3.421,2614,2.604,2615,4.167,2616,2.604,2617,4.277,2618,4.167,2619,2.604,2620,2.604,2621,2.604,2622,2.604,2623,4.167,2624,2.604,2625,2.138,2626,2.323,2627,2.323,2628,2.323,2629,2.323,2630,4.167,2631,6.511,2632,2.604,2633,4.167,2634,2.604,2635,2.604,2636,2.604,2637,2.604,2638,2.604,2639,2.604,2640,2.604,2641,4.167,2642,2,2643,4.167,2644,2.604,2645,2.604,2646,2.604,2647,2.604,2648,2.604,2649,2.323,2650,2.604,2651,2.604,2652,2.604,2653,2.604,2654,4.167,2655,2.604,2656,4.167,2657,2.604]],["title/interfaces/NgxImageMarkerConfiguration.html",[0,0.122,2558,3.153]],["body/interfaces/NgxImageMarkerConfiguration.html",[0,0.221,2,0.832,3,0.062,4,0.055,5,0.062,10,0.146,11,0.225,12,0.849,16,0.311,17,0.006,19,0.242,27,0.11,29,1.439,37,2.328,81,2.753,88,0.004,89,0.004,96,0.792,137,1.363,144,3.589,171,1.745,190,2.606,194,1.909,268,2.283,272,1.242,300,1.289,308,1.375,317,0.994,392,2.722,643,2.025,691,2.183,713,2.362,718,2.87,781,2.322,789,2.359,824,3.805,996,3.492,1127,2.68,1462,2.416,1507,4.951,1807,4.471,2042,2.758,2141,2.758,2544,5.361,2545,3.552,2546,3.552,2547,6,2548,5.726,2549,4.999,2550,4.204,2551,4.548,2552,3.396,2553,6.084,2554,5.475,2555,3.26,2556,2.68,2557,5.475,2558,4.548,2559,3.926,2560,5.726,2561,4.999,2562,5.636,2563,5.726,2564,4.999,2565,6.018,2566,5.726,2567,5.361,2568,4.999,2569,5.875,2570,4.365,2571,4.548,2572,4.365,2573,3.26]],["title/interfaces/NgxImageMarkerEdit.html",[0,0.122,2572,3.027]],["body/interfaces/NgxImageMarkerEdit.html",[0,0.229,2,0.922,3,0.069,4,0.061,5,0.069,10,0.162,11,0.241,12,0.651,16,0.282,17,0.006,19,0.255,27,0.112,29,1.192,37,1.927,81,2.446,88,0.005,89,0.005,137,1.211,171,2.069,190,2.788,194,2.115,268,2.628,272,1.376,300,1.066,308,1.285,317,1.101,392,2.583,643,2.244,691,2.003,713,2.241,718,2.711,781,2.203,789,2.613,824,4.07,996,2.889,1127,2.97,1462,2.677,1507,5.062,1807,4.411,2042,3.056,2141,3.056,2544,5.96,2545,3.935,2546,3.935,2547,5.902,2548,5.96,2549,5.347,2550,4.497,2551,4.865,2552,3.763,2553,5.984,2554,4.865,2555,3.613,2556,2.97,2557,4.865,2558,3.763,2559,3.249,2560,3.935,2561,4.136,2562,5.268,2563,3.935,2564,4.136,2565,4.136,2566,3.935,2567,5.088,2568,4.136,2569,4.865,2570,4.67,2571,5.902,2572,5.175,2573,3.613]],["title/injectables/NgxImageMarkerService.html",[259,1.478,2617,3.921]],["body/injectables/NgxImageMarkerService.html",[3,0.034,4,0.03,5,0.034,10,0.08,11,0.145,12,0.598,16,0.235,17,0.006,19,0.235,27,0.034,32,0.941,34,2.418,37,3.12,42,2.173,44,1.956,49,2.147,50,1.718,54,2.611,55,1.94,61,2.326,74,1.108,88,0.003,89,0.003,90,0.392,96,1.106,102,3.642,133,1.604,135,1.71,137,1.317,152,1.034,162,1.94,180,1.041,183,0.856,184,0.946,187,0.941,193,1.607,194,3.156,196,1.366,205,0.254,206,0.856,223,2.162,238,3.589,240,1.943,259,1.371,261,1.261,268,2.356,271,2.185,272,0.68,300,1.535,308,0.66,311,1.922,317,0.856,332,2.448,333,1.509,339,5.106,366,1.94,369,2.41,373,2.723,379,0.829,392,0.987,412,2.559,476,2.606,501,0.814,507,1.355,516,2.187,524,2.367,543,2.133,544,4.698,639,1.39,643,2.663,670,4.128,704,1.108,718,2.064,721,1.784,733,2.311,751,1.445,769,1.71,781,2.329,789,2.513,792,4.254,814,1.858,815,3.474,826,2.162,829,4.743,908,2.247,992,2.264,996,2.247,1049,3.664,1091,3.435,1127,2.309,1175,1.555,1176,1.995,1244,1.509,1269,2.133,1282,2.311,1342,3.216,1358,1.943,1370,3.23,1390,2.043,1402,2.705,1404,1.555,1405,1.466,1408,1.29,1425,2.081,1462,2.081,1464,2.043,1507,2.939,1572,4.501,1603,1.466,1609,1.509,1614,1.858,1619,4.211,1652,2.311,1779,3.642,1807,4.254,1811,2.188,1825,2.926,1827,2.043,1872,2.705,1885,2.611,2099,2.311,2141,3.334,2547,3.619,2550,3.346,2551,1.858,2552,3.619,2553,6.204,2555,1.784,2558,5.416,2570,3.941,2571,4.743,2572,3.941,2573,3.474,2575,7.149,2577,3.954,2601,8.189,2604,4.501,2607,5.106,2617,3.639,2658,8.014,2659,2.815,2660,4.432,2661,5.482,2662,5.482,2663,4.432,2664,4.432,2665,5.482,2666,2.815,2667,8.014,2668,8.914,2669,2.815,2670,7.184,2671,2.815,2672,2.815,2673,4.432,2674,6.219,2675,2.815,2676,4.432,2677,4.432,2678,7.184,2679,2.815,2680,2.815,2681,2.815,2682,2.815,2683,2.815,2684,2.815,2685,2.815,2686,2.815,2687,2.815,2688,2.815,2689,2.815,2690,2.815,2691,2.815,2692,2.815,2693,4.432,2694,4.432,2695,2.815,2696,5.482,2697,6.219,2698,4.432,2699,4.432,2700,2.815,2701,4.432,2702,2.815,2703,2.815,2704,2.815,2705,2.815,2706,2.815,2707,2.162,2708,2.815,2709,2.815,2710,4.432,2711,2.815,2712,2.815,2713,2.815,2714,2.511,2715,2.311,2716,2.815,2717,2.815,2718,2.815,2719,2.815,2720,2.815,2721,2.815,2722,2.511,2723,2.815,2724,2.815,2725,2.815,2726,2.815,2727,5.482,2728,2.815,2729,5.482,2730,2.815,2731,2.815,2732,2.815,2733,2.815,2734,2.815,2735,1.858,2736,2.815,2737,2.815,2738,2.815,2739,2.815,2740,2.309,2741,4.432,2742,3.954,2743,4.432,2744,2.815,2745,2.311,2746,2.815,2747,2.815,2748,2.815,2749,2.815]],["title/interfaces/NgxImageMarkerTypes.html",[0,0.122,2557,3.153]],["body/interfaces/NgxImageMarkerTypes.html",[0,0.227,2,0.908,3,0.068,4,0.06,5,0.068,10,0.159,11,0.238,12,0.645,16,0.29,17,0.006,19,0.253,27,0.112,29,1.18,37,1.897,81,2.422,88,0.005,89,0.005,96,0.864,137,1.199,171,1.849,190,2.76,194,2.707,268,2.383,272,1.355,300,1.05,308,1.277,317,1.084,392,2.558,643,2.21,691,1.989,713,2.219,718,2.849,781,2.423,789,2.573,824,4.029,996,2.845,1127,2.924,1462,3.426,1507,4.888,1807,4.501,2042,3.009,2141,3.009,2544,5.596,2545,3.875,2546,3.875,2547,6.281,2548,5.925,2549,5.294,2550,4.452,2551,4.816,2552,3.705,2553,6.03,2554,4.816,2555,3.557,2556,3.801,2557,5.351,2558,3.705,2559,3.199,2560,3.875,2561,4.073,2562,5.237,2563,3.875,2564,4.073,2565,4.073,2566,3.875,2567,5.037,2568,4.073,2569,4.816,2570,4.624,2571,4.816,2572,4.624,2573,3.557]],["title/interfaces/NgxImageMarkerView.html",[0,0.122,2570,3.027]],["body/interfaces/NgxImageMarkerView.html",[0,0.229,2,0.922,3,0.069,4,0.061,5,0.069,10,0.162,11,0.241,12,0.651,16,0.282,17,0.006,19,0.255,27,0.112,29,1.192,37,1.927,81,2.446,88,0.005,89,0.005,137,1.211,171,2.069,190,2.788,194,2.115,268,2.628,272,1.376,300,1.066,308,1.285,317,1.101,392,2.583,643,2.244,691,2.003,713,2.241,718,2.711,781,2.203,789,2.613,824,4.07,996,2.889,1127,2.97,1462,2.677,1507,5.062,1807,4.411,2042,3.056,2141,3.056,2544,5.96,2545,3.935,2546,3.935,2547,5.902,2548,5.96,2549,5.347,2550,4.497,2551,4.865,2552,3.763,2553,5.984,2554,4.865,2555,3.613,2556,2.97,2557,4.865,2558,3.763,2559,3.249,2560,3.935,2561,4.136,2562,5.268,2563,3.935,2564,4.136,2565,4.136,2566,3.935,2567,5.088,2568,4.136,2569,4.865,2570,5.175,2571,5.902,2572,4.67,2573,3.613]],["title/directives/NgxIsAuthenticatedDirective.html",[292,0.723,589,2.298]],["body/directives/NgxIsAuthenticatedDirective.html",[3,0.048,4,0.043,5,0.048,10,0.113,11,0.188,16,0.293,17,0.006,19,0.246,27,0.048,29,0.93,32,1.28,38,2.769,42,1.148,47,1.166,48,4.3,49,1.652,55,2.519,61,1.78,73,1.503,82,5.553,83,3.175,88,0.004,89,0.004,90,0.351,96,0.612,174,1.168,179,1.093,183,1.111,184,1.524,187,1.143,191,2.07,196,1.286,205,0.359,206,1.75,238,1.78,245,1.057,272,0.959,292,1.241,294,0.975,298,1.72,300,1.265,304,1.843,308,1.259,317,1.584,324,3.264,338,2.425,341,2.092,366,2.961,368,3.786,369,2.63,373,3.246,392,2.371,412,2.804,424,2.341,501,1.955,509,2.611,513,1.912,589,2.769,691,2.075,704,3.097,706,4.288,713,2.057,813,1.822,947,2.717,949,4.535,971,4.286,1132,5.585,1173,1.962,1209,2.341,1234,6.033,1250,5.133,1754,5.553,1762,4.465,1779,3.758,1803,2.883,1807,1.822,1808,3.798,1810,1.866,1811,1.962,1829,3.798,1933,4.175,1998,4.907,2000,4.907,2001,5.585,2004,5.379,2008,3.854,2027,4.175,2033,4.907,2037,4.175,2039,3.798,2040,2.883,2041,3.798,2042,2.13,2054,2.425,2055,2.518,2063,3.798,2065,2.916,2066,4.419,2068,4.907,2069,5.194,2074,5.194,2082,4.907,2087,6.042,2106,5.194,2108,5.694,2113,5.194,2114,4.419,2310,2.743,2750,9.512,2751,9.512,2752,3.974,2753,8.459,2754,7.867,2755,5.753,2756,5.753,2757,5.753,2758,3.974,2759,3.974,2760,3.974,2761,3.974,2762,3.974,2763,3.974,2764,3.974,2765,3.974,2766,3.974,2767,3.974,2768,6.763,2769,3.974,2770,3.974,2771,3.974,2772,3.974]],["title/injectables/NgxMediaQueryService.html",[259,1.478,2773,4.261]],["body/injectables/NgxMediaQueryService.html",[3,0.043,4,0.039,5,0.043,10,0.102,11,0.174,12,0.472,16,0.258,17,0.006,19,0.199,27,0.043,29,0.863,32,1.344,34,1.543,36,1.358,42,2.181,44,1.248,61,2.708,68,2.344,74,2.78,88,0.003,89,0.003,90,0.317,96,0.981,102,2.707,106,1.543,134,5.643,139,1.572,152,1.086,180,0.822,183,1.031,184,1.485,187,1.057,193,1.269,196,1.342,205,0.324,206,1.092,233,3.9,234,3.259,238,2.391,259,1.652,261,1.608,268,2.218,271,2.974,272,0.867,300,1.73,308,1.123,317,1.458,328,2.115,349,4.024,350,3.38,366,2.338,368,2.57,369,2.46,373,3.091,377,4.475,383,3.686,408,3.486,412,2.02,425,2.275,428,2.37,431,1.87,432,3.259,476,2.672,501,1.037,649,3.785,769,3.568,770,2.275,784,2.478,810,3.525,811,5.398,953,2.115,961,4.661,968,7.294,1091,4.369,1099,2.191,1175,1.983,1176,1.307,1244,1.924,1370,3.756,1402,3.259,1404,1.983,1405,1.87,1409,4.101,1577,6.727,1581,2.947,1619,6.292,1652,2.947,1825,3.525,1932,3.202,2144,5.798,2248,8.137,2397,4.101,2415,4.764,2473,4.627,2525,2.757,2642,2.757,2745,2.947,2773,6.733,2774,8.601,2775,3.589,2776,9.734,2777,9.247,2778,4.764,2779,3.043,2780,5.339,2781,5.339,2782,7.061,2783,6.376,2784,6.376,2785,6.376,2786,6.376,2787,6.376,2788,5.339,2789,3.589,2790,5.339,2791,5.339,2792,4.764,2793,3.589,2794,3.875,2795,5.339,2796,3.589,2797,5.339,2798,3.589,2799,7.547,2800,3.589,2801,3.589,2802,3.589,2803,3.589,2804,3.589,2805,3.202,2806,3.589,2807,3.589,2808,3.589,2809,3.589,2810,3.589,2811,3.589,2812,3.589,2813,3.589,2814,3.589,2815,5.339,2816,5.339,2817,3.589,2818,5.339,2819,5.339,2820,3.589,2821,3.589,2822,3.589,2823,3.589,2824,3.589,2825,3.589,2826,3.589,2827,3.589,2828,3.589,2829,3.589,2830,3.589,2831,3.589,2832,3.589,2833,3.589,2834,3.589,2835,3.589,2836,3.589,2837,3.589,2838,3.589,2839,3.589,2840,3.589]],["title/directives/NgxModalAbstractComponent.html",[292,0.723,591,1.807]],["body/directives/NgxModalAbstractComponent.html",[3,0.056,4,0.05,5,0.056,10,0.131,11,0.209,12,0.809,16,0.209,17,0.006,19,0.229,27,0.056,28,1.914,32,1.261,42,2.293,49,1.638,68,1.535,73,1.749,88,0.004,89,0.004,90,0.409,96,0.712,122,2.816,135,1.784,136,3.479,137,1.053,183,1.237,184,1.697,187,1.148,196,1.218,205,0.417,206,1.948,249,3.192,271,2.235,292,0.969,294,1.134,300,1.799,304,2.052,305,3.538,308,1.181,315,2.225,317,1.419,319,4.748,320,4.76,340,2.724,341,2.455,347,3.818,349,4.521,357,5.333,358,3.052,369,2.293,377,2.93,426,3.434,453,4.228,476,3.079,501,1.336,516,2.115,563,2.204,591,2.78,623,4.674,625,6.093,627,4.919,643,2.893,644,5.644,647,4.919,661,4.23,662,4.253,718,1.535,738,3.637,784,3.192,822,2.724,831,2.822,860,4.253,897,4.485,921,5.259,998,3.355,1002,2.635,1244,2.479,1370,4.329,1402,3.909,1404,2.554,1405,2.409,1408,2.12,1574,4.741,1614,3.052,2063,3.052,2141,2.479,2649,4.125,2707,4.919,2740,3.337,2841,4.623,2842,5.259,2843,8.159,2844,8.159,2845,6.405,2846,6.405,2847,6.405,2848,6.405,2849,4.623,2850,4.623,2851,7.933,2852,5.714,2853,4.623,2854,4.623,2855,4.623,2856,2.479,2857,4.623,2858,3.796,2859,3.192,2860,3.551,2861,3.796,2862,4.125,2863,3.796,2864,4.919,2865,2.635,2866,4.623,2867,4.623,2868,4.623,2869,4.623,2870,3.796]],["title/interfaces/NgxModalAriaLabelBaseOptions.html",[0,0.122,2871,2.722]],["body/interfaces/NgxModalAriaLabelBaseOptions.html",[0,0.227,2,0.617,3,0.046,4,0.041,5,0.046,10,0.108,11,0.182,12,0.643,16,0.31,17,0.006,19,0.227,27,0.093,28,1.776,29,1.252,32,0.846,35,1.837,36,2.501,37,2.234,41,1.75,74,1.503,88,0.003,89,0.003,90,0.338,97,1.793,106,1.103,109,1.606,122,1.29,136,2.2,137,1.196,152,1.344,171,1.843,180,1.017,187,0.461,205,0.345,245,1.016,271,2.01,273,1.996,311,1.338,317,0.737,324,2.987,330,2.562,334,1.635,335,2.447,343,1.837,347,3.501,350,1.71,351,2.109,379,1.448,480,1.444,481,1.473,512,1.267,516,1.984,591,1.444,637,3.651,643,2.2,661,1.793,662,2.047,689,1.75,691,1.899,698,3.185,769,1.473,772,3.9,781,1.141,785,1.989,789,1.75,792,1.793,802,2.562,812,2.911,852,2.393,860,2.047,889,4.503,975,4.554,992,2.818,1101,2.047,1129,2.047,1176,2.034,1205,2.996,1219,1.837,1268,3.444,1269,1.837,1425,3.104,1434,2.996,1574,4.897,1810,3.416,1890,3.263,2065,1.935,2130,2.047,2318,2.911,2441,1.793,2740,1.989,2779,2.176,2856,2.047,2865,3.185,2871,4.146,2872,2.176,2873,4.765,2874,3.894,2875,3.406,2876,3.292,2877,3.292,2878,2.249,2879,3.292,2880,2.176,2881,4.412,2882,3.767,2883,4.882,2884,3.651,2885,2.109,2886,3.185,2887,2.249,2888,3.292,2889,3.292,2890,3.086,2891,3.086,2892,3.767,2893,2.249,2894,4.412,2895,2.109,2896,2.176,2897,2.047,2898,2.176,2899,3.767,2900,2.176,2901,2.249,2902,2.176,2903,3.767,2904,2.249,2905,3.185,2906,3.894,2907,2.249,2908,2.176,2909,2.249,2910,2.249,2911,2.249,2912,2.249,2913,2.249,2914,2.249,2915,2.249,2916,2.249,2917,2.249,2918,2.176,2919,2.176,2920,2.176,2921,2.176,2922,3.292,2923,3.292,2924,4.286,2925,3.292,2926,3.9,2927,4.286,2928,4.286,2929,3.292,2930,3.292,2931,3.292,2932,3.292,2933,3.185,2934,3.086,2935,2.047,2936,2.109,2937,3.767,2938,2.176,2939,2.249,2940,2.176,2941,2.249,2942,2.249,2943,2.249,2944,2.176,2945,3.185,2946,3.185,2947,2.109]],["title/interfaces/NgxModalAriaLabelOptions.html",[0,0.122,2890,2.638]],["body/interfaces/NgxModalAriaLabelOptions.html",[0,0.228,2,0.629,3,0.047,4,0.042,5,0.047,10,0.11,11,0.185,12,0.501,16,0.311,17,0.006,19,0.229,27,0.094,28,1.786,29,1.261,32,0.857,35,1.872,36,2.143,37,2.258,41,1.783,74,1.531,88,0.004,89,0.004,90,0.344,97,1.826,106,1.124,109,1.611,122,1.314,136,2.23,137,1.206,152,1.328,171,1.976,180,0.872,187,0.47,205,0.351,245,1.035,271,1.722,273,2.023,311,1.363,317,0.751,324,3.01,330,2.597,334,1.665,335,1.703,343,1.872,347,3.215,350,1.742,351,2.148,379,1.459,480,1.471,481,1.501,512,1.291,516,1.8,591,1.471,637,3.128,643,2.23,661,1.826,662,2.085,689,1.783,691,1.914,698,3.213,769,1.501,772,3.581,781,1.163,785,2.026,789,1.783,792,1.826,802,2.597,812,2.951,852,1.665,860,2.085,889,4.365,975,4.575,992,3.059,1101,2.085,1129,2.085,1176,2.062,1205,3.036,1219,1.872,1268,3.48,1269,1.872,1425,3.137,1434,2.085,1574,4.873,1810,3.446,1890,3.298,2065,1.971,2130,2.085,2318,2.951,2441,1.826,2740,2.026,2779,2.216,2856,2.085,2865,2.216,2871,4.183,2872,2.216,2873,4.796,2874,3.337,2876,2.291,2877,2.291,2878,2.291,2879,3.337,2880,2.216,2881,4.445,2882,3.807,2883,4.9,2884,3.69,2885,2.148,2886,3.228,2887,2.291,2888,3.337,2889,3.337,2890,3.69,2891,3.128,2892,3.807,2893,2.291,2894,4.445,2895,2.148,2896,2.216,2897,2.085,2898,2.216,2899,3.807,2900,2.216,2901,2.291,2902,2.216,2903,3.807,2904,2.291,2905,3.228,2906,3.936,2907,2.291,2908,2.216,2909,2.291,2910,2.291,2911,2.291,2912,2.291,2913,2.291,2914,2.291,2915,2.291,2916,2.291,2917,2.291,2918,2.216,2919,2.216,2920,2.216,2921,2.216,2922,3.337,2923,3.337,2924,4.323,2925,3.337,2926,3.934,2927,4.323,2928,4.323,2929,3.337,2930,3.337,2931,3.337,2932,3.337,2933,3.228,2934,3.128,2935,2.085,2936,2.148,2937,3.807,2938,2.216,2939,2.291,2940,2.216,2941,2.291,2942,2.291,2943,2.291,2944,2.216,2945,3.228,2946,3.228,2947,2.148]],["title/interfaces/NgxModalAriaLabelledOptions.html",[0,0.122,2891,2.638]],["body/interfaces/NgxModalAriaLabelledOptions.html",[0,0.228,2,0.629,3,0.047,4,0.042,5,0.047,10,0.11,11,0.185,12,0.501,16,0.311,17,0.006,19,0.229,27,0.094,28,1.786,29,1.261,32,0.857,35,1.872,36,2.143,37,2.258,41,1.783,74,1.531,88,0.004,89,0.004,90,0.344,97,1.826,106,1.124,109,1.611,122,1.314,136,2.23,137,1.206,152,1.328,171,1.976,180,0.872,187,0.47,205,0.351,245,1.035,271,1.722,273,2.023,311,1.363,317,0.751,324,3.01,330,2.597,334,1.665,335,1.703,343,1.872,347,3.215,350,1.742,351,2.148,379,1.459,480,1.471,481,1.501,512,1.291,516,1.8,591,1.471,637,3.128,643,2.23,661,1.826,662,2.085,689,1.783,691,1.914,698,3.213,769,1.501,772,3.581,781,1.163,785,2.026,789,1.783,792,1.826,802,2.597,812,2.951,852,1.665,860,2.085,889,4.365,975,4.575,992,3.059,1101,2.085,1129,2.085,1176,2.062,1205,3.036,1219,1.872,1268,3.48,1269,1.872,1425,3.137,1434,2.085,1574,4.873,1810,3.446,1890,3.298,2065,1.971,2130,2.085,2318,2.951,2441,1.826,2740,2.026,2779,2.216,2856,2.085,2865,2.216,2871,4.183,2872,2.216,2873,4.796,2874,3.337,2876,2.291,2877,2.291,2878,2.291,2879,3.337,2880,2.216,2881,4.445,2882,3.807,2883,4.9,2884,3.69,2885,2.148,2886,3.228,2887,2.291,2888,3.337,2889,3.337,2890,3.128,2891,3.69,2892,3.807,2893,2.291,2894,4.445,2895,2.148,2896,2.216,2897,2.085,2898,2.216,2899,3.807,2900,2.216,2901,2.291,2902,2.216,2903,3.807,2904,2.291,2905,3.228,2906,3.936,2907,2.291,2908,2.216,2909,2.291,2910,2.291,2911,2.291,2912,2.291,2913,2.291,2914,2.291,2915,2.291,2916,2.291,2917,2.291,2918,2.216,2919,2.216,2920,2.216,2921,2.216,2922,3.337,2923,3.337,2924,4.323,2925,3.337,2926,3.934,2927,4.323,2928,4.323,2929,3.337,2930,3.337,2931,3.337,2932,3.337,2933,3.228,2934,3.128,2935,2.085,2936,2.148,2937,3.807,2938,2.216,2939,2.291,2940,2.216,2941,2.291,2942,2.291,2943,2.291,2944,2.216,2945,3.228,2946,3.228,2947,2.148]],["title/interfaces/NgxModalBaseConfiguration.html",[0,0.122,2933,2.722]],["body/interfaces/NgxModalBaseConfiguration.html",[0,0.228,2,0.631,3,0.047,4,0.042,5,0.047,10,0.111,11,0.185,12,0.502,16,0.31,17,0.006,19,0.229,27,0.094,28,1.788,29,1.263,32,0.859,35,1.878,36,2.148,37,2.262,41,1.789,74,1.536,88,0.004,89,0.004,90,0.345,97,1.833,106,1.128,109,1.611,122,1.319,136,2.236,137,1.208,152,1.302,171,1.863,180,0.874,187,0.471,205,0.352,245,1.038,271,1.727,273,2.028,311,1.368,317,0.754,324,3.014,330,2.603,334,1.671,335,1.709,343,1.878,347,3.222,350,1.748,351,2.156,379,1.461,480,1.476,481,1.506,512,1.295,516,1.803,591,1.476,637,3.136,643,2.236,661,1.833,662,2.092,689,1.789,691,1.916,698,3.218,769,1.506,772,3.588,781,2.001,785,2.033,789,1.789,792,1.833,802,2.603,812,2.958,852,1.671,860,2.092,889,3.959,975,4.579,992,2.843,1101,2.092,1129,2.092,1176,2.436,1205,3.044,1219,2.733,1268,3.83,1269,1.878,1425,3.143,1434,2.092,1574,4.875,1810,3.452,1890,3.305,2065,1.978,2130,2.092,2318,2.958,2441,1.833,2740,2.033,2779,2.224,2856,2.092,2865,2.224,2871,3.815,2872,2.224,2873,3.944,2874,3.345,2876,2.299,2877,2.299,2878,2.299,2879,3.345,2880,2.224,2881,4.452,2882,3.815,2883,4.903,2884,3.697,2885,2.156,2886,3.236,2887,2.299,2888,3.345,2889,3.345,2890,3.136,2891,3.136,2892,3.815,2893,2.299,2894,4.452,2895,2.156,2896,2.224,2897,2.092,2898,2.224,2899,3.815,2900,2.224,2901,2.299,2902,2.224,2903,3.815,2904,2.299,2905,3.236,2906,3.944,2907,2.299,2908,2.224,2909,2.299,2910,2.299,2911,2.299,2912,2.299,2913,2.299,2914,2.299,2915,2.299,2916,2.299,2917,2.299,2918,2.224,2919,2.224,2920,2.224,2921,2.224,2922,3.345,2923,3.345,2924,4.331,2925,3.345,2926,3.941,2927,4.331,2928,4.331,2929,3.345,2930,3.345,2931,3.345,2932,3.345,2933,3.815,2934,4.502,2935,3.044,2936,2.156,2937,3.815,2938,2.224,2939,2.299,2940,2.224,2941,2.299,2942,2.299,2943,2.299,2944,2.224,2945,3.236,2946,3.236,2947,2.156]],["title/interfaces/NgxModalBaseOptions.html",[0,0.122,2937,2.722]],["body/interfaces/NgxModalBaseOptions.html",[0,0.224,2,0.585,3,0.044,4,0.039,5,0.044,10,0.103,11,0.175,12,0.775,15,2.114,16,0.319,17,0.006,19,0.221,27,0.091,28,1.914,29,1.224,32,1.073,35,1.74,36,2.423,37,2.164,41,2.461,74,2.114,88,0.003,89,0.003,90,0.32,97,1.698,106,1.045,109,1.646,122,1.222,136,2.79,137,1.165,152,1.332,171,1.796,180,0.985,187,0.649,205,0.327,245,0.962,271,1.947,273,2.531,311,1.268,317,0.698,324,3.061,330,2.461,334,1.548,335,1.583,343,1.74,347,3.411,350,2.405,351,2.965,379,1.536,480,1.368,481,1.395,512,1.2,516,1.857,591,2.031,637,3.537,643,2.114,661,1.698,662,1.939,689,2.461,691,1.857,698,3.103,769,1.395,772,3.799,781,1.081,785,2.797,789,1.658,792,1.698,802,2.461,812,3.692,852,1.548,860,1.939,889,3.838,975,4.49,992,2.756,1101,1.939,1129,2.878,1176,2.331,1205,2.878,1219,1.74,1268,3.692,1269,1.74,1425,3.327,1434,1.939,1574,4.882,1810,3.327,1890,3.916,2065,1.833,2130,1.939,2318,3.336,2441,2.521,2740,2.797,2779,2.061,2856,1.939,2865,2.061,2871,3.65,2872,2.061,2873,3.773,2874,3.773,2875,3.226,2876,2.13,2877,2.13,2878,2.13,2879,3.163,2880,2.061,2881,4.315,2882,3.65,2883,4.88,2884,3.537,2885,1.997,2886,3.06,2887,2.13,2888,3.163,2889,3.163,2890,2.965,2891,2.965,2892,3.65,2893,2.13,2894,4.315,2895,1.997,2896,2.061,2897,1.939,2898,2.061,2899,3.65,2900,2.061,2901,2.13,2902,2.061,2903,3.65,2904,2.13,2905,3.06,2906,4.46,2907,2.13,2908,2.061,2909,2.13,2910,2.13,2911,2.13,2912,2.13,2913,2.13,2914,2.13,2915,2.13,2916,2.13,2917,2.13,2918,2.061,2919,2.061,2920,2.061,2921,2.061,2922,3.773,2923,3.163,2924,4.175,2925,3.163,2926,3.799,2927,4.175,2928,4.175,2929,3.163,2930,3.163,2931,3.163,2932,3.163,2933,3.06,2934,2.965,2935,1.939,2936,1.997,2937,4.039,2938,3.06,2939,3.163,2940,4.039,2941,3.163,2942,3.163,2943,3.163,2944,4.039,2945,3.06,2946,3.06,2947,1.997]],["title/interfaces/NgxModalCDKModalConfiguration.html",[0,0.122,2903,2.722]],["body/interfaces/NgxModalCDKModalConfiguration.html",[0,0.224,2,0.584,3,0.044,4,0.039,5,0.044,10,0.102,11,0.175,12,0.745,16,0.311,17,0.006,19,0.221,27,0.091,28,1.744,29,1.393,32,0.812,35,1.738,36,2.029,37,2.162,41,1.655,74,1.421,88,0.003,89,0.003,90,0.319,97,2.518,106,1.55,109,1.63,122,1.22,136,2.111,137,1.164,152,1.332,171,1.794,180,0.825,187,0.436,205,0.326,245,0.961,271,1.631,273,1.915,311,1.266,317,0.697,324,2.919,330,3.246,334,2.296,335,1.581,343,2.581,347,3.079,350,1.617,351,1.994,379,1.536,480,2.029,481,2.069,512,1.78,516,1.856,591,1.366,637,2.962,643,2.111,661,1.695,662,1.935,689,1.655,691,2.014,698,3.1,769,2.069,772,3.429,781,1.079,785,1.881,789,2.458,792,3.004,802,2.458,812,2.794,852,1.546,860,1.935,889,3.835,975,4.488,992,2.754,1101,2.875,1129,1.935,1176,1.952,1205,3.796,1219,1.738,1268,3.333,1269,2.581,1425,3.325,1434,1.935,1574,4.827,1810,4.116,1890,3.158,2065,2.718,2130,2.875,2318,3.333,2441,1.695,2740,1.881,2779,3.056,2856,1.935,2865,2.058,2871,3.646,2872,2.058,2873,3.769,2874,3.159,2876,2.127,2877,2.127,2878,2.127,2879,4.172,2880,2.058,2881,5.132,2882,3.646,2883,4.997,2884,3.533,2885,1.994,2886,3.056,2887,2.127,2888,3.159,2889,3.159,2890,2.962,2891,2.962,2892,3.646,2893,2.127,2894,4.312,2895,1.994,2896,2.058,2897,1.935,2898,2.058,2899,3.646,2900,2.058,2901,2.127,2902,2.058,2903,4.036,2904,3.159,2905,4.036,2906,4.172,2907,3.159,2908,3.056,2909,3.159,2910,3.159,2911,3.159,2912,3.159,2913,3.159,2914,3.159,2915,3.159,2916,3.159,2917,3.159,2918,3.056,2919,4.036,2920,4.036,2921,2.058,2922,3.159,2923,3.159,2924,4.172,2925,3.159,2926,3.796,2927,4.172,2928,4.172,2929,3.159,2930,3.159,2931,3.159,2932,3.159,2933,3.056,2934,2.962,2935,1.935,2936,1.994,2937,3.646,2938,2.058,2939,2.127,2940,2.058,2941,2.127,2942,2.127,2943,2.127,2944,2.058,2945,3.056,2946,3.056,2947,1.994]],["title/interfaces/NgxModalComponentConfiguration.html",[0,0.122,2921,2.722]],["body/interfaces/NgxModalComponentConfiguration.html",[0,0.226,2,0.603,3,0.045,4,0.04,5,0.045,10,0.106,11,0.179,12,0.486,16,0.313,17,0.006,19,0.225,27,0.093,28,1.926,29,1.24,32,0.831,35,1.795,36,2.078,37,2.204,41,1.71,74,1.468,88,0.003,89,0.003,90,0.33,97,1.751,106,1.078,109,1.642,122,1.261,136,2.163,137,1.319,152,1.289,171,1.823,180,0.845,187,0.451,205,0.337,245,0.992,271,1.671,273,2.57,311,1.308,317,0.72,324,3.2,330,2.518,334,1.597,335,1.633,343,1.795,347,3.462,350,1.671,351,2.06,379,1.501,480,1.411,481,1.439,512,1.238,516,1.765,591,2.078,637,3.034,643,2.163,661,1.751,662,2,689,1.71,691,1.881,698,3.15,769,1.439,772,3.857,781,1.115,785,1.943,789,1.71,792,1.751,802,2.99,812,2.862,852,1.597,860,2,889,3.887,975,4.849,992,2.791,1101,2,1129,2,1176,2,1205,2.945,1219,1.795,1268,3.397,1269,1.795,1425,3.378,1434,2,1574,4.928,1810,3.378,1890,3.22,2065,1.891,2130,2,2318,2.862,2441,1.751,2740,1.943,2779,2.126,2856,2,2865,2.126,2871,3.717,2872,2.126,2873,3.842,2874,3.236,2876,2.197,2877,2.197,2878,2.197,2879,3.236,2880,2.126,2881,4.371,2882,4.371,2883,4.989,2884,3.973,2885,2.06,2886,3.131,2887,2.197,2888,3.236,2889,3.236,2890,3.034,2891,3.034,2892,3.717,2893,2.197,2894,4.371,2895,2.06,2896,2.126,2897,2,2898,2.126,2899,4.1,2900,2.126,2901,2.197,2902,2.126,2903,3.717,2904,2.197,2905,3.131,2906,3.842,2907,2.197,2908,2.126,2909,2.197,2910,2.197,2911,2.197,2912,2.197,2913,2.197,2914,2.197,2915,2.197,2916,2.197,2917,2.197,2918,2.126,2919,2.126,2920,2.126,2921,3.131,2922,3.842,2923,3.236,2924,4.726,2925,3.842,2926,4.3,2927,4.726,2928,4.726,2929,3.842,2930,3.842,2931,3.842,2932,3.842,2933,3.131,2934,3.034,2935,2,2936,2.06,2937,3.717,2938,2.126,2939,2.197,2940,2.126,2941,2.197,2942,2.197,2943,2.197,2944,2.126,2945,3.131,2946,3.131,2947,2.06]],["title/interfaces/NgxModalComponentOptions.html",[0,0.122,2946,2.722]],["body/interfaces/NgxModalComponentOptions.html",[0,0.226,2,0.609,3,0.045,4,0.041,5,0.045,10,0.107,11,0.181,12,0.489,16,0.317,17,0.006,19,0.226,27,0.093,28,1.768,29,1.245,32,0.837,35,1.812,36,2.093,37,2.216,41,1.726,74,1.482,88,0.003,89,0.003,90,0.333,97,1.768,106,1.088,109,1.626,122,1.273,136,2.178,137,1.323,152,1.292,171,1.951,180,0.851,187,0.455,205,0.34,245,1.002,271,1.682,273,1.976,311,1.32,317,0.727,324,3.21,330,2.536,334,1.612,335,1.649,343,1.812,347,3.156,350,1.686,351,2.08,379,1.44,480,1.424,481,1.453,512,1.25,516,1.773,591,1.424,637,3.055,643,2.178,661,1.768,662,2.018,689,1.726,691,1.889,698,3.164,769,1.453,772,3.515,781,1.126,785,1.962,789,1.726,792,1.768,802,3.006,812,2.882,852,1.612,860,2.018,889,3.902,975,4.856,992,3.028,1101,2.018,1129,2.018,1176,2.013,1205,2.965,1219,1.812,1268,3.416,1269,1.812,1425,3.079,1434,2.018,1574,4.905,1810,3.393,1890,3.237,2065,1.909,2130,2.018,2318,2.882,2441,1.768,2740,1.962,2779,2.146,2856,2.018,2865,2.146,2871,3.737,2872,2.146,2873,3.863,2874,3.259,2876,2.218,2877,2.218,2878,2.218,2879,3.259,2880,2.146,2881,4.388,2882,4.388,2883,4.997,2884,3.992,2885,2.08,2886,3.153,2887,2.218,2888,3.259,2889,3.259,2890,3.055,2891,3.055,2892,3.737,2893,2.218,2894,4.388,2895,2.08,2896,2.146,2897,2.018,2898,2.146,2899,4.119,2900,2.146,2901,2.218,2902,2.146,2903,3.737,2904,2.218,2905,3.153,2906,3.863,2907,2.218,2908,2.146,2909,2.218,2910,2.218,2911,2.218,2912,2.218,2913,2.218,2914,2.218,2915,2.218,2916,2.218,2917,2.218,2918,2.146,2919,2.146,2920,2.146,2921,2.146,2922,3.259,2923,3.259,2924,4.742,2925,3.863,2926,4.315,2927,4.742,2928,4.742,2929,3.863,2930,3.863,2931,3.863,2932,3.863,2933,3.153,2934,3.055,2935,2.018,2936,2.08,2937,4.119,2938,2.146,2939,2.218,2940,2.146,2941,2.218,2942,2.218,2943,2.218,2944,2.146,2945,3.153,2946,3.737,2947,2.08]],["title/interfaces/NgxModalGlobalCDKConfiguration.html",[0,0.122,2894,2.722]],["body/interfaces/NgxModalGlobalCDKConfiguration.html",[0,0.226,2,0.603,3,0.045,4,0.04,5,0.045,10,0.106,11,0.179,12,0.781,16,0.313,17,0.006,19,0.225,27,0.093,28,1.763,29,1.449,32,0.831,35,1.795,36,2.078,37,2.204,41,1.71,74,1.468,88,0.003,89,0.003,90,0.486,97,1.751,106,1.078,109,1.601,122,1.261,136,2.163,137,1.183,152,1.339,171,1.823,180,0.845,187,0.451,205,0.337,245,0.992,271,1.671,273,1.962,311,1.926,317,0.72,324,2.959,330,2.518,334,1.597,335,1.633,343,1.795,347,3.139,350,1.671,351,2.06,379,1.435,480,1.411,481,1.439,512,1.238,516,1.765,591,1.411,637,3.034,643,2.832,661,1.751,662,2,689,1.71,691,2.088,698,3.868,769,1.439,772,3.496,781,1.115,785,1.943,789,1.71,792,1.751,802,2.518,812,2.862,852,1.597,860,2,889,3.887,975,4.527,992,2.791,1101,2,1129,2,1176,2,1205,2.945,1219,1.795,1268,3.397,1269,1.795,1425,3.062,1434,2,1574,4.928,1810,3.378,1890,3.22,2065,1.891,2130,2,2318,2.862,2441,1.751,2740,1.943,2779,2.126,2856,2,2865,2.126,2871,3.717,2872,2.126,2873,3.842,2874,3.236,2876,2.197,2877,2.197,2878,2.197,2879,3.236,2880,2.126,2881,4.371,2882,3.717,2883,4.859,2884,3.602,2885,2.06,2886,3.131,2887,2.197,2888,3.236,2889,3.236,2890,3.034,2891,3.034,2892,3.717,2893,2.197,2894,4.572,2895,3.034,2896,4.1,2897,2.945,2898,4.1,2899,4.1,2900,4.1,2901,3.236,2902,4.1,2903,3.717,2904,2.197,2905,3.131,2906,3.842,2907,2.197,2908,2.126,2909,2.197,2910,2.197,2911,2.197,2912,2.197,2913,2.197,2914,2.197,2915,2.197,2916,2.197,2917,2.197,2918,2.126,2919,2.126,2920,2.126,2921,2.126,2922,3.236,2923,3.236,2924,4.238,2925,3.236,2926,3.857,2927,4.238,2928,4.238,2929,3.236,2930,3.236,2931,3.236,2932,3.236,2933,3.131,2934,3.034,2935,2,2936,2.06,2937,3.717,2938,2.126,2939,2.197,2940,2.126,2941,2.197,2942,2.197,2943,2.197,2944,2.126,2945,3.131,2946,3.131,2947,2.06]],["title/injectables/NgxModalService.html",[259,1.478,2842,3.921]],["body/injectables/NgxModalService.html",[3,0.033,4,0.03,5,0.033,7,2.752,10,0.078,11,0.142,12,0.748,15,2.635,16,0.303,17,0.006,19,0.233,27,0.053,28,0.926,29,0.994,31,4.459,32,1.259,34,2.404,35,4.53,37,2.755,42,2.155,44,2.139,47,1.652,49,2.062,55,1.206,61,1.672,68,1.446,72,1.107,73,2.045,81,2.222,88,0.003,89,0.003,90,0.385,96,1.254,105,4.699,109,1.563,122,2.406,128,2.315,134,2.659,137,1.226,174,0.81,180,1.095,183,0.842,184,1.374,187,1.05,191,1.435,193,1.976,194,2.484,196,1.47,205,0.249,235,3.887,238,1.234,245,0.733,249,3.008,259,1.348,261,1.234,268,2.192,272,0.665,273,1.556,300,1.489,308,1.11,311,0.966,317,1.293,332,1.521,335,1.908,349,4.057,350,1.234,369,2.461,377,2.761,379,1.446,412,1.648,426,2.336,428,1.818,501,0.796,502,2.816,591,2.045,643,2.802,691,1.746,698,1.206,699,1.623,704,2.802,718,0.914,769,1.681,797,1.681,798,5.845,810,2.877,811,3.502,813,1.263,819,2.097,820,2.097,822,2.567,823,1.818,907,1.681,908,4.132,934,3.578,935,3.162,936,2.407,943,4.242,952,2.262,975,3.709,978,3.578,992,2.897,1023,1.999,1127,2.27,1173,1.36,1175,1.521,1176,1.003,1204,1.521,1239,3.887,1320,3.008,1344,1.999,1378,3.887,1462,1.293,1574,4.882,1581,2.262,1603,3.884,1608,2.262,1609,1.477,1779,3.779,1810,1.293,1811,1.36,1885,2.567,1931,2.457,1960,1.999,2008,1.57,2141,2.336,2143,2.262,2293,3.887,2312,1.902,2397,4.719,2420,1.746,2485,3.887,2540,2.457,2556,2.27,2559,2.483,2596,5.045,2607,3.578,2707,2.116,2735,2.877,2740,3.201,2842,4.438,2843,2.457,2844,2.457,2856,1.477,2860,2.116,2863,2.262,2880,1.57,2883,2.898,2884,2.986,2896,1.57,2898,1.57,2900,1.57,2902,1.57,2919,1.57,2920,1.57,2926,2.336,2934,2.407,2936,1.521,2940,4.536,2944,1.57,2947,4.801,2948,2.754,2949,5.406,2950,5.406,2951,5.406,2952,5.406,2953,5.406,2954,5.406,2955,4.357,2956,2.754,2957,2.754,2958,2.754,2959,7.272,2960,4.357,2961,7.456,2962,6.694,2963,2.754,2964,4.357,2965,6.145,2966,2.754,2967,2.754,2968,2.754,2969,2.754,2970,4.357,2971,2.754,2972,2.754,2973,4.357,2974,4.357,2975,2.754,2976,4.357,2977,2.754,2978,4.357,2979,2.754,2980,5.482,2981,2.754,2982,2.754,2983,2.754,2984,2.754,2985,2.754,2986,2.262,2987,2.754,2988,5.406,2989,1.902,2990,2.754,2991,2.754,2992,2.754,2993,4.357,2994,2.754,2995,2.754,2996,2.754,2997,2.754,2998,2.754,2999,2.754,3000,2.754,3001,7.456,3002,2.754,3003,2.754,3004,2.754,3005,2.754,3006,2.754,3007,2.754,3008,2.754,3009,2.754,3010,4.357,3011,2.754,3012,2.754,3013,2.754,3014,2.754,3015,2.754,3016,2.754,3017,2.754,3018,2.754,3019,1.999,3020,2.754,3021,2.754,3022,2.754,3023,2.754,3024,2.754,3025,2.754,3026,4.357,3027,2.754,3028,2.754,3029,4.357,3030,6.145,3031,2.754,3032,4.357,3033,2.754,3034,2.754,3035,2.754,3036,2.754,3037,2.754,3038,2.754,3039,2.754,3040,2.754,3041,2.754,3042,2.754,3043,2.754,3044,2.754,3045,2.754,3046,2.754,3047,2.754,3048,2.754,3049,2.754,3050,2.754,3051,2.754,3052,2.754,3053,2.754,3054,2.754,3055,2.754]],["title/interfaces/NgxModalTypeOptions.html",[0,0.122,2945,2.722]],["body/interfaces/NgxModalTypeOptions.html",[0,0.228,2,0.624,3,0.047,4,0.042,5,0.047,10,0.109,11,0.184,12,0.646,16,0.316,17,0.006,19,0.228,27,0.094,28,1.781,29,1.257,32,0.852,35,1.857,36,2.13,37,2.247,41,1.769,74,1.519,88,0.003,89,0.003,90,0.341,97,1.812,106,1.115,109,1.631,122,1.304,136,2.217,137,1.202,152,1.326,171,1.97,180,0.867,187,0.466,205,0.348,245,1.026,271,1.713,273,2.011,311,1.353,317,0.745,324,3,330,2.582,334,1.652,335,1.689,343,1.857,347,3.2,350,1.728,351,2.131,379,1.455,480,1.46,481,1.489,512,1.281,516,1.794,591,1.46,637,3.11,643,2.217,661,1.812,662,2.068,689,1.769,691,1.908,698,3.201,769,1.489,772,3.565,781,1.153,785,2.01,789,1.769,792,1.812,802,2.582,812,2.934,852,1.652,860,2.068,889,3.941,975,4.755,992,3.19,1101,2.068,1129,2.068,1176,2.05,1205,3.019,1219,1.857,1268,3.464,1269,1.857,1425,3.122,1434,2.068,1574,4.868,1810,3.433,1890,3.283,2065,1.956,2130,2.068,2318,2.934,2441,1.812,2740,2.01,2779,2.199,2856,2.068,2865,2.199,2871,3.79,2872,2.199,2873,3.918,2874,3.318,2876,2.273,2877,2.273,2878,2.273,2879,3.318,2880,2.199,2881,4.431,2882,3.79,2883,4.892,2884,3.673,2885,2.131,2886,3.209,2887,2.273,2888,3.318,2889,3.318,2890,3.11,2891,3.11,2892,3.79,2893,2.273,2894,4.431,2895,2.131,2896,2.199,2897,2.068,2898,2.199,2899,3.79,2900,2.199,2901,2.273,2902,2.199,2903,3.79,2904,2.273,2905,3.209,2906,3.918,2907,2.273,2908,2.199,2909,2.273,2910,2.273,2911,2.273,2912,2.273,2913,2.273,2914,2.273,2915,2.273,2916,2.273,2917,2.273,2918,2.199,2919,2.199,2920,2.199,2921,2.199,2922,3.318,2923,3.318,2924,4.307,2925,3.318,2926,3.919,2927,4.307,2928,4.307,2929,3.318,2930,3.318,2931,3.318,2932,3.318,2933,3.209,2934,3.11,2935,2.068,2936,2.131,2937,4.167,2938,2.199,2939,2.273,2940,2.199,2941,2.273,2942,2.273,2943,2.273,2944,2.199,2945,3.79,2946,3.209,2947,2.131]],["title/injectables/NgxOnlineService.html",[259,1.478,1812,3.921]],["body/injectables/NgxOnlineService.html",[3,0.066,4,0.058,5,0.066,10,0.154,11,0.233,16,0.26,17,0.006,19,0.249,27,0.066,32,1.283,49,1.778,57,3.493,61,2.622,88,0.004,89,0.004,90,0.48,96,0.836,174,2.099,183,1.379,184,1.377,187,1.092,196,1.033,205,0.49,206,1.652,259,2.209,261,2.433,268,2.588,272,1.311,300,1.811,308,1.261,317,1.379,335,3.126,366,3.126,368,3.84,369,2.516,373,3.71,412,3.699,501,1.57,513,3.437,649,4.543,769,2.755,813,3.657,947,3.205,1049,3.2,1175,3,1176,1.977,1219,4.498,1244,2.912,1274,6.508,1370,4.7,1402,4.358,1404,3,1405,2.83,1406,4.846,1408,2.49,1603,3.72,1609,2.912,1614,3.586,1745,5.427,1758,6.127,1799,4.526,1811,2.682,1812,5.863,1813,8.218,1825,5.594,1848,5.863,1849,4.46,1850,4.46,2642,4.172,3056,9.211,3057,5.432,3058,7.978,3059,7.141,3060,5.432,3061,5.432,3062,7.141,3063,5.432,3064,5.432,3065,7.141,3066,5.432,3067,5.432]],["title/directives/NgxQueryParamFormSyncComponent.html",[292,0.723,592,2.298]],["body/directives/NgxQueryParamFormSyncComponent.html",[0,0.109,3,0.032,4,0.029,5,0.032,7,1.914,10,0.076,11,0.198,12,0.8,15,1.058,16,0.25,17,0.006,19,0.206,20,3.283,21,1.584,27,0.064,28,2.046,32,1.195,34,2.77,36,1.017,40,6.273,42,1.235,44,1.792,49,1.927,50,2.608,54,1.584,55,2.654,57,2.896,61,2.047,64,1.532,66,1.914,76,1.017,83,3.106,88,0.003,89,0.003,90,0.378,96,0.933,97,2.007,104,2.399,106,1.752,107,1.951,109,1.123,135,1.037,137,1.087,139,1.177,152,0.766,162,1.871,171,0.681,174,1.256,177,1.584,180,0.933,183,1.361,184,1.451,187,1.031,193,1.821,194,2.93,195,1.951,196,1.457,200,2.518,203,1.683,205,0.243,206,1.3,209,1.584,218,2.208,233,1.485,237,1.233,240,1.856,255,2.714,268,2.253,272,0.649,274,2.993,292,0.647,294,0.66,298,0.804,300,1.572,308,0.902,317,1.563,323,2.065,324,1.037,332,3.348,333,3.25,335,1.177,350,4.105,358,1.775,366,2.329,367,5.161,368,2.561,369,1.415,373,2.654,379,1.636,382,6.817,383,1.856,389,2.208,392,1.498,412,2.503,424,1.584,425,1.704,449,1.951,501,0.777,513,3.184,524,0.846,535,1.151,563,2.542,592,3.555,624,4.399,695,4.192,703,2.167,713,2.331,753,3.247,784,1.856,810,1.775,812,1.401,813,1.233,819,1.294,820,1.294,822,1.584,826,2.065,827,2.208,936,2.938,947,1.08,953,2.518,992,0.979,1009,4.086,1049,3.134,1090,2.208,1091,3.348,1100,2.951,1138,3.51,1140,1.951,1150,4.863,1221,5.831,1222,1.775,1268,2.227,1275,2.065,1344,1.951,1359,2.208,1410,2.399,1426,4.656,1557,2.208,1561,2.608,1597,2.399,1603,2.227,1661,2.399,1735,3.813,1775,1.856,1788,1.951,1799,1.704,1807,3.033,1811,1.327,1818,2.822,1827,1.951,1868,2.208,1960,1.951,1983,3.813,1994,1.856,2008,1.532,2031,5.887,2042,1.441,2054,2.608,2055,1.704,2240,2.399,2243,3.247,2248,4.368,2312,1.856,2419,2.399,2420,3.372,2473,4.399,2556,1.401,2626,2.399,2735,1.775,2863,2.208,2926,1.441,2986,2.208,3068,7.712,3069,7.712,3070,2.399,3071,8.644,3072,7.386,3073,6.615,3074,5.32,3075,7.044,3076,6.615,3077,4.274,3078,6.615,3079,2.689,3080,3.813,3081,2.689,3082,9.05,3083,2.689,3084,4.274,3085,2.689,3086,6.062,3087,2.689,3088,2.689,3089,2.689,3090,2.689,3091,6.062,3092,6.062,3093,4.274,3094,2.689,3095,5.902,3096,2.689,3097,2.689,3098,5.32,3099,2.689,3100,2.689,3101,4.274,3102,6.062,3103,2.689,3104,4.274,3105,2.689,3106,4.274,3107,2.689,3108,4.274,3109,2.689,3110,7.044,3111,2.689,3112,2.689,3113,2.689,3114,2.689,3115,2.689,3116,2.689,3117,3.813,3118,2.689,3119,2.689,3120,2.689,3121,2.689,3122,2.689,3123,5.32,3124,2.689,3125,2.689,3126,2.689,3127,4.274,3128,2.689,3129,1.856,3130,2.689,3131,2.689,3132,2.689,3133,2.689,3134,2.689,3135,2.689,3136,2.689,3137,2.399,3138,2.065,3139,6.062,3140,5.32,3141,2.689,3142,2.689,3143,2.689,3144,2.689,3145,2.689,3146,2.689,3147,4.274,3148,2.689,3149,2.689,3150,2.689,3151,2.399,3152,2.208,3153,2.689,3154,2.689,3155,2.689,3156,2.689,3157,2.689,3158,2.399,3159,2.689,3160,2.689,3161,2.689,3162,2.689,3163,2.689,3164,4.274,3165,4.274,3166,2.689,3167,2.689,3168,2.689,3169,2.689,3170,2.689,3171,2.689,3172,2.689,3173,2.689,3174,2.689]],["title/interfaces/NgxReplaceElementsConfigurationElement.html",[0,0.122,3175,3.921]],["body/interfaces/NgxReplaceElementsConfigurationElement.html",[0,0.216,2,1.145,3,0.085,4,0.076,5,0.085,10,0.201,11,0.275,12,0.746,16,0.311,17,0.006,27,0.112,28,1.505,29,1.456,88,0.005,89,0.005,152,1.39,271,2.154,298,2.787,516,2.287,616,4.89,781,2.521,3175,6.924,3176,5.815,3177,5.815,3178,7.654,3179,7.654,3180,5.815,3181,5.439,3182,5.439]],["title/interfaces/NgxReplaceElementsItem.html",[0,0.122,3182,3.668]],["body/interfaces/NgxReplaceElementsItem.html",[0,0.215,2,1.138,3,0.085,4,0.076,5,0.085,10,0.2,11,0.274,12,0.743,16,0.31,17,0.006,27,0.112,28,1.977,29,1.138,88,0.005,89,0.005,152,1.431,271,2.829,298,2.104,516,1.726,616,6.422,781,2.781,3175,5.778,3176,5.778,3177,5.778,3178,5.778,3179,6.898,3180,5.778,3181,5.405,3182,6.452]],["title/pipes/NgxReplaceElementsPipe.html",[174,1.404,3183,4.261]],["body/pipes/NgxReplaceElementsPipe.html",[3,0.045,4,0.059,5,0.045,7,1.656,11,0.178,12,0.327,16,0.121,17,0.006,19,0.224,27,0.078,28,1.16,32,1.396,34,1.578,37,2.193,41,1.696,42,2.311,44,1.87,47,1.452,49,2.017,50,5.291,51,2.344,55,1.619,61,2.364,66,1.656,74,2.555,75,3.604,88,0.003,89,0.003,90,0.574,96,0.84,97,1.737,98,3.015,106,2.071,109,1.442,136,2.555,137,1.36,152,1.302,174,2.548,176,1.875,177,2.179,179,1.017,180,1.103,182,1.78,183,0.714,184,0.638,185,3.479,186,3.604,187,0.784,193,0.879,194,2.658,195,2.684,196,0.703,200,4.502,203,2.149,204,2.927,205,0.334,206,1.125,211,4.709,237,2.975,238,2.906,241,2.841,250,2.257,255,2.24,271,2.179,298,2.673,300,1.496,304,1.185,308,0.813,322,4.87,323,4.193,324,1.427,328,4.221,341,2.217,358,2.442,369,2.128,379,1.548,425,2.344,426,1.983,428,2.442,431,2.844,432,2.257,467,5.457,479,1.456,501,1.069,509,2.154,512,1.228,515,1.826,516,2.263,524,2.043,544,2.627,616,2.553,639,1.826,689,2.975,704,1.456,718,1.228,733,3.037,751,1.78,762,2.841,770,3.46,792,2.563,819,2.627,820,2.627,824,2.043,852,3.068,907,2.257,947,1.486,949,1.983,951,5.045,953,3.216,961,3.216,991,3.3,998,2.684,1100,2.553,1163,3.037,1173,1.826,1176,1.346,1268,1.927,1292,2.108,1341,3.3,1344,3.962,1370,2.179,1379,2.257,1404,3.015,1405,1.927,1408,1.696,1418,2.841,1427,2.841,1434,1.983,1464,2.684,1494,3.216,1500,5.045,1561,4.372,1614,2.442,1883,2.841,1885,2.179,1890,1.826,1974,4.87,1994,2.553,2063,2.442,2141,3.479,2171,2.841,2243,2.257,2257,3.037,2312,3.769,2318,1.927,2323,4.483,2452,3.037,2525,2.841,2559,2.108,2707,2.841,2735,3.604,2742,3.3,2862,3.3,2870,4.483,2881,3.698,2908,2.108,2926,1.983,2935,1.983,3152,6.972,3178,5.883,3181,2.841,3182,5.503,3183,5.789,3184,7.165,3185,7.165,3186,3.699,3187,7.165,3188,7.642,3189,3.699,3190,5.459,3191,6.489,3192,6.489,3193,5.459,3194,3.699,3195,5.459,3196,5.459,3197,3.699,3198,3.699,3199,3.699,3200,3.699,3201,7.165,3202,3.699,3203,3.699,3204,3.699,3205,3.699,3206,3.699,3207,3.699,3208,8.491,3209,6.489,3210,5.459,3211,3.699,3212,3.699,3213,3.699,3214,3.699,3215,3.699,3216,3.699,3217,3.699,3218,3.037,3219,3.037,3220,3.699,3221,3.699,3222,3.699,3223,3.699,3224,3.699,3225,3.699,3226,5.459,3227,3.699,3228,3.3,3229,3.699,3230,3.699,3231,3.699,3232,3.699,3233,3.699,3234,3.699,3235,3.699,3236,3.699,3237,3.699,3238,5.459,3239,3.699,3240,3.699,3241,3.3,3242,3.699,3243,5.459,3244,3.699,3245,3.3,3246,3.699,3247,3.699,3248,6.489,3249,3.3,3250,5.459,3251,3.699,3252,3.699,3253,3.699,3254,3.037,3255,3.699,3256,3.699,3257,3.699,3258,3.037,3259,3.699,3260,3.699,3261,3.699,3262,3.699,3263,3.699,3264,3.699,3265,3.699,3266,3.699,3267,3.699,3268,3.699,3269,3.699,3270,3.699]],["title/classes/NgxSaveOnExitAbstractService.html",[90,0.422,3271,4.261]],["body/classes/NgxSaveOnExitAbstractService.html",[3,0.08,4,0.072,5,0.08,10,0.189,11,0.265,12,0.807,15,3.2,16,0.265,17,0.006,19,0.274,27,0.08,29,1.077,88,0.005,89,0.005,90,0.589,92,4.222,109,1.49,122,2.747,184,1.644,187,0.982,268,2.389,272,1.608,335,3.558,350,3.64,387,5.898,563,3.143,593,3.816,812,4.234,1222,4.398,2132,6.674,2473,4.835,2531,7.251,3271,7.251,3272,7.825,3273,7.825,3274,6.662,3275,8.771,3276,8.771,3277,6.662,3278,8.128,3279,8.128,3280,6.662,3281,8.128,3282,8.128,3283,6.662,3284,6.662,3285,6.662]],["title/directives/NgxSaveOnExitComponent.html",[292,0.723,593,2.242]],["body/directives/NgxSaveOnExitComponent.html",[3,0.059,4,0.052,5,0.059,10,0.138,11,0.217,12,0.586,16,0.217,17,0.006,19,0.207,27,0.059,29,1.416,32,1.142,34,1.406,44,1.895,47,1.529,49,1.478,57,2.904,61,2.052,81,2.691,88,0.004,89,0.004,90,0.43,96,1.021,109,1.487,137,1.332,180,1.021,183,1.281,184,1.642,187,1.101,193,1.576,196,1.541,205,0.439,206,2.017,268,1.95,272,1.175,292,1.004,294,1.194,300,1.73,305,3.663,308,1.262,310,3.53,311,3.41,315,2.341,317,1.281,324,3.378,332,2.687,340,2.866,349,2.773,366,3.922,368,3.901,369,2.008,373,3.549,387,5.477,412,3.209,425,4.783,563,3.083,593,3.114,649,3.556,691,2.148,694,4.783,802,3.041,941,6.733,1099,2.969,1219,3.632,1408,4.362,1607,3.736,1799,4.204,2918,4.989,2989,4.579,3272,8.249,3273,8.249,3286,4.865,3287,7.547,3288,6.633,3289,8.106,3290,8.106,3291,6.633,3292,6.633,3293,8.754,3294,7.547,3295,6.633,3296,7.547,3297,6.633,3298,4.865,3299,4.865,3300,5.917,3301,4.865,3302,4.865,3303,6.633,3304,6.633,3305,5.446,3306,6.733,3307,6.633,3308,6.633,3309,4.865,3310,4.865,3311,4.865,3312,4.865,3313,4.865,3314,4.865,3315,4.865]],["title/interfaces/NgxStorage.html",[0,0.122,3316,3.153]],["body/interfaces/NgxStorage.html",[0,0.235,2,1.007,3,0.075,4,0.067,5,0.075,10,0.177,11,0.255,15,3.843,16,0.322,17,0.006,19,0.194,27,0.115,76,3.544,88,0.005,89,0.005,137,1.281,139,4.102,152,1.348,171,2.156,268,2.291,272,1.503,273,3.28,476,3.266,502,3.244,751,2.03,781,1.862,946,5.888,1261,3.946,2441,2.924,2442,4.111,3316,5.146,3317,4.299,3318,6.157,3319,6.157,3320,6.157,3321,4.111,3322,5.146,3323,6.157,3324,5.393,3325,5.382,3326,4.299,3327,5.393,3328,5.393,3329,4.111]],["title/interfaces/NgxStorageBaseEvent.html",[0,0.122,3323,3.297]],["body/interfaces/NgxStorageBaseEvent.html",[0,0.236,2,1.026,3,0.077,4,0.068,5,0.077,10,0.18,11,0.257,16,0.323,17,0.006,19,0.198,27,0.115,76,3.561,88,0.005,89,0.005,137,1.476,139,4.043,152,1.354,171,2.175,268,2.318,272,1.532,273,3.298,476,3.762,502,3.305,751,2.069,781,1.897,946,4.188,1261,4.021,2441,2.979,2442,5.927,3316,4.188,3317,4.38,3318,4.38,3319,4.38,3320,4.38,3321,4.188,3322,5.927,3323,6.375,3324,5.439,3325,5.445,3326,4.38,3327,5.439,3328,5.439,3329,4.188]],["title/interfaces/NgxStorageClearEvent.html",[0,0.122,3327,3.027]],["body/interfaces/NgxStorageClearEvent.html",[0,0.238,2,1.052,3,0.078,4,0.07,5,0.078,10,0.185,11,0.261,16,0.321,17,0.006,19,0.203,27,0.116,76,3.582,88,0.005,89,0.005,137,1.317,139,3.799,152,1.363,171,2.295,268,2.354,272,1.57,273,3.322,476,3.356,502,3.389,751,2.121,781,1.944,946,4.294,1261,4.122,2441,3.054,2442,4.294,3316,4.294,3317,4.49,3318,4.49,3319,4.49,3320,4.49,3321,4.294,3322,5.287,3323,6.421,3324,5.5,3325,5.529,3326,4.49,3327,5.74,3328,5.5,3329,4.294]],["title/interfaces/NgxStorageRemoveEvent.html",[0,0.122,3328,3.027]],["body/interfaces/NgxStorageRemoveEvent.html",[0,0.236,2,1.03,3,0.077,4,0.069,5,0.077,10,0.181,11,0.258,16,0.323,17,0.006,19,0.199,27,0.115,76,3.682,88,0.005,89,0.005,137,1.3,139,3.765,152,1.389,171,2.278,268,2.324,272,1.538,273,3.412,476,3.314,502,3.32,751,2.078,781,1.905,946,4.206,1261,4.038,2441,2.992,2442,4.206,3316,4.206,3317,4.399,3318,4.399,3319,4.399,3320,4.399,3321,4.206,3322,5.221,3323,6.383,3324,5.449,3325,6.383,3326,4.399,3327,5.449,3328,5.698,3329,4.206]],["title/injectables/NgxStorageService.html",[259,1.478,3330,4.261]],["body/injectables/NgxStorageService.html",[3,0.027,4,0.024,5,0.027,7,1.648,10,0.063,11,0.233,12,0.605,16,0.309,17,0.006,19,0.202,26,1.865,27,0.057,28,0.782,29,0.361,32,1.424,34,2.45,36,1.774,42,1.87,44,2.154,47,1.386,49,2.045,61,2.116,73,0.845,75,1.475,76,3.471,81,1.221,88,0.002,89,0.002,90,0.415,96,1.052,97,1.049,99,2.167,105,3.096,107,2.669,128,0.956,136,0.879,137,0.988,139,3.338,152,1.336,162,2.053,177,1.316,180,1.052,183,0.906,184,1.038,187,1.012,190,1.392,193,1.812,194,2.017,196,1.486,200,2.167,203,0.879,205,0.202,219,1.834,233,2.032,234,2.245,237,2.493,238,2.693,255,1.509,259,1.138,261,1,268,2.625,272,0.539,273,2.724,274,1.103,300,1.567,308,0.895,311,3.005,317,0.431,323,1.715,328,4.029,335,2.381,345,2.763,349,4.073,352,1.834,369,2.502,379,0.688,392,1.29,402,2.429,412,3.331,476,3.195,494,1.993,497,4.851,501,0.646,502,1.164,639,1.103,649,2.915,699,1.316,703,1.865,704,2.367,713,1.426,718,0.741,721,2.331,751,3.038,769,1.81,781,2.834,819,2.257,820,2.257,824,1.234,831,2.862,936,3.003,946,4.27,947,1.884,966,3.948,992,2.845,1099,1.363,1107,1.475,1175,1.234,1176,0.813,1206,1.316,1244,2.514,1261,5.233,1262,3.02,1358,3.238,1370,3.203,1402,2.245,1404,1.234,1405,1.164,1408,2.756,1417,1.715,1523,5.311,1607,2.825,1609,2.514,1614,3.59,1775,1.542,1818,3.096,1825,3.096,1868,1.834,1871,1.416,2130,1.197,2313,1.993,2392,1.993,2441,2.823,2442,6.585,2462,1.993,2473,2.669,2474,7.968,2532,1.993,2556,1.916,2642,1.715,2885,1.234,3080,3.282,3158,3.282,3218,4.465,3249,1.993,3316,3.969,3318,4.466,3319,4.933,3320,4.466,3321,5.857,3322,5.034,3324,3.446,3325,4.151,3326,2.54,3327,3.446,3328,3.446,3329,2.429,3330,6.803,3331,8.478,3332,2.234,3333,5.437,3334,6.101,3335,4.69,3336,4.69,3337,6.839,3338,4.69,3339,4.69,3340,3.679,3341,3.679,3342,8.128,3343,2.234,3344,2.234,3345,2.234,3346,3.679,3347,6.012,3348,3.679,3349,2.234,3350,2.234,3351,2.234,3352,3.679,3353,2.234,3354,3.679,3355,2.234,3356,2.234,3357,2.234,3358,2.234,3359,3.679,3360,2.234,3361,3.679,3362,2.234,3363,2.234,3364,3.679,3365,2.234,3366,2.234,3367,2.234,3368,2.234,3369,2.234,3370,2.234,3371,2.234,3372,2.234,3373,2.234,3374,2.234,3375,2.234,3376,1.416,3377,2.234,3378,4.69,3379,2.234,3380,2.234,3381,1.834,3382,2.234,3383,2.234,3384,3.282,3385,2.234,3386,3.679,3387,3.282,3388,3.282,3389,3.679,3390,3.679,3391,2.234,3392,2.234,3393,2.234,3394,2.234,3395,2.234,3396,2.234,3397,6.012,3398,2.234,3399,6.012,3400,3.679,3401,4.69,3402,3.679,3403,3.679,3404,2.234,3405,2.234,3406,3.679,3407,6.012,3408,2.234,3409,2.234,3410,2.234,3411,2.234,3412,2.234,3413,2.234,3414,2.234,3415,4.69,3416,2.234,3417,2.234,3418,2.234,3419,2.234,3420,2.234,3421,2.234,3422,2.234,3423,2.234,3424,2.234,3425,2.234,3426,2.234,3427,2.234,3428,2.234,3429,2.234]],["title/interfaces/NgxStorageSetEvent.html",[0,0.122,3324,3.027]],["body/interfaces/NgxStorageSetEvent.html",[0,0.236,2,1.02,3,0.076,4,0.068,5,0.076,10,0.179,11,0.257,16,0.324,17,0.006,19,0.197,27,0.115,76,3.676,88,0.005,89,0.005,137,1.292,139,3.748,152,1.386,171,2.27,268,2.31,272,1.523,273,3.47,476,3.293,502,3.286,751,2.057,781,1.886,946,4.164,1261,3.997,2441,2.962,2442,4.164,3316,4.164,3317,4.355,3318,4.355,3319,4.355,3320,4.355,3321,4.164,3322,5.188,3323,6.364,3324,5.678,3325,6.364,3326,6.186,3327,5.425,3328,5.425,3329,4.164]],["title/interfaces/NgxStore.html",[0,0.122,3430,3.668]],["body/interfaces/NgxStore.html",[0,0.191,2,0.944,3,0.07,4,0.063,5,0.07,10,0.166,11,0.244,16,0.313,17,0.006,19,0.281,27,0.105,35,3.975,38,2.809,49,1.841,51,3.699,76,2.831,88,0.005,89,0.005,96,0.898,101,4.566,102,2.959,106,1.687,122,1.973,123,5.315,124,3.041,127,4.707,128,3.946,130,4.974,131,4.8,145,5.43,146,4.236,147,5.452,148,5.04,153,5.747,154,3.853,155,5.43,156,4.03,191,3.898,194,2.166,238,2.614,274,4.625,285,4.236,286,4.408,379,1.4,506,3.694,509,2.484,781,1.745,1343,7.394,1799,3.699,1806,5.166,1994,5.166,2625,4.793,3138,5.747,3381,4.793,3430,5.747,3431,4.793,3432,6.675,3433,7.368,3434,7.152,3435,6.69,3436,5.207,3437,6.675,3438,4.793,3439,4.236,3440,4.793,3441,3.853,3442,6.144,3443,8.034,3444,5.207,3445,5.207,3446,5.207,3447,5.207,3448,5.207,3449,5.207]],["title/injectables/NgxStoreService.html",[259,1.478,3129,3.297]],["body/injectables/NgxStoreService.html",[0,0.114,2,0.719,3,0.054,4,0.048,5,0.054,10,0.126,11,0.203,12,0.773,16,0.296,17,0.006,19,0.243,27,0.054,28,1.324,32,0.673,34,2.254,36,3.653,44,2.086,49,1.604,68,2.826,74,2.453,76,2.358,88,0.004,89,0.004,90,0.393,96,1.2,97,2.926,98,5.007,99,3.671,113,2.713,114,2.312,124,2.316,131,4.92,151,6.41,180,1.264,183,1.204,184,1.63,187,1.078,193,2.077,196,1.561,205,0.401,209,2.619,238,2.791,259,1.928,261,1.991,268,2.665,272,1.073,274,4.787,298,2.874,300,1.346,308,0.662,324,1.715,367,3.974,369,1.915,377,2.817,379,1.635,392,3.353,431,2.316,501,1.801,509,1.476,753,2.713,769,2.405,797,2.713,802,2.857,822,2.619,829,2.935,947,3.3,992,2.619,1127,3.247,1791,5.56,2420,2.817,2613,3.65,3129,4.968,3430,3.414,3435,5.99,3441,2.935,3450,4.445,3451,6.404,3452,5.117,3453,5.117,3454,5.117,3455,5.117,3456,4.445,3457,6.232,3458,5.117,3459,4.445,3460,5.117,3461,4.445,3462,5.117,3463,4.445,3464,5.117,3465,5.117,3466,4.445,3467,5.877,3468,4.445,3469,5.117,3470,4.445,3471,4.445,3472,5.56,3473,4.445,3474,7.196,3475,4.445,3476,4.445,3477,4.445,3478,4.445,3479,4.445,3480,4.445,3481,4.445,3482,4.445,3483,4.445,3484,4.445,3485,4.445,3486,4.445,3487,4.445,3488,4.445,3489,4.445,3490,4.445,3491,4.445,3492,4.445,3493,4.445]],["title/directives/NgxTableCellDirective.html",[292,0.723,594,2.298]],["body/directives/NgxTableCellDirective.html",[3,0.053,4,0.047,5,0.053,10,0.125,11,0.202,12,0.547,16,0.285,17,0.006,19,0.193,27,0.053,32,1.369,38,2.98,47,1.451,48,3.207,72,1.77,81,3.105,88,0.004,89,0.004,90,0.547,96,0.678,137,1.345,152,0.634,171,1.569,179,1.211,180,1.102,182,2.019,183,1.196,184,1.718,187,1.165,193,1.047,196,1.361,205,0.398,237,2.839,250,3.779,255,2.54,256,4.493,292,0.937,294,1.081,298,1.851,300,1.665,304,1.984,306,2.688,308,1.38,311,1.544,315,3.446,317,1.383,319,2.511,320,2.433,333,3.32,345,2.595,379,1.158,509,2.818,512,2.055,524,1.949,535,3.326,558,3.446,562,4.394,594,3.739,628,5.327,649,2.361,665,5.656,666,4.493,667,5.196,668,5.973,669,5.637,670,5.18,671,5.196,672,4.944,673,4.538,674,6.459,675,5.196,676,5.5,677,5.5,678,4.756,680,4.493,682,3.42,683,3.924,684,4.275,685,4.756,686,4.756,687,4.756,688,4.756,689,2.839,691,1.906,694,2.792,695,3.924,697,3.383,698,3.583,699,2.595,700,3.383,701,4.538,703,2.233,704,1.734,706,4.42,713,1.34,992,3.09,1070,3.226,1082,3.197,1163,5.084,1450,5.379,1669,5.084,1670,5.084,1671,5.084,1672,5.084,1673,3.617,1674,3.617,1675,3.617,1687,5.084,1689,3.648,1690,5.084,1692,3.617,1693,3.617,1694,3.617,3494,4.405,3495,4.405,3496,6.192,3497,4.405,3498,4.405,3499,4.405,3500,4.405]],["title/interfaces/NgxTableConfiguration.html",[0,0.122,3501,3.921]],["body/interfaces/NgxTableConfiguration.html",[0,0.116,2,0.735,3,0.055,4,0.049,5,0.055,7,3.528,10,0.129,11,0.257,12,0.859,16,0.32,17,0.006,19,0.198,27,0.095,29,1.521,37,2.14,42,1.314,61,1.407,64,4.887,68,2.101,88,0.004,89,0.004,90,0.696,96,0.7,105,3.002,109,1.075,114,3.181,137,1.475,144,3.298,152,1.234,203,2.492,205,0.411,237,4.23,245,1.21,255,2.597,306,5.368,308,1.276,333,3.394,349,3.608,383,4.371,392,3.006,431,4.103,479,3.532,524,1.993,535,4.108,574,2.036,595,2.135,596,2.135,597,2.135,673,2.882,691,2.308,751,2.971,943,6.046,1070,3.298,1101,3.394,1107,5.2,1292,5.013,1462,4.026,1471,5.475,1603,3.298,1885,3.73,1985,5.717,2527,5.198,3305,5.198,3501,5.981,3502,4.056,3503,4.056,3504,6.331,3505,8.004,3506,7.833,3507,7.04,3508,8.574,3509,8.004,3510,7.027,3511,8.574,3512,5.198,3513,7.649,3514,7.649,3515,5.648,3516,7.649,3517,5.648,3518,7.027,3519,6.049,3520,6.467,3521,6.331,3522,7.027,3523,4.056,3524,4.056,3525,4.547,3526,4.056]],["title/interfaces/NgxTableCypressDataTagsBase.html",[0,0.122,3527,3.921]],["body/interfaces/NgxTableCypressDataTagsBase.html",[0,0.215,2,1.142,3,0.085,4,0.076,5,0.085,10,0.2,11,0.275,12,0.853,16,0.304,17,0.006,19,0.22,27,0.102,29,1.361,88,0.005,89,0.005,152,1.424,231,5.123,665,5.486,716,5.123,1070,4.957,1689,5.486,1783,5.797,3527,6.911,3528,5.797,3529,5.797,3530,6.911,3531,6.298,3532,5.422,3533,5.797]],["title/pipes/NgxTableGetPipe.html",[174,1.404,1709,3.921]],["body/pipes/NgxTableGetPipe.html",[3,0.074,4,0.066,5,0.074,12,0.545,16,0.201,17,0.006,19,0.242,27,0.093,32,1.465,36,3.205,44,2.185,47,1.57,48,2.761,49,1.888,64,4.828,73,2.332,88,0.005,89,0.005,90,0.685,96,0.949,136,3.05,152,1.345,173,4.474,174,2.612,176,3.125,179,1.695,180,1.304,182,2.526,183,1.191,184,1.337,185,3.305,186,5.114,187,0.745,193,1.465,196,1.61,204,4.541,205,0.557,206,2.356,324,2.989,328,3.632,379,1.585,384,5.95,425,4.91,428,5.114,704,3.05,824,3.405,1486,6.389,1709,7.518,1711,6.911,1837,5.062,2036,5.062,3258,6.361,3534,7.747,3535,6.165,3536,6.165,3537,6.165,3538,6.911,3539,5.5,3540,5.5,3541,5.062,3542,7.747,3543,6.165,3544,6.165]],["title/pipes/NgxTableHasObserversPipe.html",[174,1.404,3545,3.921]],["body/pipes/NgxTableHasObserversPipe.html",[3,0.082,4,0.074,5,0.082,12,0.604,16,0.223,17,0.006,19,0.213,27,0.082,29,1.334,34,1.974,44,1.597,47,1.866,66,3.058,83,3.874,88,0.005,89,0.005,90,0.604,96,1.051,137,1.356,174,2.007,176,3.461,179,1.877,180,1.364,182,2.69,183,1.319,184,1.424,185,4.423,187,0.825,193,1.622,196,1.685,204,3.661,205,0.617,206,2.077,319,5.053,320,5.086,379,1.543,441,7.36,442,6.092,444,6.092,445,8.216,3545,6.774,3546,8.25,3547,8.25,3548,6.828,3549,8.25,3550,6.828,3551,6.828]],["title/directives/NgxTableOpenRowStateTemplateAbstractComponent.html",[292,0.723,595,2.242]],["body/directives/NgxTableOpenRowStateTemplateAbstractComponent.html",[3,0.073,4,0.065,5,0.073,10,0.273,11,0.249,16,0.303,17,0.006,19,0.188,27,0.073,28,1.78,88,0.005,89,0.005,90,0.532,96,0.925,109,1.543,137,1.254,184,1.663,187,1.122,205,0.543,292,1.154,294,1.475,304,2.443,308,1.135,324,2.942,341,2.725,379,1.427,392,3.443,509,2.531,546,3.496,563,2.882,595,3.581,713,2.547,943,5.759,949,5.204,1018,8.108,1471,6.134,3552,9.432,3553,4.937,3554,6.261,3555,6.261,3556,7.626,3557,7.626,3558,7.471,3559,7.626]],["title/directives/NgxTableSelectTemplateAbstractComponent.html",[292,0.723,596,2.242]],["body/directives/NgxTableSelectTemplateAbstractComponent.html",[3,0.074,4,0.066,5,0.074,10,0.274,11,0.252,16,0.305,17,0.006,19,0.241,21,3.622,27,0.074,70,6.076,88,0.005,89,0.005,90,0.544,96,0.946,98,4.271,102,4.289,109,1.313,137,1.271,184,1.67,187,1.128,194,3.139,205,0.555,292,1.17,294,1.508,304,2.477,308,1.151,324,2.984,341,2.933,379,1.447,509,2.567,546,3.545,563,2.912,596,3.631,949,5.223,1426,4.722,1471,5.981,3553,5.048,3554,6.35,3555,6.35,3560,9.479,3561,7.733,3562,7.733,3563,7.733,3564,8.46]],["title/pipes/NgxTableShowHeaderPipe.html",[174,1.404,3565,3.921]],["body/pipes/NgxTableShowHeaderPipe.html",[3,0.072,4,0.065,5,0.072,12,0.53,16,0.196,17,0.006,19,0.261,27,0.092,29,1.231,32,1.404,35,2.886,36,3.164,42,1.733,44,2.123,47,1.84,49,1.961,61,1.855,64,4.339,73,2.88,74,2.361,88,0.005,89,0.005,90,0.673,96,0.923,105,5.026,114,2.225,135,2.314,137,0.986,152,0.863,174,2.586,176,3.04,179,1.649,180,1.287,182,2.482,183,1.158,184,1.314,185,4.081,186,3.959,187,0.724,193,1.425,196,1.59,204,4.483,205,0.541,206,2.315,237,3.834,324,2.314,425,3.8,428,3.959,691,1.868,718,1.991,824,3.312,861,4.924,1070,4.731,1173,2.961,1462,3.574,1471,3.66,1837,4.924,3519,6.757,3532,6.757,3539,5.35,3540,5.35,3541,4.924,3565,7.224,3566,7.612,3567,7.612,3568,5.997,3569,7.612,3570,8.797,3571,5.997,3572,5.997,3573,5.997,3574,5.997,3575,5.997,3576,4.924,3577,5.35,3578,5.997,3579,7.612,3580,5.997,3581,5.997]],["title/interfaces/NgxTableShowHeaderRequirements.html",[0,0.122,3532,3.668]],["body/interfaces/NgxTableShowHeaderRequirements.html",[0,0.218,2,1.166,3,0.087,4,0.078,5,0.087,10,0.205,11,0.278,16,0.296,17,0.006,19,0.225,27,0.103,29,1.569,88,0.005,89,0.005,152,1.306,231,5.232,665,4.248,716,5.232,1070,4.44,1689,4.248,1783,7.699,3527,5.921,3528,5.921,3529,5.921,3530,6.998,3531,6.433,3532,6.546,3533,7.699]],["title/interfaces/NgxTableSortEvent.html",[0,0.122,717,3.466]],["body/interfaces/NgxTableSortEvent.html",[0,0.189,2,1.198,3,0.089,4,0.08,5,0.089,10,0.21,11,0.283,16,0.283,17,0.006,19,0.231,27,0.089,88,0.005,89,0.005,668,6.244,698,4.141,701,5.994,714,6.607,715,6.607,717,6.283,3582,7.405,3583,7.405,3584,9.175]],["title/pipes/NgxTableSortIconPipe.html",[174,1.404,3585,3.921]],["body/pipes/NgxTableSortIconPipe.html",[3,0.08,4,0.072,5,0.08,12,0.587,16,0.217,17,0.006,19,0.253,27,0.08,34,1.92,44,1.897,47,1.644,48,3.923,88,0.005,89,0.005,90,0.587,96,1.022,152,1.167,174,2.385,176,3.367,179,1.826,180,1.348,182,2.645,183,1.283,184,1.4,185,3.561,187,0.802,193,1.578,196,1.665,204,4.349,205,0.6,206,2.02,379,1.707,673,5.781,698,4.259,701,5.781,704,3.194,720,5.926,3585,6.661,3586,8.113,3587,8.113,3588,6.642,3589,8.113,3590,8.113,3591,6.642,3592,8.113,3593,5.926,3594,6.642,3595,6.642,3596,6.642]],["title/directives/NgxTableSortTemplateAbstractComponent.html",[292,0.723,597,2.242]],["body/directives/NgxTableSortTemplateAbstractComponent.html",[3,0.081,4,0.072,5,0.081,10,0.191,11,0.267,16,0.267,17,0.006,19,0.255,27,0.081,88,0.005,89,0.005,90,0.595,96,1.036,109,1.595,137,1.345,184,1.521,187,0.988,205,0.608,292,1.238,294,1.652,304,2.621,308,1.218,324,3.157,341,2.531,379,1.53,509,2.716,546,3.75,563,3.033,597,3.841,673,5.952,698,4.27,701,4.268,713,2.68,949,4.913,3553,5.529,3554,6.717,3555,6.717,3558,7.862,3593,6.008,3597,8.812,3598,8.181]],["title/directives/NgxTooltipAbstractComponent.html",[292,0.723,598,1.959]],["body/directives/NgxTooltipAbstractComponent.html",[3,0.063,4,0.084,5,0.063,10,0.149,11,0.228,17,0.006,19,0.245,27,0.063,32,0.793,47,1.692,72,3.148,81,1.738,88,0.004,89,0.004,90,0.791,96,0.806,137,1.47,183,1.346,184,1.662,187,1.17,196,1.325,205,0.473,271,2.945,292,1.055,294,1.285,300,1.829,304,2.233,305,3.85,308,0.779,315,3.355,317,1.346,334,2.243,340,3.085,341,2.157,369,2.085,501,1.514,506,2.585,563,2.697,598,2.86,599,3.273,618,4.752,652,4.082,713,2.383,718,1.738,852,3.971,908,4.409,1463,6.433,3599,5.237,3600,6.415,3601,7.98,3602,7.452,3603,7.452,3604,6.219,3605,6.219,3606,6.97,3607,5.885,3608,6.97,3609,6.97,3610,6.97,3611,6.97,3612,6.97,3613,6.219,3614,6.219,3615,6.219,3616,5.237,3617,3.085,3618,3.319,3619,4.672,3620,6.97,3621,6.97]],["title/interfaces/NgxTooltipActiveElementEvent.html",[0,0.122,3622,3.027]],["body/interfaces/NgxTooltipActiveElementEvent.html",[0,0.239,2,0.993,3,0.074,4,0.102,5,0.074,10,0.174,11,0.252,12,0.784,16,0.323,17,0.006,19,0.241,27,0.11,29,0.993,39,3.112,47,1.565,81,2.038,88,0.005,89,0.005,109,1.585,152,1.343,171,2.248,205,0.554,245,1.633,271,2.35,516,1.896,524,1.933,598,2.519,618,4.609,738,4.465,852,3.916,908,4.803,1035,3.031,2145,3.199,3607,4.981,3617,5.583,3618,3.891,3622,5.358,3623,4.053,3624,6.037,3625,3.391,3626,3.891,3627,4.239,3628,3.891,3629,4.897,3630,4.897,3631,3.891]],["title/interfaces/NgxTooltipActiveTooltipEvent.html",[0,0.122,3630,3.027]],["body/interfaces/NgxTooltipActiveTooltipEvent.html",[0,0.241,2,1.039,3,0.078,4,0.103,5,0.078,10,0.182,11,0.26,16,0.312,17,0.006,19,0.248,27,0.112,29,1.039,39,3.258,47,1.611,81,2.134,88,0.005,89,0.005,109,1.466,152,1.298,171,2.285,205,0.58,245,1.71,271,2.418,516,1.951,524,2.024,598,2.637,618,4.262,738,4.249,852,3.405,908,4.851,1035,3.173,2145,3.349,3607,5.086,3617,5.46,3618,4.074,3622,5.039,3623,4.243,3624,6.119,3625,3.55,3626,4.074,3627,4.438,3628,4.074,3629,5.039,3630,5.471,3631,4.074]],["title/interfaces/NgxTooltipBaseEvent.html",[0,0.122,3624,3.153]],["body/interfaces/NgxTooltipBaseEvent.html",[0,0.24,2,1.014,3,0.076,4,0.102,5,0.076,10,0.178,11,0.256,16,0.319,17,0.006,19,0.244,27,0.111,29,1.381,39,3.179,47,1.586,81,2.082,88,0.005,89,0.005,109,1.45,152,1.35,171,2.163,205,0.566,245,1.669,271,2.799,516,2.194,524,1.974,598,2.573,618,4.215,738,4.219,852,3.353,908,4.826,1035,3.096,2145,3.267,3607,5.421,3617,5.421,3618,3.974,3622,4.962,3623,4.14,3624,6.075,3625,3.464,3626,3.974,3627,4.33,3628,3.974,3629,4.962,3630,4.962,3631,3.974]],["title/interfaces/NgxTooltipConfiguration.html",[0,0.122,3626,3.027]],["body/interfaces/NgxTooltipConfiguration.html",[0,0.241,2,1.027,3,0.077,4,0.097,5,0.077,10,0.18,11,0.258,12,0.698,16,0.321,17,0.006,19,0.246,27,0.111,29,1.027,39,3.22,47,1.599,81,2.109,88,0.005,89,0.005,109,1.599,152,1.293,171,2.176,205,0.574,245,1.69,271,2.401,516,1.937,524,2,598,2.606,618,4.24,738,4.235,852,3.38,908,4.553,1035,3.137,2145,3.31,3607,5.059,3617,5.624,3618,4.026,3622,5.003,3623,4.194,3624,5.93,3625,3.509,3626,5.003,3627,6.201,3628,4.026,3629,5.003,3630,5.003,3631,4.026]],["title/directives/NgxTooltipDirective.html",[292,0.723,599,2.242]],["body/directives/NgxTooltipDirective.html",[3,0.046,4,0.071,5,0.046,10,0.108,11,0.183,12,0.685,16,0.125,17,0.006,19,0.242,27,0.068,32,1.225,44,1.308,47,1.475,49,1.727,66,1.713,72,2.925,81,2.687,88,0.003,89,0.003,90,0.495,96,0.589,102,3.927,109,1.42,137,0.629,179,1.052,182,1.824,183,1.081,184,1.613,187,1.167,196,1.589,205,0.345,245,1.018,271,2.356,292,1.102,294,0.938,298,1.673,300,1.801,301,3.863,304,1.793,305,3.09,308,1.415,311,1.341,315,3.729,317,1.689,330,3.552,331,3.412,334,1.638,340,2.253,341,2.253,346,2.775,349,2.18,357,4.801,369,2.424,467,3.415,476,3.818,480,2.503,501,1.105,506,1.888,516,1.373,598,1.569,599,3.107,618,3.595,625,5.592,627,4.297,644,5.082,647,4.297,652,1.992,661,2.627,718,1.269,738,3.552,746,5.622,759,4.06,760,4.06,762,5.082,794,4.297,814,2.525,815,4.91,819,2.693,820,2.693,852,3.118,860,2.05,908,2.836,935,4.06,1035,3.267,1099,4.038,1100,4.568,1462,4.106,1604,3.863,1616,4.368,1796,4.06,2864,5.082,2935,2.999,3600,4.297,3602,6.495,3603,6.495,3604,4.992,3605,4.992,3607,5.858,3613,4.992,3614,4.992,3615,4.992,3617,4.768,3632,3.824,3633,8.36,3634,6.616,3635,7.748,3636,7.281,3637,6.616,3638,7.281,3639,6.495,3640,7.281,3641,6.495,3642,5.595,3643,5.595,3644,5.595,3645,5.595,3646,5.595,3647,5.595,3648,5.595,3649,8.093,3650,5.595,3651,6.616,3652,3.824,3653,3.824,3654,3.824,3655,3.824,3656,5.595,3657,3.824,3658,6.616,3659,3.824,3660,3.412,3661,4.992,3662,4.992,3663,3.824,3664,5.595,3665,5.595,3666,3.824,3667,3.824,3668,3.824,3669,3.824,3670,5.595]],["title/interfaces/NgxTooltipInactiveEvent.html",[0,0.122,3629,3.027]],["body/interfaces/NgxTooltipInactiveEvent.html",[0,0.242,2,1.044,3,0.078,4,0.097,5,0.078,10,0.183,11,0.26,16,0.313,17,0.006,19,0.249,27,0.112,29,1.044,39,3.273,47,1.615,81,2.143,88,0.005,89,0.005,109,1.469,152,1.3,171,2.289,205,0.583,245,1.718,271,2.425,516,1.956,524,2.032,598,2.649,618,4.27,738,4.254,852,3.414,908,4.856,1035,3.187,2145,3.364,3607,5.096,3617,5.467,3618,4.092,3622,5.053,3623,4.262,3624,6.127,3625,3.566,3626,4.092,3627,4.457,3628,4.092,3629,5.482,3630,5.053,3631,4.092]],["title/interfaces/NgxTooltipItem.html",[0,0.122,3628,3.027]],["body/interfaces/NgxTooltipItem.html",[0,0.239,2,0.994,3,0.074,4,0.096,5,0.074,10,0.174,11,0.252,12,0.785,16,0.324,17,0.006,19,0.241,27,0.11,29,0.994,39,3.117,47,1.567,81,2.041,88,0.005,89,0.005,109,1.586,152,1.38,171,2.144,205,0.555,245,1.636,271,2.782,516,1.897,524,1.935,598,2.522,618,4.61,738,4.466,852,3.918,908,4.5,1035,3.035,2145,3.203,3607,4.984,3617,5.584,3618,3.896,3622,4.901,3623,4.059,3624,5.861,3625,3.396,3626,3.896,3627,4.245,3628,4.901,3629,4.901,3630,4.901,3631,3.896]],["title/injectables/NgxTooltipService.html",[259,1.478,3600,3.668]],["body/injectables/NgxTooltipService.html",[3,0.038,4,0.034,5,0.038,10,0.09,11,0.159,12,0.431,16,0.257,17,0.006,19,0.236,27,0.038,28,0.676,31,2.31,32,1.19,34,1.409,37,2.554,39,2.472,42,2.184,44,1.675,49,2.114,57,1.393,61,2.51,66,1.425,73,2.242,74,1.253,81,1.056,83,1.494,88,0.003,89,0.003,90,0.281,96,0.75,102,1.613,106,1.409,109,1.283,135,1.881,137,0.802,152,0.702,162,1.393,174,0.936,180,0.75,183,0.942,184,1.512,187,1.071,193,1.158,196,1.263,203,1.92,205,0.287,206,0.968,233,1.758,234,1.942,238,2.184,259,1.509,261,1.425,271,2.392,272,0.768,300,1.731,308,1.208,311,2.976,317,1.567,324,1.881,329,2.839,345,3.492,349,2.779,366,2.135,369,2.532,373,2.909,379,0.912,399,4.386,412,3.267,476,3.001,501,0.92,502,3.088,513,1.532,516,2.041,524,1.002,618,4.325,713,0.968,718,1.056,738,3.045,781,1.986,813,1.459,819,2.347,820,2.347,852,3.067,857,4.301,908,3.368,947,2.382,964,3.745,966,4.054,978,2.613,992,2.157,1002,2.779,1023,4.821,1035,3.28,1049,1.875,1115,1.942,1173,1.571,1175,1.758,1176,1.158,1262,4.004,1275,2.444,1342,2.31,1462,2.783,1609,1.706,1758,4.552,1807,1.459,1811,1.571,1825,2.101,1827,2.31,1848,2.613,1849,2.613,1850,2.613,1872,1.942,2145,2.54,2420,4.539,2556,1.658,2559,4.992,2905,1.814,2935,2.614,2986,4.004,3019,2.31,3151,2.839,3376,4.21,3600,3.745,3607,5.808,3617,1.875,3625,2.693,3626,2.017,3628,4.21,3631,4.21,3639,5.927,3641,4.35,3661,2.839,3662,5.288,3671,3.183,3672,5.927,3673,6.643,3674,8.635,3675,5.927,3676,5.927,3677,5.927,3678,4.876,3679,3.183,3680,3.183,3681,3.183,3682,4.876,3683,3.183,3684,4.876,3685,4.876,3686,3.183,3687,3.183,3688,4.876,3689,3.183,3690,3.183,3691,4.876,3692,3.183,3693,3.183,3694,4.876,3695,3.183,3696,8.114,3697,8.114,3698,5.602,3699,8.114,3700,8.114,3701,4.821,3702,3.183,3703,3.183,3704,3.183,3705,4.876,3706,3.183,3707,3.183,3708,3.183,3709,4.876,3710,3.183,3711,3.183,3712,3.183,3713,5.927,3714,4.876,3715,4.876,3716,6.643,3717,4.876,3718,3.183,3719,3.183,3720,3.183,3721,3.183,3722,3.183,3723,3.183,3724,4.876,3725,3.183,3726,3.183,3727,4.876,3728,3.183,3729,5.927,3730,3.183,3731,4.876,3732,3.183,3733,2.839,3734,3.183,3735,3.183,3736,2.839,3737,3.183,3738,3.183,3739,3.183,3740,3.183,3741,3.183,3742,3.183,3743,3.183,3744,3.183,3745,3.183,3746,5.927,3747,3.183,3748,3.183,3749,3.183,3750,3.183,3751,3.183,3752,3.183,3753,3.183,3754,3.183,3755,3.183,3756,2.839,3757,3.183,3758,3.183,3759,2.444]],["title/interfaces/NgxTourBackdropClipEvent.html",[0,0.122,3760,3.668]],["body/interfaces/NgxTourBackdropClipEvent.html",[0,0.188,2,0.747,3,0.056,4,0.05,5,0.056,7,2.069,10,0.182,11,0.209,12,0.834,15,2.891,16,0.308,17,0.006,19,0.26,27,0.11,28,1.36,29,0.747,37,1.561,39,3.244,88,0.004,89,0.004,90,0.408,102,2.341,106,1.85,109,1.247,135,1.782,137,1.052,152,1.271,190,3.407,194,3.09,205,0.417,237,2.934,245,1.229,255,2.626,268,1.881,271,1.405,272,1.115,273,1.65,292,0.699,294,1.133,308,1.18,317,0.892,343,2.223,379,0.864,380,3.352,467,2.819,485,2.626,511,4.419,512,2.124,516,2.167,521,4.094,601,2.867,605,2.022,618,3.16,620,3.352,631,2.632,643,1.818,650,3.189,691,1.133,699,2.721,751,2.586,792,4.046,831,2.819,857,3.352,961,2.721,979,3.547,980,3.547,997,3.189,1002,3.648,1035,2.28,1070,2.406,1204,4.057,1206,2.721,1221,3.049,1222,3.049,1241,4.644,1292,2.632,1306,2.223,1561,4.839,1604,5.071,1689,2.721,1723,3.771,1779,2.341,1871,2.927,1872,3.906,2145,2.406,2243,2.819,2556,2.406,2562,2.819,2735,4.225,2794,3.352,2859,3.189,2897,4.464,2989,3.189,3019,3.352,3376,5.025,3625,4.057,3698,5.475,3701,4.644,3759,3.547,3760,4.916,3761,3.547,3762,6.617,3763,5.255,3764,4.916,3765,3.352,3766,4.644,3767,3.547,3768,5.641,3769,3.547,3770,3.792,3771,6.09,3772,4.916,3773,3.547,3774,3.792,3775,3.792,3776,5.255,3777,3.792,3778,3.792,3779,3.792,3780,3.792,3781,3.792,3782,6.617,3783,5.641,3784,3.792,3785,6.09,3786,6.252,3787,5.754,3788,3.547,3789,3.547,3790,3.352,3791,4.916,3792,3.547,3793,3.547,3794,3.547,3795,4.916,3796,4.916,3797,3.547,3798,3.547,3799,4.916,3800,3.547,3801,4.644]],["title/directives/NgxTourItemDirective.html",[292,0.723,601,2.139]],["body/directives/NgxTourItemDirective.html",[3,0.055,4,0.049,5,0.055,10,0.13,11,0.208,12,0.405,16,0.239,17,0.006,19,0.228,27,0.055,29,1.39,32,1.257,34,1.325,44,1.072,47,1.29,49,1.851,61,1.419,73,1.734,81,2.428,88,0.004,89,0.004,90,0.699,96,0.98,99,3.751,109,1.243,152,0.916,179,1.261,180,0.706,182,2.076,183,1.23,184,1.666,187,1.128,193,1.089,196,1.634,205,0.414,206,1.937,271,2.681,292,1.196,294,1.125,298,1.904,300,1.762,304,2.04,308,1.236,315,2.207,317,1.66,332,2.532,333,3.922,341,1.97,366,3.203,368,2.207,369,2.287,373,3.461,480,2.409,485,3.688,488,5.309,499,4.621,501,1.325,505,3.521,506,2.264,516,2.268,521,3.203,601,2.852,616,5.051,623,4.657,626,4.891,661,2.99,689,2.919,691,1.562,713,1.394,732,4.09,738,3.624,751,3.095,814,3.027,815,4.637,897,4.465,907,5.069,908,4.775,921,5.229,961,2.701,1015,4.31,1050,5.229,1059,2.701,1060,3.751,1091,2.532,1092,2.906,1220,5.229,1425,2.153,1451,7.058,1463,6.007,1603,3.812,1846,3.027,2398,6.527,2794,3.327,2864,3.521,3768,6.772,3787,4.621,3802,8.404,3803,9.421,3804,6.368,3805,6.368,3806,5.681,3807,6.368,3808,6.368,3809,4.585,3810,4.585,3811,6.368,3812,4.585,3813,4.585,3814,4.585,3815,6.368,3816,4.585,3817,4.585,3818,4.585,3819,3.521,3820,4.585,3821,6.368,3822,4.585,3823,4.585,3824,4.585,3825,4.585]],["title/interfaces/NgxTourRouteOptions.html",[0,0.122,3769,3.668]],["body/interfaces/NgxTourRouteOptions.html",[0,0.189,2,0.754,3,0.056,4,0.05,5,0.056,7,2.088,10,0.183,11,0.21,12,0.82,15,2.906,16,0.306,17,0.006,19,0.261,27,0.111,28,1.369,29,0.754,37,1.576,39,3.266,88,0.004,89,0.004,90,0.412,102,2.364,106,1.862,109,1.254,135,1.799,137,1.059,152,1.318,190,3.269,194,3.1,205,0.421,237,2.954,245,1.241,255,2.643,268,1.894,271,1.418,272,1.126,273,1.665,292,0.706,294,1.144,308,1.185,317,0.901,343,2.244,379,0.872,380,3.384,467,2.846,485,2.643,511,4.448,512,2.139,516,2.173,521,4.102,601,2.885,605,2.041,618,3.181,620,3.384,631,2.658,643,1.836,650,3.219,691,1.144,699,2.747,751,1.52,792,3.025,831,2.846,857,3.384,961,2.747,979,3.581,980,3.581,997,3.219,1002,3.672,1035,2.302,1070,2.429,1204,4.077,1206,2.747,1221,5.256,1222,3.078,1241,4.675,1292,2.658,1306,2.244,1561,4.859,1604,5.096,1689,2.747,1723,3.796,1779,2.364,1871,2.955,1872,3.932,2145,2.429,2243,2.846,2556,2.429,2562,2.846,2735,4.253,2794,3.384,2859,3.219,2897,3.454,2989,3.219,3019,3.384,3376,5.046,3625,4.077,3698,5.497,3701,4.675,3759,3.581,3760,3.581,3761,3.581,3762,5.669,3763,6.538,3764,4.948,3765,3.384,3766,4.675,3767,3.581,3768,5.669,3769,4.948,3770,6.538,3771,6.115,3772,4.948,3773,3.581,3774,3.829,3775,3.829,3776,5.29,3777,3.829,3778,3.829,3779,3.829,3780,3.829,3781,3.829,3782,6.637,3783,5.669,3784,3.829,3785,6.115,3786,6.271,3787,5.778,3788,3.581,3789,3.581,3790,3.384,3791,4.948,3792,3.581,3793,3.581,3794,3.581,3795,4.948,3796,4.948,3797,3.581,3798,3.581,3799,4.948,3800,3.581,3801,4.675]],["title/directives/NgxTourShowWhenDirective.html",[292,0.723,603,2.298]],["body/directives/NgxTourShowWhenDirective.html",[3,0.046,4,0.041,5,0.046,10,0.188,11,0.183,16,0.286,17,0.006,19,0.228,27,0.046,32,1.226,38,2.7,42,1.109,48,4.28,49,1.626,55,2.456,61,1.736,73,1.452,82,5.444,83,3.113,88,0.003,89,0.003,90,0.339,96,0.591,174,1.128,179,1.055,183,1.084,184,1.511,187,1.13,191,1.999,196,1.26,205,0.347,206,1.706,238,1.719,272,0.927,292,1.226,294,0.942,298,1.677,300,1.24,304,1.797,308,1.206,317,1.565,338,2.342,341,2.051,366,2.903,368,3.734,369,2.607,373,3.193,392,2.324,412,2.759,424,2.261,485,3.324,488,4.811,499,4.071,501,1.109,505,2.948,506,1.895,509,2.575,513,1.847,603,2.7,704,3.054,706,4.242,713,2.016,751,2.162,813,1.759,908,3.933,947,2.664,949,4.487,971,4.202,992,2.042,996,2.844,1272,4.308,1320,2.65,1462,4.644,1603,2.922,1616,4.377,1754,7.045,1762,4.377,1779,3.697,1803,2.785,1807,1.759,1808,3.703,1810,1.802,1811,1.895,1829,3.703,1933,4.071,1998,4.811,2000,4.811,2001,5.525,2004,5.292,2008,3.778,2027,4.071,2033,4.811,2037,4.071,2039,3.703,2040,2.785,2041,3.703,2042,2.057,2054,2.342,2055,2.432,2063,3.703,2065,2.844,2066,4.308,2069,5.092,2074,5.092,2087,5.959,2106,5.092,2108,5.601,2113,5.092,2114,4.308,2310,2.65,2323,5.444,3790,4.811,3802,8.396,3826,9.411,3827,3.838,3828,8.369,3829,7.758,3830,5.61,3831,5.61,3832,5.61,3833,3.838,3834,3.838,3835,3.838,3836,3.838,3837,3.838,3838,3.838,3839,3.838,3840,3.838,3841,3.838,3842,5.61,3843,7.758,3844,3.838,3845,3.838,3846,3.838,3847,3.838,3848,3.838,3849,3.838,3850,3.838,3851,5.61,3852,3.838]],["title/interfaces/NgxTourStep.html",[0,0.122,3772,3.668]],["body/interfaces/NgxTourStep.html",[0,0.164,2,0.584,3,0.044,4,0.039,5,0.044,7,2.402,10,0.152,11,0.175,12,0.883,15,3.121,16,0.316,17,0.006,19,0.236,27,0.104,28,1.685,29,1.035,37,1.812,39,3.243,88,0.003,89,0.003,90,0.474,102,2.718,106,2.047,109,1.432,135,2.069,137,1.164,152,1.341,190,3.316,194,3.253,205,0.326,237,3.246,245,0.961,255,2.905,268,1.576,271,1.631,272,0.872,273,2.285,292,0.812,294,0.886,308,1.255,317,0.697,343,2.581,379,1.003,380,3.891,467,3.272,485,2.905,511,5.473,512,2.631,516,2.232,521,4.186,601,2.402,605,1.581,618,3.914,620,5.138,631,3.056,643,1.421,650,3.702,691,1.316,699,2.127,751,1.177,792,2.518,831,3.272,857,3.891,961,2.127,979,4.118,980,4.118,997,3.702,1002,3.646,1035,1.782,1070,2.794,1204,4.379,1206,3.159,1221,2.383,1222,2.383,1241,5.138,1292,3.056,1306,2.581,1561,5.146,1604,5.473,1689,3.159,1723,4.172,1779,2.718,1871,3.398,1872,4.321,2145,1.881,2243,3.272,2556,2.794,2562,3.272,2735,4.675,2794,2.62,2859,3.702,2897,3.429,2989,3.702,3019,5.138,3376,5.202,3625,4.179,3698,5.667,3701,5.138,3759,4.118,3760,2.773,3761,2.773,3762,6.304,3763,4.403,3764,4.118,3765,2.62,3766,5.138,3767,2.773,3768,6.304,3769,2.773,3770,2.964,3771,6.733,3772,4.913,3773,4.118,3774,4.403,3775,4.403,3776,5.814,3777,5.814,3778,5.814,3779,5.814,3780,5.814,3781,4.403,3782,6.916,3783,6.089,3784,4.403,3785,6.476,3786,6.663,3787,6.119,3788,4.118,3789,4.118,3790,3.891,3791,5.438,3792,4.118,3793,4.118,3794,4.118,3795,5.438,3796,5.438,3797,4.118,3798,4.118,3799,5.438,3800,4.118,3801,5.138]],["title/directives/NgxTourStepComponent.html",[292,0.723,605,2.091]],["body/directives/NgxTourStepComponent.html",[3,0.041,4,0.037,5,0.041,7,1.524,10,0.195,11,0.224,12,0.546,16,0.224,17,0.006,19,0.215,27,0.041,28,1.76,32,1.117,42,1.785,44,0.796,47,1.571,49,1.644,55,2.246,68,1.129,72,2.964,88,0.003,89,0.003,90,0.786,96,0.524,109,1.317,135,1.313,137,1.213,152,0.889,162,1.49,183,0.991,184,1.714,187,1.163,191,1.773,194,2.291,196,1.174,203,2.707,205,0.307,206,1.56,249,2.349,253,2.613,271,2.704,292,0.776,294,0.835,300,1.824,304,1.643,305,2.833,308,1.098,315,2.469,317,1.425,319,3.519,320,3.411,334,2.197,340,2.005,341,1.911,357,4.481,367,3.411,369,1.643,377,2.156,426,1.824,485,3.758,488,4.481,499,3.723,501,0.983,505,3.94,506,1.68,511,6.372,512,2.75,516,2.206,521,4.308,524,2.322,563,2.125,605,2.246,614,6.581,615,6.581,616,5.354,617,5.509,618,4.185,619,5.509,620,5.353,621,6.581,622,6.134,623,4.05,624,4.989,625,5.28,626,3.94,627,3.94,630,5.509,631,3.519,632,5.509,637,3.797,639,3.049,643,2.431,644,4.743,647,3.94,649,2.75,650,3.542,651,4.577,652,4.193,654,4.212,655,4.577,657,4.577,658,4.481,659,4.539,661,2.899,662,3.31,682,2.833,718,1.129,738,1.56,784,2.349,814,2.246,815,3.913,822,2.005,897,3.768,939,2.246,975,1.773,1009,4.743,1050,2.794,1081,2.349,1099,2.077,1342,2.469,1425,2.899,1574,1.725,1577,2.794,1681,2.794,2578,2.794,2864,2.613,2870,2.794,2883,1.824,3219,2.794,3506,4.212,3601,4.577,3660,5.509,3765,2.469,3766,2.469,3819,2.613,3853,9.654,3854,9.654,3855,3.403,3856,4.577,3857,5.13,3858,5.13,3859,5.13,3860,5.13,3861,5.13,3862,5.13,3863,5.13,3864,5.13,3865,5.13,3866,3.403,3867,3.403,3868,3.403,3869,3.403,3870,3.403,3871,3.403,3872,3.403,3873,3.403,3874,3.403,3875,3.403,3876,3.403,3877,3.403,3878,3.403,3879,3.403,3880,3.403,3881,5.13,3882,3.403,3883,3.403,3884,3.403,3885,3.403,3886,3.403]],["title/interfaces/NgxTourTokenConfiguration.html",[0,0.122,3887,3.921]],["body/interfaces/NgxTourTokenConfiguration.html",[0,0.143,2,0.904,3,0.067,4,0.06,5,0.067,7,3.259,10,0.159,11,0.238,16,0.31,17,0.006,19,0.253,27,0.088,36,2.753,37,2.46,88,0.004,89,0.004,96,0.86,106,2.633,109,1.547,205,0.505,241,6.214,245,1.488,255,2.985,343,3.502,347,3.502,485,3.645,516,2.235,521,3.186,605,2.448,650,5.024,997,5.024,1070,3.791,1241,5.281,1292,4.148,1306,3.502,1561,5.23,1689,4.287,1871,4.612,1872,4.441,2243,4.441,2556,3.791,2562,4.441,2989,5.024,3376,5.773,3698,6.289,3701,6.219,3762,5.589,3782,7.223,3783,5.589,3785,6.582,3786,7.054,3787,6.61,3788,5.589,3789,5.589,3790,5.281,3791,6.582,3792,5.589,3793,5.589,3794,5.589,3795,6.582,3796,6.582,3797,5.589,3798,5.589,3799,6.582,3800,5.589,3801,6.219,3887,6.643,3888,4.988,3889,6.643,3890,5.591,3891,4.988,3892,5.591,3893,5.591]],["title/directives/NgxTreeGridCellDirective.html",[292,0.723,606,2.242]],["body/directives/NgxTreeGridCellDirective.html",[3,0.032,4,0.028,5,0.032,10,0.207,11,0.136,12,0.577,15,1.029,16,0.227,17,0.006,19,0.204,27,0.032,29,0.676,32,0.79,34,1.208,38,2.514,39,3.025,42,1.725,44,0.977,47,1.48,48,1.171,49,1.691,57,1.83,66,1.171,72,1.68,73,1.582,76,0.989,81,0.868,88,0.003,89,0.003,90,0.231,96,0.804,122,2.017,137,1.567,171,1.059,179,0.719,180,0.804,182,1.363,183,0.807,184,1.516,187,1.167,193,1.241,194,1.551,196,1.712,205,0.236,206,1.271,292,0.903,294,0.642,298,1.25,300,1.561,304,1.339,305,2.309,308,0.777,310,1.897,311,2.66,315,4.016,317,1.83,325,1.897,330,4.486,334,1.12,340,1.54,341,0.809,342,2.333,367,2.309,369,2.336,379,1.221,385,2.147,431,1.362,453,4.594,476,1.752,481,1.613,501,0.756,516,2.079,585,3.768,606,1.963,608,2.452,610,2.872,623,3.515,628,4.035,652,2.178,665,5.811,668,4.594,683,2.649,689,1.916,691,0.642,703,2.119,713,2.222,718,0.868,738,2.735,739,5.049,741,3.034,744,4.011,745,3.79,746,3.034,748,4.583,751,1.703,752,4.12,755,1.897,759,1.897,760,1.897,792,2.452,829,3.939,897,3.187,908,1.325,937,3.211,943,1.657,953,5.06,954,5.947,956,3.211,961,1.54,992,1.522,996,2.648,1002,3.401,1026,3.73,1027,3.73,1028,3.73,1029,3.73,1035,2.946,1039,3.73,1041,3.73,1042,3.73,1047,3.73,1084,3.73,1108,2.008,1140,3.034,1390,3.034,1425,1.228,1430,3.433,1461,6.958,1464,1.897,1471,5.765,1561,1.596,1796,3.034,1872,4.458,1883,2.008,2145,2.721,2156,4.66,2175,2.333,2318,1.362,2420,3.31,2596,2.147,2858,2.147,2859,1.805,2860,2.008,2861,2.147,2895,2.309,3254,2.147,3306,2.333,3541,3.433,3625,2.885,3894,8.503,3895,8.503,3896,2.615,3897,3.73,3898,3.73,3899,7.825,3900,6.958,3901,5.967,3902,5.967,3903,4.18,3904,5.967,3905,5.967,3906,5.967,3907,4.18,3908,5.967,3909,5.967,3910,5.967,3911,5.967,3912,5.967,3913,4.18,3914,4.18,3915,4.18,3916,4.18,3917,4.18,3918,4.18,3919,4.18,3920,4.18,3921,4.18,3922,4.18,3923,4.18,3924,4.18,3925,4.18,3926,4.18,3927,4.18,3928,4.18,3929,4.18,3930,4.18,3931,4.18,3932,4.18,3933,2.615,3934,4.18,3935,7.305,3936,2.615,3937,4.18,3938,4.18,3939,4.18,3940,4.18,3941,4.18,3942,5.323,3943,5.323,3944,2.615,3945,4.18,3946,4.18,3947,4.18,3948,2.615,3949,2.615,3950,2.615,3951,2.615,3952,4.18,3953,2.615,3954,2.615,3955,2.615,3956,2.333,3957,2.615,3958,2.615,3959,2.333,3960,2.615,3961,2.615,3962,2.615,3963,2.615,3964,2.615,3965,2.615,3966,2.615,3967,2.615,3968,6.525,3969,4.18,3970,4.18,3971,2.615,3972,4.18,3973,2.615,3974,2.615,3975,2.615,3976,2.615,3977,2.615,3978,2.615,3979,2.615,3980,2.615,3981,2.615,3982,2.615,3983,2.615,3984,2.615,3985,2.615]],["title/directives/NgxTreeGridDirective.html",[292,0.723,608,2.242]],["body/directives/NgxTreeGridDirective.html",[3,0.046,4,0.041,5,0.046,10,0.252,11,0.182,12,0.683,16,0.279,17,0.006,19,0.205,27,0.046,32,0.996,34,2.231,38,2.676,44,1.805,47,1.469,48,1.698,49,1.467,57,2.434,66,1.698,72,2.234,88,0.003,89,0.003,90,0.335,96,1.242,137,0.623,179,1.042,180,1.188,182,1.813,183,1.074,184,1.689,187,1.127,190,3.301,193,1.834,196,1.761,205,0.342,206,1.691,237,2.549,292,1.097,294,0.93,298,1.662,300,1.509,304,1.781,308,0.98,315,1.825,317,1.61,330,2.549,341,1.173,369,1.752,379,1.509,426,2.032,432,4.425,481,2.54,535,3.57,606,3.405,608,2.611,610,4.377,626,4.27,652,2.897,665,5.038,683,3.523,691,2.098,698,2.434,704,1.493,713,2.002,751,2.147,819,1.825,820,1.825,937,4.27,953,3.275,954,4.034,956,4.27,964,4.27,968,4.565,975,3.777,996,2.818,997,3.838,1004,3.382,1430,4.565,1461,7.713,1471,5.958,2578,5.405,2592,6.469,2895,3.071,3376,5.419,3507,6.846,3619,4.96,3698,5.756,3819,2.912,3894,8.38,3895,8.38,3897,8.264,3898,4.96,3956,3.382,3986,3.791,3987,5.56,3988,7.438,3989,7.72,3990,7.251,3991,7.251,3992,5.56,3993,5.56,3994,5.56,3995,5.56,3996,5.56,3997,5.56,3998,5.56,3999,6.583,4000,5.56,4001,3.791,4002,3.791,4003,5.56,4004,3.791,4005,5.56,4006,3.791,4007,3.791,4008,5.56,4009,3.791,4010,7.251,4011,5.56,4012,3.791,4013,5.56,4014,3.791,4015,5.56,4016,3.791,4017,3.791,4018,3.791,4019,3.791,4020,3.791,4021,3.791,4022,5.56,4023,3.791,4024,3.791,4025,3.791,4026,3.791,4027,3.791,4028,3.791,4029,3.791]],["title/classes/NgxValidators.html",[90,0.422,4030,4.261]],["body/classes/NgxValidators.html",[1,5.619,3,0.074,4,0.036,5,0.041,7,3.065,8,3.008,10,0.096,12,0.825,13,3.008,14,7.781,15,2.694,16,0.27,17,0.006,18,5.995,19,0.25,20,7.078,21,1.986,27,0.041,28,1.083,29,0.545,30,7.811,31,3.697,32,1.28,33,7.688,34,2.62,35,3.536,36,1.927,37,1.722,38,2.452,39,2.582,40,3.697,41,2.335,43,3.008,44,1.876,45,7.811,46,4.545,47,0.683,48,2.282,67,4.183,68,3.099,70,5.916,72,3.397,73,3.125,76,2.589,83,2.392,88,0.003,89,0.003,90,0.543,92,2.137,96,1.235,106,1.472,152,1.326,167,4.183,180,1.189,183,0.984,187,0.933,190,2.78,191,2.654,192,6.579,193,1.963,196,1.775,308,1.15,317,0.651,379,1.736,382,6.045,383,3.517,408,1.664,432,4.176,539,4.214,631,2.903,691,1.679,797,3.109,1023,4.966,1115,3.109,1213,2.327,1450,5.916,1469,6.894,1561,4.176,1871,3.229,1879,5.042,2046,6.345,2243,3.109,2559,3.9,2715,4.183,2899,1.921,3117,4.545,3300,4.545,3756,4.545,3856,3.008,4030,4.545,4031,3.371,4032,5.094,4033,6.14,4034,6.14,4035,6.14,4036,5.094,4037,6.14,4038,5.094,4039,3.371,4040,5.094,4041,5.094,4042,5.094,4043,5.094,4044,3.371,4045,3.371,4046,8.756,4047,3.371,4048,7.347,4049,3.371,4050,5.094,4051,5.094,4052,5.094,4053,5.094,4054,6.14,4055,6.843,4056,8.261,4057,8.261,4058,8.261,4059,6.843,4060,6.14,4061,3.371,4062,6.843,4063,5.094,4064,5.094,4065,3.371,4066,5.094,4067,3.371,4068,5.094,4069,5.094,4070,7.347,4071,7.347,4072,6.843,4073,5.094,4074,3.371,4075,7.347,4076,7.347,4077,3.371,4078,5.478,4079,5.094,4080,5.094,4081,5.094,4082,3.371,4083,3.371,4084,6.14,4085,3.371,4086,3.371,4087,3.371,4088,3.371,4089,3.008,4090,3.371,4091,3.371,4092,3.371,4093,3.371,4094,3.371,4095,3.371,4096,3.371,4097,3.371,4098,3.371,4099,3.371,4100,3.371,4101,3.371,4102,3.371,4103,3.371,4104,3.371]],["title/injectables/NgxWindowService.html",[259,1.478,1404,2.638]],["body/injectables/NgxWindowService.html",[3,0.033,4,0.03,5,0.033,10,0.078,11,0.176,12,0.385,15,2.8,16,0.28,17,0.006,19,0.264,27,0.098,28,0.925,29,0.993,32,1.258,34,1.257,36,2.322,44,1.564,49,1.661,54,1.62,57,1.204,61,2.201,66,2.995,67,2.257,73,1.646,75,1.815,88,0.003,89,0.003,90,0.72,96,0.831,106,1.257,122,2.075,136,2.125,137,0.887,144,1.432,162,2.364,177,1.62,180,0.67,183,1.186,184,1.669,187,1.111,190,2.53,193,1.458,196,1.512,200,4.686,205,0.248,209,2.563,234,2.655,237,2.814,255,1.128,259,1.346,261,1.231,268,2.688,272,0.664,300,1.331,308,1.258,311,2.152,317,1.536,328,2.563,350,3.186,351,1.519,352,2.257,369,2.417,379,1.555,412,2.819,501,0.795,502,3.882,618,4.022,689,1.26,691,1.506,713,2.528,769,3.069,785,1.432,947,2.169,951,2.872,966,4.341,992,1.001,1049,2.563,1080,1.519,1175,1.519,1176,1.001,1204,3.928,1205,2.332,1219,2.094,1220,3.572,1244,4.264,1293,3.572,1370,4.686,1379,3.746,1404,5.08,1405,4.144,1408,3.735,1409,2.112,1425,2.043,1500,6.188,1589,2.453,1591,5.04,1607,7.455,1609,2.332,1610,3.572,1611,3.881,1614,1.815,1663,3.881,1775,1.898,1806,1.898,1807,1.26,1994,3.004,2131,3.572,2397,3.341,2401,4.817,2452,2.257,2556,1.432,2778,5.967,2805,4.817,3152,3.572,3218,4.433,3376,3.422,3387,7.096,3388,7.096,3517,5.967,3733,8.206,3736,5.476,3786,5.606,3889,3.572,4078,2.453,4105,2.749,4106,5.476,4107,4.351,4108,8.147,4109,5.399,4110,5.399,4111,7.112,4112,5.399,4113,8.454,4114,5.399,4115,6.688,4116,7.112,4117,7.112,4118,6.688,4119,6.138,4120,4.351,4121,2.749,4122,2.749,4123,2.749,4124,6.688,4125,2.749,4126,2.749,4127,6.688,4128,4.351,4129,2.749,4130,2.749,4131,7.45,4132,4.351,4133,2.749,4134,4.351,4135,2.749,4136,4.351,4137,2.749,4138,4.351,4139,2.749,4140,4.351,4141,2.749,4142,4.351,4143,2.749,4144,4.351,4145,2.749,4146,6.688,4147,4.351,4148,2.749,4149,4.351,4150,2.749,4151,2.453,4152,2.453,4153,2.749,4154,2.749,4155,2.749,4156,2.749,4157,2.749,4158,2.749,4159,2.749,4160,5.399,4161,2.749,4162,6.138,4163,2.749,4164,5.399,4165,2.749,4166,2.749,4167,2.749,4168,5.399,4169,2.749,4170,4.351,4171,4.351,4172,2.749,4173,4.351,4174,5.399,4175,4.351,4176,2.749,4177,2.749,4178,2.749,4179,2.749,4180,4.351,4181,2.749,4182,2.749,4183,2.749,4184,2.749,4185,2.749,4186,2.749,4187,2.749,4188,2.749,4189,4.351,4190,2.749,4191,2.749]],["title/interfaces/SpecStoreAssets.html",[0,0.122,4192,4.261]],["body/interfaces/SpecStoreAssets.html",[0,0.166,2,1.294,3,0.078,4,0.07,5,0.078,10,0.184,11,0.261,16,0.304,17,0.006,19,0.25,26,3.292,27,0.105,42,2.313,66,2.909,81,2.156,88,0.005,89,0.005,127,5.6,128,2.781,130,3.587,131,3.384,148,5.524,152,1.151,171,2.027,271,1.975,273,2.32,283,4.713,286,5.333,1150,4.484,1367,7.633,3439,6.569,3440,6.57,3441,5.725,4192,7.139,4193,4.713,4194,8.293,4195,8.293,4196,8.293,4197,7.433,4198,6.57,4199,5.333,4200,6.494,4201,6.494,4202,6.494]],["title/injectables/SpecStoreService.html",[259,1.478,4203,4.261]],["body/injectables/SpecStoreService.html",[3,0.045,4,0.04,5,0.045,10,0.105,11,0.179,12,0.677,16,0.312,17,0.006,19,0.265,26,1.884,27,0.045,28,0.79,32,1.385,36,2.897,44,1.281,68,1.819,81,1.234,88,0.003,89,0.003,90,0.329,96,1.105,98,3.967,113,2.269,114,1.379,118,2.19,124,1.937,128,1.592,131,2.855,135,2.511,137,1.259,138,3.228,147,2.454,151,4.959,171,1.388,180,1.179,183,1.058,184,1.742,187,1.167,193,1.969,196,1.678,205,0.336,245,0.989,259,1.695,261,1.665,263,5.897,264,5.897,268,2.883,272,0.897,273,1.328,274,4.358,298,2.542,300,1.854,308,1.362,317,1.548,367,3.027,369,2.038,392,2.518,501,1.074,507,1.789,628,4.425,802,1.704,1127,1.937,1128,5.814,1169,4.889,1321,2.855,1367,5.344,2310,2.566,2959,4.889,3129,5.993,3451,4.499,3452,4.499,3453,4.499,3454,4.499,3455,4.499,3458,3.052,3460,3.052,3462,3.052,3464,3.052,3465,3.052,3467,2.566,3469,3.052,4193,6.873,4194,5.806,4195,5.806,4196,5.806,4203,4.889,4204,3.717,4205,6.508,4206,6.508,4207,6.508,4208,6.508,4209,6.508,4210,6.508,4211,7.182,4212,7.182,4213,7.182,4214,5.48,4215,3.717,4216,3.717,4217,3.717,4218,3.717,4219,3.717,4220,5.48,4221,3.717,4222,3.316,4223,3.316,4224,3.316,4225,3.316,4226,8.012,4227,8.503,4228,3.717,4229,5.48,4230,3.717,4231,7.182,4232,3.717,4233,7.182,4234,3.717,4235,5.48,4236,3.717,4237,3.717,4238,5.48,4239,3.717,4240,8.012,4241,3.717,4242,5.48,4243,3.717,4244,3.717,4245,3.717,4246,3.316,4247,3.316,4248,5.344,4249,3.316,4250,5.48,4251,4.499,4252,4.499,4253,3.717,4254,3.717,4255,3.717,4256,3.717,4257,3.717,4258,3.717,4259,3.717]],["title/interfaces/StoreAssetsOptions.html",[0,0.122,3438,3.921]],["body/interfaces/StoreAssetsOptions.html",[0,0.19,2,0.931,3,0.07,4,0.062,5,0.07,10,0.163,11,0.242,12,0.766,16,0.315,17,0.006,19,0.28,27,0.105,35,3.95,38,2.772,49,1.829,51,3.651,76,2.807,88,0.005,89,0.005,96,0.886,101,4.528,102,2.92,106,2.144,122,1.947,123,4.528,124,3.001,127,4.677,128,3.514,130,4.098,131,4.276,145,5.384,146,4.18,147,5.418,148,5.603,153,6.657,154,3.803,155,5.384,156,5.984,191,3.865,194,2.137,238,2.58,274,4.611,285,4.18,286,4.371,379,1.388,506,3.663,509,2.463,781,1.722,1343,7.116,1799,3.651,1806,5.122,1994,5.122,2625,4.73,3138,5.698,3381,6.092,3430,4.424,3431,4.73,3432,5.139,3433,7.322,3434,6.092,3435,5.698,3436,6.619,3437,7.732,3438,6.092,3439,6.289,3440,7.116,3441,3.803,3442,6.092,3443,8.001,3444,5.139,3445,5.139,3446,5.139,3447,5.139,3448,5.139,3449,5.139]],["title/injectables/StoreEffects.html",[259,1.478,4260,4.261]],["body/injectables/StoreEffects.html",[3,0.075,4,0.067,5,0.075,10,0.176,11,0.254,16,0.254,17,0.006,19,0.286,27,0.075,32,1.348,44,2.082,88,0.005,89,0.005,90,0.548,128,4.067,137,1.464,147,4.093,184,1.615,187,1.076,205,0.56,259,2.405,260,7.684,261,2.777,263,6.974,264,6.974,273,2.215,274,3.061,300,1.751,308,1.325,369,2.49,501,1.792,504,5.532,4249,6.936,4260,6.936,4261,6.2,4262,7.774,4263,6.2,4264,7.774,4265,6.2,4266,9.171,4267,8.905,4268,8.493,4269,7.774,4270,6.2,4271,7.774,4272,7.774,4273,6.2,4274,5.532,4275,6.2]],["title/interfaces/StoreState.html",[0,0.122,3467,3.297]],["body/interfaces/StoreState.html",[0,0.159,2,1.258,3,0.075,4,0.067,5,0.075,10,0.176,11,0.254,16,0.254,17,0.006,19,0.286,26,3.147,27,0.094,28,1.95,29,1.004,42,1.795,44,1.987,61,2.408,68,2.583,88,0.005,89,0.005,90,0.549,127,5.078,128,2.659,130,3.429,131,3.235,148,4.749,152,0.893,156,4.287,171,2.153,205,0.561,245,1.652,259,2.408,268,2.619,272,1.499,286,5.249,751,2.537,947,2.495,1321,6.527,3129,5.372,3439,5.647,3441,5.611,3467,5.372,4193,4.506,4197,6.389,4198,6.389,4199,5.098,4248,6.389,4251,5.098,4252,5.098,4276,5.539,4277,8.186,4278,7.582,4279,5.539,4280,5.098,4281,5.539,4282,5.539,4283,5.539,4284,6.942,4285,5.539,4286,5.539,4287,6.942,4288,6.942,4289,5.539,4290,5.539,4291,5.539,4292,5.539]],["title/injectables/StoreStateService.html",[259,1.478,4280,3.921]],["body/injectables/StoreStateService.html",[0,0.126,2,0.799,3,0.06,4,0.053,5,0.06,10,0.14,11,0.219,12,0.778,16,0.306,17,0.006,19,0.266,26,2.505,27,0.081,28,1.617,29,1.23,32,0.748,36,3.227,42,1.428,44,1.779,61,2.074,68,2.708,88,0.004,89,0.004,90,0.437,96,1.256,98,4.506,113,3.016,114,1.833,127,3.821,128,2.116,130,2.729,131,3.493,138,3.949,148,4.091,151,5.633,152,1.095,156,3.412,171,1.928,180,1.353,183,1.295,184,1.58,187,1.133,193,2.174,196,1.71,205,0.446,245,1.315,259,2.074,261,2.213,268,2.782,272,1.193,274,4.518,286,3.949,298,2.736,300,1.254,308,0.735,367,3.703,369,1.784,392,2.86,628,4.858,751,2.186,802,2.265,947,3.057,1127,2.575,1321,5.843,3129,6.405,3439,4.865,3441,4.426,3451,5.505,3452,5.505,3453,5.505,3454,5.505,3455,5.505,3458,4.058,3460,4.058,3462,4.058,3464,4.058,3465,4.058,3467,4.628,3469,4.058,4193,6.189,4197,5.505,4198,5.505,4199,4.058,4222,4.409,4223,4.409,4224,4.409,4225,4.409,4246,4.409,4247,4.409,4248,5.505,4251,4.058,4252,4.058,4276,4.409,4277,5.981,4278,6.788,4279,4.409,4280,5.505,4281,4.409,4282,7.279,4283,4.409,4284,5.981,4285,5.981,4286,4.409,4287,5.981,4288,5.981,4289,4.409,4290,5.981,4291,4.409,4292,4.409,4293,6.704,4294,6.704,4295,4.942,4296,4.942,4297,4.942,4298,4.942]],["title/interfaces/TableCellTemplate.html",[0,0.122,4299,4.261]],["body/interfaces/TableCellTemplate.html",[0,0.041,2,0.258,3,0.019,4,0.017,5,0.019,7,2.216,10,0.212,11,0.09,12,0.729,14,2.272,15,2.291,16,0.143,17,0.006,19,0.228,20,2.125,21,0.94,26,0.809,27,0.019,28,1.516,29,0.258,32,1.152,34,1.78,41,0.731,42,1.865,44,1.709,47,0.886,49,2.052,50,2.236,54,1.63,55,1.211,57,2.697,61,2.311,64,2.492,66,1.239,70,4.252,72,0.641,73,1.047,74,0.628,76,1.654,81,2.709,83,2.546,88,0.002,89,0.002,90,0.479,97,0.749,98,2.024,102,2.216,105,1.827,106,0.8,107,1.158,109,0.743,114,2.011,122,1.478,128,2.322,134,3.552,135,2.82,136,2.291,137,1.202,152,0.837,162,1.211,173,1.158,174,1.077,176,0.809,183,0.308,184,1.639,187,0.334,190,1.386,191,0.831,194,1.027,196,0.526,203,1.089,205,0.144,206,0.485,209,0.94,215,1.31,233,0.881,236,1.225,237,2.824,244,2.468,250,0.974,253,1.225,255,2.527,256,1.158,257,1.423,272,0.385,294,0.391,298,0.477,300,1.607,301,1.91,306,3.019,308,1.26,311,2.262,317,1.339,319,1.577,320,1.528,328,0.94,332,0.881,333,0.855,334,0.683,339,3.008,341,2.432,343,1.332,345,0.94,346,2.008,347,0.768,349,2.492,350,0.714,363,3.008,366,1.211,368,1.332,369,1.639,373,0.698,379,0.925,380,2.008,382,5.046,384,1.225,392,2.431,395,1.158,408,1.809,412,1.386,424,0.94,426,0.855,431,1.441,432,2.236,437,6.363,449,1.158,471,1.423,476,0.668,501,1.059,509,2.646,512,0.53,513,2.381,524,1.707,535,3.26,546,1.268,562,0.714,624,1.158,631,0.909,643,1.442,654,1.31,658,5.031,659,3.842,665,3.802,666,3.934,667,3.934,668,5.19,669,3.173,670,3.019,671,3.934,672,3.743,673,3.135,674,4.683,675,1.158,680,1.158,682,0.881,684,1.91,691,1.9,695,3.135,698,0.698,703,0.809,704,0.628,706,3.401,709,3.173,713,1.114,716,1.158,717,2.008,718,0.53,751,2.104,752,1.91,753,4.094,770,1.011,781,1.929,794,1.225,813,0.731,819,2.801,820,2.801,885,1.31,907,0.974,924,1.423,939,1.053,940,1.225,943,5.323,947,0.641,949,1.964,953,1.63,961,1.63,970,1.225,971,3.904,992,0.581,996,2.216,1002,1.577,1009,2.125,1010,0.909,1011,2.468,1015,0.94,1023,1.158,1049,0.94,1059,1.63,1060,0.94,1066,2.468,1070,2.278,1080,0.881,1082,1.158,1090,1.31,1091,2.024,1092,1.753,1096,1.423,1099,1.689,1100,1.101,1101,1.483,1103,3.269,1107,2.887,1109,2.272,1118,1.423,1130,1.31,1138,1.31,1140,1.158,1173,0.788,1204,0.881,1206,1.63,1213,1.101,1225,1.158,1268,1.441,1282,2.272,1292,1.577,1293,1.31,1390,1.158,1426,3.358,1427,3.799,1462,0.749,1467,6.363,1471,5.491,1523,1.31,1557,1.31,1592,1.31,1603,1.909,1609,0.855,1612,1.423,1616,3.579,1624,1.423,1689,2.158,1704,1.225,1779,1.403,1806,1.101,1807,1.68,1811,0.788,1827,2.659,1845,1.423,1846,1.053,1872,2.236,1883,1.225,1885,0.94,1890,1.366,1960,1.158,1985,3.743,2008,0.909,2036,1.31,2054,2.236,2065,0.809,2149,2.125,2152,4.731,2243,0.974,2310,1.101,2312,1.101,2318,1.441,2525,1.225,2527,5.299,2604,4.451,2628,2.468,2629,1.423,2722,1.423,2740,1.441,2745,1.31,2792,1.423,2852,1.423,2858,1.31,2859,1.101,2860,1.225,2861,1.31,2980,3.901,3095,1.423,3241,2.468,3254,3.008,3305,1.31,3472,3.269,3501,5.693,3505,2.468,3506,1.31,3507,6.702,3509,1.423,3510,1.423,3512,3.008,3513,1.423,3514,1.423,3515,1.423,3516,1.423,3518,1.423,3519,1.225,3520,1.31,3523,5.192,3524,4.413,3526,2.468,3533,2.272,3545,2.272,3565,2.272,3576,1.31,3577,1.423,3585,2.272,3773,3.358,3806,1.423,3819,1.225,3959,1.423,3988,2.468,4106,1.423,4299,4.837,4300,1.595,4301,1.595,4302,2.767,4303,1.595,4304,2.767,4305,2.767,4306,2.767,4307,2.767,4308,2.767,4309,1.595,4310,1.595,4311,1.595,4312,2.767,4313,1.595,4314,1.595,4315,1.595,4316,1.595,4317,1.595,4318,1.595,4319,1.595,4320,2.767,4321,2.767,4322,1.595,4323,1.595,4324,1.595,4325,1.595,4326,1.595,4327,1.595,4328,2.767,4329,1.595,4330,1.595,4331,3.664,4332,1.595,4333,1.595,4334,1.595,4335,2.767,4336,1.595,4337,1.595,4338,1.595,4339,1.595,4340,2.767,4341,3.664,4342,1.595,4343,1.595,4344,1.595,4345,1.595,4346,1.595,4347,1.595,4348,1.595,4349,1.595,4350,1.595,4351,1.595,4352,1.595,4353,1.595,4354,1.595,4355,1.595,4356,1.595,4357,1.595,4358,1.595,4359,1.595,4360,1.595,4361,1.595,4362,1.595,4363,1.595,4364,1.595,4365,1.595,4366,1.595,4367,1.595,4368,1.595,4369,6.16,4370,1.595,4371,1.595,4372,6.16,4373,2.767,4374,1.595,4375,1.595,4376,1.595,4377,1.595,4378,1.595,4379,1.595,4380,1.595,4381,1.595,4382,1.595,4383,1.595,4384,2.767,4385,1.595,4386,1.595,4387,1.595,4388,1.595,4389,1.595,4390,3.664,4391,1.595,4392,1.595,4393,1.595,4394,4.373,4395,3.664,4396,1.595,4397,1.595,4398,4.373,4399,1.595,4400,2.767,4401,1.595,4402,1.595,4403,1.595,4404,2.767,4405,1.595,4406,2.767,4407,2.767,4408,2.767,4409,1.595,4410,1.595,4411,4.947,4412,1.595,4413,1.595,4414,4.373,4415,1.595,4416,1.595,4417,1.595,4418,1.595,4419,1.595,4420,1.595,4421,1.595,4422,1.595,4423,1.595,4424,2.767,4425,1.595,4426,1.595,4427,2.767,4428,1.595,4429,1.595,4430,1.595,4431,1.595,4432,1.595,4433,1.595,4434,2.767,4435,1.595,4436,1.595,4437,3.664,4438,2.767,4439,1.595,4440,1.595,4441,1.595,4442,1.595,4443,1.595,4444,1.595,4445,1.595,4446,1.595,4447,1.595,4448,1.595,4449,1.595,4450,1.595,4451,2.767,4452,1.595,4453,1.595,4454,1.595,4455,1.595,4456,1.595,4457,2.767,4458,1.595,4459,2.767,4460,1.595,4461,1.595,4462,1.595,4463,1.595,4464,1.595,4465,1.595,4466,1.595,4467,1.595,4468,1.595,4469,1.595,4470,1.595,4471,2.767,4472,2.767,4473,2.767,4474,2.767,4475,1.595,4476,1.595,4477,1.595,4478,1.595,4479,1.595,4480,1.595,4481,1.595,4482,1.595,4483,1.595,4484,1.595,4485,1.595,4486,1.595,4487,1.595,4488,1.595,4489,2.767,4490,1.595,4491,1.595,4492,1.595,4493,1.595,4494,1.595,4495,1.595,4496,1.595,4497,1.595,4498,1.595,4499,1.595,4500,1.595,4501,1.595,4502,1.595,4503,1.595,4504,1.595,4505,1.595,4506,1.595,4507,1.595,4508,1.595,4509,1.595,4510,1.595,4511,1.595,4512,1.595,4513,1.595,4514,1.595,4515,1.595,4516,1.595,4517,1.595,4518,1.595,4519,1.595,4520,1.595,4521,1.595,4522,1.595,4523,1.595,4524,1.595,4525,1.595,4526,1.595,4527,1.595,4528,1.595]],["title/components/TestDisplayContentComponent.html",[109,0.811,548,2.358]],["body/components/TestDisplayContentComponent.html",[3,0.056,4,0.05,5,0.056,10,0.131,11,0.209,17,0.006,19,0.26,27,0.104,28,1.876,47,1.605,68,2.63,88,0.004,89,0.004,90,0.761,109,1.529,114,2.722,171,2.007,179,1.267,180,1.513,182,2.583,187,0.772,205,0.416,245,1.226,292,0.698,293,2.218,294,1.131,298,3.052,300,1.557,304,2.047,341,2.451,361,2.218,478,2.275,479,2.516,480,1.744,481,1.778,484,3.24,485,2.622,507,4.571,509,2.931,512,2.931,514,2.275,515,3.155,516,1.568,517,4.016,518,2.336,519,2.336,520,2.275,521,2.018,522,2.336,523,2.275,524,2.943,525,2.336,526,2.275,527,2.336,528,3.24,529,2.336,530,3.155,531,2.336,532,2.275,533,2.218,534,2.275,535,3.393,536,2.336,537,4.016,538,2.275,539,2.218,540,2.275,541,2.164,542,2.336,543,2.218,544,2.218,545,2.336,546,2.113,547,2.336,548,3.911,549,2.336,550,3.155,551,3.24,552,3.155,553,3.155,554,2.336,555,3.155,556,2.336,557,3.155,558,3.076,559,2.336,560,2.336,561,2.336,562,2.064,563,1.586,564,2.164,565,2.164,566,2.336,567,2.218,568,2.336,569,2.336,570,2.336,571,2.164,572,2.218,573,2.336,574,3.856,575,3.907,576,2.336,577,2.336,578,2.113,579,2.218,580,2.336,581,2.218,582,2.336,583,2.218,584,2.336,585,2.164,586,2.164,587,2.218,588,2.336,589,2.218,590,2.336,591,1.744,592,2.218,593,2.164,594,2.218,595,2.164,596,2.164,597,2.164,598,1.891,599,2.164,600,2.336,601,2.064,602,2.336,603,2.218,604,2.336,605,2.018,606,2.164,607,2.336,608,2.164,609,2.336,610,2.218,611,2.336,612,2.336,639,2.275,718,1.53,1010,4.181,1080,2.546,1238,5.073,1723,2.715,1745,3.765,1750,2.813,1752,4.843,4529,5.065,4530,3.182,4531,6.391,4532,4.412,4533,3.182,4534,3.182]],["title/components/TestErrorComponent.html",[109,0.811,550,2.358]],["body/components/TestErrorComponent.html",[3,0.055,4,0.049,5,0.055,10,0.128,11,0.206,12,0.558,17,0.006,19,0.258,27,0.103,28,2.026,47,1.675,68,2.916,88,0.004,89,0.004,90,0.757,109,1.522,114,2.695,136,2.483,164,4.165,171,2.094,179,1.244,180,1.51,182,2.695,187,0.762,205,0.408,245,1.203,255,2.588,292,0.685,293,2.177,294,1.11,298,3.05,300,1.546,304,2.021,341,2.648,361,2.177,478,2.233,479,3.094,480,1.711,481,1.745,484,3.198,485,2.588,507,4.558,509,2.916,512,2.411,514,2.233,515,3.114,516,1.548,517,3.984,518,2.293,519,2.293,520,2.233,521,1.98,522,2.293,523,2.233,524,2.933,525,2.293,526,2.233,527,2.293,528,3.198,529,2.293,530,3.114,531,2.293,532,2.233,533,2.177,534,2.233,535,3.365,536,2.293,537,3.984,538,2.233,539,2.177,540,2.233,541,2.124,542,2.293,543,2.177,544,2.177,545,2.293,546,2.074,547,2.293,548,3.114,549,2.293,550,3.88,551,3.198,552,3.114,553,3.114,554,2.293,555,3.114,556,2.293,557,3.114,558,3.036,559,2.293,560,2.293,561,2.293,562,2.026,563,1.557,564,2.124,565,2.124,566,2.293,567,2.177,568,2.293,569,2.293,570,2.293,571,2.124,572,2.177,573,2.293,574,4.076,575,3.69,576,2.293,577,2.293,578,2.074,579,2.177,580,2.293,581,2.177,582,2.293,583,2.177,584,2.293,585,2.124,586,2.124,587,2.177,588,2.293,589,2.177,590,2.293,591,1.711,592,2.177,593,2.124,594,2.177,595,2.124,596,2.124,597,2.124,598,1.856,599,2.124,600,2.293,601,2.026,602,2.293,603,2.177,604,2.293,605,1.98,606,2.124,607,2.293,608,2.124,609,2.293,610,2.177,611,2.293,612,2.293,628,3.484,639,2.233,718,1.501,1010,3.595,1080,2.498,1238,3.716,1662,3.998,1723,2.665,1745,3.716,1750,2.76,1752,2.986,4529,3.123,4530,3.123,4532,4.355,4533,3.123,4534,3.123,4535,4.845]],["title/components/TestErrorDataComponent.html",[109,0.811,552,2.358]],["body/components/TestErrorDataComponent.html",[3,0.054,4,0.049,5,0.054,10,0.128,11,0.206,12,0.556,17,0.006,19,0.258,27,0.103,28,2.056,47,1.673,68,2.913,88,0.004,89,0.004,90,0.756,109,1.521,114,2.691,136,2.478,164,4.156,171,2.092,179,1.24,180,1.509,182,2.692,187,0.76,205,0.407,245,1.2,255,2.582,292,0.682,293,2.17,294,1.106,298,3.05,300,1.544,304,2.017,341,2.646,361,2.17,478,2.226,479,3.09,480,1.706,481,1.74,484,3.191,485,2.582,507,4.556,509,2.913,512,2.407,514,2.226,515,3.108,516,1.544,517,3.978,518,2.286,519,2.286,520,2.226,521,1.974,522,2.286,523,2.226,524,2.931,525,2.286,526,2.226,527,2.286,528,3.191,529,2.286,530,3.108,531,2.286,532,2.226,533,2.17,534,2.226,535,3.361,536,2.286,537,3.978,538,2.226,539,2.17,540,2.226,541,2.117,542,2.286,543,2.17,544,2.17,545,2.286,546,2.067,547,2.286,548,3.108,549,2.286,550,3.108,551,3.191,552,3.875,553,3.108,554,2.286,555,3.108,556,2.286,557,3.108,558,3.029,559,2.286,560,2.286,561,2.286,562,2.02,563,1.552,564,2.117,565,2.117,566,2.286,567,2.17,568,2.286,569,2.286,570,2.286,571,2.117,572,2.17,573,2.286,574,4.073,575,3.685,576,2.286,577,2.286,578,2.067,579,2.17,580,2.286,581,2.17,582,2.286,583,2.17,584,2.286,585,2.117,586,2.117,587,2.17,588,2.286,589,2.17,590,2.286,591,1.706,592,2.17,593,2.117,594,2.17,595,2.117,596,2.117,597,2.117,598,1.85,599,2.117,600,2.286,601,2.02,602,2.286,603,2.17,604,2.286,605,1.974,606,2.117,607,2.286,608,2.117,609,2.286,610,2.17,611,2.286,612,2.286,628,3.477,639,2.226,718,1.497,1010,3.587,1080,2.491,1238,3.708,1662,3.989,1723,2.657,1745,3.708,1750,2.752,1752,2.977,4529,3.113,4530,3.113,4532,4.346,4533,3.113,4534,3.113,4535,4.834]],["title/components/TestLoadingComponent.html",[109,0.811,553,2.358]],["body/components/TestLoadingComponent.html",[3,0.055,4,0.049,5,0.055,10,0.128,11,0.206,12,0.558,17,0.006,19,0.258,27,0.103,28,2.026,47,1.675,68,2.609,88,0.004,89,0.004,90,0.757,109,1.522,114,3.176,136,2.483,164,4.165,171,2.094,179,1.244,180,1.51,182,2.695,187,0.762,205,0.408,245,1.203,255,2.588,292,0.685,293,2.177,294,1.11,298,3.05,300,1.546,304,2.021,341,2.648,361,2.177,478,2.233,479,3.094,480,1.711,481,1.745,484,3.198,485,2.588,507,4.558,509,2.916,512,2.411,514,2.233,515,3.114,516,1.548,517,3.984,518,2.293,519,2.293,520,2.233,521,1.98,522,2.293,523,2.233,524,2.933,525,2.293,526,2.233,527,2.293,528,3.198,529,2.293,530,3.114,531,2.293,532,2.233,533,2.177,534,2.233,535,3.365,536,2.293,537,3.984,538,2.233,539,2.177,540,2.233,541,2.124,542,2.293,543,2.177,544,2.177,545,2.293,546,2.074,547,2.293,548,3.114,549,2.293,550,3.114,551,3.198,552,3.114,553,3.88,554,2.293,555,3.114,556,2.293,557,3.114,558,3.036,559,2.293,560,2.293,561,2.293,562,2.026,563,1.557,564,2.124,565,2.124,566,2.293,567,2.177,568,2.293,569,2.293,570,2.293,571,2.124,572,2.177,573,2.293,574,4.076,575,3.69,576,2.293,577,2.293,578,2.074,579,2.177,580,2.293,581,2.177,582,2.293,583,2.177,584,2.293,585,2.124,586,2.124,587,2.177,588,2.293,589,2.177,590,2.293,591,1.711,592,2.177,593,2.124,594,2.177,595,2.124,596,2.124,597,2.124,598,1.856,599,2.124,600,2.293,601,2.026,602,2.293,603,2.177,604,2.293,605,1.98,606,2.124,607,2.293,608,2.124,609,2.293,610,2.177,611,2.293,612,2.293,628,3.484,639,2.233,718,1.501,1010,3.595,1080,2.498,1238,3.716,1662,3.998,1723,2.665,1745,3.716,1750,2.76,1752,2.986,4529,3.123,4530,3.123,4532,4.355,4533,3.123,4534,3.123,4535,4.845]],["title/components/TestOfflineComponent.html",[109,0.811,555,2.358]],["body/components/TestOfflineComponent.html",[3,0.055,4,0.049,5,0.055,10,0.128,11,0.206,12,0.558,17,0.006,19,0.258,27,0.103,28,2.026,47,1.675,68,2.609,88,0.004,89,0.004,90,0.757,109,1.522,114,2.695,136,2.483,164,4.165,171,2.094,179,1.244,180,1.51,182,2.695,187,0.762,205,0.408,245,1.203,255,2.588,292,0.685,293,2.177,294,1.11,298,3.05,300,1.546,304,2.021,341,2.648,361,2.177,478,2.233,479,3.094,480,1.711,481,1.745,484,3.198,485,2.588,507,4.558,509,2.916,512,2.411,514,2.233,515,3.114,516,1.548,517,3.984,518,2.293,519,2.293,520,2.233,521,1.98,522,2.293,523,2.233,524,2.933,525,2.293,526,2.233,527,2.293,528,3.198,529,2.293,530,3.114,531,2.293,532,2.233,533,2.177,534,2.233,535,3.365,536,2.293,537,3.984,538,2.233,539,2.177,540,2.233,541,2.124,542,2.293,543,2.177,544,2.177,545,2.293,546,2.074,547,2.293,548,3.114,549,2.293,550,3.114,551,3.198,552,3.114,553,3.114,554,2.293,555,3.88,556,2.293,557,3.114,558,3.036,559,2.293,560,2.293,561,2.293,562,2.026,563,1.557,564,2.124,565,2.124,566,2.293,567,2.177,568,2.293,569,2.293,570,2.293,571,2.124,572,2.177,573,2.293,574,4.076,575,3.69,576,2.293,577,2.293,578,2.074,579,2.177,580,2.293,581,2.177,582,2.293,583,2.177,584,2.293,585,2.124,586,2.124,587,2.177,588,2.293,589,2.177,590,2.293,591,1.711,592,2.177,593,2.124,594,2.177,595,2.124,596,2.124,597,2.124,598,1.856,599,2.124,600,2.293,601,2.026,602,2.293,603,2.177,604,2.293,605,1.98,606,2.124,607,2.293,608,2.124,609,2.293,610,2.177,611,2.293,612,2.293,628,3.484,639,2.233,718,1.501,1010,3.595,1080,2.498,1238,3.716,1662,3.998,1723,2.665,1745,4.869,1750,2.76,1752,2.986,4529,3.123,4530,3.123,4532,4.355,4533,3.123,4534,3.123,4535,4.845]],["title/components/TestOverrideDisplayContentComponent.html",[109,0.811,557,2.358]],["body/components/TestOverrideDisplayContentComponent.html",[3,0.054,4,0.048,5,0.054,10,0.128,11,0.205,17,0.006,19,0.257,27,0.103,28,1.864,47,1.589,68,2.603,88,0.004,89,0.004,90,0.756,109,1.52,114,3.061,171,1.987,179,1.237,180,1.509,182,2.557,187,0.947,205,0.406,245,1.197,292,0.681,293,2.166,294,1.104,298,3.049,300,1.641,304,2.014,341,2.426,361,2.166,478,2.222,479,2.474,480,1.702,481,1.736,484,3.186,485,2.579,507,4.554,509,2.912,512,2.97,514,2.222,515,3.103,516,1.542,517,3.975,518,2.281,519,2.281,520,2.222,521,1.97,522,2.281,523,2.222,524,2.93,525,2.281,526,2.222,527,2.281,528,3.186,529,2.281,530,3.103,531,2.281,532,2.222,533,2.166,534,2.222,535,3.358,536,2.281,537,3.975,538,2.222,539,2.166,540,2.222,541,2.113,542,2.281,543,2.166,544,2.166,545,2.281,546,2.063,547,2.281,548,3.103,549,2.281,550,3.103,551,3.186,552,3.103,553,3.103,554,2.281,555,3.103,556,2.281,557,3.871,558,3.486,559,2.281,560,2.281,561,2.281,562,2.015,563,1.549,564,2.113,565,2.113,566,2.281,567,2.166,568,2.281,569,2.281,570,2.281,571,2.113,572,2.166,573,2.281,574,3.828,575,3.873,576,2.281,577,2.281,578,2.063,579,2.166,580,2.281,581,2.166,582,2.281,583,2.166,584,2.281,585,2.113,586,2.113,587,2.166,588,2.281,589,2.166,590,2.281,591,1.702,592,2.166,593,2.113,594,2.166,595,2.113,596,2.113,597,2.113,598,1.846,599,2.113,600,2.281,601,2.015,602,2.281,603,2.166,604,2.281,605,1.97,606,2.113,607,2.281,608,2.113,609,2.281,610,2.166,611,2.281,612,2.281,639,3.103,718,1.494,1010,4.128,1080,2.485,1238,5.035,1723,2.651,1745,3.703,1750,2.746,1752,5.446,4529,5.695,4530,3.107,4532,5.001,4533,3.107,4534,5.695,4536,6.285,4537,6.285,4538,4.5]],["title/pipes/TransformPipe.html",[174,1.404,4539,4.261]],["body/pipes/TransformPipe.html",[3,0.073,4,0.065,5,0.073,12,0.537,15,3.828,16,0.251,17,0.006,19,0.19,27,0.073,32,1.488,34,2.218,44,2.066,47,1.555,49,1.71,54,4.52,88,0.005,89,0.005,90,0.537,96,1.181,102,3.889,174,2.598,176,3.078,177,3.577,179,1.669,180,1.294,182,2.502,183,1.173,184,1.324,185,5.294,186,5.065,187,0.733,193,1.823,194,2.847,196,1.154,200,4.52,203,3.311,204,4.113,205,0.548,206,1.846,209,4.52,211,4.406,328,4.52,347,2.922,379,1.768,704,3.02,796,5.893,829,4.008,852,3.285,2402,4.663,3219,6.3,4539,7.884,4540,6.071,4541,9.563,4542,7.672,4543,7.672,4544,6.071,4545,8.412,4546,7.672,4547,7.672,4548,6.071,4549,6.071]],["title/interfaces/TranslationLoaderActionEntity.html",[0,0.122,2279,3.921]],["body/interfaces/TranslationLoaderActionEntity.html",[0,0.188,2,1.192,3,0.089,4,0.079,5,0.089,10,0.209,11,0.282,16,0.241,17,0.006,27,0.089,88,0.005,89,0.005,114,3.203,152,1.317,271,2.871,392,3.31,824,4.07,2260,6.05,2261,6.05,2276,5.699,2279,7.088,3138,5.659,4550,6.573,4551,7.701,4552,7.368]],["title/dependencies.html",[240,2.743,4553,4.418]],["body/dependencies.html",[17,0.006,21,4.01,22,5.589,23,5.589,88,0.005,89,0.005,124,3.546,154,4.494,205,0.615,272,1.643,524,2.143,539,3.276,789,3.121,815,4.314,1080,3.76,1210,4.94,1222,4.494,1244,3.649,1319,6.073,1405,3.546,1408,3.775,1495,4.494,1496,4.314,1704,5.228,2251,6.073,2342,5.228,2378,6.073,2379,6.073,2550,4.154,2552,4.494,3245,7.347,3258,5.589,3538,6.073,4274,6.073,4553,5.228,4554,6.807,4555,9.771,4556,6.807,4557,6.807,4558,6.807,4559,9.199,4560,6.807,4561,6.807,4562,6.807,4563,6.807,4564,6.807,4565,6.807,4566,6.807,4567,6.807,4568,6.807,4569,6.807,4570,6.807,4571,6.807,4572,6.807,4573,6.807,4574,6.807]],["title/miscellaneous/enumerations.html",[4575,2.743,4576,5.132]],["body/miscellaneous/enumerations.html",[10,0.213,17,0.006,32,1.437,88,0.005,89,0.005,114,3.235,701,5.525,1116,7.778,1117,7.778,2260,6.153,2261,6.153,2276,5.755,4550,7.778,4551,7.778,4575,5.174,4576,6.686,4577,7.494,4578,8.718,4579,7.494,4580,7.494]],["title/miscellaneous/functions.html",[796,4.418,4575,2.743]],["body/miscellaneous/functions.html",[10,0.203,12,0.749,16,0.277,17,0.006,57,3.126,88,0.005,89,0.005,96,1.099,152,1.219,180,1.304,193,2.013,196,1.718,268,2.099,379,1.336,796,5.484,1002,4.829,1123,5.863,1132,4.714,1148,6.239,1208,6.958,1210,6.557,1213,4.929,1405,4.708,2329,6.37,2332,6.958,2351,6.37,2358,7.56,4575,4.929,4581,7.14,4582,7.14,4583,7.14,4584,8.474,4585,7.14,4586,7.14,4587,7.14,4588,7.14,4589,7.14,4590,8.474,4591,7.14,4592,7.14]],["title/index.html",[10,0.113,4593,3.544,4594,3.544]],["body/index.html",[4,0.073,7,2.246,17,0.005,26,4.345,41,3.104,49,1.709,54,2.955,61,1.552,88,0.004,89,0.004,97,2.355,122,1.695,134,3.061,135,1.935,180,1.042,191,2.613,203,3.375,207,4.118,209,4.516,240,6.552,272,1.635,274,3.343,311,1.758,335,4.02,379,0.938,382,3.462,404,5.201,412,1.897,431,2.613,479,2.666,485,2.057,533,3.689,541,3.179,682,2.77,691,1.23,704,2.666,784,3.462,802,2.299,889,2.542,943,4.858,998,4.914,1035,2.476,1127,2.613,1129,2.688,1130,4.118,1204,2.77,1225,4.914,1230,4.914,1238,2.955,1244,4.923,1270,4.474,1306,2.414,1358,3.462,1405,3.994,1418,3.852,1464,3.639,1496,3.178,1502,2.955,1547,5.201,1569,7.039,1788,3.639,2046,4.118,2141,5.087,2171,5.201,2245,3.639,2276,3.311,2402,3.852,2530,4.474,2559,3.859,2613,4.118,2627,7.323,2934,2.77,2938,3.859,3228,4.474,3334,4.474,3384,4.474,3512,4.118,3576,6.294,4151,6.839,4152,4.474,4553,3.852,4595,6.771,4596,5.015,4597,6.771,4598,5.015,4599,6.839,4600,6.839,4601,6.839,4602,5.015,4603,5.015,4604,5.015,4605,5.015,4606,5.015,4607,5.015,4608,5.015,4609,5.015,4610,5.015,4611,5.015,4612,6.771,4613,5.015,4614,6.771,4615,5.015,4616,5.015,4617,5.015,4618,5.015,4619,5.015,4620,5.015,4621,5.015,4622,5.015,4623,5.015,4624,5.015,4625,5.015,4626,5.015,4627,5.015,4628,5.015,4629,5.015,4630,5.015,4631,5.015,4632,5.015,4633,5.015,4634,5.015,4635,5.015,4636,5.015,4637,5.015,4638,5.015,4639,5.015,4640,5.015,4641,5.015,4642,5.015,4643,6.771,4644,5.015,4645,5.015,4646,5.015,4647,5.015,4648,6.771,4649,5.015,4650,5.015,4651,6.771,4652,5.015,4653,5.015,4654,5.015,4655,5.015,4656,5.015,4657,5.015,4658,5.015,4659,5.015,4660,5.015,4661,5.015,4662,5.015,4663,5.015,4664,5.015,4665,5.015,4666,5.015,4667,5.015,4668,5.015,4669,5.015,4670,5.201,4671,4.118,4672,7.323,4673,6.041,4674,4.474,4675,4.474,4676,4.474,4677,4.474,4678,4.474,4679,4.474,4680,4.474,4681,4.474,4682,4.474,4683,4.474,4684,8.302,4685,4.474,4686,4.474,4687,4.474,4688,6.041,4689,4.474,4690,4.474,4691,4.474,4692,4.474,4693,4.474,4694,4.474,4695,4.474,4696,4.474,4697,6.041,4698,4.474,4699,4.474,4700,4.474,4701,6.041,4702,6.041,4703,4.474,4704,4.474,4705,4.474,4706,4.474,4707,4.474,4708,4.474,4709,4.474,4710,4.474,4711,4.474,4712,4.474,4713,4.474,4714,4.474,4715,4.474,4716,4.474,4717,4.474,4718,4.474,4719,4.474,4720,4.474,4721,4.474,4722,4.474,4723,4.474,4724,4.474,4725,4.474,4726,4.474,4727,4.474]],["title/license.html",[4593,3.544,4594,3.544,4670,3.051]],["body/license.html",[17,0.005,49,1.496,88,0.005,89,0.005,122,2.269,203,3.215,209,5.185,311,2.354,379,1.256,412,2.54,691,1.647,1035,3.314,1230,5.926,1238,3.955,1306,3.231,1418,5.156,1569,5.512,1788,4.872,2171,6.271,2245,4.872,2402,5.156,4599,5.989,4600,5.989,4601,5.989,4670,5.156,4671,5.512,4672,8.168,4673,7.285,4674,5.989,4675,5.989,4676,5.989,4677,5.989,4678,5.989,4679,5.989,4680,5.989,4681,5.989,4682,5.989,4683,5.989,4684,8.759,4685,5.989,4686,5.989,4687,5.989,4688,7.285,4689,5.989,4690,5.989,4691,5.989,4692,5.989,4693,5.989,4694,5.989,4695,5.989,4696,5.989,4697,7.285,4698,5.989,4699,5.989,4700,5.989,4701,7.285,4702,7.285,4703,5.989,4704,5.989,4705,5.989,4706,5.989,4707,5.989,4708,5.989,4709,5.989,4710,5.989,4711,5.989,4712,5.989,4713,5.989,4714,5.989,4715,5.989,4716,5.989,4717,5.989,4718,5.989,4719,5.989,4720,5.989,4721,5.989,4722,5.989,4723,5.989,4724,5.989,4725,5.989,4726,5.989,4727,5.989]],["title/modules.html",[2328,5.03]],["body/modules.html",[17,0.006,88,0.006,89,0.006,1269,3.781,2327,6.034,2328,6.034,4728,7.857,4729,7.857]],["title/overview.html",[4730,5.843]],["body/overview.html",[2,1.224,17,0.005,88,0.005,89,0.005,92,4.799,176,3.838,250,4.621,261,3.391,294,1.858,479,2.981,514,3.738,996,3.838,1306,3.644,2152,5.815,2326,7.201,2355,6.755,2569,5.79,4553,5.815,4730,6.755,4731,7.572,4732,7.572,4733,6.755,4734,7.572,4735,6.755,4736,6.755,4737,6.755,4738,7.572]],["title/properties.html",[11,0.188,240,2.743]],["body/properties.html",[11,0.256,17,0.006,88,0.006,89,0.006,1358,5.405,4670,6.013,4671,6.428,4739,7.829]],["title/miscellaneous/typealiases.html",[4575,2.743,4740,5.752]],["body/miscellaneous/typealiases.html",[10,0.097,15,1.346,16,0.31,17,0.006,34,1.79,36,1.293,39,3.139,64,1.948,66,2.306,68,2.056,70,4.685,76,2.607,88,0.003,89,0.003,105,4.088,114,2.298,122,1.155,125,3.736,127,1.948,129,2.36,132,2.36,144,4.576,146,3.736,152,0.492,158,2.36,159,3.554,160,4.227,168,4.227,169,3.954,190,2.607,211,2.481,215,5.659,219,4.227,223,3.954,225,4.593,241,2.626,268,2.616,273,2.212,282,2.481,283,3.736,284,3.954,286,2.014,287,2.481,306,2.086,363,6.07,382,4.275,387,2.481,392,1.198,395,2.481,435,3.05,485,1.402,509,2.579,512,1.135,524,1.076,535,2.951,618,1.688,643,1.346,658,5.001,659,4.55,670,2.086,699,2.014,713,1.04,716,3.736,751,1.115,781,2.41,800,3.736,802,1.567,811,4.213,831,4.206,839,2.481,845,2.481,864,3.736,865,2.626,866,5.293,867,3.954,875,3.954,953,3.648,954,3.736,972,4.593,996,2.61,1002,1.948,1035,3.057,1070,2.682,1127,1.781,1200,2.807,1215,2.807,1216,3.05,1217,4.593,1242,4.593,1261,2.167,1275,2.626,1278,4.593,1284,4.593,1292,1.948,1306,1.645,1322,4.593,1436,2.807,1437,5.659,1442,4.227,1443,2.481,1445,3.954,1446,2.626,1447,2.626,1448,2.626,1449,4.227,1450,2.167,1482,2.36,1483,3.399,1497,3.399,1574,1.733,1677,2.807,1739,3.05,1740,7.192,1743,4.593,1744,4.227,1745,2.014,1746,4.227,1747,2.807,1748,2.807,1749,6.595,1750,3.142,1751,4.227,1807,2.36,1881,3.05,1886,4.593,1887,4.593,1985,2.36,2042,1.833,2141,1.833,2145,2.682,2287,4.227,2410,5.659,2420,3.263,2441,1.605,2545,2.36,2546,4.758,2548,2.36,2550,2.086,2551,2.257,2553,3.924,2554,3.399,2555,3.263,2570,2.167,2572,2.167,2573,3.263,2714,4.593,2715,4.227,2856,2.76,2872,1.948,2882,2.934,2883,1.833,2884,1.888,2885,1.888,2886,1.948,2890,1.888,2891,1.888,2892,2.934,2936,2.843,2947,2.843,3068,3.05,3069,3.05,3070,4.593,3137,4.593,3176,2.807,3177,5.085,3179,4.227,3180,2.807,3181,3.954,3317,2.36,3321,3.399,3322,3.399,3324,2.167,3327,2.167,3328,2.167,3329,3.399,3431,5.659,3434,4.227,3435,3.954,3441,4.088,3442,2.807,3467,4.275,3502,3.05,3503,6.148,3519,3.954,3520,4.227,3522,4.593,3528,2.807,3529,4.227,3530,6.378,3607,2.014,3617,3.648,3618,3.263,3622,2.167,3623,2.257,3625,2.843,3629,2.167,3630,2.167,3631,3.263,3761,2.626,3764,4.756,3765,3.736,3766,3.736,3767,3.954,3771,3.954,3801,3.736,3887,2.807,3888,3.05,3889,2.807,3891,4.593,3942,4.593,3943,4.593,4089,3.05,4193,2.481,4575,2.36,4733,4.593,4735,4.593,4736,4.593,4737,4.593,4741,3.419,4742,5.148,4743,8.296,4744,6.192,4745,3.419,4746,5.148,4747,8.488,4748,5.148,4749,5.148,4750,6.891,4751,7.392,4752,5.148,4753,5.148,4754,6.192,4755,5.148,4756,8.648,4757,5.148,4758,3.419,4759,5.148,4760,5.148,4761,5.148,4762,8.061,4763,5.148,4764,6.192,4765,6.192,4766,5.148,4767,3.419,4768,6.192,4769,3.419,4770,3.419,4771,3.419,4772,3.419,4773,5.148,4774,6.192,4775,3.419,4776,7.768,4777,5.148,4778,6.192,4779,7.392,4780,5.148,4781,6.192,4782,3.419,4783,6.192,4784,7.768,4785,3.419,4786,5.148,4787,6.192,4788,5.148,4789,5.148,4790,5.148,4791,5.148,4792,5.148,4793,5.148,4794,5.148,4795,5.148,4796,5.148,4797,5.148,4798,3.419,4799,5.148,4800,3.419,4801,5.148,4802,5.148,4803,5.148,4804,5.148,4805,5.148,4806,5.148,4807,5.148,4808,5.148,4809,3.419,4810,5.148,4811,5.148,4812,5.148,4813,5.148,4814,5.148,4815,3.419,4816,3.419,4817,3.419,4818,5.148,4819,5.148,4820,5.148,4821,5.148,4822,5.148,4823,5.148,4824,5.148,4825,5.148,4826,5.148,4827,5.148,4828,3.419,4829,3.419,4830,3.419,4831,3.419,4832,3.419,4833,3.419,4834,6.891,4835,3.419,4836,3.419,4837,3.419,4838,3.419,4839,3.419,4840,3.419,4841,3.419,4842,3.419]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":66,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["0.0.0",{"_index":4739,"title":{},"body":{"properties.html":{}}}],["0.15.0",{"_index":4574,"title":{},"body":{"dependencies.html":{}}}],["0754",{"_index":463,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["1",{"_index":996,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["1,2,3,4",{"_index":2568,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["1.0.0",{"_index":2251,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"dependencies.html":{}}}],["1.2.1",{"_index":4567,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":4820,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["100",{"_index":3759,"title":{},"body":{"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["11",{"_index":4821,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["11.1.0",{"_index":4571,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":4822,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["1200",{"_index":4146,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["13",{"_index":4736,"title":{},"body":{"overview.html":{},"miscellaneous/typealiases.html":{}}}],["14",{"_index":4823,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["15",{"_index":4824,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["16",{"_index":4825,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["16.0.4",{"_index":4561,"title":{},"body":{"dependencies.html":{}}}],["17",{"_index":4733,"title":{},"body":{"overview.html":{},"miscellaneous/typealiases.html":{}}}],["18",{"_index":4826,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["19",{"_index":4827,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["19.2.1",{"_index":4559,"title":{},"body":{"dependencies.html":{}}}],["1].focus",{"_index":1001,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["1]?.focus",{"_index":1004,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["1fr",{"_index":1480,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["2",{"_index":2714,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"miscellaneous/typealiases.html":{}}}],["2.32.4",{"_index":4568,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":4735,"title":{},"body":{"overview.html":{},"miscellaneous/typealiases.html":{}}}],["20.1.0",{"_index":4558,"title":{},"body":{"dependencies.html":{}}}],["20.1.2",{"_index":4555,"title":{},"body":{"dependencies.html":{}}}],["2023",{"_index":4674,"title":{},"body":{"index.html":{},"license.html":{}}}],["2025",{"_index":4677,"title":{},"body":{"index.html":{},"license.html":{}}}],["3",{"_index":2715,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"classes/NgxValidators.html":{},"miscellaneous/typealiases.html":{}}}],["3.0.1",{"_index":4569,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":4572,"title":{},"body":{"dependencies.html":{}}}],["37",{"_index":4734,"title":{},"body":{"overview.html":{}}}],["4",{"_index":223,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"injectables/NgxImageMarkerService.html":{},"miscellaneous/typealiases.html":{}}}],["4.1.0",{"_index":4563,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":4566,"title":{},"body":{"dependencies.html":{}}}],["401",{"_index":2407,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["4217",{"_index":1685,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["4217](https://en.wikipedia.org/wiki/iso_4217",{"_index":1695,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["474.603.875",{"_index":202,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["474603875",{"_index":201,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["5",{"_index":4818,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["5100",{"_index":462,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["5px",{"_index":3784,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["6",{"_index":4819,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["7",{"_index":4737,"title":{},"body":{"overview.html":{},"miscellaneous/typealiases.html":{}}}],["7.1.5",{"_index":4564,"title":{},"body":{"dependencies.html":{}}}],["7.8.0",{"_index":4570,"title":{},"body":{"dependencies.html":{}}}],["7061",{"_index":464,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["74",{"_index":4738,"title":{},"body":{"overview.html":{}}}],["8",{"_index":225,"title":{},"body":{"pipes/BtwPipe.html":{},"miscellaneous/typealiases.html":{}}}],["9",{"_index":219,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/NgxStorageService.html":{},"miscellaneous/typealiases.html":{}}}],["9.0.0",{"_index":4565,"title":{},"body":{"dependencies.html":{}}}],["9]*[,.]{0,1}[0",{"_index":3426,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["_",{"_index":2745,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/TableCellTemplate.html":{}}}],["_removedvalue",{"_index":1655,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["a11y",{"_index":336,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["a[data",{"_index":3225,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["abdurrahman",{"_index":4664,"title":{},"body":{"index.html":{}}}],["ability",{"_index":3278,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["above",{"_index":1035,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["abstract",{"_index":563,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"classes/NgxI18nAbstractService.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTourStepComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["abstractcontrol",{"_index":389,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["abstraction",{"_index":3111,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["abstractions",{"_index":4617,"title":{},"body":{"index.html":{}}}],["abstracts",{"_index":245,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["accept",{"_index":1546,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["acceptcategory",{"_index":1534,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["acceptcategory(name",{"_index":1544,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["accepted",{"_index":1558,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxHasCookieDirective.html":{}}}],["acceptservice",{"_index":1535,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["acceptservice(category",{"_index":1549,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["accepttype",{"_index":1505,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["access",{"_index":4106,"title":{},"body":{"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["accessibility",{"_index":2864,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["accessible",{"_index":772,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["accessor",{"_index":363,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["accessors",{"_index":99,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourItemDirective.html":{}}}],["accessors.length",{"_index":427,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["according",{"_index":683,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["accordingly",{"_index":1827,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["accordion",{"_index":527,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["accordion'},{'name",{"_index":525,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["accordion.component",{"_index":1083,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["account",{"_index":3794,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["acoolmethod",{"_index":4168,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["act",{"_index":1826,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["action",{"_index":122,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["action.id",{"_index":2302,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["action.state",{"_index":2298,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["action/has",{"_index":2154,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["actioncreator",{"_index":119,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["actionfromresult",{"_index":2301,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["actionreducer",{"_index":123,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["actions",{"_index":128,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["actions.channel",{"_index":4249,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["actions.concat(action.id",{"_index":2299,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["actions.data",{"_index":4283,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["actions.filter((actionfromresult",{"_index":2300,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["actions.videos",{"_index":4255,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["actiontype",{"_index":2959,"title":{},"body":{"injectables/NgxModalService.html":{},"injectables/SpecStoreService.html":{}}}],["activatedroute",{"_index":3127,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["activatedroutesnapshot",{"_index":3281,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["active",{"_index":908,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["actives",{"_index":3726,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["activetooltip",{"_index":3672,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["actual",{"_index":107,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/TableCellTemplate.html":{}}}],["actual_component",{"_index":612,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["actually",{"_index":1931,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxModalService.html":{}}}],["adapter",{"_index":159,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["add",{"_index":135,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["addcharatindex",{"_index":210,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["addcharatindex(value",{"_index":222,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["added",{"_index":333,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["additional",{"_index":1241,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["addloadedtranslations",{"_index":2269,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["addloadedtranslations(translations",{"_index":2274,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["adds",{"_index":794,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["adjust",{"_index":3875,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["adjusted",{"_index":2640,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["advantage",{"_index":3200,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["advertisement",{"_index":2932,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["affect",{"_index":2914,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["affects",{"_index":2910,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["aftercontentchecked",{"_index":4306,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["afterviewinit",{"_index":897,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["aftervisible",{"_index":3779,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["afterwards",{"_index":3874,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["again",{"_index":3239,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["alert",{"_index":2925,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["alertdialog",{"_index":2884,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["alias",{"_index":890,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["aliases",{"_index":4741,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allornothingrequired",{"_index":4032,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequired(control",{"_index":4038,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequirederror",{"_index":4043,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequiredvalidator",{"_index":4082,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequiredvalidator(control",{"_index":4096,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allow",{"_index":343,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["allowbeforeunloadhandler",{"_index":3287,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["allowclear",{"_index":2565,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["allowed",{"_index":2562,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["allowing",{"_index":3554,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["allowmultipleopenrows",{"_index":4370,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["allowmultiplerowsopen",{"_index":3511,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["allows",{"_index":323,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{}}}],["allowzoom",{"_index":2563,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["along",{"_index":1853,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["alongside",{"_index":2939,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["already",{"_index":233,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["always",{"_index":1292,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["amount",{"_index":631,"title":{},"body":{"components/MockTourStepComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["amountofsteps",{"_index":614,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["anchor",{"_index":3235,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["anchors",{"_index":3232,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["and/or",{"_index":4695,"title":{},"body":{"index.html":{},"license.html":{}}}],["angular",{"_index":2141,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["angular's",{"_index":2908,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["angular/cdk",{"_index":4554,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/a11y",{"_index":809,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["angular/cdk/bidi",{"_index":2878,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["angular/cdk/dialog",{"_index":2880,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["angular/cdk/overlay",{"_index":3706,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["angular/cdk/portal",{"_index":3708,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["angular/cdk/table",{"_index":4303,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["angular/common",{"_index":1080,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":118,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/SpecStoreService.html":{}}}],["angular/compiler",{"_index":4556,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":205,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"dependencies.html":{}}}],["angular/core/rxjs",{"_index":2983,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["angular/forms",{"_index":21,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":3245,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"dependencies.html":{}}}],["angular/router",{"_index":1222,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"dependencies.html":{}}}],["api",{"_index":1149,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["app",{"_index":3202,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["app.component.ts",{"_index":3215,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["appcomponent",{"_index":3216,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["append",{"_index":2241,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["appending",{"_index":2246,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["application",{"_index":1219,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxWindowService.html":{}}}],["applied",{"_index":2899,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"classes/NgxValidators.html":{}}}],["approach",{"_index":3334,"title":{},"body":{"injectables/NgxStorageService.html":{},"index.html":{}}}],["approaches",{"_index":2461,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["area",{"_index":2725,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["aren't",{"_index":2391,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["args",{"_index":246,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["args{constructorparameters",{"_index":1407,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["arguments",{"_index":310,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["aria",{"_index":661,"title":{},"body":{"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["ariadescribedby",{"_index":2843,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{}}}],["arialabel",{"_index":3027,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["arialabelledby",{"_index":2844,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{}}}],["arising",{"_index":4725,"title":{},"body":{"index.html":{},"license.html":{}}}],["around",{"_index":3783,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["array",{"_index":432,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["array.from(this.tablecelltemplates()).foreach((tablecelltemplate",{"_index":4470,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["array.from(this.tablecelltemplates()).some((celltemplate",{"_index":4481,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["array.isarray(open",{"_index":985,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["array.isarray(value",{"_index":2036,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"pipes/NgxTableGetPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["arraysignal",{"_index":4742,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["arrowdown",{"_index":1021,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["arrowdown(event",{"_index":1038,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["arrowleft",{"_index":3964,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["arrowup",{"_index":1022,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["arrowup(event",{"_index":1040,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["ascending",{"_index":1116,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"miscellaneous/enumerations.html":{}}}],["asobservable",{"_index":492,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{}}}],["assertion",{"_index":3960,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["assertive",{"_index":1748,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"miscellaneous/typealiases.html":{}}}],["assets",{"_index":147,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{}}}],["assets.ts",{"_index":283,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/SpecStoreAssets.html":{},"miscellaneous/typealiases.html":{}}}],["assigns",{"_index":4463,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["assistive",{"_index":773,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["associated",{"_index":4685,"title":{},"body":{"index.html":{},"license.html":{}}}],["async",{"_index":2133,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["atleastonerequired",{"_index":4033,"title":{},"body":{"classes/NgxValidators.html":{}}}],["atleastonerequired(options",{"_index":4044,"title":{},"body":{"classes/NgxValidators.html":{}}}],["atleastonerequirederror",{"_index":46,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["atleastonerequiredvalidator",{"_index":43,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["atleastonerequiredvalidator(options",{"_index":4099,"title":{},"body":{"classes/NgxValidators.html":{}}}],["atleastonerequiredvalidatoroptions",{"_index":1,"title":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["attach",{"_index":857,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["attached",{"_index":2905,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxTooltipService.html":{}}}],["attempt",{"_index":1277,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["attempted",{"_index":2484,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["attention",{"_index":2931,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["attr.aria",{"_index":3660,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["attr.data",{"_index":1705,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["attr.role",{"_index":3619,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["attr.tabindex",{"_index":342,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["attribute",{"_index":4367,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["attributes",{"_index":2870,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourStepComponent.html":{}}}],["auth",{"_index":1245,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticated",{"_index":1132,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"miscellaneous/functions.html":{}}}],["authenticated.directive.ts",{"_index":2752,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:125",{"_index":2758,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:27",{"_index":2761,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:30",{"_index":2767,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:35",{"_index":2762,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:40",{"_index":2765,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:41",{"_index":2766,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:42",{"_index":2763,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:43",{"_index":2764,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:48",{"_index":2755,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:70",{"_index":2756,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:74",{"_index":2757,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:76",{"_index":2759,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:80",{"_index":2760,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated/is",{"_index":2751,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticatedcallhandler",{"_index":1202,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["authentication",{"_index":1210,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["authenticationresponse",{"_index":1318,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationresponsesubject",{"_index":1246,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationresponsetype",{"_index":1311,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationresponsetype['session']['permissions",{"_index":1349,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationservice",{"_index":2068,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticationstatussubject",{"_index":1247,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authorized",{"_index":2404,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["authors",{"_index":4716,"title":{},"body":{"index.html":{},"license.html":{}}}],["auto",{"_index":1468,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["autoclearcookies",{"_index":1512,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["autoclose",{"_index":2902,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["autodetect",{"_index":1499,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["autofocus",{"_index":2920,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["autofocustarget",{"_index":2879,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["autogenerated",{"_index":3658,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["automatically",{"_index":1868,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["autoshow",{"_index":1509,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["available",{"_index":1269,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"modules.html":{}}}],["availablelanguages",{"_index":2233,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["availablelanguagessubject",{"_index":2429,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["availabletranslations",{"_index":2382,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["availabletranslations[path",{"_index":2390,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["avoid",{"_index":733,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["axis",{"_index":3789,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["back",{"_index":699,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"miscellaneous/typealiases.html":{}}}],["backdrop",{"_index":2897,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["base",{"_index":101,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["based",{"_index":704,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{}}}],["baseformaccessor",{"_index":91,"title":{"classes/BaseFormAccessor.html":{}},"body":{"classes/BaseFormAccessor.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{}}}],["basestore",{"_index":110,"title":{"interfaces/BaseStore.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["basestoreaction",{"_index":3447,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["basestoreactions",{"_index":129,"title":{"interfaces/BaseStoreActions.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["basestoreassets",{"_index":127,"title":{"interfaces/BaseStoreAssets.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/typealiases.html":{}}}],["basestoreassetsgeneratoroptions",{"_index":145,"title":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{}},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["basestoreeffectsinterface",{"_index":125,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["basestoreselector",{"_index":3444,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["basestoreselectors",{"_index":132,"title":{"interfaces/BaseStoreSelectors.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["baseurl",{"_index":1135,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["baseurlhandler",{"_index":1177,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["basicentityadapteractions",{"_index":168,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"miscellaneous/typealiases.html":{}}}],["basicentityadapterreduceractions",{"_index":157,"title":{"interfaces/BasicEntityAdapterReducerActions.html":{}},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["basicentitystate",{"_index":170,"title":{"interfaces/BasicEntityState.html":{}},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["bc.onmessage",{"_index":1398,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["bc.onmessageerror",{"_index":1394,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["be62",{"_index":461,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["be62510007547061",{"_index":460,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["becomes",{"_index":3776,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["before",{"_index":2735,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["beforeunload",{"_index":3303,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["beforeunloadevent",{"_index":3296,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["beforevisible",{"_index":3777,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["behavior",{"_index":3305,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["behaviorsubject",{"_index":502,"title":{},"body":{"components/MockTourHolderComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["behaviorsubject('hello",{"_index":496,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["behaviorsubject('unset",{"_index":1264,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["behaviorsubject(0",{"_index":4134,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["behaviorsubject(1200",{"_index":4147,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["behaviorsubject(false",{"_index":2293,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxModalService.html":{}}}],["behaviorsubject(this.parsevalue(value",{"_index":3424,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["behaviorsubject(true",{"_index":4142,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["behaviorsubject(undefined",{"_index":1262,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{}}}],["behaviour",{"_index":4523,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["being",{"_index":1100,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["belgian",{"_index":197,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["below",{"_index":39,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"miscellaneous/typealiases.html":{}}}],["benoit",{"_index":4450,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["benoît",{"_index":4660,"title":{},"body":{"index.html":{}}}],["best",{"_index":685,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["better",{"_index":3573,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["between",{"_index":3756,"title":{},"body":{"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{}}}],["bind(this",{"_index":2698,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["blob",{"_index":1187,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["blocked",{"_index":359,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["blueprint",{"_index":3436,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["blur",{"_index":746,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["body",{"_index":1163,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{}}}],["body.createelement(element",{"_index":3260,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["body.queryselector(selector.replace('{{id",{"_index":3257,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["boolean",{"_index":29,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["boolean(action",{"_index":3004,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["boolean(availabletranslations[path",{"_index":2387,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["boolean(celltemplate.footertemplate",{"_index":4482,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["boolean(closed",{"_index":3005,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["boolean(tour?.[index",{"_index":3851,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["booleanrecord",{"_index":4746,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["booleansignal",{"_index":4748,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["bootstrap",{"_index":4732,"title":{},"body":{"overview.html":{}}}],["both",{"_index":2556,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["bottom",{"_index":3698,"title":{},"body":{"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridDirective.html":{}}}],["branch",{"_index":4643,"title":{},"body":{"index.html":{}}}],["break",{"_index":3541,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["breaking",{"_index":4154,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["brief",{"_index":2876,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["broadcast",{"_index":1381,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broadcastchannel",{"_index":1366,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broadcastchannel's",{"_index":1420,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broadcastchannel(...args",{"_index":1413,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broken",{"_index":2409,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["browse",{"_index":4729,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1408,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"dependencies.html":{}}}],["browserdocument",{"_index":4174,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["browserwindow",{"_index":2805,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxWindowService.html":{}}}],["browserwindow.matchmedia(query",{"_index":2817,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["btw",{"_index":181,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["btwpipe",{"_index":175,"title":{"pipes/BtwPipe.html":{}},"body":{"pipes/BtwPipe.html":{}}}],["bubbling",{"_index":3962,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["bug",{"_index":4657,"title":{},"body":{"index.html":{}}}],["build",{"_index":4627,"title":{},"body":{"index.html":{}}}],["bump",{"_index":4652,"title":{},"body":{"index.html":{}}}],["busting",{"_index":2239,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["busy",{"_index":1782,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["button",{"_index":339,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["buttons",{"_index":4421,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["bypass",{"_index":3279,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["bypasssaveonexit",{"_index":3275,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["c",{"_index":4673,"title":{},"body":{"index.html":{},"license.html":{}}}],["cache",{"_index":2238,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["cachebust",{"_index":2234,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["call",{"_index":1152,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["callback",{"_index":4173,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["called",{"_index":351,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxWindowService.html":{}}}],["calling",{"_index":2532,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxStorageService.html":{}}}],["calls",{"_index":1134,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["came",{"_index":2388,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["cancelled",{"_index":834,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["canedit",{"_index":2580,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["case",{"_index":83,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxTableHasObserversPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["cases",{"_index":3576,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["casing",{"_index":3213,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["cast",{"_index":1340,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["catcherror",{"_index":2381,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["catcherror((res",{"_index":2400,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["categories",{"_index":1548,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["category",{"_index":1491,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{}}}],["causing",{"_index":4542,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["cdk",{"_index":235,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxModalService.html":{}}}],["cdkdialog",{"_index":2893,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["cdktablemodule",{"_index":4302,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cdref",{"_index":1015,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cell",{"_index":665,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cell'},{'name",{"_index":537,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["cell.component.ts",{"_index":1667,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:25",{"_index":1683,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["cell.component.ts:37",{"_index":1727,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:42",{"_index":1722,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:47",{"_index":1716,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:52",{"_index":1718,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.directive",{"_index":1694,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["cell.directive.ts",{"_index":3495,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["cell.resetsortdirection",{"_index":4489,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cell.sortdirection",{"_index":1119,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["cell.sortdirection.tolocalelowercase",{"_index":1120,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["cellclass",{"_index":666,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cellname",{"_index":4487,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cells",{"_index":4331,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["celltemplate",{"_index":667,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["center",{"_index":3701,"title":{},"body":{"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["certain",{"_index":1557,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["change",{"_index":2130,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxStorageService.html":{}}}],["changed",{"_index":1577,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxTourStepComponent.html":{}}}],["changedcategories",{"_index":1518,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["changedetection",{"_index":939,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedetectionstrategy",{"_index":970,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedetectionstrategy.onpush",{"_index":940,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedetectorref",{"_index":1059,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedservices",{"_index":1519,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["changer",{"_index":393,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["changes",{"_index":1091,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["channel",{"_index":1367,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["channel.service.ts",{"_index":1364,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:115",{"_index":1392,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:15",{"_index":1403,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:20",{"_index":1399,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:29",{"_index":1384,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:55",{"_index":1377,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:72",{"_index":1388,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:93",{"_index":1397,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel/broadcast",{"_index":1363,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channelerror",{"_index":4205,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["channelerrormessage",{"_index":4206,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["channelloading",{"_index":4207,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["channelname",{"_index":1380,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channelname{string",{"_index":1414,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channels",{"_index":1401,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["char",{"_index":212,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["charge",{"_index":4681,"title":{},"body":{"index.html":{},"license.html":{}}}],["check",{"_index":73,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["checkbox",{"_index":3524,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["checkboxtemplate",{"_index":4359,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["checked",{"_index":2792,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"interfaces/TableCellTemplate.html":{}}}],["checks",{"_index":31,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{}}}],["child",{"_index":3971,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["children",{"_index":3976,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["choice",{"_index":1590,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["chronological",{"_index":4086,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldates",{"_index":4034,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldates(startcontrolkey",{"_index":4047,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldatesvalidator",{"_index":4085,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldatesvalidator(startcontrolkey",{"_index":4102,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologically",{"_index":4050,"title":{},"body":{"classes/NgxValidators.html":{}}}],["circular",{"_index":734,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["claim",{"_index":4719,"title":{},"body":{"index.html":{},"license.html":{}}}],["class",{"_index":90,"title":{"classes/BaseFormAccessor.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"classes/NgxValidators.html":{}},"body":{"classes/BaseFormAccessor.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["class.ngx",{"_index":3806,"title":{},"body":{"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["classes",{"_index":92,"title":{},"body":{"classes/BaseFormAccessor.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"classes/NgxValidators.html":{},"overview.html":{}}}],["clean",{"_index":22,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"dependencies.html":{}}}],["clean(group.value",{"_index":59,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedformvalue",{"_index":58,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedkeys",{"_index":60,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedkeys.has(key",{"_index":80,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedkeys.size",{"_index":65,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clear",{"_index":139,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["clearchannel",{"_index":4211,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["cleardata",{"_index":3073,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["cleared",{"_index":3386,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["clearformerror",{"_index":24,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clearformerror(control",{"_index":87,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clearing",{"_index":2564,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["clears",{"_index":3080,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["clearstorage",{"_index":3339,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["clearstorage(storage",{"_index":3344,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["clearvideos",{"_index":4212,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["click",{"_index":306,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["click.directive.ts",{"_index":297,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:12",{"_index":309,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:24",{"_index":321,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:28",{"_index":312,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:37",{"_index":313,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click/focus",{"_index":296,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["clicked",{"_index":2604,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["clicking",{"_index":326,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["clicks",{"_index":2676,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["client.service.ts",{"_index":1125,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:120",{"_index":1166,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:14",{"_index":1170,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:143",{"_index":1168,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:16",{"_index":1141,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:166",{"_index":1164,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:29",{"_index":1161,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:41",{"_index":1159,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:61",{"_index":1155,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:99",{"_index":1146,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client/authenticated",{"_index":1124,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["clone",{"_index":4603,"title":{},"body":{"index.html":{}}}],["close",{"_index":643,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["close(onclose",{"_index":2955,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["closechannel",{"_index":1371,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["closechannel(channelname",{"_index":1376,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["closed",{"_index":2740,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["closeondestroy",{"_index":3045,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["closeonnavigation",{"_index":2896,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["closeonoverlaydetachments",{"_index":3046,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["closer",{"_index":3796,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["closes",{"_index":1378,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxModalService.html":{}}}],["closing",{"_index":2918,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["code",{"_index":4649,"title":{},"body":{"index.html":{}}}],["collection",{"_index":4624,"title":{},"body":{"index.html":{}}}],["column",{"_index":668,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["columninput",{"_index":4471,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["columnkey",{"_index":3584,"title":{},"body":{"interfaces/NgxTableSortEvent.html":{}}}],["columns",{"_index":1467,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["combination",{"_index":2257,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["combinelatest",{"_index":1320,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["combinelatest([this.getsession",{"_index":1335,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["comma",{"_index":4072,"title":{},"body":{"classes/NgxValidators.html":{}}}],["comma.validator",{"_index":4093,"title":{},"body":{"classes/NgxValidators.html":{}}}],["comma/decimals",{"_index":4092,"title":{},"body":{"classes/NgxValidators.html":{}}}],["commit",{"_index":4648,"title":{},"body":{"index.html":{}}}],["common",{"_index":4614,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":4532,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["complete",{"_index":2642,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{}}}],["completed",{"_index":2313,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxStorageService.html":{}}}],["completes",{"_index":3346,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["complex",{"_index":4616,"title":{},"body":{"index.html":{}}}],["compliant",{"_index":935,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTooltipDirective.html":{}}}],["compodoc",{"_index":4610,"title":{},"body":{"index.html":{}}}],["component",{"_index":109,"title":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}},"body":{"classes/BaseFormAccessor.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["component'},{'name",{"_index":522,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["component.component.html",{"_index":450,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["component/empty.component.ts",{"_index":2255,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["component_template",{"_index":518,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["componentclass",{"_index":4318,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["componentportal",{"_index":3707,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["componentportal(component",{"_index":3747,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["componentref",{"_index":1854,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["componentref.setinput('data",{"_index":1856,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["components",{"_index":479,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{},"overview.html":{}}}],["componenttype",{"_index":247,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["componenttypewrapper",{"_index":226,"title":{"interfaces/ComponentTypeWrapper.html":{}},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["computed",{"_index":1701,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["condition",{"_index":1754,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["conditionalfunction",{"_index":13,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["conditionalfunction(group.value",{"_index":69,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["conditions",{"_index":1238,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxDisplayContentDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{},"license.html":{}}}],["config",{"_index":1890,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["config.defaultassetpaths",{"_index":2354,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["config.token.ts",{"_index":3503,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["configurable",{"_index":530,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["configuration",{"_index":37,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{}}}],["configuration.allowclear",{"_index":2719,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.allowzoom",{"_index":2710,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.autoclose",{"_index":3012,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration.component",{"_index":2995,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration.defaultstate",{"_index":2736,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.markertypes.view",{"_index":2702,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.markertypes?.edit",{"_index":2720,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.markertypes?.view",{"_index":2700,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.mode",{"_index":2689,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.role",{"_index":3055,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration.ts",{"_index":1483,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["configuration.types.ts",{"_index":1201,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["configuration.zoom?.current",{"_index":2717,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.zoom?.levels",{"_index":2713,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration?.autoclose",{"_index":3011,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration?.closeonnavigation",{"_index":3043,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration?.direction",{"_index":3036,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration?.role",{"_index":3025,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configurationvalue",{"_index":2965,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configured",{"_index":2935,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["connect",{"_index":3882,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["connectedposition",{"_index":3704,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["connection",{"_index":4726,"title":{},"body":{"index.html":{},"license.html":{}}}],["consent",{"_index":1584,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["consentchanged",{"_index":1586,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["console.error",{"_index":822,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourStepComponent.html":{}}}],["console.error('ngxforms",{"_index":1941,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["console.error('something",{"_index":2320,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["console.error(res.message",{"_index":2403,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["console.warn",{"_index":428,"title":{},"body":{"directives/FormAccessorContainer.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["console.warn('browser",{"_index":4187,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["const",{"_index":42,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["constructor",{"_index":947,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["constructor(httpbackend",{"_index":2369,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["constructor(private",{"_index":3388,"title":{},"body":{"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["constructor(selectors",{"_index":3456,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["constructorparameters",{"_index":1383,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["constructs",{"_index":1147,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["consult",{"_index":4609,"title":{},"body":{"index.html":{}}}],["container",{"_index":854,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["container(s",{"_index":886,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["container.directive",{"_index":925,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["container.directive.ts",{"_index":882,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["container.directive.ts:15",{"_index":892,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["container.directive.ts:20",{"_index":895,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["container.index",{"_index":928,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["container.ts",{"_index":365,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:18",{"_index":407,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:23",{"_index":413,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:33",{"_index":391,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:47",{"_index":397,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:59",{"_index":401,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:75",{"_index":398,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:85",{"_index":376,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container/form",{"_index":364,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["containers",{"_index":899,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["containing",{"_index":4055,"title":{},"body":{"classes/NgxValidators.html":{}}}],["contains",{"_index":2452,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["content",{"_index":512,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"miscellaneous/typealiases.html":{}}}],["content.component.ts",{"_index":1734,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["content.component.ts:11",{"_index":1737,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["content.directive",{"_index":4533,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["content.directive.ts",{"_index":1753,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:118",{"_index":1772,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:168",{"_index":1773,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:179",{"_index":1777,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:214",{"_index":1774,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:223",{"_index":1787,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:237",{"_index":1785,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:277",{"_index":1781,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:36",{"_index":1797,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:37",{"_index":1804,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:38",{"_index":1789,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:39",{"_index":1809,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:40",{"_index":1801,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:41",{"_index":1793,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:48",{"_index":1798,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:53",{"_index":1805,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:58",{"_index":1802,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:63",{"_index":1790,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:68",{"_index":1769,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:73",{"_index":1771,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:81",{"_index":1768,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.types.ts",{"_index":1740,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["content/components/display",{"_index":4529,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["content/display",{"_index":1733,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["contentchild",{"_index":1082,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["contentchild('celltmpl",{"_index":3496,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["contentchild('footertmpl",{"_index":1687,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["contentchild('headertmpl",{"_index":1690,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["contentchild>('checkboxtmpl",{"_index":4360,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('contenttmpl",{"_index":1062,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["contentchild>('detailrowtmpl",{"_index":4354,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('emptytmpl",{"_index":4356,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('headertmpl",{"_index":1068,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["contentchild>('loadingtmpl",{"_index":4358,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('openrowstatetmpl",{"_index":4366,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('radiotmpl",{"_index":4362,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('sorttmpl",{"_index":4364,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchildren",{"_index":924,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["contentchildren(ngxabstracttablecelldirective",{"_index":4352,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchildren(ngxaccessibledraganddropcontainerdirective",{"_index":912,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["contentcustom",{"_index":4538,"title":{},"body":{"components/TestOverrideDisplayContentComponent.html":{}}}],["contenttemplate",{"_index":1016,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["context",{"_index":1144,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["continue",{"_index":3718,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["contract",{"_index":4722,"title":{},"body":{"index.html":{},"license.html":{}}}],["contribute",{"_index":4641,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":4640,"title":{},"body":{"index.html":{}}}],["contributors",{"_index":4659,"title":{},"body":{"index.html":{}}}],["control",{"_index":70,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["control?.value",{"_index":4429,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["controlnames",{"_index":4097,"title":{},"body":{"classes/NgxValidators.html":{}}}],["controlpaths",{"_index":4749,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["controls",{"_index":14,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["controlvalueaccessor",{"_index":2628,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["convenient",{"_index":4153,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["convert",{"_index":195,"title":{},"body":{"pipes/BtwPipe.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["converts",{"_index":189,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["converttoarray",{"_index":2096,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["converttoarray(this.permission",{"_index":2210,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["cookie",{"_index":1515,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{}}}],["cookie(s",{"_index":1996,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts",{"_index":1992,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:148",{"_index":2007,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:158",{"_index":2013,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:168",{"_index":2010,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:34",{"_index":2021,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:36",{"_index":2025,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:37",{"_index":2028,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:38",{"_index":2024,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:39",{"_index":2016,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:40",{"_index":2018,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:48",{"_index":2026,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:49",{"_index":2022,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:54",{"_index":2019,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:59",{"_index":2020,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:64",{"_index":2006,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:70",{"_index":2005,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:89",{"_index":2009,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:96",{"_index":2014,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.name",{"_index":1649,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookie.services",{"_index":2044,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.services.map((service",{"_index":2047,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.ts",{"_index":1657,"title":{},"body":{"interfaces/NgxCookieValue.html":{}}}],["cookie.value",{"_index":1650,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookie/has",{"_index":1991,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookieconsent",{"_index":1496,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"dependencies.html":{},"index.html":{}}}],["cookieconsent.acceptcategory(name",{"_index":1637,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.acceptedcategory(name",{"_index":1636,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.acceptedservice(name",{"_index":1638,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.acceptservice(name",{"_index":1639,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.getcookie('data",{"_index":1641,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.run",{"_index":1633,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.setcookiedata",{"_index":1648,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.show(true",{"_index":1640,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookies",{"_index":1547,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxHasCookieDirective.html":{},"index.html":{}}}],["cookieschanged",{"_index":1524,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieschangedsubject",{"_index":1525,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsentchanged",{"_index":1526,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsentchangedsubject",{"_index":1527,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsented",{"_index":1528,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsentedsubject",{"_index":1529,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookievalue",{"_index":1492,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["copies",{"_index":4697,"title":{},"body":{"index.html":{},"license.html":{}}}],["copy",{"_index":2171,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{},"license.html":{}}}],["copyright",{"_index":4672,"title":{},"body":{"index.html":{},"license.html":{}}}],["core",{"_index":1405,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["correct",{"_index":191,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["correctly",{"_index":1960,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["corresponding",{"_index":831,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"miscellaneous/typealiases.html":{}}}],["corresponds",{"_index":2398,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxTourItemDirective.html":{}}}],["couple",{"_index":3206,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["create",{"_index":238,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["createaccessorproviders",{"_index":252,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["createbasestoreassets",{"_index":4197,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createcustomelement(linkcomponent",{"_index":3220,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["created",{"_index":2613,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxStoreService.html":{},"index.html":{}}}],["createeffect",{"_index":4266,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["createentityadapterstoreassets",{"_index":4198,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createimagemakeredit",{"_index":2661,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createimagemakeredit(id",{"_index":2666,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createimagemarker",{"_index":2662,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createimagemarker(image",{"_index":2671,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarker",{"_index":2591,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["createmarkerclickedlistener",{"_index":2663,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarkerclickedlistener(marker",{"_index":2673,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarkervaluechanges",{"_index":2664,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarkervaluechanges(marker",{"_index":2677,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmodalcomponent",{"_index":2952,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["createmodalcomponent(options",{"_index":2957,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["createreadonlyimagemarker",{"_index":2665,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createreadonlyimagemarker(id",{"_index":2680,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["creates",{"_index":2607,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{}}}],["createstoreassets",{"_index":4199,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createstoreassets('state",{"_index":4279,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createstoreassets(storeslice",{"_index":4202,"title":{},"body":{"interfaces/SpecStoreAssets.html":{}}}],["currency",{"_index":536,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["currencypipe",{"_index":1668,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["current",{"_index":713,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["currentcookies",{"_index":1654,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["currentgrid",{"_index":1438,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["currentlanguage",{"_index":779,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["currentlanguagesubject",{"_index":2430,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["currently",{"_index":1603,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["currentmarker",{"_index":2581,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["currentroute",{"_index":3284,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["currentscrollposition",{"_index":4108,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["currentscrollpositionsubject",{"_index":4109,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["currentsorting",{"_index":1118,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["currentsortingevent",{"_index":4327,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["currentstep",{"_index":615,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["currentvalue",{"_index":1869,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["currentzoomlevel",{"_index":2582,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["custom",{"_index":639,"title":{},"body":{"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTourStepComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["customelements.define('ngx",{"_index":3222,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["custommessages",{"_index":775,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["cutout",{"_index":3782,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["cutoutmargin",{"_index":3762,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["cy",{"_index":1706,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["cypress",{"_index":684,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cypress/playwright",{"_index":2098,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["cypress/playwrite",{"_index":2688,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["cypressdatatags",{"_index":669,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cypressdatatagsinput",{"_index":4473,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cypressleafobject",{"_index":4752,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cypressobject",{"_index":4755,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cypresstag",{"_index":1699,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["cypresstag]'},{'name",{"_index":573,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["damages",{"_index":4720,"title":{},"body":{"index.html":{},"license.html":{}}}],["darkmode",{"_index":4194,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["darr",{"_index":3596,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["data",{"_index":28,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["data',data",{"_index":1967,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["data'},{'name",{"_index":549,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["data)formaccessor",{"_index":251,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{}}}],["data)formaccessors",{"_index":430,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["data.from",{"_index":842,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.fromlabel",{"_index":840,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.item",{"_index":838,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.itemlabel",{"_index":836,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.to",{"_index":844,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.tolabel",{"_index":843,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data[current",{"_index":3155,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["dataformaccessor",{"_index":559,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["dataformaccessors",{"_index":409,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["datasourcesubject",{"_index":487,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["datatype",{"_index":273,"title":{},"body":{"injectables/EffectsService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"miscellaneous/typealiases.html":{}}}],["date",{"_index":539,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"classes/NgxValidators.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"dependencies.html":{}}}],["dateaftermaxdate",{"_index":4832,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["datebeforemindate",{"_index":4833,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["datepipe",{"_index":1708,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["daterangeerrorcodes",{"_index":4757,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["daterangevalidator",{"_index":4035,"title":{},"body":{"classes/NgxValidators.html":{}}}],["daterangevalidator(min",{"_index":4060,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dates",{"_index":4059,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dates.validator",{"_index":4088,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dates/chronological",{"_index":4087,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dd",{"_index":4058,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dd/mm/yyyy",{"_index":1728,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["de",{"_index":4600,"title":{},"body":{"index.html":{},"license.html":{}}}],["deal",{"_index":4686,"title":{},"body":{"index.html":{},"license.html":{}}}],["dealings",{"_index":4727,"title":{},"body":{"index.html":{},"license.html":{}}}],["decimals",{"_index":4071,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercomma",{"_index":4036,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercomma(max",{"_index":4066,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercommavalidator",{"_index":4091,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercommavalidator(max",{"_index":4101,"title":{},"body":{"classes/NgxValidators.html":{}}}],["declarations",{"_index":4731,"title":{},"body":{"overview.html":{}}}],["declare",{"_index":2991,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["decorators",{"_index":315,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["deepmerge",{"_index":2378,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"dependencies.html":{}}}],["deepmerge(...response.map((item",{"_index":2423,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["default",{"_index":308,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["defaultassetpaths",{"_index":2235,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["defaultlanguage",{"_index":2236,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["defaultposition",{"_index":3627,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["defaultprojectorfn",{"_index":120,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["defaultrowopen",{"_index":4386,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["defaults",{"_index":3517,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["defaultstate",{"_index":2560,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["defaultvalue",{"_index":2962,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["define",{"_index":1427,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["defined",{"_index":187,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["definedcolumns",{"_index":4343,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["defines",{"_index":3506,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["delay",{"_index":3019,"title":{},"body":{"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["delete",{"_index":161,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["delete(url",{"_index":1142,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["denis",{"_index":207,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/NgxI18nService.html":{},"index.html":{}}}],["depend",{"_index":4080,"title":{},"body":{"classes/NgxValidators.html":{}}}],["depended",{"_index":4078,"title":{},"body":{"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{}}}],["dependedcontrol",{"_index":4081,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedcontrolkey",{"_index":4075,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequired",{"_index":4037,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequired(controls",{"_index":4074,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequiredvalidator",{"_index":4094,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequiredvalidator(controls",{"_index":4100,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependencies",{"_index":4553,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":239,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["depending",{"_index":1282,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["depends",{"_index":1663,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{},"injectables/NgxWindowService.html":{}}}],["deprecated",{"_index":418,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["deps",{"_index":2359,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["depth",{"_index":4607,"title":{},"body":{"index.html":{}}}],["descendants",{"_index":913,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["descending",{"_index":1117,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"miscellaneous/enumerations.html":{}}}],["describedby",{"_index":860,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipDirective.html":{}}}],["describedbyid",{"_index":2944,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["describes",{"_index":637,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["describing",{"_index":917,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["description",{"_index":96,"title":{},"body":{"classes/BaseFormAccessor.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreStateService.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["descriptions",{"_index":2943,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["deselect",{"_index":4402,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["deselected",{"_index":833,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["destroy",{"_index":399,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["destroyed",{"_index":368,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["destroyedsubject",{"_index":941,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["destruction",{"_index":2148,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["detail",{"_index":2527,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["detailed",{"_index":4636,"title":{},"body":{"index.html":{}}}],["detailrowtemplate",{"_index":4353,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["details",{"_index":1050,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["detailselement",{"_index":1017,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["detailselement?.nativeelement",{"_index":1098,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["detect",{"_index":1846,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["detectchanges",{"_index":1843,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["detected",{"_index":3141,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["detection",{"_index":2911,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["detector",{"_index":2131,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxWindowService.html":{}}}],["determine",{"_index":4376,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["developers",{"_index":4615,"title":{},"body":{"index.html":{}}}],["dialog",{"_index":2883,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{},"miscellaneous/typealiases.html":{}}}],["dialogref",{"_index":3023,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentinstance",{"_index":3047,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentref.setinput",{"_index":3048,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentref.setinput('ariadescribedby",{"_index":3051,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentref.setinput('arialabelledby",{"_index":3052,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogservice",{"_index":2949,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["direction",{"_index":698,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["direction.enum",{"_index":715,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{}}}],["direction.enum.ts",{"_index":4578,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directions",{"_index":4498,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["directive",{"_index":292,"title":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["directives",{"_index":294,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"overview.html":{}}}],["directly",{"_index":3374,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["dirty",{"_index":387,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"miscellaneous/typealiases.html":{}}}],["disable",{"_index":2859,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["disablebackdrop",{"_index":3780,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["disableclose",{"_index":3031,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["disabled",{"_index":301,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["dismiss",{"_index":2929,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["dispatch",{"_index":2281,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["dispatchdatatostore",{"_index":4248,"title":{},"body":{"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["dispatchdatatostore(actions.data",{"_index":4286,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["dispatchdatatostore(actions.iscompleted",{"_index":4291,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["dispatches",{"_index":3684,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["dispatching",{"_index":3114,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["dispatchtranslationloaderaction",{"_index":2270,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["dispatchtranslationloaderaction(action",{"_index":2278,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["display",{"_index":1723,"title":{},"body":{"components/NgxDateTableCellComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["displaycontent",{"_index":1755,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["displaycontent]'},{'name",{"_index":576,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["displaycontentarialive",{"_index":1756,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["displaycontentconfiguration",{"_index":1757,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["displayed",{"_index":2989,"title":{},"body":{"injectables/NgxModalService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["dispose",{"_index":2001,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["disposition').split('.')[1",{"_index":1193,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["distinctuntilchanged",{"_index":1272,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["distribute",{"_index":4693,"title":{},"body":{"index.html":{},"license.html":{}}}],["docs",{"_index":2875,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalBaseOptions.html":{}}}],["docs](https://developer.mozilla.org/en",{"_index":2888,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["document",{"_index":1500,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["document.createelement('p",{"_index":850,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["document.getelementbyid(arialabelledby",{"_index":2868,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["document:keydown.escape",{"_index":627,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["document?.activeelement",{"_index":3979,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["documentation",{"_index":1569,"title":{},"body":{"injectables/NgxCookieService.html":{},"index.html":{},"license.html":{}}}],["doesn't",{"_index":3540,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["dom",{"_index":480,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["domain",{"_index":1484,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["domparser",{"_index":3248,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["domsanitizer",{"_index":3244,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["don't",{"_index":236,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["done",{"_index":1932,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["dossoine",{"_index":4661,"title":{},"body":{"index.html":{}}}],["dot",{"_index":3538,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"dependencies.html":{}}}],["down",{"_index":952,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{}}}],["download",{"_index":1136,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["download(url",{"_index":1154,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["downloading",{"_index":1157,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["drag",{"_index":771,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["draganddropservice",{"_index":900,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["draggable",{"_index":763,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["draw",{"_index":2670,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["drop",{"_index":731,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["drop.service.ts",{"_index":768,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:119",{"_index":793,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:161",{"_index":808,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:20",{"_index":788,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:25",{"_index":804,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:32",{"_index":782,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:39",{"_index":801,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.types.ts",{"_index":866,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["drop/drag",{"_index":730,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["drop/has",{"_index":2162,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["due",{"_index":3241,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["dummy",{"_index":2256,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["duplicate",{"_index":2808,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["duplicatequery",{"_index":2810,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["duplicatequery[0",{"_index":2812,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["duplicatequery[1",{"_index":2813,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["during",{"_index":3804,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["dynamic",{"_index":4557,"title":{},"body":{"dependencies.html":{}}}],["dynamically",{"_index":4510,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["e.g",{"_index":2928,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["each",{"_index":431,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["earlier",{"_index":1845,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["early",{"_index":819,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["easy",{"_index":1130,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["edit",{"_index":2547,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["editable",{"_index":670,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["editableinput",{"_index":4474,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["editabletablecellrecord",{"_index":4333,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["effect",{"_index":971,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["effectactions",{"_index":4760,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["effects",{"_index":126,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effects.service",{"_index":4275,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["effectsinterface['add",{"_index":289,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsinterface['delete",{"_index":291,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsinterface['set",{"_index":140,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsinterface['update",{"_index":290,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsservice",{"_index":260,"title":{"injectables/EffectsService.html":{}},"body":{"injectables/EffectsService.html":{},"injectables/StoreEffects.html":{}}}],["ekinci",{"_index":4665,"title":{},"body":{"index.html":{}}}],["element",{"_index":516,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["element.focus",{"_index":3978,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["element.innertext",{"_index":855,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["element.setattribute('id",{"_index":856,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["elementid",{"_index":616,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["elementref",{"_index":738,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["elements",{"_index":689,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{}}}],["elements.pipe.ts",{"_index":3186,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.pipe.ts:15",{"_index":3194,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.pipe.ts:16",{"_index":3197,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.pipe.ts:24",{"_index":3189,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.types.ts",{"_index":3177,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"miscellaneous/typealiases.html":{}}}],["elements/replace",{"_index":3185,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elsetemplateref",{"_index":1998,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["elseviewref",{"_index":2069,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["embeddedviewref",{"_index":2087,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["emit",{"_index":349,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["emitdatatype",{"_index":2887,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["emitevent",{"_index":437,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{},"interfaces/TableCellTemplate.html":{}}}],["emits",{"_index":649,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["emitted",{"_index":2885,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxStorageService.html":{},"miscellaneous/typealiases.html":{}}}],["emitter",{"_index":2851,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["emitting",{"_index":4514,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["emitvalueonsingleitem",{"_index":3514,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["empty",{"_index":64,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["empty'},{'name",{"_index":542,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["emptydata",{"_index":4326,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["emptylabel",{"_index":1713,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["emptytemplate",{"_index":4355,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["emsens",{"_index":4667,"title":{},"body":{"index.html":{}}}],["en",{"_index":410,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["enabled",{"_index":1613,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["encountered",{"_index":1837,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["end",{"_index":1023,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["endcontrol",{"_index":4053,"title":{},"body":{"classes/NgxValidators.html":{}}}],["endcontrolkey",{"_index":4048,"title":{},"body":{"classes/NgxValidators.html":{}}}],["ended",{"_index":4131,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["enhancement",{"_index":4656,"title":{},"body":{"index.html":{}}}],["ensures",{"_index":1359,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["enter",{"_index":329,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["entering",{"_index":3721,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["entire",{"_index":3158,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["entity",{"_index":285,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystate",{"_index":163,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["entitystatus",{"_index":172,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["entitystoreaction",{"_index":3448,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystoreactions",{"_index":282,"title":{"interfaces/EntityStoreActions.html":{}},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["entitystoreassets",{"_index":286,"title":{"interfaces/EntityStoreAssets.html":{}},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/typealiases.html":{}}}],["entitystoreassetsgeneratoroptions",{"_index":155,"title":{"interfaces/EntityStoreAssetsGeneratorOptions.html":{}},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystoreeffectsinterface",{"_index":284,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["entitystoreselector",{"_index":3445,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystoreselectors",{"_index":287,"title":{"interfaces/EntityStoreSelectors.html":{}},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["enum",{"_index":4552,"title":{},"body":{"interfaces/TranslationLoaderActionEntity.html":{}}}],["enumerations",{"_index":4576,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":3593,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["enums/sort",{"_index":714,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{}}}],["environment",{"_index":2125,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["equal",{"_index":1448,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"miscellaneous/typealiases.html":{}}}],["equiv",{"_index":3594,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["error",{"_index":68,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"miscellaneous/typealiases.html":{}}}],["error'},{'name",{"_index":551,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["error('this",{"_index":4284,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["errorcomponent",{"_index":1891,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["errordata",{"_index":4534,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["errorinterface",{"_index":116,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["errorkeys",{"_index":1875,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["errorkeys',errorkeys",{"_index":1966,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["errormessage",{"_index":113,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["errors",{"_index":86,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["errors',errors",{"_index":1965,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["errorselement",{"_index":1892,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["escape",{"_index":644,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["eslint",{"_index":2858,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["eslint/no",{"_index":2861,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["essence",{"_index":2877,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["essential",{"_index":2528,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["essentially",{"_index":2685,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["etc",{"_index":4632,"title":{},"body":{"index.html":{}}}],["eur",{"_index":1686,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["even",{"_index":3791,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["event",{"_index":311,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{},"license.html":{}}}],["event.active",{"_index":3758,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["event.direction",{"_index":4497,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["event.preventdefault",{"_index":1085,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["event.returnvalue",{"_index":3313,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["event.stopimmediatepropagation",{"_index":1086,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["event.stoppropagation",{"_index":3966,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["event.ts",{"_index":3583,"title":{},"body":{"interfaces/NgxTableSortEvent.html":{}}}],["eventemitter",{"_index":445,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["eventhandler",{"_index":353,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["eventlisteners",{"_index":2832,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["events",{"_index":345,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["eventtype",{"_index":1439,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["example",{"_index":200,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"pipes/TransformPipe.html":{}}}],["exceeded",{"_index":4069,"title":{},"body":{"classes/NgxValidators.html":{}}}],["execute",{"_index":325,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["executed",{"_index":348,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["exist",{"_index":1417,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{}}}],["existing",{"_index":721,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxStorageService.html":{}}}],["exists",{"_index":234,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["exit",{"_index":820,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["exit.component.abstract",{"_index":3283,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit.component.abstract.ts",{"_index":3286,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:12",{"_index":3292,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:22",{"_index":3310,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:27",{"_index":3309,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:33",{"_index":3302,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:38",{"_index":3298,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:43",{"_index":3299,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:45",{"_index":3301,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.service.abstract.ts",{"_index":3274,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit.service.abstract.ts:10",{"_index":3280,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit.service.abstract.ts:15",{"_index":3277,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit/save",{"_index":3273,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["exits",{"_index":3409,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["expandablerows",{"_index":3999,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["expanded",{"_index":4455,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["expiresafterdays",{"_index":1485,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["explaining",{"_index":795,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["explanations",{"_index":4637,"title":{},"body":{"index.html":{}}}],["export",{"_index":27,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["exportas",{"_index":888,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["exported",{"_index":167,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"classes/NgxValidators.html":{}}}],["exports",{"_index":2355,"title":{},"body":{"modules/NgxI18nModule.html":{},"overview.html":{}}}],["exposes",{"_index":2778,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxWindowService.html":{}}}],["express",{"_index":4707,"title":{},"body":{"index.html":{},"license.html":{}}}],["expresses",{"_index":1598,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["extend",{"_index":2922,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["extended",{"_index":2708,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["extender",{"_index":3493,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["extends",{"_index":171,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["external",{"_index":3205,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["extra",{"_index":980,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["extract",{"_index":3442,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["extractstoreassettype",{"_index":4761,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["extras",{"_index":3770,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["facilitate",{"_index":4613,"title":{},"body":{"index.html":{}}}],["failed",{"_index":2289,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["fallback",{"_index":1662,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["fallback.component.ts",{"_index":1660,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["fallback.component.ts:13",{"_index":1664,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["fallback/cookie",{"_index":1659,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["fallbackcomponent",{"_index":2012,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["fallbacks",{"_index":1736,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["fallbacktemplate",{"_index":2011,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["fallbacktranslationloader",{"_index":2358,"title":{},"body":{"modules/NgxI18nModule.html":{},"miscellaneous/functions.html":{}}}],["fallbacktranslationloader(http",{"_index":2351,"title":{},"body":{"modules/NgxI18nModule.html":{},"miscellaneous/functions.html":{}}}],["false",{"_index":81,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["falsy",{"_index":208,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["faulty",{"_index":4403,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["feat(package",{"_index":4654,"title":{},"body":{"index.html":{}}}],["feat/package/feature",{"_index":4647,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1225,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["feature(s",{"_index":2064,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["feature.directive.ts",{"_index":2062,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:116",{"_index":2080,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:123",{"_index":2081,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:175",{"_index":2079,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:33",{"_index":2092,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:37",{"_index":2095,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:41",{"_index":2083,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:47",{"_index":2084,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:52",{"_index":2085,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:57",{"_index":2093,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:58",{"_index":2094,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:59",{"_index":2086,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:60",{"_index":2088,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:65",{"_index":2089,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:70",{"_index":2091,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:75",{"_index":2090,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:80",{"_index":2076,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:85",{"_index":2077,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:90",{"_index":2078,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:95",{"_index":2075,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.pipe.ts",{"_index":2117,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:16",{"_index":2127,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:17",{"_index":2128,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:22",{"_index":2135,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:26",{"_index":2136,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:31",{"_index":2129,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:40",{"_index":2119,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:53",{"_index":2124,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:64",{"_index":2121,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:88",{"_index":2118,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature/has",{"_index":2061,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["features",{"_index":1223,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFeatureDirective.html":{}}}],["featuretype",{"_index":1226,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["femke",{"_index":4668,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":823,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxModalService.html":{}}}],["fetchchannel",{"_index":263,"title":{},"body":{"injectables/EffectsService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["fetchchannel(ispublic",{"_index":265,"title":{},"body":{"injectables/EffectsService.html":{}}}],["fetched",{"_index":2392,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxStorageService.html":{}}}],["fetches",{"_index":2283,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["fetching",{"_index":2324,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["fetchpath",{"_index":2393,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["fetchvideos",{"_index":264,"title":{},"body":{"injectables/EffectsService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["fetchvideos(id",{"_index":269,"title":{},"body":{"injectables/EffectsService.html":{}}}],["field",{"_index":4041,"title":{},"body":{"classes/NgxValidators.html":{}}}],["fields",{"_index":4042,"title":{},"body":{"classes/NgxValidators.html":{}}}],["figured",{"_index":2172,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxImageMarkerComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["files",{"_index":2245,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"index.html":{},"license.html":{}}}],["filetype",{"_index":1191,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["fill",{"_index":1447,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"miscellaneous/typealiases.html":{}}}],["filled",{"_index":33,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["filling",{"_index":1466,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["filter",{"_index":810,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["filter(([action",{"_index":3003,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["filter((queryid",{"_index":2829,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["filter((translation",{"_index":2417,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["filter(boolean",{"_index":826,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["filtered",{"_index":3095,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["filters",{"_index":3110,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["filtersform",{"_index":3124,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["finalize",{"_index":2540,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxModalService.html":{}}}],["find",{"_index":998,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{}}}],["find/replace",{"_index":3251,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["findfocusableelement",{"_index":3901,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["findindex",{"_index":4392,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["fired",{"_index":2901,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["first",{"_index":953,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["firstcookiesconsented",{"_index":1530,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["firstcookiesconsentedsubject",{"_index":1531,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["fit",{"_index":1446,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"miscellaneous/typealiases.html":{}}}],["fitness",{"_index":4712,"title":{},"body":{"index.html":{},"license.html":{}}}],["fix",{"_index":4651,"title":{},"body":{"index.html":{}}}],["fix(package",{"_index":4653,"title":{},"body":{"index.html":{}}}],["fix/package/feature",{"_index":4646,"title":{},"body":{"index.html":{}}}],["flag",{"_index":748,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["flatten",{"_index":2029,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["flatten(hascookies).every((hascookie",{"_index":2050,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["flexibleconnectedto(elementref",{"_index":3742,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["flip",{"_index":3578,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["flow",{"_index":1799,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["flows",{"_index":883,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["fn",{"_index":4434,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["fns",{"_index":4562,"title":{},"body":{"dependencies.html":{}}}],["focus",{"_index":330,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["focus.directive",{"_index":766,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["focus.directive.ts",{"_index":2155,"title":{},"body":{"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:13",{"_index":2161,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:15",{"_index":2170,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:18",{"_index":2158,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:20",{"_index":2164,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:25",{"_index":2157,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:31",{"_index":2163,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:34",{"_index":2159,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:39",{"_index":2169,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:41",{"_index":2165,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:43",{"_index":2160,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:45",{"_index":2167,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:47",{"_index":2168,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:54",{"_index":2166,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focusable",{"_index":3935,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["focusableelement",{"_index":3972,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["focusclick",{"_index":299,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["focusclick]'},{'name",{"_index":560,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["focusclickdirective",{"_index":293,"title":{"directives/FocusClickDirective.html":{}},"body":{"directives/FocusClickDirective.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["focused",{"_index":2917,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["focussed",{"_index":752,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["focussedcell",{"_index":4349,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["focussedrow",{"_index":4348,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["following",{"_index":2402,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["footer",{"_index":1689,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["footertemplate",{"_index":671,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["force",{"_index":2244,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["forchild",{"_index":2330,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["forchild(translationloader",{"_index":2331,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["foreach((marker",{"_index":2749,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["forkjoin",{"_index":2380,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["forkjoin(requestedtranslations).pipe",{"_index":2413,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["form",{"_index":382,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["form.accessor",{"_index":417,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["form.accessor.ts",{"_index":95,"title":{},"body":{"classes/BaseFormAccessor.html":{}}}],["form/base",{"_index":94,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{}}}],["formaccessor",{"_index":561,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["formaccessorcontainer",{"_index":361,"title":{"directives/FormAccessorContainer.html":{}},"body":{"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["formaccessorcontrolsentity",{"_index":4763,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["formaccessors",{"_index":411,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxImageMarkerComponent.html":{}}}],["format",{"_index":192,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"classes/NgxValidators.html":{}}}],["formcontainer",{"_index":100,"title":{},"body":{"classes/BaseFormAccessor.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{}}}],["formcontrol",{"_index":1426,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["formgenerated",{"_index":4324,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["formgroup",{"_index":20,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["formgroupdirective",{"_index":1893,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["formgroupname",{"_index":1920,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["formnamedirective",{"_index":1894,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["formrecord",{"_index":4307,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["forms",{"_index":404,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"index.html":{}}}],["formstateoptionsentity",{"_index":390,"title":{"interfaces/FormStateOptionsEntity.html":{}},"body":{"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{}}}],["formtype",{"_index":3086,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["forroot",{"_index":2336,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["forroot(config",{"_index":2337,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["forwardref",{"_index":242,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["found",{"_index":426,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["free",{"_index":4680,"title":{},"body":{"index.html":{},"license.html":{}}}],["friendly",{"_index":337,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["fromevent",{"_index":1406,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxOnlineService.html":{}}}],["fromevent(window",{"_index":3065,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["fromevent>(this.broadcastchannel[channelname",{"_index":1421,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["fromstore",{"_index":2386,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["frontend",{"_index":3539,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["function",{"_index":15,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/IbanPipe.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"modules/NgxI18nModule.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxModalBaseOptions.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/typealiases.html":{}}}],["functional",{"_index":108,"title":{},"body":{"classes/BaseFormAccessor.html":{}}}],["functionalities",{"_index":4633,"title":{},"body":{"index.html":{}}}],["functions",{"_index":796,"title":{"miscellaneous/functions.html":{}},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["furnished",{"_index":4700,"title":{},"body":{"index.html":{},"license.html":{}}}],["gdpr",{"_index":3118,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["generate",{"_index":253,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["generated",{"_index":3472,"title":{},"body":{"injectables/NgxStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["generatengxtableform",{"_index":4309,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["generatengxtableform(this.rowsformgroup",{"_index":4397,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["generates",{"_index":248,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["generator",{"_index":148,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["generator.ts",{"_index":3431,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["generic",{"_index":1677,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"miscellaneous/typealiases.html":{}}}],["get(selectablekey",{"_index":4491,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["get(url",{"_index":1158,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["getauthenticationresponse",{"_index":1251,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getavailablelanguages",{"_index":2508,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["getchannel",{"_index":4213,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["getcontainer",{"_index":901,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["getcontainer(index",{"_index":903,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["getcookie",{"_index":1536,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcookie(cookie",{"_index":1551,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcookieobservable",{"_index":1537,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcookieobservable(cookie",{"_index":1553,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcurrentlanguage",{"_index":803,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["getdefaultlanguage",{"_index":2510,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["getelementid",{"_index":3817,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["geterrors",{"_index":1895,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["geterrors(data",{"_index":1899,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["getfirstrow",{"_index":3990,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["getitem",{"_index":3318,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["getitem(key",{"_index":3348,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getitemobservable",{"_index":3319,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["getitemobservable(key",{"_index":3350,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getlastrow",{"_index":3991,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["getlocalstorage",{"_index":3368,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getmatchingquery",{"_index":2782,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["getmatchingquery$(id",{"_index":2788,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["getmessagerecord",{"_index":807,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["getmetadata",{"_index":1316,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getnewlanguage",{"_index":2432,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["getnewlanguage(language",{"_index":2437,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["getprop",{"_index":1711,"title":{},"body":{"components/NgxDateTableCellComponent.html":{},"pipes/NgxTableGetPipe.html":{}}}],["getproperty",{"_index":3537,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["getproperty(value",{"_index":3544,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["getrow",{"_index":3992,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["getrow(index",{"_index":4003,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["gets",{"_index":332,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["getsession",{"_index":1252,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getsessionstorage",{"_index":3370,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getstate",{"_index":3470,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["getting",{"_index":4593,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettranslation",{"_index":2368,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{}}}],["gettranslation(key",{"_index":2492,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["gettranslation(lang",{"_index":2374,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["gettranslationobservable",{"_index":2490,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["gettranslationobservable(key",{"_index":2495,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["gettranslations",{"_index":2271,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nService.html":{}}}],["getuser",{"_index":1313,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getvalue",{"_index":2485,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{}}}],["getvalue(configurationvalue",{"_index":2960,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["getvideos",{"_index":4214,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["getvideos(actiontype",{"_index":4220,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["give",{"_index":3823,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["given",{"_index":4547,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["global",{"_index":1268,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["globalfeatures",{"_index":1337,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["globalfeaturessubject",{"_index":1248,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["globally",{"_index":3504,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["go",{"_index":997,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridDirective.html":{}}}],["grab",{"_index":1470,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["grabs",{"_index":3361,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["granted",{"_index":4679,"title":{},"body":{"index.html":{},"license.html":{}}}],["graph",{"_index":4728,"title":{},"body":{"modules.html":{}}}],["grid",{"_index":1461,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["grid.cell.directive",{"_index":4017,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.cell.directive.ts",{"_index":3896,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:102",{"_index":3927,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:109",{"_index":3925,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:116",{"_index":3919,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:121",{"_index":3920,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:126",{"_index":3936,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:143",{"_index":3944,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:152",{"_index":3933,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:174",{"_index":3948,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:24",{"_index":3953,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:27",{"_index":3951,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:32",{"_index":3954,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:37",{"_index":3922,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:53",{"_index":3923,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:60",{"_index":3924,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:67",{"_index":3921,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:74",{"_index":3930,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:81",{"_index":3928,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:88",{"_index":3926,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:95",{"_index":3929,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.directive",{"_index":3957,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.directive.ts",{"_index":3986,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:19",{"_index":4016,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:21",{"_index":4000,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:26",{"_index":3997,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:31",{"_index":3998,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:38",{"_index":4012,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:47",{"_index":4014,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:56",{"_index":4004,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:69",{"_index":4001,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:76",{"_index":4002,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:85",{"_index":4006,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:94",{"_index":4009,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:98",{"_index":4007,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.types.ts",{"_index":4787,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grid/tree",{"_index":3895,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["group",{"_index":45,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["groups",{"_index":472,"title":{},"body":{"pipes/IbanPipe.html":{},"injectables/NgxI18nLoadingService.html":{}}}],["guard",{"_index":2531,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"classes/NgxSaveOnExitAbstractService.html":{}}}],["guards",{"_index":1237,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["guided",{"_index":4628,"title":{},"body":{"index.html":{}}}],["guioptions",{"_index":1493,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["handle",{"_index":57,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{}}}],["handleaccessorsaction",{"_index":370,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleaccessorsaction(action",{"_index":375,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handlecomponentrender",{"_index":1896,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handlecomponentrender(shouldshow",{"_index":1901,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handlecontentscroll",{"_index":4115,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["handlecurrentsort(event",{"_index":4494,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handledatachanges",{"_index":3074,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledatachanges(data",{"_index":3081,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledatachanges(value",{"_index":3131,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledatachanges?(data",{"_index":3172,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledirtystate",{"_index":3276,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["handleeffect",{"_index":4268,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["handleeffect(actions.videos",{"_index":4271,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["handleformaccessormarkasdirty",{"_index":414,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessormarkasdirty(form",{"_index":420,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessormarkastouched",{"_index":415,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessormarkastouched(form",{"_index":422,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessorupdatevalueandvalidity",{"_index":416,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleinteraction",{"_index":617,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["handlengxtableheadervaluechanges",{"_index":4310,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlengxtableheadervaluechanges(this.rowsformgroup",{"_index":4527,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlengxtablevaluechanges",{"_index":4311,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlenocomponentflow",{"_index":1897,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handlenocomponentflow(shouldshow",{"_index":1905,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handler",{"_index":338,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["handlerowclicked(row",{"_index":4446,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlerowcolumns",{"_index":4502,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlerowstate(index",{"_index":4456,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlers",{"_index":1211,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["handles",{"_index":694,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["handlesort",{"_index":676,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["handlesort(column",{"_index":4484,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handletablecelltemplates",{"_index":4464,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handleunloadevent",{"_index":3288,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["handleunloadevent(event",{"_index":3295,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["handleurl",{"_index":1137,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["handleurl(url",{"_index":1160,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["handlewhenfocussed",{"_index":741,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["handlewhenfocussed(action",{"_index":755,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["handling",{"_index":254,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["happens",{"_index":3084,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["hasacceptedcategory",{"_index":1538,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasacceptedcategory(name",{"_index":1555,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasacceptedservice",{"_index":1539,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasacceptedservice(category",{"_index":1559,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasactivemodal",{"_index":2950,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasauthenticated",{"_index":1249,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["hasbackdrop",{"_index":2898,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["haschanges",{"_index":2633,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["hascookie",{"_index":1997,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["hascookie]'},{'name",{"_index":582,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["hascookieelse",{"_index":1999,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["hasdependedrequirederror",{"_index":4079,"title":{},"body":{"classes/NgxValidators.html":{}}}],["hasdocument",{"_index":4116,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["hasfeature",{"_index":1253,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["hasfeature(converttoarray(this.feature",{"_index":2110,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["hasfeature(requiredfeatures",{"_index":1283,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["hasfocus",{"_index":739,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hasfootertemplates",{"_index":4345,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["hasmodal",{"_index":3018,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasmodalsubject",{"_index":2951,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasnext",{"_index":3852,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["hasobservers",{"_index":443,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["hasobserverspipe",{"_index":439,"title":{"pipes/HasObserversPipe.html":{}},"body":{"pipes/HasObserversPipe.html":{}}}],["hasone",{"_index":79,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["hasonekey",{"_index":77,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["haspermission",{"_index":1254,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["haspermission(requiredpermissions",{"_index":1287,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["hasprevious",{"_index":3850,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["hasrequireddescription",{"_index":2953,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasrequireddescription(options",{"_index":2966,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["header",{"_index":1070,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["header.pipe.ts",{"_index":3568,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["header.pipe.ts:18",{"_index":3571,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["header/show",{"_index":3567,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["headercontrol",{"_index":4341,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["headertemplate",{"_index":672,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["heirstrate",{"_index":4663,"title":{},"body":{"index.html":{}}}],["hello",{"_index":494,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/NgxStorageService.html":{}}}],["helpers",{"_index":3531,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["helpers.ts",{"_index":4799,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["hence",{"_index":4337,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["here",{"_index":1342,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{}}}],["hereby",{"_index":4678,"title":{},"body":{"index.html":{},"license.html":{}}}],["hidden",{"_index":3577,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["hide",{"_index":861,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["hideelement",{"_index":818,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["hideelement(element",{"_index":862,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["hidefrombots",{"_index":1513,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["hideheaderrowoption",{"_index":3519,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["hideheaderrowoptions",{"_index":3522,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["hideheaderrowwhen",{"_index":3570,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["hideheaderwhen",{"_index":3516,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["hides/renders",{"_index":2015,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["hidewhennotemplateprovided",{"_index":1741,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["highest",{"_index":1865,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["highlight",{"_index":3773,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["highlighted",{"_index":3787,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["highlightkey",{"_index":3518,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["hold",{"_index":966,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxCookieService.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["holder",{"_index":486,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/NgxCookieService.html":{}}}],["holder'},{'name",{"_index":519,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["holder.component.mock.ts",{"_index":483,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:14",{"_index":500,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:16",{"_index":498,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:18",{"_index":495,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:22",{"_index":490,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holders",{"_index":4717,"title":{},"body":{"index.html":{},"license.html":{}}}],["holding",{"_index":1400,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"components/NgxImageMarkerComponent.html":{}}}],["holds",{"_index":1791,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxStoreService.html":{}}}],["home",{"_index":1024,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["host",{"_index":334,"title":{},"body":{"directives/FocusClickDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["host.directive.ts",{"_index":896,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:19",{"_index":920,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:20",{"_index":922,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:25",{"_index":923,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:30",{"_index":914,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:35",{"_index":916,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:42",{"_index":906,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:51",{"_index":904,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:55",{"_index":909,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:62",{"_index":911,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["hostbinding",{"_index":3819,"title":{},"body":{"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["hostbinding('attr.role",{"_index":4015,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["hostbinding('class",{"_index":654,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["hostbinding('class.ngx",{"_index":3815,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["hostbindings",{"_index":626,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["hostdirective",{"_index":736,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["hostlistener",{"_index":340,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('blur",{"_index":759,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('click",{"_index":316,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["hostlistener('document:keydown.escape",{"_index":647,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["hostlistener('focus",{"_index":760,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowdown",{"_index":1039,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowleft",{"_index":3938,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowright",{"_index":3939,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowup",{"_index":1041,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.control.end",{"_index":3940,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.control.home",{"_index":3946,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.end",{"_index":1042,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.enter",{"_index":318,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["hostlistener('keydown.home",{"_index":1047,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.pagedown",{"_index":3947,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.pageup",{"_index":3945,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('mouseenter",{"_index":3614,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["hostlistener('mouseleave",{"_index":3613,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["hostlistener('window:beforeunload",{"_index":3297,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["hostlisteners",{"_index":305,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hover",{"_index":3649,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["html",{"_index":515,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["htmlelement",{"_index":792,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["htmlimageelement",{"_index":2667,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["htmlparagraphelement",{"_index":849,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["http",{"_index":1123,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"modules/NgxI18nModule.html":{},"miscellaneous/functions.html":{}}}],["httpbackend",{"_index":2332,"title":{},"body":{"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"miscellaneous/functions.html":{}}}],["httpclient",{"_index":1128,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/SpecStoreService.html":{}}}],["httpclient(this.httpbackend).get(fetchpath).pipe",{"_index":2396,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["httpclientconfiguration",{"_index":1214,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["httpcontext",{"_index":1145,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["httperrorresponse",{"_index":117,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["httphandler",{"_index":4592,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httphandlerfn",{"_index":4590,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httpinterceptorfn",{"_index":1207,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["httprequest",{"_index":1208,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"miscellaneous/functions.html":{}}}],["httpresponse",{"_index":1171,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["https://cookieconsent.orestbida.com",{"_index":1522,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["https://cookieconsent.orestbida.com/essential/getting",{"_index":1570,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["https://developer.mozilla.org/en",{"_index":1368,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["https://docs.cypress.io/guides/references/best",{"_index":687,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts",{"_index":2134,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts",{"_index":2066,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["https://markerjs.com",{"_index":2577,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["https://www.w3.org/wai/aria/apg/patterns/accordion",{"_index":938,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{}}}],["https://www.w3.org/wai/aria/apg/patterns/treegrid",{"_index":3898,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["hyperdrive",{"_index":4676,"title":{},"body":{"index.html":{},"license.html":{}}}],["i18n",{"_index":541,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{}}}],["i18n.service",{"_index":2513,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["i18n.service.ts",{"_index":2428,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:117",{"_index":2444,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:126",{"_index":2438,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:14",{"_index":2454,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:19",{"_index":2459,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:24",{"_index":2457,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:31",{"_index":2453,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:38",{"_index":2451,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:45",{"_index":2458,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:50",{"_index":2436,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:62",{"_index":2456,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:68",{"_index":2460,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:77",{"_index":2447,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:95",{"_index":2440,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.types",{"_index":2343,"title":{},"body":{"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["i18n/root",{"_index":2427,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["i18nloadingservice",{"_index":2533,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["i18nservice",{"_index":2534,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ian",{"_index":4666,"title":{},"body":{"index.html":{}}}],["iban",{"_index":458,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["ibannumber",{"_index":465,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["ibanpipe",{"_index":456,"title":{"pipes/IbanPipe.html":{}},"body":{"pipes/IbanPipe.html":{}}}],["iben",{"_index":49,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["ibenvandeveire",{"_index":4595,"title":{},"body":{"index.html":{}}}],["ibenvandeveire/ngx",{"_index":1244,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"dependencies.html":{},"index.html":{}}}],["ibenvandeveire/rxjs",{"_index":4634,"title":{},"body":{"index.html":{}}}],["ibenvandeveire/types",{"_index":1319,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"dependencies.html":{}}}],["icon",{"_index":3592,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["icon.pipe.ts",{"_index":3588,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["icon.pipe.ts:15",{"_index":3591,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["icon/sort",{"_index":3587,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["id",{"_index":271,"title":{},"body":{"injectables/EffectsService.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["id={{id",{"_index":3226,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ideal",{"_index":3109,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["identifier",{"_index":3236,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["identify",{"_index":3229,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ids",{"_index":2942,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["idselector",{"_index":153,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ignore",{"_index":344,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["ignored",{"_index":434,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["image",{"_index":544,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["imagedescription",{"_index":2583,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["imageelement",{"_index":2584,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["imagemarkerservice",{"_index":2585,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["img[data",{"_index":3227,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["implement",{"_index":2097,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["implementation",{"_index":936,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["implementations",{"_index":2462,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{}}}],["implemented",{"_index":2132,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{}}}],["implementing",{"_index":1735,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["implements",{"_index":206,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["implied",{"_index":4708,"title":{},"body":{"index.html":{},"license.html":{}}}],["import",{"_index":19,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["important",{"_index":104,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["imports",{"_index":1010,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"modules/NgxI18nModule.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["improve",{"_index":4618,"title":{},"body":{"index.html":{}}}],["in/from",{"_index":3385,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["inactive",{"_index":1463,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTourItemDirective.html":{}}}],["include",{"_index":3228,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"index.html":{}}}],["included",{"_index":1418,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{},"license.html":{}}}],["includeinnerhtml",{"_index":3178,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["including",{"_index":4688,"title":{},"body":{"index.html":{},"license.html":{}}}],["incorrectchronologicaldate",{"_index":4052,"title":{},"body":{"classes/NgxValidators.html":{}}}],["incorrectchronologicaldates",{"_index":4051,"title":{},"body":{"classes/NgxValidators.html":{}}}],["independent",{"_index":4611,"title":{},"body":{"index.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["index).concat(this.rows.slice(index",{"_index":4021,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["indexes",{"_index":984,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["indexes.foreach((index",{"_index":986,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["indicate",{"_index":1678,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{}}}],["indicates",{"_index":2924,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["indicator",{"_index":3510,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["indices",{"_index":4413,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["indirectly",{"_index":2907,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["individual",{"_index":2046,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"classes/NgxValidators.html":{},"index.html":{}}}],["infinite",{"_index":4515,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["inform",{"_index":4625,"title":{},"body":{"index.html":{}}}],["information",{"_index":785,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxWindowService.html":{}}}],["informing",{"_index":3492,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["inheritdoc",{"_index":3892,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["inherited",{"_index":628,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["initchannel",{"_index":1372,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["initchannel(...args",{"_index":1382,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["initform",{"_index":3075,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["initi18n",{"_index":2491,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["initi18n(language",{"_index":2498,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["initial",{"_index":1775,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["initialize",{"_index":1411,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["initializelanguage",{"_index":2433,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["initializes",{"_index":1385,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxI18nService.html":{}}}],["initially",{"_index":3981,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["initialstatevalue",{"_index":150,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{}}}],["initialvalue",{"_index":3440,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["inject",{"_index":501,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/TableCellTemplate.html":{}}}],["inject('selectors",{"_index":3473,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["inject(actions",{"_index":4262,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["inject(activatedroute",{"_index":3104,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["inject(changedetectorref",{"_index":1060,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["inject(dialog",{"_index":2976,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["inject(document",{"_index":4136,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["inject(domsanitizer",{"_index":3196,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["inject(effectsservice",{"_index":4264,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["inject(elementref",{"_index":1796,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["inject(formgroupdirective",{"_index":1918,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inject(formgroupname",{"_index":1921,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inject(httpclient",{"_index":1169,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/SpecStoreService.html":{}}}],["inject(liveannouncer",{"_index":787,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["inject(ngxaccessibledraganddropabstractservice",{"_index":919,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["inject(ngxaccordioncomponent",{"_index":1073,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["inject(ngxauthenticationservicetoken",{"_index":2126,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["inject(ngxauthenticationurlhandlertoken",{"_index":1178,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["inject(ngxcookieservice",{"_index":2023,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["inject(ngxi18nconfigurationtoken",{"_index":2352,"title":{},"body":{"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["inject(ngxi18nloadingservice",{"_index":2372,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["inject(ngxi18nrootservice",{"_index":2500,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["inject(ngxi18nservice",{"_index":2538,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["inject(ngximagemarkerservice",{"_index":2618,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["inject(ngxmodalconfigurationtoken",{"_index":2974,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["inject(ngxonlineservice",{"_index":1800,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["inject(ngxreplaceelementsconfigurationtoken",{"_index":3193,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["inject(ngxtableconfigurationtoken",{"_index":4317,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["inject(ngxtooltipconfigurationtoken",{"_index":3688,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["inject(ngxtooltipservice",{"_index":3615,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["inject(ngxtourservice",{"_index":499,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["inject(ngxtreegriddirective",{"_index":3952,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["inject(ngxwindowservice",{"_index":1402,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{}}}],["inject(overlay",{"_index":3694,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["inject(overlaypositionbuilder",{"_index":3691,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["inject(platform_id",{"_index":4138,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["inject(renderer2",{"_index":1076,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["inject(router",{"_index":3106,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["inject(store",{"_index":3469,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["inject(templateref",{"_index":1927,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["inject(translateservice",{"_index":2504,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["inject(viewcontainerref",{"_index":1808,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["inject>(elementref",{"_index":921,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTourItemDirective.html":{}}}],["inject>(templateref",{"_index":1803,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["injectable",{"_index":259,"title":{"injectables/EffectsService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{}},"body":{"injectables/EffectsService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["injectables",{"_index":261,"title":{},"body":{"injectables/EffectsService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"overview.html":{}}}],["injection",{"_index":1205,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxWindowService.html":{}}}],["injectiontoken",{"_index":3521,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["injector",{"_index":2881,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["innerhtml",{"_index":1974,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["innertext",{"_index":3230,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["input",{"_index":341,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["input('checkbox",{"_index":4375,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["input('dd/mm/yyyy",{"_index":1726,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["input('empty",{"_index":1721,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["input('eur",{"_index":1682,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["input('polite",{"_index":1794,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["input(false",{"_index":346,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["input(true",{"_index":2629,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["input(undefined",{"_index":893,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["input(uuid",{"_index":3656,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["input.required",{"_index":652,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxHasCookieDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["inputs",{"_index":304,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["inputsignal",{"_index":949,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["inputted",{"_index":4068,"title":{},"body":{"classes/NgxValidators.html":{}}}],["insert",{"_index":1976,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inside",{"_index":2913,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["install",{"_index":4605,"title":{},"body":{"index.html":{}}}],["installation",{"_index":4602,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1379,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["instant",{"_index":2494,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["instantiated",{"_index":2912,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["instantiation",{"_index":2904,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["instead",{"_index":384,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxTableGetPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["intentional",{"_index":433,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["interact",{"_index":3113,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["interaction",{"_index":2927,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["interactions",{"_index":651,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["intercepted",{"_index":3304,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["interceptor",{"_index":4591,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interceptors",{"_index":1203,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/FormStateOptionsEntity.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/FormStateOptionsEntity.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"overview.html":{}}}],["internal",{"_index":231,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["internally",{"_index":4172,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["interop",{"_index":2984,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["interrupted",{"_index":3307,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["invalid",{"_index":1724,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["invaliddecimalsaftercomma",{"_index":4073,"title":{},"body":{"classes/NgxValidators.html":{}}}],["invalidmaxdate",{"_index":4830,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["invalidmindate",{"_index":4831,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["invalidrange",{"_index":4064,"title":{},"body":{"classes/NgxValidators.html":{}}}],["isactive",{"_index":1451,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"directives/NgxTourItemDirective.html":{}}}],["isauthenticated",{"_index":1250,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["isbrowser",{"_index":4117,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["isclicked",{"_index":302,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["isclicked(event",{"_index":314,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["iscompleted",{"_index":4277,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["isdirty",{"_index":3289,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["isdisabled",{"_index":4438,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["isempty",{"_index":3533,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/TableCellTemplate.html":{}}}],["isentered",{"_index":303,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["isfocussedon",{"_index":2156,"title":{},"body":{"directives/NgxHasFocusDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["isloading",{"_index":1783,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["isn't",{"_index":358,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["iso",{"_index":1684,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["isolate",{"_index":2363,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["isopen",{"_index":1018,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["isplatformbrowser",{"_index":4170,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["isplatformbrowser(this.platformid",{"_index":4186,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["ispublic",{"_index":267,"title":{},"body":{"injectables/EffectsService.html":{}}}],["isset",{"_index":1647,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["issues",{"_index":3219,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourStepComponent.html":{},"pipes/TransformPipe.html":{}}}],["isvalid",{"_index":3290,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["it's",{"_index":215,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["item",{"_index":751,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["item'},{'name",{"_index":528,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["item.component",{"_index":974,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["item.component.html",{"_index":1012,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.scss",{"_index":1014,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts",{"_index":1008,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:107",{"_index":1030,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:112",{"_index":1071,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:117",{"_index":1072,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:122",{"_index":1067,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:127",{"_index":1056,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:137",{"_index":1043,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:146",{"_index":1054,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:153",{"_index":1052,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:160",{"_index":1048,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:184",{"_index":1051,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:19",{"_index":1428,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:193",{"_index":1045,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:24",{"_index":1429,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:29",{"_index":1433,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:40",{"_index":1074,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:41",{"_index":1061,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:42",{"_index":1077,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:47",{"_index":1065,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:52",{"_index":1079,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:57",{"_index":1063,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:62",{"_index":1069,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:67",{"_index":1034,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:78",{"_index":1032,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:89",{"_index":1037,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:98",{"_index":1036,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.data",{"_index":3261,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["item.directive.ts",{"_index":732,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:13",{"_index":761,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["item.directive.ts:14",{"_index":3814,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:15",{"_index":3816,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:16",{"_index":3813,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:18",{"_index":750,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["item.directive.ts:21",{"_index":3808,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:26",{"_index":3807,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:33",{"_index":3812,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:44",{"_index":3818,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:48",{"_index":3809,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:58",{"_index":3810,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.filter((key",{"_index":1476,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["item.id",{"_index":991,"title":{},"body":{"components/NgxAccordionComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["item.translations",{"_index":2424,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["item.updateaccordionitemstate(true",{"_index":983,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["item/accordion",{"_index":973,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["item/configurable",{"_index":1423,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item/items",{"_index":3483,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["item/tour",{"_index":3803,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item[itemkey",{"_index":1715,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["itemdirective",{"_index":735,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["itemid",{"_index":737,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["itemkey",{"_index":1714,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["itemregisteredsubject",{"_index":942,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["items",{"_index":50,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["items.foreach((item",{"_index":3255,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["items.length",{"_index":3247,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["itemsize",{"_index":1458,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["itself",{"_index":383,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"classes/NgxValidators.html":{}}}],["join",{"_index":2410,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"miscellaneous/typealiases.html":{}}}],["json.parse(data[current",{"_index":3156,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["json.parse(value",{"_index":3429,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["json.stringify(item",{"_index":3413,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["json.stringify(parseddata[current",{"_index":3170,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["keep",{"_index":2312,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["keeps",{"_index":2980,"title":{},"body":{"injectables/NgxModalService.html":{},"interfaces/TableCellTemplate.html":{}}}],["key",{"_index":76,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FocusClickDirective.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["key.isactive",{"_index":1477,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["keydown",{"_index":356,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["keydown.arrowdown",{"_index":1026,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowdown(event",{"_index":1031,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["keydown.arrowleft",{"_index":3913,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowright",{"_index":3914,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowup",{"_index":1027,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowup(event",{"_index":1033,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["keydown.control.end",{"_index":3915,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.control.home",{"_index":3916,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.end",{"_index":1028,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.enter",{"_index":307,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["keydown.home",{"_index":1029,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.pagedown",{"_index":3917,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.pageup",{"_index":3918,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keyof",{"_index":3138,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["keys",{"_index":51,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["keys.reduce((hasone",{"_index":78,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["keys.ts",{"_index":4751,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["keys].map((item",{"_index":1475,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["keytype",{"_index":18,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"classes/NgxValidators.html":{}}}],["keyvaluepair",{"_index":4766,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["key}error",{"_index":3479,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["key}errormessage",{"_index":3481,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["key}loading",{"_index":3477,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["kind",{"_index":4706,"title":{},"body":{"index.html":{},"license.html":{}}}],["know",{"_index":1806,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxStore.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["labbledby",{"_index":3883,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["label",{"_index":889,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["labelledby",{"_index":662,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["labelledbyid",{"_index":2873,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["labels",{"_index":2865,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["lang",{"_index":2377,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["language",{"_index":806,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"classes/NgxI18nAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["languagerouteparam",{"_index":2237,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{}}}],["languages",{"_index":2445,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["languages?.length",{"_index":2450,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["largest",{"_index":1472,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["last",{"_index":954,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"miscellaneous/typealiases.html":{}}}],["lastly",{"_index":3223,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["later",{"_index":2707,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["latest",{"_index":2122,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{}}}],["lax",{"_index":1489,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["layer",{"_index":2693,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["layout",{"_index":533,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{}}}],["layout'},{'name",{"_index":531,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["layout.ts",{"_index":1437,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"miscellaneous/typealiases.html":{}}}],["lazy",{"_index":2530,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"index.html":{}}}],["lazyhtmlgeneration",{"_index":1514,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["leaks",{"_index":2140,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["leave",{"_index":3724,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["leaving",{"_index":3651,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["left",{"_index":2145,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"miscellaneous/typealiases.html":{}}}],["legend",{"_index":514,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"overview.html":{}}}],["length",{"_index":218,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["level",{"_index":2596,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["levels",{"_index":2567,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["liability",{"_index":4721,"title":{},"body":{"index.html":{},"license.html":{}}}],["liable",{"_index":4718,"title":{},"body":{"index.html":{},"license.html":{}}}],["lib",{"_index":2032,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nRootService.html":{}}}],["libs/.../accordion.types.ts",{"_index":4769,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../authenticated",{"_index":4770,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../authentication",{"_index":4772,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../authentication.interceptor.ts",{"_index":4585,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../authentication.ts",{"_index":4581,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../authentication.types.ts",{"_index":4771,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../configurable",{"_index":4774,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../cookie",{"_index":4775,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../core.ts",{"_index":4582,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../cypress",{"_index":4753,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../cypress.types.ts",{"_index":4765,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../date",{"_index":4758,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../display",{"_index":4776,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../drag",{"_index":4768,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../effects.ts",{"_index":4744,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../entity",{"_index":4745,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../errors.interface.ts",{"_index":4777,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../form",{"_index":4750,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../i18n",{"_index":4579,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/.../i18n.module.ts",{"_index":4583,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../image",{"_index":4778,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../internal",{"_index":4798,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../merge.util.ts",{"_index":4767,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../modal.types.ts",{"_index":4779,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../ngx",{"_index":4764,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../observable.types.ts",{"_index":4747,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../query",{"_index":4809,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../replace",{"_index":4780,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../require",{"_index":4800,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../show",{"_index":4782,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../signals.ts",{"_index":4743,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../sort",{"_index":4577,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/.../storage.types.ts",{"_index":4781,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../store",{"_index":4756,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../store.ts",{"_index":4803,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../tooltip.types.ts",{"_index":4783,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../tour.token.type.ts",{"_index":4785,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../tour.types.ts",{"_index":4784,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../tree",{"_index":4786,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts",{"_index":1243,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:103",{"_index":1314,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:114",{"_index":1315,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:125",{"_index":1317,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:138",{"_index":1296,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:158",{"_index":1305,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:177",{"_index":1285,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:199",{"_index":1291,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:211",{"_index":1288,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:232",{"_index":1281,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:34",{"_index":1263,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:40",{"_index":1265,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:46",{"_index":1267,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:53",{"_index":1276,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:61",{"_index":1279,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:71",{"_index":1302,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:80",{"_index":1309,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:89",{"_index":1312,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:96",{"_index":1280,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/directives/has",{"_index":2060,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["libs/angular/authentication/src/lib/directives/is",{"_index":2750,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["libs/angular/authentication/src/lib/interceptors/authentication/authentication.interceptor.ts",{"_index":4588,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/angular/authentication/src/lib/pipes/has",{"_index":2116,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["libs/angular/authentication/src/lib/services/authenticated",{"_index":1122,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["libs/angular/authentication/src/lib/types/authenticated",{"_index":1216,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/authentication/src/lib/types/authentication",{"_index":1200,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/authentication/src/lib/types/authentication.types.ts",{"_index":4838,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/cookies/src/lib/abstracts/cookie",{"_index":1658,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["libs/angular/cookies/src/lib/directives/has",{"_index":1990,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts",{"_index":1521,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:166",{"_index":1556,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:184",{"_index":1545,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:194",{"_index":1560,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:213",{"_index":1550,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:220",{"_index":1573,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:229",{"_index":1552,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:238",{"_index":1554,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:256",{"_index":1566,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:277",{"_index":1563,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:31",{"_index":1599,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:36",{"_index":1593,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:41",{"_index":1585,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:46",{"_index":1605,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:53",{"_index":1578,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:58",{"_index":1606,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:63",{"_index":1596,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:69",{"_index":1588,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:75",{"_index":1580,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:81",{"_index":1602,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:86",{"_index":1576,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:99",{"_index":1568,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/types/cookie",{"_index":1482,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/cookies/src/lib/types/has",{"_index":1989,"title":{},"body":{"interfaces/NgxHasCookieConfiguration.html":{}}}],["libs/angular/cookies/src/lib/types/set",{"_index":1656,"title":{},"body":{"interfaces/NgxCookieValue.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts",{"_index":4105,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:106",{"_index":4123,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:115",{"_index":4126,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:136",{"_index":4121,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:15",{"_index":4137,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:20",{"_index":4139,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:25",{"_index":4148,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:30",{"_index":4143,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:35",{"_index":4135,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:40",{"_index":4145,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:45",{"_index":4141,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:50",{"_index":4133,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:56",{"_index":4130,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:61",{"_index":4120,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:89",{"_index":4129,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:99",{"_index":4122,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/forms/src/lib/abstracts/base",{"_index":93,"title":{},"body":{"classes/BaseFormAccessor.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts",{"_index":1874,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:13",{"_index":1877,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:17",{"_index":1876,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:9",{"_index":1878,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/form",{"_index":362,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["libs/angular/forms/src/lib/abstracts/save",{"_index":3272,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts",{"_index":1888,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:156",{"_index":1902,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:193",{"_index":1906,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:230",{"_index":1900,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:34",{"_index":1919,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:37",{"_index":1922,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:38",{"_index":1914,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:42",{"_index":1929,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:43",{"_index":1915,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:44",{"_index":1925,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:45",{"_index":1928,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:46",{"_index":1910,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:49",{"_index":1924,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:50",{"_index":1923,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:55",{"_index":1926,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:60",{"_index":1909,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:65",{"_index":1917,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:70",{"_index":1916,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:75",{"_index":1911,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:80",{"_index":1898,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:87",{"_index":1908,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:93",{"_index":1907,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/interfaces/errors.interface.ts",{"_index":1881,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/forms/src/lib/interfaces/form",{"_index":435,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/forms/src/lib/utils/accessor",{"_index":227,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["libs/angular/forms/src/lib/validators/at",{"_index":6,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["libs/angular/forms/src/lib/validators/date",{"_index":4829,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts",{"_index":4031,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:100",{"_index":4061,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:27",{"_index":4039,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:40",{"_index":4045,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:55",{"_index":4077,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:70",{"_index":4067,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:83",{"_index":4049,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/i18n/src/lib/abstracts/i18n",{"_index":2228,"title":{},"body":{"classes/NgxI18nAbstractService.html":{}}}],["libs/angular/i18n/src/lib/components/empty",{"_index":2254,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["libs/angular/i18n/src/lib/i18n.module.ts",{"_index":2329,"title":{},"body":{"modules/NgxI18nModule.html":{},"miscellaneous/functions.html":{}}}],["libs/angular/i18n/src/lib/i18n.module.ts:24",{"_index":2338,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["libs/angular/i18n/src/lib/i18n.module.ts:50",{"_index":2333,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["libs/angular/i18n/src/lib/i18n.types.ts",{"_index":2232,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["libs/angular/i18n/src/lib/loader/multi",{"_index":2364,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts",{"_index":2524,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:16",{"_index":2539,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:20",{"_index":2537,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:22",{"_index":2536,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/services/i18n",{"_index":2260,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts",{"_index":2486,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:13",{"_index":2505,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:18",{"_index":2501,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:23",{"_index":2507,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:30",{"_index":2509,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:37",{"_index":2511,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:46",{"_index":2499,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:62",{"_index":2503,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:73",{"_index":2493,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:84",{"_index":2496,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:94",{"_index":2512,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/root",{"_index":2426,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts",{"_index":2841,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:13",{"_index":2855,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:14",{"_index":2854,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:19",{"_index":2848,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:26",{"_index":2846,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:31",{"_index":2845,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:36",{"_index":2847,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:41",{"_index":2850,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:47",{"_index":2853,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:49",{"_index":2849,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts",{"_index":3599,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:17",{"_index":3616,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:22",{"_index":3611,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:33",{"_index":3612,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:47",{"_index":3609,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:55",{"_index":3606,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:60",{"_index":3608,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:65",{"_index":3610,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tour",{"_index":3853,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts",{"_index":3632,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:114",{"_index":3652,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:23",{"_index":3659,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:24",{"_index":3654,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:29",{"_index":3648,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:36",{"_index":3647,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:43",{"_index":3650,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:50",{"_index":3645,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:57",{"_index":3646,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:67",{"_index":3657,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:72",{"_index":3642,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:77",{"_index":3655,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:83",{"_index":3644,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:88",{"_index":3643,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:93",{"_index":3653,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tour",{"_index":3802,"title":{},"body":{"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["libs/angular/inform/src/lib/mocks/tour",{"_index":482,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts",{"_index":2948,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:124",{"_index":2956,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:146",{"_index":2972,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:177",{"_index":2958,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:222",{"_index":2967,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:244",{"_index":2963,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:29",{"_index":2975,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:32",{"_index":2977,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:37",{"_index":2981,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:42",{"_index":2979,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:49",{"_index":2969,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts",{"_index":3671,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:122",{"_index":3686,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:169",{"_index":3681,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:184",{"_index":3683,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:197",{"_index":3680,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:23",{"_index":3689,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:24",{"_index":3695,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:25",{"_index":3692,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:28",{"_index":3687,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:33",{"_index":3703,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:39",{"_index":3690,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:44",{"_index":3693,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:49",{"_index":3702,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:54",{"_index":3679,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/types/modal.types.ts",{"_index":2872,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/inform/src/lib/types/tooltip.types.ts",{"_index":3623,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/inform/src/lib/types/tour.token.type.ts",{"_index":3888,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/inform/src/lib/types/tour.types.ts",{"_index":3761,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/abstracts/display",{"_index":1732,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["libs/angular/layout/src/lib/abstracts/drag",{"_index":729,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["libs/angular/layout/src/lib/abstracts/table/open",{"_index":3552,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["libs/angular/layout/src/lib/abstracts/table/select",{"_index":3560,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["libs/angular/layout/src/lib/abstracts/table/sort",{"_index":3597,"title":{},"body":{"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts",{"_index":933,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:111",{"_index":955,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:128",{"_index":958,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:33",{"_index":967,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:38",{"_index":965,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:43",{"_index":969,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48",{"_index":948,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:82",{"_index":960,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:92",{"_index":963,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/item/accordion",{"_index":1007,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts",{"_index":664,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:14",{"_index":712,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:19",{"_index":708,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:20",{"_index":710,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:21",{"_index":707,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:26",{"_index":705,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:31",{"_index":679,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:36",{"_index":692,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:42",{"_index":681,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:47",{"_index":690,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:52",{"_index":711,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:57",{"_index":693,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:82",{"_index":696,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:91",{"_index":702,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/currency",{"_index":1666,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["libs/angular/layout/src/lib/components/cell/date",{"_index":1707,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["libs/angular/layout/src/lib/components/cell/generic",{"_index":3494,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/configurable",{"_index":1422,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["libs/angular/layout/src/lib/components/image",{"_index":2574,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["libs/angular/layout/src/lib/components/table/ngx",{"_index":4300,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["libs/angular/layout/src/lib/directives/display",{"_index":1752,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["libs/angular/layout/src/lib/directives/drag",{"_index":881,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["libs/angular/layout/src/lib/directives/has",{"_index":2153,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["libs/angular/layout/src/lib/directives/tree",{"_index":3894,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["libs/angular/layout/src/lib/enums/sort",{"_index":4580,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/angular/layout/src/lib/pipes/aria",{"_index":1110,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/get",{"_index":3534,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/has",{"_index":3546,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/item",{"_index":1453,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["libs/angular/layout/src/lib/pipes/show",{"_index":3566,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/sort",{"_index":3586,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["libs/angular/layout/src/lib/services/image",{"_index":2658,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["libs/angular/layout/src/lib/services/online",{"_index":3056,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["libs/angular/layout/src/lib/tokens/ngx",{"_index":3502,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/accordion.types.ts",{"_index":4837,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/configurable",{"_index":1436,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/display",{"_index":1739,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/drag",{"_index":865,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/image",{"_index":2545,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/internal",{"_index":4840,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/show",{"_index":3528,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/sort",{"_index":3582,"title":{},"body":{"interfaces/NgxTableSortEvent.html":{}}}],["libs/angular/layout/src/lib/types/tree",{"_index":4839,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts",{"_index":3450,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:13",{"_index":3468,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:15",{"_index":3457,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:42",{"_index":3463,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:51",{"_index":3466,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:60",{"_index":3459,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:69",{"_index":3461,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:78",{"_index":3471,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/base",{"_index":111,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/effects.ts",{"_index":4816,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/entity",{"_index":158,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/require",{"_index":4841,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/store",{"_index":146,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/store.ts",{"_index":4842,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.service.ts",{"_index":262,"title":{},"body":{"injectables/EffectsService.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.service.ts:17",{"_index":270,"title":{},"body":{"injectables/EffectsService.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.service.ts:9",{"_index":266,"title":{},"body":{"injectables/EffectsService.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts",{"_index":4261,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:11",{"_index":4263,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:12",{"_index":4265,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:14",{"_index":4270,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:24",{"_index":4273,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/store",{"_index":4193,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/utils/src/lib/abstracts/query",{"_index":3068,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/utils/src/lib/directives/cypress",{"_index":1696,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["libs/angular/utils/src/lib/directives/focus",{"_index":295,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts",{"_index":178,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts:13",{"_index":188,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/has",{"_index":440,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts",{"_index":457,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts:8",{"_index":459,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/replace",{"_index":3184,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts",{"_index":4540,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts:17",{"_index":4544,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["libs/angular/utils/src/lib/services/broadcast",{"_index":1362,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["libs/angular/utils/src/lib/services/media",{"_index":2774,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["libs/angular/utils/src/lib/services/storage",{"_index":3331,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["libs/angular/utils/src/lib/tokens/cypress",{"_index":4828,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/utils/src/lib/types/cypress.types.ts",{"_index":4835,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/utils/src/lib/types/replace",{"_index":3176,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/utils/src/lib/types/signals.ts",{"_index":4815,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/utils/src/lib/types/storage.types.ts",{"_index":3317,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["libs/javascript/core/src/lib/core.ts",{"_index":4587,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/javascript/rxjs/src/lib/types/observable/observable.types.ts",{"_index":4817,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/javascript/types/authentication/src/lib/authentication.ts",{"_index":4586,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/javascript/utils/src/lib/object/merge/merge.util.ts",{"_index":4836,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["license",{"_index":4670,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["lifecycle",{"_index":4508,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["limit",{"_index":1984,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["limitation",{"_index":4689,"title":{},"body":{"index.html":{},"license.html":{}}}],["limited",{"_index":4709,"title":{},"body":{"index.html":{},"license.html":{}}}],["line",{"_index":2860,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["link",{"_index":3152,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["link.\"the",{"_index":3233,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["linkcomponent",{"_index":3209,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["links",{"_index":3203,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["list",{"_index":408,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["listen",{"_index":1049,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["listened",{"_index":2791,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["listener",{"_index":1619,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{}}}],["listeners",{"_index":1652,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{}}}],["listentoonlinestatus",{"_index":1742,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["listing",{"_index":3372,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["lists",{"_index":2941,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["literal",{"_index":144,"title":{},"body":{"interfaces/BaseStoreActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"pipes/NgxAriaSortPipe.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxWindowService.html":{},"miscellaneous/typealiases.html":{}}}],["live",{"_index":789,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"dependencies.html":{}}}],["liveannouncer",{"_index":786,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["liveregionservice",{"_index":776,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["load",{"_index":1592,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/TableCellTemplate.html":{}}}],["loaded",{"_index":2276,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loader",{"_index":2345,"title":{},"body":{"modules/NgxI18nModule.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["loading",{"_index":114,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loading'},{'name",{"_index":554,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["loading.service.ts",{"_index":2262,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:12",{"_index":2290,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:18",{"_index":2307,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:20",{"_index":2294,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:22",{"_index":2306,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:25",{"_index":2305,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:37",{"_index":2292,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:45",{"_index":2280,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:54",{"_index":2275,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:64",{"_index":2282,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:74",{"_index":2285,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:88",{"_index":2288,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.types",{"_index":2311,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.types.ts",{"_index":4550,"title":{},"body":{"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["loading/i18n",{"_index":2261,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["loadingdata",{"_index":4325,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["loadingtemplate",{"_index":4357,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["loadtranslations",{"_index":2272,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loadtranslations(paths",{"_index":2284,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["local",{"_index":2441,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["locale",{"_index":1503,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["localstorage",{"_index":2474,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{}}}],["localstorage.getitem('ngx",{"_index":2478,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["localstorage.setitem('ngx",{"_index":2476,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["localstorage/sessionstorage",{"_index":3380,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["localstoragerecord",{"_index":3335,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["location",{"_index":1235,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["lodash",{"_index":1704,"title":{},"body":{"directives/NgxCypressTagDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/TableCellTemplate.html":{},"dependencies.html":{}}}],["log",{"_index":1939,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["logical",{"_index":2909,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["logs",{"_index":3393,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["longer",{"_index":380,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["longestrow",{"_index":1473,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["loop",{"_index":3254,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["lower",{"_index":3212,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["lowercase",{"_index":3243,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["lowercased",{"_index":3214,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["made",{"_index":1153,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["main",{"_index":4644,"title":{},"body":{"index.html":{}}}],["maintained",{"_index":4598,"title":{},"body":{"index.html":{}}}],["make",{"_index":770,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["makes",{"_index":3800,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["managescripttags",{"_index":1511,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["map",{"_index":811,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"miscellaneous/typealiases.html":{}}}],["map(([action",{"_index":3006,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["map((action",{"_index":3014,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["map((hascookies",{"_index":2049,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["map((key",{"_index":1986,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["map((response",{"_index":1190,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["map((result",{"_index":2303,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["map((status",{"_index":1273,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["map((translations",{"_index":2399,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["maps",{"_index":2838,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mark",{"_index":907,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["markallasdirty",{"_index":371,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markallasdirty(form",{"_index":388,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markallastouched",{"_index":372,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markallastouched(form",{"_index":396,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markasactive",{"_index":740,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["markasactive(id",{"_index":905,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["markasdirty",{"_index":381,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markastouched",{"_index":394,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["marked",{"_index":3880,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["marker",{"_index":2553,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["marker'},{'name",{"_index":545,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["marker.addeventlistener('select",{"_index":2744,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.addeventlistener('statechange",{"_index":2738,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.all_marker_types",{"_index":2721,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.availablemarkertypes",{"_index":2701,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.close",{"_index":2696,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.component.scss",{"_index":2579,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts",{"_index":2576,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:104",{"_index":2605,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:109",{"_index":2603,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:111",{"_index":2608,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:116",{"_index":2610,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:137",{"_index":2611,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:149",{"_index":2606,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:47",{"_index":2619,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:48",{"_index":2621,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:49",{"_index":2614,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:54",{"_index":2612,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:59",{"_index":2620,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:64",{"_index":2616,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:69",{"_index":2597,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:74",{"_index":2598,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:79",{"_index":2602,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:84",{"_index":2594,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:89",{"_index":2595,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:94",{"_index":2622,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:99",{"_index":2600,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.removeeventlistener('select",{"_index":2695,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.removeeventlistener('statechange",{"_index":2705,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.restorestate(configuration.defaultstate",{"_index":2737,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts",{"_index":2659,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:117",{"_index":2669,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:188",{"_index":2679,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:207",{"_index":2675,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:221",{"_index":2682,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:26",{"_index":2684,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:31",{"_index":2683,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:40",{"_index":2672,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:66",{"_index":2681,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.show",{"_index":2734,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.show(configuration.defaultstate",{"_index":2703,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.targetroot",{"_index":2694,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.types.ts",{"_index":2546,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["marker.uistylesettings.clearbuttonvisible",{"_index":2718,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.notesareastyleclassname",{"_index":2723,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolbaractivebuttonstylecolorsclassname",{"_index":2731,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolbarbuttonstylecolorsclassname",{"_index":2730,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolbarstylecolorsclassname",{"_index":2726,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolboxactivebuttonstylecolorsclassname",{"_index":2733,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolboxbuttonstylecolorsclassname",{"_index":2732,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolboxstylecolorsclassname",{"_index":2728,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.zoombuttonvisible",{"_index":2709,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.zoomoutbuttonvisible",{"_index":2711,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.zoomlevel",{"_index":2716,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.zoomsteps",{"_index":2712,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker/image",{"_index":2575,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["markerarea",{"_index":2678,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["markerarea(image",{"_index":2704,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["markerareastate",{"_index":2551,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["markerbase",{"_index":2548,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["markerclicked",{"_index":2586,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["markerdestroyedsubject",{"_index":2587,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["markerjs",{"_index":2550,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["markerjs2",{"_index":2552,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"dependencies.html":{}}}],["markers",{"_index":2601,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["markertypes",{"_index":2566,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["markerview",{"_index":2674,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["markerview(image",{"_index":2692,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marks",{"_index":385,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["marktranslationsloadedasfailed",{"_index":2273,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["match",{"_index":471,"title":{},"body":{"pipes/IbanPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["matched",{"_index":82,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["matchedquery",{"_index":2816,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["matchedquery.addeventlistener('change",{"_index":2824,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["matches",{"_index":3190,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["matchfunction",{"_index":4076,"title":{},"body":{"classes/NgxValidators.html":{}}}],["matching",{"_index":89,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["math.max",{"_index":1474,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["max",{"_index":1469,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"classes/NgxValidators.html":{}}}],["maxdate",{"_index":4104,"title":{},"body":{"classes/NgxValidators.html":{}}}],["maximum",{"_index":4070,"title":{},"body":{"classes/NgxValidators.html":{}}}],["meant",{"_index":884,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["mechanic",{"_index":4377,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["media",{"_index":2776,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylist",{"_index":2815,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylistenermap",{"_index":2783,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylistevent",{"_index":2822,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["memberof",{"_index":352,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["memoizedselector",{"_index":121,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["memory",{"_index":2139,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["merchantability",{"_index":4711,"title":{},"body":{"index.html":{},"license.html":{}}}],["merge",{"_index":1788,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"index.html":{},"license.html":{}}}],["message",{"_index":802,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["messageerror",{"_index":1393,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["messagerecord",{"_index":780,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["messages",{"_index":783,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxFormsErrorAbstractComponent.html":{}}}],["messagetype",{"_index":1387,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["message{any",{"_index":1416,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["met",{"_index":1239,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxModalService.html":{}}}],["metadata",{"_index":179,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["method",{"_index":350,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["methods",{"_index":183,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["milestone",{"_index":4658,"title":{},"body":{"index.html":{}}}],["min",{"_index":4065,"title":{},"body":{"classes/NgxValidators.html":{}}}],["mind",{"_index":3210,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["mindate",{"_index":4103,"title":{},"body":{"classes/NgxValidators.html":{}}}],["minimum",{"_index":3856,"title":{},"body":{"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{}}}],["minmax(0",{"_index":1479,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["miscellaneous",{"_index":4575,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["missing",{"_index":3143,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["mit",{"_index":4671,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mm",{"_index":4057,"title":{},"body":{"classes/NgxValidators.html":{}}}],["mock",{"_index":484,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mockchannel",{"_index":275,"title":{},"body":{"injectables/EffectsService.html":{}}}],["mocked",{"_index":2687,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["mockprivatechannel",{"_index":276,"title":{},"body":{"injectables/EffectsService.html":{}}}],["mocktourholdercomponent",{"_index":478,"title":{"components/MockTourHolderComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mocktourstepcomponent",{"_index":520,"title":{"components/MockTourStepComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mockvideos",{"_index":277,"title":{},"body":{"injectables/EffectsService.html":{}}}],["modal",{"_index":1574,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{},"miscellaneous/typealiases.html":{}}}],["modals",{"_index":2934,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["modalvisible",{"_index":1532,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["modalvisiblesubject",{"_index":1533,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["mode",{"_index":1507,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["modifies",{"_index":1582,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["modify",{"_index":4691,"title":{},"body":{"index.html":{},"license.html":{}}}],["modular",{"_index":4621,"title":{},"body":{"index.html":{}}}],["module",{"_index":2326,"title":{"modules/NgxI18nModule.html":{}},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"overview.html":{}}}],["modules",{"_index":2328,"title":{"modules.html":{}},"body":{"modules/NgxI18nModule.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":2335,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["moment",{"_index":2526,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["mono",{"_index":4596,"title":{},"body":{"index.html":{}}}],["more",{"_index":41,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["mouse",{"_index":327,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["mouseenter",{"_index":3604,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["mouseleave",{"_index":3605,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["move",{"_index":957,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["moved",{"_index":839,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["movedown",{"_index":3902,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movefocus",{"_index":944,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["movefocus(id",{"_index":950,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["moveleft",{"_index":3903,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moveleft(event",{"_index":3937,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moveright",{"_index":3904,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moves",{"_index":956,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["moveto",{"_index":3993,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["moveto(direction",{"_index":4005,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["movetobottomcontrolend",{"_index":3905,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetobottomend",{"_index":3906,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetocell",{"_index":3907,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetocell(cell",{"_index":3941,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetofirstcellofgrid",{"_index":3908,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetofirstcolumnofgrid",{"_index":3909,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetofirstofrow",{"_index":3910,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetolastcellofgrid",{"_index":3911,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moveup",{"_index":3912,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moving",{"_index":1444,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["mozilla",{"_index":2874,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ms",{"_index":3775,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["multi",{"_index":257,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/TableCellTemplate.html":{}}}],["multiple",{"_index":3512,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["multiselect",{"_index":4522,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["mutable",{"_index":4336,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["mycomponent",{"_index":451,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["name",{"_index":180,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["named",{"_index":4645,"title":{},"body":{"index.html":{}}}],["names",{"_index":2722,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["native",{"_index":2862,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["nature",{"_index":3242,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["navigate",{"_index":3151,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["navigating",{"_index":3963,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["navigation",{"_index":2895,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["navigationextras",{"_index":3763,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["near",{"_index":3737,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["necessary",{"_index":249,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTourStepComponent.html":{}}}],["need",{"_index":74,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"components/NgxAccordionComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["needed",{"_index":55,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["needs",{"_index":1213,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{}}}],["negative",{"_index":3797,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["nested",{"_index":1717,"title":{},"body":{"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["never",{"_index":105,"title":{},"body":{"classes/BaseFormAccessor.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":61,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["newcontainer",{"_index":880,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["newindex",{"_index":878,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["newlanguage",{"_index":2471,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["newly",{"_index":2277,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["newsortdirection",{"_index":719,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["newvalue",{"_index":3326,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["next",{"_index":1002,"title":{},"body":{"components/NgxAccordionComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["next.active",{"_index":3713,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["next.id",{"_index":3717,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["next.path",{"_index":2421,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["next.source",{"_index":3714,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["next.translations",{"_index":2422,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["nextstate",{"_index":3285,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["ng_validators",{"_index":243,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["ng_value_accessor",{"_index":244,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngaftercontentchecked",{"_index":4509,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngafterviewinit",{"_index":623,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["ngclass",{"_index":4304,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngcomponentoutlet",{"_index":4305,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngif",{"_index":1933,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["ngmodule",{"_index":2339,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["ngonchanges",{"_index":2592,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["ngonchanges(changes",{"_index":2609,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["ngondestroy",{"_index":373,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngoninit",{"_index":624,"title":{},"body":{"components/MockTourStepComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngrx/effects",{"_index":4274,"title":{},"body":{"injectables/StoreEffects.html":{},"dependencies.html":{}}}],["ngrx/entity",{"_index":154,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"dependencies.html":{}}}],["ngrx/signals",{"_index":4560,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":124,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"dependencies.html":{}}}],["ngtemplateoutlet",{"_index":1011,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngx",{"_index":524,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["ngxabstracttablecelldirective",{"_index":562,"title":{"directives/NgxAbstractTableCellDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxabstracttablecelldirective:14",{"_index":1693,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:21",{"_index":3499,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:26",{"_index":3500,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:27",{"_index":3497,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:31",{"_index":1669,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:32",{"_index":1691,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:33",{"_index":3498,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:36",{"_index":1672,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:38",{"_index":1688,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:42",{"_index":1670,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:44",{"_index":1680,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:47",{"_index":1671,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:49",{"_index":1676,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:52",{"_index":1692,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:57",{"_index":1673,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:59",{"_index":1729,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:65",{"_index":1725,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:72",{"_index":1720,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:77",{"_index":1719,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:82",{"_index":1674,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:91",{"_index":1675,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxaccessibleabstractdraganddropitemdirective",{"_index":564,"title":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropabstractservice",{"_index":767,"title":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["ngxaccessibledraganddropbasemessage",{"_index":864,"title":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{}},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxaccessibledraganddropcontainer",{"_index":887,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["ngxaccessibledraganddropcontainer]'},{'name",{"_index":566,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropcontainerdirective",{"_index":565,"title":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropcontainerindex",{"_index":891,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["ngxaccessibledraganddropcontainerlabel",{"_index":894,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["ngxaccessibledraganddropfromtomessage",{"_index":867,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxaccessibledraganddrophost",{"_index":898,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["ngxaccessibledraganddrophost]'},{'name",{"_index":568,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddrophostdescription",{"_index":915,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["ngxaccessibledraganddrophostdirective",{"_index":567,"title":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropitem]'},{'name",{"_index":570,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropitemdirective",{"_index":569,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropmessage",{"_index":800,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxaccessibledraganddropmessagerecord",{"_index":817,"title":{"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{}},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropmessagerecords",{"_index":816,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["ngxaccessibledraganddropmoveevent",{"_index":876,"title":{"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropmovetype",{"_index":875,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxaccordioncomponent",{"_index":523,"title":{"components/NgxAccordionComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccordionitemcomponent",{"_index":526,"title":{"components/NgxAccordionItemComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccordionopenbehavior",{"_index":972,"title":{},"body":{"components/NgxAccordionComponent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxariasort",{"_index":1113,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["ngxariasortpipe",{"_index":1109,"title":{"pipes/NgxAriaSortPipe.html":{}},"body":{"pipes/NgxAriaSortPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxauthenticatedhttpclient",{"_index":1121,"title":{"injectables/NgxAuthenticatedHttpClient.html":{}},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["ngxauthenticatedhttpclientconfiguration",{"_index":1174,"title":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{}},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["ngxauthenticatedhttpinterceptor",{"_index":4584,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ngxauthenticatedhttpinterceptor(request",{"_index":4589,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ngxauthenticatedroute",{"_index":1215,"title":{"interfaces/NgxAuthenticatedRoute.html":{}},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"miscellaneous/typealiases.html":{}}}],["ngxauthenticatedroutes",{"_index":1242,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"miscellaneous/typealiases.html":{}}}],["ngxauthenticationabstractservice",{"_index":1209,"title":{"classes/NgxAuthenticationAbstractService.html":{}},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxauthenticationconfiguration",{"_index":1212,"title":{"interfaces/NgxAuthenticationConfiguration.html":{}},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["ngxauthenticationresponsefeature",{"_index":1284,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"miscellaneous/typealiases.html":{}}}],["ngxauthenticationservicetoken",{"_index":2082,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxauthenticationstatus",{"_index":1322,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"miscellaneous/typealiases.html":{}}}],["ngxauthenticationurlhandlertoken",{"_index":1172,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["ngxbroadcastchannelservice",{"_index":1361,"title":{"injectables/NgxBroadcastChannelService.html":{}},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["ngxconfigurablelayoutcomponent",{"_index":529,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxconfigurablelayoutgrid",{"_index":1442,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"miscellaneous/typealiases.html":{}}}],["ngxconfigurablelayoutitemcomponent",{"_index":532,"title":{"components/NgxConfigurableLayoutItemComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxconfigurablelayoutitemdropevent",{"_index":1435,"title":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{}},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["ngxconfigurablelayoutitementity",{"_index":1443,"title":{"interfaces/NgxConfigurableLayoutItemEntity.html":{}},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"miscellaneous/typealiases.html":{}}}],["ngxconfigurablelayoutitemsize",{"_index":1456,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayoutitemsizeoption",{"_index":1445,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"miscellaneous/typealiases.html":{}}}],["ngxconfigurablelayoutitemsizepipe",{"_index":1452,"title":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayouttype",{"_index":1449,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"miscellaneous/typealiases.html":{}}}],["ngxcookie",{"_index":1481,"title":{"interfaces/NgxCookie.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["ngxcookiecategories",{"_index":1497,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"miscellaneous/typealiases.html":{}}}],["ngxcookiechangedevent",{"_index":1517,"title":{"interfaces/NgxCookieChangedEvent.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookieconfiguration",{"_index":1506,"title":{"interfaces/NgxCookieConfiguration.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookieevent",{"_index":1516,"title":{"interfaces/NgxCookieEvent.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookielanguageconfiguration",{"_index":1498,"title":{"interfaces/NgxCookieLanguageConfiguration.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookies",{"_index":1618,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["ngxcookieservice",{"_index":1520,"title":{"injectables/NgxCookieService.html":{}},"body":{"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{}}}],["ngxcookiesfallbackcomponent",{"_index":571,"title":{"directives/NgxCookiesFallBackComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasCookieDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxcookiesfallbackcomponenttoken",{"_index":2017,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["ngxcookievalue",{"_index":1565,"title":{"interfaces/NgxCookieValue.html":{}},"body":{"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{}}}],["ngxcurrencytablecellcomponent",{"_index":534,"title":{"components/NgxCurrencyTableCellComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxcypresstagdirective",{"_index":572,"title":{"directives/NgxCypressTagDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdatetablecellcomponent",{"_index":538,"title":{"components/NgxDateTableCellComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentarialive",{"_index":1746,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"miscellaneous/typealiases.html":{}}}],["ngxdisplaycontentcomponent",{"_index":574,"title":{"directives/NgxDisplayContentComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentcomponent:11",{"_index":4535,"title":{},"body":{"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["ngxdisplaycontentcomponentconfiguration",{"_index":1743,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["ngxdisplaycontentconditions",{"_index":1750,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxdisplaycontentconfiguration",{"_index":1738,"title":{"interfaces/NgxDisplayContentConfiguration.html":{}},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentconfigurationtoken",{"_index":1792,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentdirective",{"_index":575,"title":{"directives/NgxDisplayContentDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentoverrideconfiguration",{"_index":1751,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"miscellaneous/typealiases.html":{}}}],["ngxdisplaycontentrecord",{"_index":1749,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["ngxdisplaycontentstatus",{"_index":1744,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"miscellaneous/typealiases.html":{}}}],["ngxforms",{"_index":429,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["ngxformscontrolvalueaccessor",{"_index":577,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorabstractcomponent",{"_index":578,"title":{"directives/NgxFormsErrorAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorconfigurationoptions",{"_index":1880,"title":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrordirective",{"_index":1942,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrors",{"_index":1889,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrors]'},{'name",{"_index":580,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorsconfigurationtoken",{"_index":1913,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrorsdirective",{"_index":579,"title":{"directives/NgxFormsErrorsDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorshowsettings",{"_index":1886,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxformserrorshowwhensettings",{"_index":1887,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxhascookieconfiguration",{"_index":1665,"title":{"interfaces/NgxHasCookieConfiguration.html":{}},"body":{"directives/NgxCookiesFallBackComponent.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{}}}],["ngxhascookiedirective",{"_index":581,"title":{"directives/NgxHasCookieDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasCookieDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfeature",{"_index":2067,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["ngxhasfeature]'},{'name",{"_index":584,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfeaturedirective",{"_index":583,"title":{"directives/NgxHasFeatureDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFeatureDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfeatureelse",{"_index":2070,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["ngxhasfeatureguard",{"_index":1224,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxhasfeaturepipe",{"_index":2115,"title":{"pipes/NgxHasFeaturePipe.html":{}},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["ngxhasfeatureshouldhaveallfeatures",{"_index":2071,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["ngxhasfeatureshouldhavefeature",{"_index":2072,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["ngxhasfocusdirective",{"_index":585,"title":{"directives/NgxHasFocusDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFocusDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfocusdirective:13",{"_index":3955,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:18",{"_index":3932,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:25",{"_index":3931,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:34",{"_index":3949,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:43",{"_index":3950,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective",{"_index":586,"title":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfocusdraganddropabstractdirective:15",{"_index":765,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:20",{"_index":749,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:31",{"_index":747,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:39",{"_index":764,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:41",{"_index":754,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:45",{"_index":757,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:47",{"_index":758,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:54",{"_index":756,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhaspermission",{"_index":2179,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["ngxhaspermission]'},{'name",{"_index":588,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhaspermissiondirective",{"_index":587,"title":{"directives/NgxHasPermissionDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhaspermissionelse",{"_index":2180,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["ngxhaspermissionguard",{"_index":1229,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxhaspermissionpipe",{"_index":2212,"title":{"pipes/NgxHasPermissionPipe.html":{}},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["ngxhaspermissionshouldhaveallpermissions",{"_index":2181,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["ngxhaspermissionshouldhavepermission",{"_index":2182,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["ngxi18n",{"_index":2483,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["ngxi18nabstractservice",{"_index":2227,"title":{"classes/NgxI18nAbstractService.html":{}},"body":{"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nService.html":{}}}],["ngxi18nconfiguration",{"_index":2231,"title":{"interfaces/NgxI18nConfiguration.html":{}},"body":{"interfaces/NgxI18nConfiguration.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["ngxi18nconfigurationtoken",{"_index":2349,"title":{},"body":{"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["ngxi18nemptycomponent",{"_index":540,"title":{"components/NgxI18nEmptyComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxi18nloadingservice",{"_index":2259,"title":{"injectables/NgxI18nLoadingService.html":{}},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ngxi18nmodule",{"_index":2327,"title":{"modules/NgxI18nModule.html":{}},"body":{"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"modules.html":{}}}],["ngxi18nmultitranslationhttploader",{"_index":2344,"title":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}},"body":{"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["ngxi18nmultitranslationhttploader(http",{"_index":2353,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["ngxi18nrootservice",{"_index":2425,"title":{"injectables/NgxI18nRootService.html":{}},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["ngxi18nservice",{"_index":2348,"title":{"injectables/NgxI18nService.html":{}},"body":{"modules/NgxI18nModule.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ngxi18nsetlanguageguard",{"_index":2258,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["ngxi18ntranslationloaderresolver",{"_index":2346,"title":{"injectables/NgxI18nTranslationLoaderResolver.html":{}},"body":{"modules/NgxI18nModule.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ngxi8nrootservice",{"_index":2502,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["ngximagemarker",{"_index":2573,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["ngximagemarkerbase",{"_index":2544,"title":{"interfaces/NgxImageMarkerBase.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkercomponent",{"_index":543,"title":{"components/NgxImageMarkerComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngximagemarkerconfiguration",{"_index":2558,"title":{"interfaces/NgxImageMarkerConfiguration.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkeredit",{"_index":2572,"title":{"interfaces/NgxImageMarkerEdit.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["ngximagemarkeritem",{"_index":2555,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["ngximagemarkerservice",{"_index":2617,"title":{"injectables/NgxImageMarkerService.html":{}},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["ngximagemarkerstate",{"_index":2554,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["ngximagemarkertypes",{"_index":2557,"title":{"interfaces/NgxImageMarkerTypes.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkerview",{"_index":2570,"title":{"interfaces/NgxImageMarkerView.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["ngxinform",{"_index":2988,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["ngxisauthenticated",{"_index":2753,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxisauthenticated]'},{'name",{"_index":590,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxisauthenticateddirective",{"_index":589,"title":{"directives/NgxIsAuthenticatedDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxisauthenticatedelse",{"_index":2754,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxisauthenticatedguard",{"_index":1233,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxlayout",{"_index":1864,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["ngxmediaqueryservice",{"_index":2773,"title":{"injectables/NgxMediaQueryService.html":{}},"body":{"injectables/NgxMediaQueryService.html":{}}}],["ngxmodalabstractcomponent",{"_index":591,"title":{"directives/NgxModalAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxmodalabstractcomponent`](../abstracts/modal/modal.abstract.component.ts",{"_index":2923,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalactiontype",{"_index":2856,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxmodalarialabelbaseoptions",{"_index":2871,"title":{"interfaces/NgxModalAriaLabelBaseOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalarialabelledoptions",{"_index":2891,"title":{"interfaces/NgxModalAriaLabelledOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxmodalarialabeloptions",{"_index":2890,"title":{"interfaces/NgxModalAriaLabelOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxmodalbaseconfiguration",{"_index":2933,"title":{"interfaces/NgxModalBaseConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalbaseoptions",{"_index":2937,"title":{"interfaces/NgxModalBaseOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalcdkmodalconfiguration",{"_index":2903,"title":{"interfaces/NgxModalCDKModalConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalclose",{"_index":3001,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["ngxmodalcomponentconfiguration",{"_index":2921,"title":{"interfaces/NgxModalComponentConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalcomponentoptions",{"_index":2946,"title":{"interfaces/NgxModalComponentOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalconfiguration",{"_index":2936,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxmodalconfigurationtoken",{"_index":2985,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["ngxmodalglobalcdkconfiguration",{"_index":2894,"title":{"interfaces/NgxModalGlobalCDKConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodallabelariaoptions",{"_index":2892,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxmodaloptions",{"_index":2947,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxmodalrole",{"_index":2882,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxmodalservice",{"_index":2842,"title":{"injectables/NgxModalService.html":{}},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{}}}],["ngxmodaltypeoptions",{"_index":2945,"title":{"interfaces/NgxModalTypeOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxngxwindowservice",{"_index":4150,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["ngxonlineservice",{"_index":1812,"title":{"injectables/NgxOnlineService.html":{}},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{}}}],["ngxopenrowstatecolumn",{"_index":4506,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngxqueryparamformsynccomponent",{"_index":592,"title":{"directives/NgxQueryParamFormSyncComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxreplaceelements",{"_index":3188,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsconfiguration",{"_index":3181,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"miscellaneous/typealiases.html":{}}}],["ngxreplaceelementsconfigurationelement",{"_index":3175,"title":{"interfaces/NgxReplaceElementsConfigurationElement.html":{}},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["ngxreplaceelementsconfigurationtoken",{"_index":3246,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsitem",{"_index":3182,"title":{"interfaces/NgxReplaceElementsItem.html":{}},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementspipe",{"_index":3183,"title":{"pipes/NgxReplaceElementsPipe.html":{}},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsselector",{"_index":3179,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"miscellaneous/typealiases.html":{}}}],["ngxsaveonexitabstractservice",{"_index":3271,"title":{"classes/NgxSaveOnExitAbstractService.html":{}},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["ngxsaveonexitcomponent",{"_index":593,"title":{"directives/NgxSaveOnExitComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxstorage",{"_index":3316,"title":{"interfaces/NgxStorage.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstoragebaseevent",{"_index":3323,"title":{"interfaces/NgxStorageBaseEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstorageclearevent",{"_index":3327,"title":{"interfaces/NgxStorageClearEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstorageevent",{"_index":3329,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstoragerecord",{"_index":3321,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstorageremoveevent",{"_index":3328,"title":{"interfaces/NgxStorageRemoveEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstorageservice",{"_index":3330,"title":{"injectables/NgxStorageService.html":{}},"body":{"injectables/NgxStorageService.html":{}}}],["ngxstoragesetevent",{"_index":3324,"title":{"interfaces/NgxStorageSetEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstoragetype",{"_index":3322,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstore",{"_index":3430,"title":{"interfaces/NgxStore.html":{}},"body":{"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ngxstoreactions",{"_index":3434,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstoreselectors",{"_index":3435,"title":{},"body":{"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstoreservice",{"_index":3129,"title":{"injectables/NgxStoreService.html":{}},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:13",{"_index":4246,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:15",{"_index":4247,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:42",{"_index":4224,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:51",{"_index":4225,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:60",{"_index":4222,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:69",{"_index":4223,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxtablecelldirective",{"_index":594,"title":{"directives/NgxTableCellDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTableCellDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableclass",{"_index":3508,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["ngxtablecomponent",{"_index":546,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableconfiguration",{"_index":3501,"title":{"interfaces/NgxTableConfiguration.html":{}},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtableconfigurationtoken",{"_index":3526,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablecypressdatatags",{"_index":716,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtablecypressdatatagsbase",{"_index":3527,"title":{"interfaces/NgxTableCypressDataTagsBase.html":{}},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["ngxtablegetpipe",{"_index":1709,"title":{"pipes/NgxTableGetPipe.html":{}},"body":{"components/NgxDateTableCellComponent.html":{},"pipes/NgxTableGetPipe.html":{}}}],["ngxtablehasobservers",{"_index":3547,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["ngxtablehasobserverspipe",{"_index":3545,"title":{"pipes/NgxTableHasObserversPipe.html":{}},"body":{"pipes/NgxTableHasObserversPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtableopenrowstatetemplateabstractcomponent",{"_index":595,"title":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableselectcolumn",{"_index":4505,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngxtableselecttemplateabstractcomponent",{"_index":596,"title":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableshowheader",{"_index":3569,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["ngxtableshowheaderpipe",{"_index":3565,"title":{"pipes/NgxTableShowHeaderPipe.html":{}},"body":{"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtableshowheaderrequirements",{"_index":3532,"title":{"interfaces/NgxTableShowHeaderRequirements.html":{}},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["ngxtablesortdirection",{"_index":701,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"miscellaneous/enumerations.html":{}}}],["ngxtablesortdirection.ascending",{"_index":720,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxTableSortIconPipe.html":{}}}],["ngxtablesortdirection.descending",{"_index":725,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["ngxtablesortevent",{"_index":717,"title":{"interfaces/NgxTableSortEvent.html":{}},"body":{"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablesorticon",{"_index":3589,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["ngxtablesorticonpipe",{"_index":3585,"title":{"pipes/NgxTableSortIconPipe.html":{}},"body":{"pipes/NgxTableSortIconPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablesorttemplateabstractcomponent",{"_index":597,"title":{"directives/NgxTableSortTemplateAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltip",{"_index":3633,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltip]'},{'name",{"_index":600,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltipabstractcomponent",{"_index":598,"title":{"directives/NgxTooltipAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltipactiveelementevent",{"_index":3622,"title":{"interfaces/NgxTooltipActiveElementEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtooltipactivetooltipevent",{"_index":3630,"title":{"interfaces/NgxTooltipActiveTooltipEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtooltipbaseevent",{"_index":3624,"title":{"interfaces/NgxTooltipBaseEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipcomponent",{"_index":3634,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltipconfiguration",{"_index":3626,"title":{"interfaces/NgxTooltipConfiguration.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltipconfigurationtoken",{"_index":3710,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["ngxtooltipdirective",{"_index":599,"title":{"directives/NgxTooltipDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltipdisabled",{"_index":3635,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltipevent",{"_index":3631,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtooltipid",{"_index":3636,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltipinactiveevent",{"_index":3629,"title":{"interfaces/NgxTooltipInactiveEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtooltipitem",{"_index":3628,"title":{"interfaces/NgxTooltipItem.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltipposition",{"_index":3617,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtooltippositionclass",{"_index":3618,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtooltipservice",{"_index":3600,"title":{"injectables/NgxTooltipService.html":{}},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtouraction",{"_index":3771,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtourbackdropclipevent",{"_index":3760,"title":{"interfaces/NgxTourBackdropClipEvent.html":{}},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourdirection",{"_index":3764,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtourinteraction",{"_index":3765,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtouritemdirective",{"_index":601,"title":{"directives/NgxTourItemDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourregistrationevent",{"_index":3767,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtourrouteoptions",{"_index":3769,"title":{"interfaces/NgxTourRouteOptions.html":{}},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourservice",{"_index":505,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["ngxtourshowwhen",{"_index":3828,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["ngxtourshowwhen]'},{'name",{"_index":604,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourshowwhendirective",{"_index":603,"title":{"directives/NgxTourShowWhenDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourshowwhenelse",{"_index":3829,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["ngxtourstep",{"_index":3772,"title":{"interfaces/NgxTourStep.html":{}},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourstep.offset",{"_index":3893,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["ngxtourstepcomponent",{"_index":605,"title":{"directives/NgxTourStepComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourstepcomponent:103",{"_index":660,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:105",{"_index":646,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:112",{"_index":645,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:33",{"_index":663,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:38",{"_index":642,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:45",{"_index":641,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:53",{"_index":636,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:58",{"_index":656,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:63",{"_index":653,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:68",{"_index":640,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:73",{"_index":633,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:78",{"_index":634,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:83",{"_index":629,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:88",{"_index":635,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:93",{"_index":638,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:98",{"_index":648,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepoffset",{"_index":3801,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtourstepposition",{"_index":3766,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtourtokenconfiguration",{"_index":3887,"title":{"interfaces/NgxTourTokenConfiguration.html":{}},"body":{"interfaces/NgxTourTokenConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtourtokentype",{"_index":3891,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtreegrid",{"_index":3988,"title":{},"body":{"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtreegrid]'},{'name",{"_index":609,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridcell",{"_index":3899,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxtreegridcell]'},{'name",{"_index":607,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridcelldirective",{"_index":606,"title":{"directives/NgxTreeGridCellDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridcellrow",{"_index":3900,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxtreegridcelltarget",{"_index":3942,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtreegriddirective",{"_index":608,"title":{"directives/NgxTreeGridDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridexpandable",{"_index":3989,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["ngxtreegridrow",{"_index":611,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridrowdirective",{"_index":610,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridrowtarget",{"_index":3943,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"miscellaneous/typealiases.html":{}}}],["ngxutils",{"_index":1410,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["ngxvalidators",{"_index":4030,"title":{"classes/NgxValidators.html":{}},"body":{"classes/NgxValidators.html":{}}}],["ngxwindowservice",{"_index":1404,"title":{"injectables/NgxWindowService.html":{}},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["non",{"_index":1464,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"index.html":{}}}],["none",{"_index":1115,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{}}}],["noninfringement",{"_index":4715,"title":{},"body":{"index.html":{},"license.html":{}}}],["note",{"_index":3217,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["notes",{"_index":2724,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["nothing",{"_index":67,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{}}}],["notice",{"_index":4701,"title":{},"body":{"index.html":{},"license.html":{}}}],["notify",{"_index":1651,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["now",{"_index":3237,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["npm",{"_index":4604,"title":{},"body":{"index.html":{}}}],["null",{"_index":48,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{}}}],["number",{"_index":190,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["number(value",{"_index":3427,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["numbers",{"_index":199,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["numbersignal",{"_index":4788,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["obj",{"_index":23,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"dependencies.html":{}}}],["object",{"_index":36,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"miscellaneous/typealiases.html":{}}}],["object.entries(item.data).foreach(([key",{"_index":3262,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["object.entries(record).foreach(([key",{"_index":3420,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["object.entries(storage).foreach(([key",{"_index":3423,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["object.entries(this.sortabletablecellrecord()).foreach(([cellname",{"_index":4486,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["object.keys(categories).length",{"_index":1617,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["object.keys(data",{"_index":1983,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["object.keys(data).map((key",{"_index":1981,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["object.keys(data).slice(0",{"_index":1988,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["object.keys(parseddata",{"_index":3169,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["object.keys(selectors).reduce((previous",{"_index":3475,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["object.keys(value).length",{"_index":3159,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["object.values(group.controls",{"_index":63,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["object.values(this.markers",{"_index":2748,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["object.values(this.rowsformgroup.controls).some",{"_index":4428,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["object.values(this.sortabletablecellrecord()).foreach((cell",{"_index":4500,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["object.values(value).every((selected",{"_index":4517,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["objects",{"_index":3381,"title":{},"body":{"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["observable",{"_index":268,"title":{},"body":{"injectables/EffectsService.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["observable.pipe(sharereplay",{"_index":2319,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["observablearray",{"_index":4789,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observableblob",{"_index":4790,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observableboolean",{"_index":4791,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observablebooleanrecord",{"_index":4792,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observablenumber",{"_index":4793,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observablerecord",{"_index":4794,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observables",{"_index":1523,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxStorageService.html":{},"interfaces/TableCellTemplate.html":{}}}],["observablestring",{"_index":4795,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observablestringrecord",{"_index":4796,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observe",{"_index":1188,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["observer",{"_index":3549,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["observers",{"_index":447,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["observers.pipe.ts",{"_index":442,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["observers.pipe.ts:13",{"_index":3548,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["observers.pipe.ts:8",{"_index":446,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["observers/has",{"_index":441,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["obtaining",{"_index":4683,"title":{},"body":{"index.html":{},"license.html":{}}}],["occurring",{"_index":3379,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["of(mockchannel",{"_index":279,"title":{},"body":{"injectables/EffectsService.html":{}}}],["of(mockprivatechannel",{"_index":280,"title":{},"body":{"injectables/EffectsService.html":{}}}],["of(mockvideos",{"_index":281,"title":{},"body":{"injectables/EffectsService.html":{}}}],["of(payload",{"_index":4287,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["of(this.currentlanguage",{"_index":825,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["offer",{"_index":3373,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["offline",{"_index":1745,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"miscellaneous/typealiases.html":{}}}],["offline'},{'name",{"_index":556,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["offset",{"_index":3786,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["old",{"_index":3416,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["oldvalue",{"_index":3325,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["onblur",{"_index":742,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["once",{"_index":1885,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["onchange",{"_index":1624,"title":{},"body":{"injectables/NgxCookieService.html":{},"interfaces/TableCellTemplate.html":{}}}],["onchange.bind(this",{"_index":1626,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onchanged",{"_index":4321,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["onchanges",{"_index":2578,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["onclose",{"_index":2940,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["onconsent",{"_index":1594,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onconsent.bind(this",{"_index":1623,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["ondestroy",{"_index":366,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["ondestroycomponent",{"_index":2030,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["ondestroyed",{"_index":2040,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["ondestroysubject",{"_index":1758,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["one",{"_index":7,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["one.ts",{"_index":4801,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ones",{"_index":723,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["onescape",{"_index":625,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["onfirstconsent",{"_index":1600,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onfirstconsent.bind(this",{"_index":1621,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onfocus",{"_index":743,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["oninit",{"_index":1009,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["online",{"_index":1813,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{}}}],["onlineservice",{"_index":1759,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["onlinesubject",{"_index":3058,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["onlyself",{"_index":438,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{}}}],["onmodalhide",{"_index":1630,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onmodalhide.bind(this",{"_index":1632,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onmodalshow",{"_index":1627,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onmodalshow.bind(this",{"_index":1629,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onpush",{"_index":1847,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["ontouch",{"_index":4320,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ontouched",{"_index":4435,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["onvisible",{"_index":3778,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["open",{"_index":943,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["open(options",{"_index":2968,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["open/closed",{"_index":1057,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["opened",{"_index":1101,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["openedindex",{"_index":4390,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["opening",{"_index":2990,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["openrows",{"_index":4338,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["openrowstate",{"_index":3525,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["openrowstatetemplate",{"_index":4365,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["opens",{"_index":2970,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["operator",{"_index":508,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["operators",{"_index":504,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/StoreEffects.html":{}}}],["opinionated",{"_index":1126,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["opt",{"_index":1508,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["option",{"_index":4340,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["optional",{"_index":12,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":1661,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["options",{"_index":35,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxStore.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["options.autoclose",{"_index":3010,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.autofocus",{"_index":3034,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.closeonnavigation",{"_index":3044,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.component",{"_index":2994,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.conditionalfunction",{"_index":52,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["options.controls",{"_index":53,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["options.data",{"_index":3050,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.describedbyid",{"_index":3030,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.direction",{"_index":3037,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.has('when",{"_index":3579,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["options.hasbackdrop",{"_index":3039,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.interface.ts",{"_index":436,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{}}}],["options.label",{"_index":3028,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.labelledbyid",{"_index":3029,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.panelclass",{"_index":3041,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.restorefocus",{"_index":3033,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.role",{"_index":3026,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.ts",{"_index":149,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{}}}],["options.type",{"_index":3053,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.viewcontainerref",{"_index":3035,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["optionsvalue",{"_index":2961,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["order",{"_index":97,"title":{},"body":{"classes/BaseFormAccessor.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["original",{"_index":211,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/TransformPipe.html":{},"miscellaneous/typealiases.html":{}}}],["original.slice(0",{"_index":213,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["original.slice(index",{"_index":214,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["originx",{"_index":3696,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["originy",{"_index":3697,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["others",{"_index":2521,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["otherwise",{"_index":4724,"title":{},"body":{"index.html":{},"license.html":{}}}],["ouput",{"_index":452,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["out",{"_index":1306,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"index.html":{},"license.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["outcome",{"_index":1844,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["outerhtml",{"_index":3211,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["output",{"_index":320,"title":{},"body":{"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["output.observers.length",{"_index":455,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["output['listeners']?.length",{"_index":3551,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["outputemitterref",{"_index":319,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["outputs",{"_index":2593,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["outputtoobservable",{"_index":2982,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["outputtoobservable(modal.action).pipe(startwith(undefined",{"_index":2999,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["outputtoobservable(modal.close).pipe",{"_index":3000,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["outside",{"_index":3727,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["over",{"_index":2318,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["overarching",{"_index":3987,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["overlay",{"_index":3705,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlaypositionbuilder",{"_index":3673,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayref",{"_index":3674,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayservice",{"_index":3675,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayx",{"_index":3699,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayy",{"_index":3700,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["override",{"_index":558,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTableCellDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["overrideconfiguration",{"_index":1760,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["overview",{"_index":4730,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":798,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxModalService.html":{}}}],["overwrites",{"_index":2964,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["overwritten",{"_index":4369,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["p",{"_index":1884,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["package",{"_index":240,"title":{"dependencies.html":{},"properties.html":{}},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"index.html":{}}}],["packages",{"_index":2627,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"index.html":{}}}],["padding",{"_index":3781,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["page",{"_index":1591,"title":{},"body":{"injectables/NgxCookieService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxWindowService.html":{}}}],["pages",{"_index":4630,"title":{},"body":{"index.html":{}}}],["pairs",{"_index":1424,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["pairwise",{"_index":3709,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["panelclass",{"_index":2900,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["paragraph",{"_index":1970,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["param",{"_index":34,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/typealiases.html":{}}}],["parameter",{"_index":2240,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["parameters",{"_index":193,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["parameters[1",{"_index":1184,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["parameters[1]['params",{"_index":1181,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["parameters[2",{"_index":1197,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["params",{"_index":40,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxI18nService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{}}}],["parent",{"_index":453,"title":{},"body":{"pipes/HasObserversPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["parent.appendchild(element",{"_index":858,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["parent.contains(element",{"_index":2869,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["parent.setattribute('aria",{"_index":859,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["parentelement",{"_index":1862,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["parentelement.getattribute('aria",{"_index":1870,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["parentelement.setattribute('aria",{"_index":1867,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["parse",{"_index":3249,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{}}}],["parsed",{"_index":3378,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["parseddata",{"_index":3166,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["parser",{"_index":3252,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["parser.parsefromstring(value",{"_index":3253,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["parses",{"_index":3354,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["parsevalue",{"_index":3340,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["parsevalue(value",{"_index":3352,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["part",{"_index":2063,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["partial",{"_index":169,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["particular",{"_index":4713,"title":{},"body":{"index.html":{},"license.html":{}}}],["particularly",{"_index":4040,"title":{},"body":{"classes/NgxValidators.html":{}}}],["parts",{"_index":3198,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["pass",{"_index":102,"title":{},"body":{"classes/BaseFormAccessor.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["passed",{"_index":347,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["passes",{"_index":805,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["patch",{"_index":1138,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["patch(url",{"_index":1162,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["patched",{"_index":4419,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["patchvalue(true",{"_index":4493,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["path",{"_index":1486,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxTableGetPipe.html":{}}}],["paths",{"_index":2287,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"miscellaneous/typealiases.html":{}}}],["path}${lang}.json${this.config.cachebust",{"_index":2394,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["pattern",{"_index":937,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["payload",{"_index":138,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["perform",{"_index":1046,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["performance",{"_index":3574,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["permission",{"_index":1230,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"index.html":{},"license.html":{}}}],["permission(s",{"_index":2197,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["permission.directive.ts",{"_index":2177,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:103",{"_index":2189,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:110",{"_index":2190,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:167",{"_index":2188,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:30",{"_index":2202,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:31",{"_index":2191,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:34",{"_index":2192,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:39",{"_index":2193,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:44",{"_index":2200,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:45",{"_index":2201,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:46",{"_index":2194,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:47",{"_index":2195,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:52",{"_index":2196,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:57",{"_index":2199,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:62",{"_index":2198,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:67",{"_index":2185,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:72",{"_index":2186,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:77",{"_index":2187,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:82",{"_index":2184,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.pipe.ts",{"_index":2213,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:18",{"_index":2219,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:19",{"_index":2220,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:24",{"_index":2222,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:28",{"_index":2223,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:33",{"_index":2221,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:42",{"_index":2215,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:55",{"_index":2218,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:68",{"_index":2216,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:92",{"_index":2214,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission/has",{"_index":2176,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["permissions",{"_index":1228,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["permissions(s",{"_index":2178,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permissiontype",{"_index":1231,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["permit",{"_index":4698,"title":{},"body":{"index.html":{},"license.html":{}}}],["person",{"_index":4682,"title":{},"body":{"index.html":{},"license.html":{}}}],["persons",{"_index":4699,"title":{},"body":{"index.html":{},"license.html":{}}}],["pipe",{"_index":174,"title":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"pipes/TransformPipe.html":{}},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["pipe(filter((languages",{"_index":2449,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["pipe(switchmap",{"_index":4252,"title":{},"body":{"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["pipe(usemockdataduringtour('world",{"_index":493,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["pipe,pipetransform,outputemitterref",{"_index":3550,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["pipe/get.pipe",{"_index":1731,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["pipe/get.pipe.ts",{"_index":3535,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["pipe/get.pipe.ts:16",{"_index":3536,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["pipes",{"_index":176,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"overview.html":{}}}],["pipes/get",{"_index":1730,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["pipetransform",{"_index":204,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"pipes/TransformPipe.html":{}}}],["placed",{"_index":885,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["platform",{"_index":4124,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["platform_id",{"_index":4171,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["platformid",{"_index":4110,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["platforms",{"_index":4149,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["please",{"_index":784,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourStepComponent.html":{},"index.html":{}}}],["polite",{"_index":1747,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"miscellaneous/typealiases.html":{}}}],["portal",{"_index":3745,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["portions",{"_index":4704,"title":{},"body":{"index.html":{},"license.html":{}}}],["position",{"_index":618,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"injectables/NgxWindowService.html":{},"miscellaneous/typealiases.html":{}}}],["positionclass",{"_index":3601,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["positionrecord",{"_index":3676,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["positionstrategy",{"_index":3740,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["possible",{"_index":650,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["post",{"_index":1139,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["post(url",{"_index":1165,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["postmessage",{"_index":1373,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["postmessage(channelname",{"_index":1386,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["pr",{"_index":4655,"title":{},"body":{"index.html":{}}}],["practices",{"_index":686,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["practices#selecting",{"_index":688,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["precedence",{"_index":2906,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["preconditions",{"_index":2973,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["preference",{"_index":1615,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["preferences",{"_index":1583,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["present",{"_index":1293,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["preserved",{"_index":1860,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["pressed",{"_index":357,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["prev",{"_index":4797,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["prevent",{"_index":1099,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["prevented",{"_index":3294,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["previous",{"_index":2420,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"miscellaneous/typealiases.html":{}}}],["previous.active",{"_index":3728,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["previous.id",{"_index":3722,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["previous.source",{"_index":3725,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["previouscontainer",{"_index":879,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["previousindex",{"_index":877,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["previously",{"_index":2916,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["priority",{"_index":1866,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["private",{"_index":369,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["proceed",{"_index":2930,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["programmatically",{"_index":3958,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["project",{"_index":2938,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["projects",{"_index":4635,"title":{},"body":{"index.html":{}}}],["promise",{"_index":1504,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["proof",{"_index":3333,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["prop",{"_index":3258,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"dependencies.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"properties.html":{}}}],["property",{"_index":136,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"pipes/HasObserversPipe.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["proposed",{"_index":2439,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["protected",{"_index":367,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["provide",{"_index":255,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"modules/NgxI18nModule.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["provided",{"_index":379,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["providedin",{"_index":1175,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["providengxreplaceelementsconfiguration",{"_index":3224,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["provider",{"_index":241,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["providers",{"_index":250,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"modules/NgxI18nModule.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"overview.html":{}}}],["providers.util.ts",{"_index":229,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["providers/accessor",{"_index":228,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["provides",{"_index":335,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"injectables/NgxStorageService.html":{},"index.html":{}}}],["providing",{"_index":1129,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["public",{"_index":184,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["publish",{"_index":4692,"title":{},"body":{"index.html":{},"license.html":{}}}],["pure",{"_index":2137,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["purpose",{"_index":4714,"title":{},"body":{"index.html":{},"license.html":{}}}],["purposes",{"_index":1431,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["put",{"_index":1140,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["put(url",{"_index":1167,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["queries",{"_index":2777,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query",{"_index":2248,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["query.removeeventlistener('change",{"_index":2834,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts",{"_index":2775,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:102",{"_index":2789,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:121",{"_index":2793,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:13",{"_index":2803,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:18",{"_index":2802,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:23",{"_index":2801,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:29",{"_index":2798,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:37",{"_index":2800,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:44",{"_index":2796,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["querychangedevent",{"_index":2821,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["querychangedevent.currenttarget",{"_index":2823,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["querychangedsubject",{"_index":2784,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["queryid",{"_index":2830,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["queryidmap",{"_index":2785,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["querylist",{"_index":4350,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["querylistmap",{"_index":2786,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["queryparam",{"_index":3101,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queryparams",{"_index":3071,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queryparamshandling",{"_index":3171,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queryparamstype",{"_index":3082,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["quick",{"_index":4622,"title":{},"body":{"index.html":{}}}],["radio",{"_index":3523,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["radiocontrol",{"_index":4342,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["radiotemplate",{"_index":4361,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["random",{"_index":3122,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["range",{"_index":4063,"title":{},"body":{"classes/NgxValidators.html":{}}}],["range.validator",{"_index":4090,"title":{},"body":{"classes/NgxValidators.html":{}}}],["range.validator.ts",{"_index":4759,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["range/date",{"_index":4089,"title":{},"body":{"classes/NgxValidators.html":{},"miscellaneous/typealiases.html":{}}}],["reactiveformsmodule",{"_index":4308,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["readme",{"_index":177,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"pipes/TransformPipe.html":{}}}],["readme’s",{"_index":4639,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":300,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ready",{"_index":2150,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["real",{"_index":3382,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["really",{"_index":1646,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["reason",{"_index":1096,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["receive",{"_index":3543,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["record",{"_index":781,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nLoadingService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxTooltipService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["record[key",{"_index":3407,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["record[key].asobservable",{"_index":3408,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["record[key]?.next(undefined",{"_index":3418,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["records",{"_index":4465,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["recreate",{"_index":2639,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["redirect",{"_index":1236,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["reduce",{"_index":3154,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["reduce((previous",{"_index":2419,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["reducers",{"_index":130,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["reducers.ts",{"_index":160,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"miscellaneous/typealiases.html":{}}}],["redux",{"_index":4619,"title":{},"body":{"index.html":{}}}],["ref",{"_index":1912,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["refer",{"_index":2463,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["reference",{"_index":1434,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["refers",{"_index":3238,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["reformat",{"_index":469,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["reformat.trim",{"_index":475,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["regarding",{"_index":4650,"title":{},"body":{"index.html":{}}}],["regardless",{"_index":1058,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["region",{"_index":790,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{}}}],["register",{"_index":961,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["registercell",{"_index":3994,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registercell(index",{"_index":4008,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registerdraganddropitem",{"_index":902,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["registerdraganddropitem(item",{"_index":910,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["registered",{"_index":968,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxTreeGridDirective.html":{}}}],["registeritem",{"_index":945,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["registeritem(item",{"_index":959,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["registermediaqueries",{"_index":2787,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["registermediaqueries(...queries",{"_index":2795,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["registeronchange(fn",{"_index":4432,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["registerontouched(fn",{"_index":4436,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["registerrow",{"_index":3995,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registerrow(row",{"_index":4011,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registers",{"_index":4010,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["related",{"_index":4152,"title":{},"body":{"injectables/NgxWindowService.html":{},"index.html":{}}}],["relating",{"_index":4608,"title":{},"body":{"index.html":{}}}],["relativeto",{"_index":3165,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["reload",{"_index":2542,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["remaining",{"_index":1240,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxI18nRootService.html":{}}}],["remove",{"_index":476,"title":{},"body":{"pipes/IbanPipe.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["removecookie",{"_index":1540,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["removecookie(cookie",{"_index":1562,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["removefocus",{"_index":744,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["removeitem",{"_index":946,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["removeitem(item",{"_index":962,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["removeitem(key",{"_index":3355,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["removeonblur",{"_index":3638,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["removeonmouseout",{"_index":3602,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["removerow",{"_index":3996,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["removerow(index",{"_index":4013,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["removes",{"_index":964,"title":{},"body":{"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridDirective.html":{}}}],["removetooltip",{"_index":3639,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["removing",{"_index":2747,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["render",{"_index":1779,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["rendered",{"_index":1425,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{}}}],["renderelsetemplate",{"_index":2002,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["renderer",{"_index":1019,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["renderer2",{"_index":1075,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["rendering",{"_index":1612,"title":{},"body":{"injectables/NgxCookieService.html":{},"interfaces/TableCellTemplate.html":{}}}],["renderinitialtemplate",{"_index":1763,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["renders",{"_index":1770,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["rendertemplate",{"_index":1764,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["rendertemplate(status",{"_index":1776,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["renderthentemplate",{"_index":2003,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["reordered",{"_index":845,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["repeat(${longestrow",{"_index":1478,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["replace",{"_index":467,"title":{},"body":{"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["replace(`{{#from",{"_index":846,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["replace(`{{#to",{"_index":847,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["replacement",{"_index":3259,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replacement.innerhtml",{"_index":3264,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replacement.setattribute(key",{"_index":3263,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replaces",{"_index":322,"title":{},"body":{"directives/FocusClickDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["replacing",{"_index":3231,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replaysubject",{"_index":2799,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["repo",{"_index":4597,"title":{},"body":{"index.html":{}}}],["reposition",{"_index":3735,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["repository",{"_index":4642,"title":{},"body":{"index.html":{}}}],["represent",{"_index":680,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["represented",{"_index":3375,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["represents",{"_index":1681,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["request",{"_index":1148,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"miscellaneous/functions.html":{}}}],["requested",{"_index":2415,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{}}}],["requestedtranslations",{"_index":2384,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["requests",{"_index":2242,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["require",{"_index":2742,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["requireatleastone",{"_index":3530,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"miscellaneous/typealiases.html":{}}}],["required",{"_index":72,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["required.validator",{"_index":4084,"title":{},"body":{"classes/NgxValidators.html":{}}}],["required.validator.ts",{"_index":9,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["required/all",{"_index":4083,"title":{},"body":{"classes/NgxValidators.html":{}}}],["required/at",{"_index":8,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["required/depended",{"_index":4095,"title":{},"body":{"classes/NgxValidators.html":{}}}],["requiredfeatures",{"_index":1286,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredfeatures.every((feature",{"_index":1345,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredfeatures.some((feature",{"_index":1347,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredpermissions",{"_index":1289,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredpermissions.every((permission",{"_index":1353,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredpermissions.some((permission",{"_index":1355,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requirements.ts",{"_index":3529,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"miscellaneous/typealiases.html":{}}}],["requires",{"_index":2926,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["rerender",{"_index":4543,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["res.status",{"_index":2406,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["reset",{"_index":2152,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/TableCellTemplate.html":{},"overview.html":{}}}],["resetformonnewdata",{"_index":4378,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["resetngxtableform",{"_index":4312,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["resets",{"_index":697,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["resetsortdirection",{"_index":677,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["resize",{"_index":4181,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["resolve",{"_index":2535,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["resolver",{"_index":2529,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["resolvers",{"_index":2347,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["resources",{"_index":2405,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["respective",{"_index":4638,"title":{},"body":{"index.html":{}}}],["respectively",{"_index":3384,"title":{},"body":{"injectables/NgxStorageService.html":{},"index.html":{}}}],["respond",{"_index":2852,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["response",{"_index":1189,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["response.body",{"_index":1194,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["response.headers.get('content",{"_index":1192,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["response.user",{"_index":1328,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["responsetype",{"_index":1186,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["rest",{"_index":1645,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["restore",{"_index":2915,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["restorefocus",{"_index":2919,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["restriction",{"_index":4687,"title":{},"body":{"index.html":{},"license.html":{}}}],["result",{"_index":829,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTreeGridCellDirective.html":{},"pipes/TransformPipe.html":{}}}],["result.length",{"_index":2304,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["result.replace",{"_index":835,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["results",{"_index":88,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["resulttype",{"_index":3443,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["resulttype[key]['actions",{"_index":3449,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["resulttype[key]['selectors",{"_index":3446,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["return",{"_index":44,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["returned",{"_index":3542,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["returning",{"_index":3269,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["returns",{"_index":196,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["returntype",{"_index":4127,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["reunes",{"_index":4669,"title":{},"body":{"index.html":{}}}],["revision",{"_index":1510,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["right",{"_index":3625,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"miscellaneous/typealiases.html":{}}}],["rights",{"_index":4690,"title":{},"body":{"index.html":{},"license.html":{}}}],["role",{"_index":975,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["root",{"_index":1176,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["rootclass",{"_index":619,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["rooti18nservice",{"_index":2487,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["roottarget",{"_index":2668,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["route",{"_index":1221,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["route.types.ts",{"_index":1217,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"miscellaneous/typealiases.html":{}}}],["router",{"_index":3072,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["routerstatesnapshot",{"_index":3282,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["routes",{"_index":1218,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["row",{"_index":1471,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["row)?.focus",{"_index":3975,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["row.directive",{"_index":3956,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["rowclass",{"_index":4381,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["rowclicked",{"_index":3515,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["rowitem",{"_index":1712,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["rowkey",{"_index":1710,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["rows",{"_index":3507,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["rowsformgroup",{"_index":4339,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["rtl",{"_index":1501,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["run",{"_index":1204,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["runariachecks",{"_index":2954,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["runariachecks(options",{"_index":2971,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["runinbrowser",{"_index":4118,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["runinbrowser(action",{"_index":4125,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["running",{"_index":2143,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxModalService.html":{}}}],["rxjs",{"_index":272,"title":{},"body":{"injectables/EffectsService.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"dependencies.html":{},"index.html":{}}}],["rxjs/operators",{"_index":2310,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["sadly",{"_index":166,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["safe",{"_index":4107,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["safehtml",{"_index":3192,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["safely",{"_index":3719,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["same",{"_index":1872,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["samesite",{"_index":1487,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["sanitize",{"_index":3267,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["sanitizer",{"_index":3195,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["save",{"_index":2473,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"injectables/NgxStorageService.html":{}}}],["saved",{"_index":2804,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["saves",{"_index":2376,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["saving",{"_index":3377,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["scan",{"_index":2308,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["scan((actions",{"_index":2297,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["scramble",{"_index":3091,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambled",{"_index":3116,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams",{"_index":3076,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams(params",{"_index":3089,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams(value",{"_index":3133,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams?(params",{"_index":3173,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambler",{"_index":3120,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambler(value.sorting",{"_index":3134,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambling",{"_index":3142,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scroll",{"_index":3733,"title":{},"body":{"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["scrollingup",{"_index":4111,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrollingupsubject",{"_index":4112,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrolls",{"_index":3736,"title":{},"body":{"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["scrollstrategy",{"_index":3738,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["scrollto",{"_index":4119,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrollto(offset",{"_index":4128,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrollup",{"_index":4188,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["se",{"_index":4098,"title":{},"body":{"classes/NgxValidators.html":{}}}],["searches",{"_index":3934,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["searchquery",{"_index":3123,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["second",{"_index":1842,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["see",{"_index":38,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxStore.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["seen",{"_index":657,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["select",{"_index":98,"title":{},"body":{"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["selectable",{"_index":4372,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectablecolumn",{"_index":4405,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectablekey",{"_index":4373,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectabletype",{"_index":4374,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectall",{"_index":288,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selectchannelmessageerrors",{"_index":1374,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selectchannelmessageerrors(channelname",{"_index":1391,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selectchannelmessages",{"_index":1375,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selectchannelmessages(channelname",{"_index":1396,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selected",{"_index":753,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["selectedrow",{"_index":4346,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selecterror",{"_index":142,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selecterrorfromstore",{"_index":3452,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selecterrorfromstore(selector",{"_index":3458,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selecterrormessage",{"_index":143,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selecterrormessagefromstore",{"_index":3453,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selecterrormessagefromstore(selector",{"_index":3460,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectfromstore",{"_index":3454,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectfromstore(selector",{"_index":3462,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectid",{"_index":156,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["selection",{"_index":4518,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectloading",{"_index":141,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selectloadingfromstore",{"_index":3455,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectloadingfromstore(selector",{"_index":3465,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selector",{"_index":298,"title":{},"body":{"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["selector.selectall",{"_index":3485,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selector.selecterror",{"_index":3489,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selector.selecterrormessage",{"_index":3491,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selector.selectloading",{"_index":3487,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selectors",{"_index":131,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["selectors.channel",{"_index":4227,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["selectors.subscribercount",{"_index":4238,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["selectors.videos",{"_index":4240,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["selectrow(index",{"_index":4490,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sell",{"_index":4696,"title":{},"body":{"index.html":{},"license.html":{}}}],["send",{"_index":1151,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["sending",{"_index":3119,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sends",{"_index":1389,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["separately",{"_index":2820,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["series",{"_index":2286,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["server",{"_index":1610,"title":{},"body":{"injectables/NgxCookieService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxWindowService.html":{}}}],["serves",{"_index":2660,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["service",{"_index":769,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxWindowService.html":{}}}],["service.abstract.ts",{"_index":2229,"title":{},"body":{"classes/NgxI18nAbstractService.html":{}}}],["service.abstract.ts:2",{"_index":2230,"title":{},"body":{"classes/NgxI18nAbstractService.html":{}}}],["service.ts",{"_index":4204,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:14",{"_index":4228,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:17",{"_index":4234,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:20",{"_index":4230,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:23",{"_index":4232,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:27",{"_index":4241,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:30",{"_index":4245,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:33",{"_index":4243,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:34",{"_index":4244,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:37",{"_index":4239,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:40",{"_index":4236,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:42",{"_index":4237,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:44",{"_index":4219,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:52",{"_index":4215,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:56",{"_index":4221,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:65",{"_index":4216,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:69",{"_index":4217,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:73",{"_index":4218,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service/online.service.ts",{"_index":3057,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:10",{"_index":3064,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:15",{"_index":3063,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:20",{"_index":3061,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:25",{"_index":3059,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:51",{"_index":3060,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/storage.service.ts",{"_index":3332,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:122",{"_index":3358,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:175",{"_index":3356,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:20",{"_index":3367,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:214",{"_index":3345,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:25",{"_index":3363,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:254",{"_index":3360,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:265",{"_index":3353,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:29",{"_index":3362,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:33",{"_index":3366,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:38",{"_index":3365,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:39",{"_index":3343,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:54",{"_index":3369,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:70",{"_index":3371,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:83",{"_index":3349,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:93",{"_index":3351,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["services",{"_index":506,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxStore.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["session",{"_index":1261,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["sessionfeatures",{"_index":1338,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionfeatures.has(`${feature",{"_index":1346,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionpermissions",{"_index":1351,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionpermissions.has(permission",{"_index":1354,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionstorage",{"_index":3342,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["sessionstoragerecord",{"_index":3336,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["set",{"_index":137,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/TableCellTemplate.html":{}}}],["set([...(features",{"_index":1339,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["set([...permissions",{"_index":1352,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["set([0",{"_index":4417,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["set([index",{"_index":4462,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["set(hideheaderrowwhen",{"_index":3575,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["set(object.keys(cleanedformvalue",{"_index":62,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["set(this.data().map((_",{"_index":4415,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["setactive",{"_index":3805,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["setactive(isactive",{"_index":3811,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["setariabusytag",{"_index":1765,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setariabusytag(isloading",{"_index":1780,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setarialivetag",{"_index":1766,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setarialivetag(value",{"_index":1784,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setavailablelanguages",{"_index":2434,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setavailablelanguages(languages",{"_index":2443,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setcompleted",{"_index":4293,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["setcompleted(payload",{"_index":4290,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["setcookie",{"_index":1541,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setcookie(cookie",{"_index":1564,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setcurrentlanguage",{"_index":2435,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setcurrentlanguage(language",{"_index":2446,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setdata",{"_index":4294,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["setdata(payload",{"_index":4285,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["setdatainroute",{"_index":3077,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["setdatainroute(data",{"_index":3093,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["setdisabledstate?(isdisabled",{"_index":4439,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["setdraganddropdescription",{"_index":777,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["setdraganddropdescription(parent",{"_index":791,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["setdraganddropdescription(this.elementref.nativeelement",{"_index":930,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["setfocus",{"_index":745,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["setfocus(hasfocus",{"_index":1053,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["setformerror",{"_index":25,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setformerror(control",{"_index":71,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setformerror(group.get(key",{"_index":85,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setglobalfeatures",{"_index":1255,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["setglobalfeatures(features",{"_index":1290,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["setitem",{"_index":3320,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["setitem(key",{"_index":3357,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["setlanguage",{"_index":2488,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["setmessage",{"_index":778,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["setmessage(message",{"_index":799,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["sets",{"_index":703,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["setsortdirection",{"_index":678,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["setsortdirection(direction",{"_index":700,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["setter",{"_index":4379,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["settimeout",{"_index":978,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{}}}],["setting",{"_index":1883,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["settings",{"_index":1572,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxImageMarkerService.html":{}}}],["settooltipevent",{"_index":3678,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["settooltipevent(event",{"_index":3682,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["setup",{"_index":54,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAbstractTableCellDirective.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{}}}],["setupcookieshandler",{"_index":1542,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setupcookieshandler(categories",{"_index":1567,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setupstorage",{"_index":3341,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["setupstorage(storage",{"_index":3359,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["setwitherror",{"_index":4282,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["several",{"_index":4151,"title":{},"body":{"injectables/NgxWindowService.html":{},"index.html":{}}}],["shall",{"_index":4702,"title":{},"body":{"index.html":{},"license.html":{}}}],["share",{"_index":2626,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["shared",{"_index":2031,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sharereplay",{"_index":2309,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["shouldbeauthenticated",{"_index":1234,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["shouldhaveallfeatures",{"_index":1227,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFeatureDirective.html":{}}}],["shouldhaveallpermissions",{"_index":1232,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["shouldhavefeature",{"_index":2073,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["shouldhavepermission",{"_index":2183,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["shouldn't",{"_index":3092,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["shouldrender",{"_index":2112,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["shouldshow",{"_index":1904,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["show",{"_index":1462,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["showdetailrow",{"_index":3505,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["showdetailrowoption",{"_index":3520,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["showed",{"_index":3572,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["showinactive",{"_index":1440,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["showing",{"_index":3774,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["showmodal",{"_index":1543,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["shown",{"_index":1616,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["showonfocus",{"_index":3640,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["showonmouseenter",{"_index":3603,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["showopenrowstate",{"_index":3509,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["showselectedopenrow",{"_index":3513,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["showtooltip",{"_index":3641,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["showtooltip(tooltip",{"_index":3685,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["showwhen",{"_index":1882,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}}}],["side",{"_index":1611,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxWindowService.html":{}}}],["sign",{"_index":1300,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signal",{"_index":659,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["signal(false",{"_index":1066,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["signal(undefined",{"_index":4328,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["signals",{"_index":4335,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["signed",{"_index":1278,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"miscellaneous/typealiases.html":{}}}],["signin",{"_index":1256,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signin(signindata",{"_index":1294,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signindata",{"_index":1299,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signindatatype",{"_index":1295,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signing",{"_index":1324,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signinuser",{"_index":1257,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signinuser(signindata",{"_index":1301,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signout",{"_index":1258,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signout(signoutdatatype",{"_index":1303,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutdatatype",{"_index":1304,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutresponsetype",{"_index":1323,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutuser",{"_index":1259,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutuser(signoutdatatype",{"_index":1308,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signs",{"_index":1297,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["similar",{"_index":232,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["simplechangehaschanged",{"_index":2624,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.canedit",{"_index":2635,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.currentzoomlevel",{"_index":2637,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.markertypes",{"_index":2636,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.startstate",{"_index":2634,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.zoomlevels",{"_index":2638,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simply",{"_index":3163,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["single",{"_index":1985,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["situations",{"_index":3117,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{}}}],["size",{"_index":1465,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["size.pipe.ts",{"_index":1455,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["size.pipe.ts:17",{"_index":1459,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["size/item",{"_index":1454,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["slice",{"_index":151,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["slice(0",{"_index":1987,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["slicekey",{"_index":3437,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["slices",{"_index":3433,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["software",{"_index":4684,"title":{},"body":{"index.html":{},"license.html":{}}}],["something",{"_index":2401,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxWindowService.html":{}}}],["somethinghappened",{"_index":4166,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["somethinghascompleted",{"_index":448,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["sometimes",{"_index":3115,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["someuniqueid",{"_index":3234,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["somewhere",{"_index":4344,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sort",{"_index":673,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["sort.pipe.ts",{"_index":1112,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["sort.pipe.ts:12",{"_index":1114,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["sort/aria",{"_index":1111,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["sortable",{"_index":674,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["sortableinput",{"_index":4472,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sortabletablecellrecord",{"_index":4330,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sortdirection",{"_index":675,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["sorted",{"_index":4368,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sorting",{"_index":695,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["sorttemplate",{"_index":4363,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"index.html":{}}}],["sources",{"_index":3723,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["space",{"_index":474,"title":{},"body":{"pipes/IbanPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["spaces",{"_index":468,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["specific",{"_index":75,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["specifically",{"_index":3008,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["specstoreassets",{"_index":4192,"title":{"interfaces/SpecStoreAssets.html":{}},"body":{"interfaces/SpecStoreAssets.html":{}}}],["specstoreservice",{"_index":4203,"title":{"injectables/SpecStoreService.html":{}},"body":{"injectables/SpecStoreService.html":{}}}],["ssr",{"_index":3218,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["standalone",{"_index":182,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["start",{"_index":2559,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{},"index.html":{}}}],["startcontrolkey",{"_index":4054,"title":{},"body":{"classes/NgxValidators.html":{}}}],["started",{"_index":4594,"title":{"index.html":{},"license.html":{}},"body":{}}],["started.html",{"_index":1571,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["startstate",{"_index":2588,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["starttour",{"_index":489,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["startwith",{"_index":1608,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxModalService.html":{}}}],["startwith(cookieconsent.getcookie('data",{"_index":1643,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["startwith(undefined",{"_index":3002,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["state",{"_index":392,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/typealiases.html":{}}}],["state.service.ts",{"_index":4276,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["state.service.ts:31",{"_index":4295,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.service.ts:36",{"_index":4298,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.service.ts:44",{"_index":4297,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.service.ts:50",{"_index":4296,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.ts",{"_index":4762,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stateinterface",{"_index":115,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["stateupdated",{"_index":2589,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["statewrapper",{"_index":3451,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["static",{"_index":1450,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"modules/NgxI18nModule.html":{},"directives/NgxTableCellDirective.html":{},"classes/NgxValidators.html":{},"miscellaneous/typealiases.html":{}}}],["status",{"_index":1274,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxOnlineService.html":{}}}],["status.types.ts",{"_index":4773,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stay",{"_index":3112,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["step",{"_index":521,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["step(card",{"_index":3798,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["step.component.mock.ts",{"_index":613,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["step.component.ts",{"_index":3855,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:103",{"_index":3871,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:105",{"_index":3867,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:112",{"_index":3866,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:33",{"_index":3872,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:38",{"_index":3865,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:45",{"_index":3864,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:53",{"_index":3861,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:58",{"_index":3870,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:63",{"_index":3869,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:68",{"_index":3863,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:73",{"_index":3858,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:78",{"_index":3859,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:83",{"_index":3857,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:88",{"_index":3860,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:93",{"_index":3862,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:98",{"_index":3868,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step/tour",{"_index":3854,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["stepclass",{"_index":620,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["steps",{"_index":632,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["steptitle",{"_index":3881,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["still",{"_index":2986,"title":{},"body":{"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["stop",{"_index":3961,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["storage",{"_index":2442,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["storage.clear",{"_index":3419,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storage.removeitem(key",{"_index":3417,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storage.setitem(key",{"_index":3412,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storage[key",{"_index":3410,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageevents",{"_index":3337,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageeventsubject",{"_index":3338,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice",{"_index":3389,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice.localstorage.setitem('hello",{"_index":3390,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice.sessionstorage.setitem('hello",{"_index":3391,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice.storageevent$.subscribe(console.log",{"_index":3392,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["store",{"_index":274,"title":{},"body":{"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"index.html":{}}}],["store.spec",{"_index":278,"title":{},"body":{"injectables/EffectsService.html":{}}}],["store.ts",{"_index":112,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["storeactions",{"_index":4802,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["storeassetsoptions",{"_index":3438,"title":{"interfaces/StoreAssetsOptions.html":{}},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["storeauthenticationresponse",{"_index":1260,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["storeauthenticationresponse(response",{"_index":1310,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["stored",{"_index":1307,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["storeeffects",{"_index":4260,"title":{"injectables/StoreEffects.html":{}},"body":{"injectables/StoreEffects.html":{}}}],["storeflowasset",{"_index":4834,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["storeflowassets",{"_index":3441,"title":{},"body":{"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/typealiases.html":{}}}],["storeitem",{"_index":3464,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["stores",{"_index":1298,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["storeselectors",{"_index":4804,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["storeservice",{"_index":3128,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["storeslice",{"_index":4200,"title":{},"body":{"interfaces/SpecStoreAssets.html":{}}}],["storestate",{"_index":3467,"title":{"interfaces/StoreState.html":{}},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/typealiases.html":{}}}],["storestatedata",{"_index":4805,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["storestateerror",{"_index":4806,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["storestateerrormessage",{"_index":4807,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["storestateloading",{"_index":4808,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["storestateservice",{"_index":4280,"title":{"injectables/StoreStateService.html":{}},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["strategy",{"_index":3734,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["streams",{"_index":2828,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["stress",{"_index":3240,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["strict",{"_index":1490,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["string",{"_index":152,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"pipes/NgxTableSortIconPipe.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["string(date.now",{"_index":2253,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["stringifiedqueryparamstype",{"_index":3137,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"miscellaneous/typealiases.html":{}}}],["stringify",{"_index":3168,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["strings",{"_index":1341,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["stringsignal",{"_index":4810,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stringtype",{"_index":2886,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["string}{{#from}}${string}{{#item}}${string}{{#to}}${string",{"_index":872,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#from}}${string}{{#to}}${string}{{#item}}${string",{"_index":873,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#item}}${string",{"_index":874,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#item}}${string}{{#from}}${string}{{#to}}${string",{"_index":869,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#item}}${string}{{#to}}${string}{{#from}}${string",{"_index":868,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#to}}${string}{{#from}}${string}{{#item}}${string",{"_index":871,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#to}}${string}{{#item}}${string}{{#from}}${string",{"_index":870,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{id}}${string",{"_index":3180,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"miscellaneous/typealiases.html":{}}}],["structural",{"_index":1993,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["studio",{"_index":4675,"title":{},"body":{"index.html":{},"license.html":{}}}],["styleurl",{"_index":1013,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{}}}],["styleurls",{"_index":4315,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["styling",{"_index":1460,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["sub",{"_index":3432,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["subject",{"_index":412,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{},"license.html":{}}}],["subject.complete",{"_index":3422,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subject.getvalue",{"_index":3411,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subject.next(item",{"_index":3414,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subject.next(undefined",{"_index":3421,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subjects",{"_index":3347,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["sublicense",{"_index":4694,"title":{},"body":{"index.html":{},"license.html":{}}}],["subscribe",{"_index":513,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["subscribe(observable",{"_index":2120,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["subscribed",{"_index":2781,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["subscribercount",{"_index":4195,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["subscribes",{"_index":454,"title":{},"body":{"pipes/HasObserversPipe.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["subscription",{"_index":2008,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["subscriptions",{"_index":2144,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxMediaQueryService.html":{}}}],["subsequent",{"_index":386,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["subslice",{"_index":3439,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["substantial",{"_index":4703,"title":{},"body":{"index.html":{},"license.html":{}}}],["substrings",{"_index":832,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["succeeded",{"_index":473,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["such",{"_index":2389,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["summary",{"_index":1044,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["summaryelement",{"_index":1020,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["super(route",{"_index":3130,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["super(selectors",{"_index":4281,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["supported",{"_index":4334,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sure",{"_index":2525,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["survey.component.html",{"_index":3125,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["switch",{"_index":722,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["switchmap",{"_index":1321,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["switchmap((isauthenticated",{"_index":1357,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sync",{"_index":3108,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts",{"_index":3070,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"miscellaneous/typealiases.html":{}}}],["sync.component.abstract.ts:100",{"_index":3087,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:110",{"_index":3079,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:119",{"_index":3094,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:152",{"_index":3085,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:161",{"_index":3083,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:168",{"_index":3090,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:17",{"_index":3105,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:174",{"_index":3097,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:18",{"_index":3107,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:20",{"_index":3099,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:25",{"_index":3100,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:30",{"_index":3103,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:33",{"_index":3088,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync/query",{"_index":3069,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"miscellaneous/typealiases.html":{}}}],["tab",{"_index":3306,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["tabindex",{"_index":331,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxTooltipDirective.html":{}}}],["table",{"_index":535,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"miscellaneous/typealiases.html":{}}}],["table'},{'name",{"_index":547,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["table.component.html",{"_index":4314,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["table.component.scss",{"_index":4316,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["table.component.ts",{"_index":4301,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecelltemplate",{"_index":4299,"title":{"interfaces/TableCellTemplate.html":{}},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecelltemplaterecord",{"_index":4329,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecelltemplates",{"_index":4351,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecolumns",{"_index":4347,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecypressrecord",{"_index":4332,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tables",{"_index":3555,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["tableviewcomponent",{"_index":3126,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["tag",{"_index":682,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["tag.directive.ts",{"_index":1698,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tag.directive.ts:18",{"_index":1703,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tag.directive.ts:25",{"_index":1700,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tag/cypress",{"_index":1697,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tags",{"_index":4477,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tags.token.ts",{"_index":4754,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tailored",{"_index":1156,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["take",{"_index":812,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{}}}],["take(1",{"_index":827,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["taken",{"_index":3793,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["takes",{"_index":2779,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["takeuntil",{"_index":1811,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["takeuntil(this.destroyed",{"_index":2054,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["takeuntil(this.hasmodalsubject.pipe(filter((hasmodal",{"_index":3017,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["takeuntil(this.markerdestroyedsubject",{"_index":2656,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["takeuntil(this.ondestroy",{"_index":1956,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["takeuntil(this.ondestroysubject",{"_index":1820,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["takeuntil(this.ondestroysubject.asobservable",{"_index":1848,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["taking",{"_index":3199,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["tap",{"_index":813,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["tap(([index",{"_index":3847,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["tap(([previous",{"_index":3712,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tap((action",{"_index":3007,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["tap((currentlanguage",{"_index":828,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["tap((data",{"_index":3147,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["tap((hascookie",{"_index":2051,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["tap((hasfeature",{"_index":2111,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["tap((haspermission",{"_index":2211,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["tap((isauthenticated",{"_index":2772,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["tap((language",{"_index":851,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["tap((online",{"_index":1816,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["tap((response",{"_index":1330,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["tap((selected",{"_index":4525,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tap((translations",{"_index":2414,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["tap((value",{"_index":2149,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["target",{"_index":3208,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["target.innerhtml",{"_index":3265,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["target.replacewith(replacement",{"_index":3266,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["targetrowindex",{"_index":1441,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["td",{"_index":3980,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["technologies",{"_index":774,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["template",{"_index":509,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"miscellaneous/typealiases.html":{}}}],["template.component.ts",{"_index":3553,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["template.component.ts:12",{"_index":3557,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["template.component.ts:13",{"_index":3561,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["template.component.ts:14",{"_index":3598,"title":{},"body":{"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["template.component.ts:17",{"_index":3559,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["template.component.ts:18",{"_index":3563,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["template.component.ts:22",{"_index":3556,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["template.component.ts:23",{"_index":3562,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["templateref",{"_index":706,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["templaterefs",{"_index":2027,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["templates",{"_index":709,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["templates/columns",{"_index":4511,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["templateurl",{"_index":449,"title":{},"body":{"pipes/HasObserversPipe.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["test",{"_index":507,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/SpecStoreService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["test.component.ts",{"_index":4530,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["test.component.ts:41",{"_index":4531,"title":{},"body":{"components/TestDisplayContentComponent.html":{}}}],["test.component.ts:62",{"_index":4536,"title":{},"body":{"components/TestOverrideDisplayContentComponent.html":{}}}],["test.component.ts:63",{"_index":4537,"title":{},"body":{"components/TestOverrideDisplayContentComponent.html":{}}}],["testdisplaycontentcomponent",{"_index":548,"title":{"components/TestDisplayContentComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testerrorcomponent",{"_index":550,"title":{"components/TestErrorComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testerrordatacomponent",{"_index":552,"title":{"components/TestErrorDataComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testing",{"_index":2686,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["testloadingcomponent",{"_index":553,"title":{"components/TestLoadingComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testofflinecomponent",{"_index":555,"title":{"components/TestOfflineComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testoverridedisplaycontentcomponent",{"_index":557,"title":{"components/TestOverrideDisplayContentComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["tests",{"_index":2099,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxImageMarkerService.html":{}}}],["text",{"_index":852,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"pipes/TransformPipe.html":{}}}],["text/html",{"_index":3250,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["that's",{"_index":2482,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["thentemplateref",{"_index":2000,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["thenviewref",{"_index":2074,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["there's",{"_index":1107,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["therefor",{"_index":2741,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["they're",{"_index":2996,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["things",{"_index":3207,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.abstractcontrol",{"_index":1943,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.dirty",{"_index":1952,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.invalid",{"_index":1950,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.statuschanges.pipe(startwith(this.abstractcontrol.status",{"_index":1949,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.valuechanges.pipe(startwith(this.abstractcontrol.value",{"_index":1947,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.accessors",{"_index":421,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["this.actions",{"_index":4503,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.actions$.pipe",{"_index":4267,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["this.activetooltip",{"_index":3716,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.allowbeforeunloadhandler",{"_index":3311,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.allowmultipleopenrows",{"_index":4460,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ariadescribedby",{"_index":2867,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["this.arialabelledby",{"_index":2866,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["this.authenticationresponsesubject.asobservable",{"_index":1326,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.authenticationresponsesubject.next(response",{"_index":1325,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.authenticationservice",{"_index":2109,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["this.authenticationservice.haspermission(converttoarray(permission",{"_index":2225,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["this.authenticationservice.isauthenticated",{"_index":2771,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.authenticationstatussubject.next('signed",{"_index":1331,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.authenticationstatussubject.pipe",{"_index":1271,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.availablelanguagessubject",{"_index":2448,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.availablelanguagessubject.getvalue().includes(language",{"_index":2481,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.availablelanguagessubject.next(languages",{"_index":2480,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.availablelanguagessubject.next(this.configuration.availablelanguages",{"_index":2469,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.baseurl",{"_index":1179,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.baseurl}/${url",{"_index":1180,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.broadcastchannel[channelname",{"_index":1412,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["this.broadcastchannel[channelname].close",{"_index":1415,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["this.broadcastchannel[channelname].postmessage(message",{"_index":1419,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["this.canedit",{"_index":2650,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.cdref",{"_index":2138,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["this.cdref.detectchanges",{"_index":1092,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["this.changedetectorref",{"_index":2142,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["this.changedetectorref.markforcheck",{"_index":2151,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["this.channel",{"_index":4253,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.cleardata",{"_index":3161,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.clearstorage(localstorage",{"_index":3404,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.clearstorage(sessionstorage",{"_index":3405,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.close(options.onclose",{"_index":3013,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.close.emit",{"_index":2857,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["this.column",{"_index":728,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.columns",{"_index":4406,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.component",{"_index":2058,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.componentref",{"_index":1959,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["this.componentref.destroy",{"_index":1958,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["this.componentref.instance",{"_index":1962,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.componentref.setinput",{"_index":1964,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.componentref.setinput('cookies",{"_index":2059,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.conditions",{"_index":1861,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.conditions.error",{"_index":1838,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.conditions.loading",{"_index":1834,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.conditions.offline",{"_index":1831,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.config.cachebust",{"_index":2395,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.config.component",{"_index":1953,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.config.errors[key",{"_index":1982,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.config.show",{"_index":1980,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.config.showwhen",{"_index":1951,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.configuration.component",{"_index":3748,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.configuration.components.error",{"_index":1840,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.components.loading",{"_index":1836,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.components.offline",{"_index":1833,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.defaultlanguage",{"_index":2466,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.configuration.defaultposition",{"_index":3730,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.configuration.hidewhennotemplateprovided",{"_index":1858,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.languagerouteparam",{"_index":2468,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.configuration.listentoonlinestatus",{"_index":1814,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration?.modals?.[options.type",{"_index":2993,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.configuration?.modals[options.type",{"_index":3054,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.configuration[item.elementid",{"_index":3256,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.containers().find((container",{"_index":927,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.control",{"_index":1940,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.cookies",{"_index":2035,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.cookies.map((cookie",{"_index":2043,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.cookieschanged$.pipe",{"_index":1642,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookieschangedsubject.asobservable",{"_index":1575,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookieschangedsubject.next(cookieconsent.getcookie('data",{"_index":1653,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentchanged$.pipe(startwith(undefined",{"_index":1635,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentchangedsubject.asobservable",{"_index":1579,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentchangedsubject.next(event",{"_index":1625,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsented$.pipe(startwith(undefined",{"_index":1634,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentedsubject.asobservable",{"_index":1587,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentedsubject.next(event",{"_index":1622,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.createimagemakeredit(id",{"_index":2690,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.createmarker",{"_index":2630,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.createmarkerclickedlistener(marker",{"_index":2699,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.createmarkervaluechanges(marker",{"_index":2706,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.createmodalcomponent(options",{"_index":2998,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.createreadonlyimagemarker(id",{"_index":2691,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.currentlanguage",{"_index":821,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxI18nRootService.html":{}}}],["this.currentlanguagesubject.asobservable",{"_index":2455,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.currentlanguagesubject.getvalue",{"_index":2470,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.currentlanguagesubject.next(newlanguage",{"_index":2477,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.currentmarker",{"_index":2631,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentmarker.close",{"_index":2641,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentmarker.mode",{"_index":2653,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentmarker.valuechanges",{"_index":2654,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentscrollposition",{"_index":4160,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.currentscrollpositionsubject$.asobservable",{"_index":4132,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.currentsortingevent.set(this.currentsorting",{"_index":4388,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.currentzoomlevel",{"_index":2645,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.custommessages",{"_index":863,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.cypresstag",{"_index":1702,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["this.data",{"_index":4394,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data().length",{"_index":4416,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data()?.length",{"_index":4410,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data()[index][selectablekey",{"_index":4492,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data.length",{"_index":4458,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.datasourcesubject",{"_index":491,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["this.defaultlanguage",{"_index":2465,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.defaultrowopen",{"_index":4391,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.definedcolumns.set",{"_index":4504,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.description",{"_index":931,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.destroyed",{"_index":2041,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.destroyed$.complete",{"_index":424,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["this.destroyed$.next",{"_index":2055,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.destroyed$.next(null",{"_index":4528,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.destroyed$.next(undefined",{"_index":423,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["this.destroyedsubject$.asobservable",{"_index":3308,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.destroyedsubject$.complete",{"_index":3315,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.destroyedsubject$.next(undefined",{"_index":3314,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.destroyedsubject.complete",{"_index":1006,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.destroyedsubject.next",{"_index":1005,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.detailrowtemplate",{"_index":4457,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.detailselement",{"_index":1097,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.dialogservice.closeall",{"_index":3020,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.dialogservice.open(component",{"_index":3024,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.disabled",{"_index":354,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{}}}],["this.displaycontentconfiguration",{"_index":1823,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.dispose",{"_index":2039,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.document",{"_index":4164,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.document.addeventlistener('scroll",{"_index":4178,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.document.defaultview",{"_index":4177,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.draganddropservice",{"_index":929,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.editabletablecellrecord.set",{"_index":4469,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.editabletablecellrecord.update((value",{"_index":4479,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.effectsservice.fetchchannel",{"_index":4269,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["this.effectsservice.fetchvideos",{"_index":4272,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["this.elementref",{"_index":3669,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.elementref.nativeelement",{"_index":2649,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{}}}],["this.elementref.nativeelement.children",{"_index":3977,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.elementref.nativeelement.focus",{"_index":2175,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["this.elementref.nativeelement.getattribute('id",{"_index":3821,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.elementref.nativeelement.parentelement",{"_index":1863,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.elementref.nativeelement.parentelement?.setattribute('aria",{"_index":1873,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.elementref.nativeelement.parentnode",{"_index":1978,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.elementref.nativeelement.setattribute('id",{"_index":3824,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.elsetemplateref",{"_index":2106,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.elseviewref",{"_index":2108,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.emitvalueonsingleitem",{"_index":4409,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.errorcomponent",{"_index":1957,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.errorselement",{"_index":1968,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.feature",{"_index":2104,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.findfocusableelement",{"_index":3973,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.firstcookiesconsentedsubject.asobservable",{"_index":1595,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.firstcookiesconsentedsubject.next(event",{"_index":1620,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.focusclick.emit",{"_index":360,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["this.focusclick.emit(event",{"_index":355,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["this.form",{"_index":3144,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.form.reset",{"_index":3162,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.form.setvalue(value",{"_index":3160,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.form.valuechanges",{"_index":3146,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.formgenerated",{"_index":4396,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.formgenerated.set(true",{"_index":4399,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.formgroupdirective",{"_index":1944,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.formgroupdirective.form.get(control",{"_index":1945,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.formnamedirective?.control.get(control",{"_index":1946,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.getauthenticationresponse().pipe",{"_index":1327,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.getcookie(cookie",{"_index":1644,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.geterrors(this.abstractcontrol.errors",{"_index":1963,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.geterrors(this.abstractcontrol.errors).errors.join",{"_index":1975,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.getitem(key",{"_index":3400,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.getitemobservable(key",{"_index":3401,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.getnewlanguage(language",{"_index":2472,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.getrow(0",{"_index":4024,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.getrow(index)?.registercell(cell",{"_index":4028,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.getrow(this.rows.length",{"_index":4025,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.getsession().pipe",{"_index":1350,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.getvalue",{"_index":3042,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(configuration?.data",{"_index":3049,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(configuration?.hasbackdrop",{"_index":3038,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(configuration?.panelclass",{"_index":3040,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(undefined",{"_index":3032,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.globalfeaturessubject.asobservable()]).pipe",{"_index":1336,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.globalfeaturessubject.next(features",{"_index":1348,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.handleaccessorsaction",{"_index":419,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["this.handlecomponentrender(shouldshow",{"_index":1955,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.handlecontentscroll.bind(this",{"_index":4179,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.handlecurrentsort(this.currentsorting",{"_index":4389,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlecurrentsort(this.currentsortingevent",{"_index":4483,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handledatachanges",{"_index":3149,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.handledatachanges(data",{"_index":3150,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.handlenocomponentflow(shouldshow",{"_index":1954,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.handlerowclicked(this.data()[0",{"_index":4412,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlerowclicked(this.data()[openedindex",{"_index":4393,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlerowcolumns",{"_index":4408,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlerowstate(index",{"_index":4453,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handletablecelltemplates",{"_index":4512,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handleurl(url",{"_index":1183,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.handlewhenfocussed",{"_index":1084,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["this.hascookie",{"_index":2034,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.hascookieelse",{"_index":2038,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.hasdocument",{"_index":4176,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.hasfeature",{"_index":2147,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["this.hasfocus",{"_index":1108,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["this.hasfocus.set(hasfocus",{"_index":1094,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.hasfootertemplates.set",{"_index":4480,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.hasmodalsubject.asobservable",{"_index":2978,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.hasmodalsubject.next(false",{"_index":3021,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.hasmodalsubject.next(true",{"_index":2992,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.hasmodalsubject.value",{"_index":2987,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.haspermission",{"_index":2226,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["this.hasrequireddescription(options",{"_index":3022,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.headercontrol.disable",{"_index":4441,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.enable",{"_index":4444,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.patchvalue(false",{"_index":4430,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.patchvalue(true",{"_index":4431,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.setvalue",{"_index":4516,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.valuechanges",{"_index":4524,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.httpclient",{"_index":1185,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.delete",{"_index":1195,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.get",{"_index":1182,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.get('test",{"_index":4250,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.httpclient.patch",{"_index":1199,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.post",{"_index":1196,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.put",{"_index":1198,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.i18nloadingservice.dispatchtranslationloaderaction",{"_index":2541,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["this.i18nservice.initi18n(this.i18nservice.currentlanguage).pipe",{"_index":2543,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["this.id",{"_index":3621,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["this.imageelement",{"_index":2632,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.imageelement().nativeelement",{"_index":2648,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.imagemarkerservice.createimagemarker",{"_index":2647,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.initform",{"_index":3145,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.injector",{"_index":3221,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.isactive",{"_index":3820,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.isauthenticated$.pipe",{"_index":1356,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.isbrowser",{"_index":4175,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.isdirty",{"_index":3312,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.isopen.set(isopen",{"_index":1088,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.itemregisteredsubject.next",{"_index":988,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.itemregisteredsubject.pipe",{"_index":977,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items",{"_index":993,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.findindex",{"_index":990,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.findindex((item",{"_index":1003,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.foreach((item",{"_index":982,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.length",{"_index":1000,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.push(item",{"_index":989,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.slice(0",{"_index":994,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.slice(index",{"_index":995,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items[direction",{"_index":999,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items[id].markasactive",{"_index":926,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.items[index]?.updateaccordionitemstate(true",{"_index":987,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items[item.itemid",{"_index":932,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.languagerouteparam",{"_index":2467,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.liveregionservice.announce(result",{"_index":848,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.localstoragerecord",{"_index":3399,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.markerclicked.emit(value",{"_index":2657,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.markerdestroyedsubject.complete",{"_index":2644,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.markerdestroyedsubject.next",{"_index":2643,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.markers[id",{"_index":2697,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.markertypes",{"_index":2652,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.mediaquerylistenermap.clear",{"_index":2840,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.mediaquerylistenermap.get(id",{"_index":2835,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.mediaquerylistenermap.set(id",{"_index":2825,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.messagerecord[currentlanguage].container",{"_index":841,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.messagerecord[currentlanguage].item",{"_index":837,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.messagerecord[currentlanguage][type",{"_index":830,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.messagerecord[language].description",{"_index":853,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.modalvisiblesubject.asobservable",{"_index":1601,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.modalvisiblesubject.next(false",{"_index":1631,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.modalvisiblesubject.next(true",{"_index":1628,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.movetocell('first",{"_index":3969,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.movetocell('last",{"_index":3970,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.movetocell(ngxtreegridcell",{"_index":3967,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.movetocell(this.ngxtreegridcell",{"_index":3968,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.ngxcookieservice.hasacceptedcategory(cookie.category",{"_index":2045,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.ngxcookieservice.hasacceptedservice(cookie.category",{"_index":2048,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.ngxhasfeature",{"_index":2105,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhasfeatureelse",{"_index":2107,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhasfeatureshouldhaveallfeatures",{"_index":2101,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhasfeatureshouldhavefeature",{"_index":2103,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhaspermission",{"_index":2208,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxhaspermissionelse",{"_index":2209,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxhaspermissionshouldhaveallpermissions",{"_index":2204,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxhaspermissionshouldhavepermission",{"_index":2206,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxisauthenticated",{"_index":2769,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.ngxisauthenticatedelse",{"_index":2770,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.ngxtableconfiguration?.allowmultiplerowsopen",{"_index":4371,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.emitvalueonsingleitem",{"_index":4385,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.hideheaderwhen",{"_index":4387,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.highlightkey",{"_index":4382,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.ngxtableclass",{"_index":4319,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.showdetailrow",{"_index":4384,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.showopenrowstate",{"_index":4383,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.showselectedopenrow",{"_index":4380,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtooltip",{"_index":3666,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipcomponent",{"_index":3668,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipdisabled",{"_index":3664,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipid",{"_index":3670,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipposition",{"_index":3667,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipservice.settooltipevent",{"_index":3620,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["this.ngxtourshowwhen",{"_index":3843,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.ngxtourshowwhenelse",{"_index":3844,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.ngxtreegrid",{"_index":4022,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.ngxtreegridcell",{"_index":3965,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.ngxtreegridcellrow",{"_index":3982,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.onblur",{"_index":2174,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["this.onchanged",{"_index":4433,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.onchanged(handlengxtablevaluechanges(value",{"_index":4519,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.onchanged(value",{"_index":4521,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ondestroysubject$.complete",{"_index":1937,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.ondestroysubject$.next",{"_index":1936,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.ondestroysubject.complete",{"_index":1850,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["this.ondestroysubject.next",{"_index":1849,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["this.onfocus",{"_index":2173,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["this.onlineservice.online",{"_index":1815,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.onlinesubject.asobservable",{"_index":3062,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["this.onlinesubject.next(false",{"_index":3067,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["this.onlinesubject.next(true",{"_index":3066,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["this.ontouch",{"_index":4437,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.open",{"_index":976,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.openrows",{"_index":4414,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.openrows.add(index",{"_index":4459,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.openrows.delete(index",{"_index":4461,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.openrows.has(index",{"_index":4454,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.overlaypositionbuilder",{"_index":3741,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref",{"_index":3731,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref.attach",{"_index":3750,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref.detach",{"_index":3755,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref.updatepositionstrategy(positionstrategy",{"_index":3744,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref?.hasattached",{"_index":3715,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayservice.create",{"_index":3732,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayservice.scrollstrategies.reposition",{"_index":3739,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overrideconfiguration",{"_index":1822,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.overrideconfiguration[status]?.data",{"_index":1857,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.overrideconfiguration[status]?.template",{"_index":1851,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.parent.getrow(ngxtreegridcellrow",{"_index":3985,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.parent.movefocus(this.id",{"_index":1087,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.parent.registeritem(this",{"_index":1095,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.parent.removeitem(this",{"_index":1106,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.parent?.registercell(ngxtreegridcellrow",{"_index":3983,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.parsevalue(storage.getitem(key",{"_index":3406,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.permission",{"_index":2207,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.position",{"_index":3876,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.querychangedsubject.asobservable().pipe",{"_index":2827,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.querychangedsubject.complete",{"_index":2837,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.querychangedsubject.next(id",{"_index":2819,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.querychangedsubject.next(null",{"_index":2836,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.queryidmap.get",{"_index":2807,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.queryidmap.get(id",{"_index":2806,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.queryidmap.has(id",{"_index":2826,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.queryidmap.set(id",{"_index":2814,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.queryidmap].find",{"_index":2811,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.queryidmap].some(([_",{"_index":2809,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.querylistmap",{"_index":2833,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.querylistmap.clear",{"_index":2839,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.querylistmap.get(id).matches",{"_index":2831,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.querylistmap.set(id",{"_index":2818,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.queryparams",{"_index":3153,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.radiocontrol.disable",{"_index":4442,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.radiocontrol.enable",{"_index":4445,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.radiocontrol.patchvalue(value",{"_index":4423,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.radiocontrol.valuechanges",{"_index":4520,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.removeitem(key",{"_index":3402,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.removetooltip",{"_index":3662,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["this.renderelsetemplate",{"_index":2053,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.renderer.createelement('p",{"_index":1971,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.insertbefore",{"_index":1977,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.listen(detailselement.nativeelement",{"_index":1102,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.renderer.nextsibling(this.elementref.nativeelement",{"_index":1979,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.removechild(this.elementref.nativeelement.parentnode",{"_index":1969,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.setattribute(this.errorselement",{"_index":1972,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.setproperty",{"_index":1973,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderinitialtemplate",{"_index":1841,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.rendertemplate('error",{"_index":1839,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.rendertemplate('loading",{"_index":1835,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.rendertemplate('offline",{"_index":1832,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.renderthentemplate",{"_index":2052,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.resetformonnewdata",{"_index":4401,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.role",{"_index":4029,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rootclass",{"_index":3877,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.rooti18nservice.currentlanguage",{"_index":2514,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.rooti18nservice.setcurrentlanguage(language",{"_index":2517,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.route",{"_index":3102,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.router.navigate",{"_index":3164,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.row",{"_index":3984,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.row.getcell(cell",{"_index":3974,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.rowclicked.emit(row",{"_index":4447,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rows",{"_index":4019,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows.length",{"_index":4027,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows.push(row",{"_index":4018,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows.slice(0",{"_index":4020,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows[direction",{"_index":4026,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows[index",{"_index":4023,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rowsformgroup",{"_index":4400,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.disable",{"_index":4440,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.enable",{"_index":4443,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.patchvalue",{"_index":4526,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.patchvalue(writengxtablevalue(value",{"_index":4426,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.reset",{"_index":4424,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.valuechanges",{"_index":4513,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.runariachecks(options",{"_index":2997,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.sanitizer.bypasssecuritytrusthtml(body.documentelement.innerhtml",{"_index":3270,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.scrambleparams",{"_index":3139,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.scrambleparams(data",{"_index":3167,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.scrollingup",{"_index":4158,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.scrollingupsubject$.asobservable",{"_index":4140,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.scrollingupsubject$.next(false",{"_index":4190,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.scrollingupsubject$.next(true",{"_index":4191,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.selectable",{"_index":4395,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectablekey",{"_index":4398,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectabletype",{"_index":4422,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectedrow",{"_index":4449,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectedrow.set(index",{"_index":4452,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectedrow.set(undefined",{"_index":4404,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selecterrorfromstore",{"_index":4229,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selecterrorfromstore(selectors.videos",{"_index":4242,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selecterrorfromstore(selectors[key",{"_index":3480,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.selecterrormessagefromstore",{"_index":4231,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selecterrormessagefromstore(selectors[key",{"_index":3482,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.selectfromstore",{"_index":4226,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selectfromstore(selectors.darkmode",{"_index":4235,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selectfromstore(selectors[key",{"_index":3476,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.selectloadingfromstore",{"_index":4233,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selectloadingfromstore(selectors[key",{"_index":3478,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.session",{"_index":1360,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.sessionstoragerecord",{"_index":3397,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.setariabusytag(this.conditions.loading",{"_index":1830,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.setarialivetag(this.displaycontentarialive",{"_index":1824,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.setcurrentlanguage(language",{"_index":2479,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.setdatainroute(data",{"_index":3148,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.setitem(key",{"_index":3403,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.setsortdirection(newsortdirection",{"_index":726,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.setupstorage(localstorage",{"_index":3398,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.setupstorage(sessionstorage",{"_index":3396,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.shouldbeauthenticated",{"_index":2768,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.shouldhaveallfeatures",{"_index":2100,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.shouldhaveallpermissions",{"_index":2203,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.shouldhavefeature",{"_index":2102,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.shouldhavepermission",{"_index":2205,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.showdetailrow",{"_index":4411,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.showopenrowstate",{"_index":4407,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.showselectedopenrow",{"_index":4448,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.showtooltip",{"_index":3661,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["this.signinuser(signindata).pipe",{"_index":1329,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.signoutuser(signoutdatatype).pipe",{"_index":1333,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.sort.emit",{"_index":727,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.sortabletablecellrecord",{"_index":4495,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[column",{"_index":4485,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[column].handlesort",{"_index":4488,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[event.column].setsortdirection(event.direction",{"_index":4501,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[event.column].sortdirection",{"_index":4496,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord.set",{"_index":4467,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord.update((value",{"_index":4476,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortdirection",{"_index":724,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.startstate",{"_index":2651,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.state.data",{"_index":4289,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.state.iscompleted",{"_index":4292,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.stateupdated.emit(value",{"_index":2655,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.statewrapper",{"_index":3474,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.stepclass",{"_index":3878,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.storageeventsubject.asobservable",{"_index":3364,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.storageeventsubject.next(event",{"_index":3415,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.store",{"_index":4251,"title":{},"body":{"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.store).pipe",{"_index":4288,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.store.dispatch(actions.channel.clear",{"_index":4254,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.dispatch(actions.channel.effects.set",{"_index":4258,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.dispatch(actions.videos.clear",{"_index":4257,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.dispatch(actions.videos.effects.set",{"_index":4259,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.pipe(select(selector.error",{"_index":3488,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.store.pipe(select(selector.errormessage",{"_index":3490,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.store.pipe(select(selector.loading",{"_index":3486,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.store.pipe(select(selector.select",{"_index":3484,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.storeauthenticationresponse(response",{"_index":1332,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.storeauthenticationresponse(undefined",{"_index":1334,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.storeservice.setfilters(value",{"_index":3132,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.subscribe",{"_index":2224,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["this.subscribe(this.authenticationservice.hasfeature(converttoarray(feature",{"_index":2146,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["this.summaryelement()?.nativeelement.focus",{"_index":1093,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.tablecelltemplaterecord.set",{"_index":4466,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecelltemplaterecord.update((value",{"_index":4475,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecolumns.set([...(columns",{"_index":4507,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecypressrecord.set",{"_index":4468,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecypressrecord.update((value",{"_index":4478,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.template",{"_index":1934,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.templateref",{"_index":1935,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{}}}],["this.thentemplateref",{"_index":2033,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.thenviewref",{"_index":2113,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.titleelement",{"_index":3879,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.titleid.set(id",{"_index":3886,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.tooltipeventssubject",{"_index":3711,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.tooltipeventssubject.next(event",{"_index":3757,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.tooltipservice.removetooltip",{"_index":3663,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.tooltipservice.settooltipevent",{"_index":3665,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.tourservice.closetour().subscribe",{"_index":3873,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.tourservice.currentindex",{"_index":3845,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.tourservice.currenttour",{"_index":3846,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.tourservice.registerelement(this",{"_index":3822,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.tourservice.starttour",{"_index":510,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["this.tourservice.unregisterelement(this.touritem",{"_index":3825,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.translateservice.get(key",{"_index":2522,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.getdefaultlang",{"_index":2516,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.instant(key",{"_index":2520,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.langs",{"_index":2515,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.reloadlang(language",{"_index":2519,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.translations",{"_index":2523,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.use(this.rooti18nservice.currentlanguage",{"_index":2518,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translationloaderactionssubject$.next(action",{"_index":2314,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationloaderactionssubject$.pipe",{"_index":2295,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationloadingservice.addloadedtranslations",{"_index":2416,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationloadingservice.gettranslations",{"_index":2383,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationloadingservice.loadtranslations",{"_index":2411,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationloadingservice.marktranslationsloadedasfailed",{"_index":2408,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationsfailedsubject$.asobservable",{"_index":2291,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationsfailedsubject$.next(false",{"_index":2325,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationsloading[paths",{"_index":2317,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationspaths.map((path",{"_index":2385,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationspaths.tostring",{"_index":2412,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationssubject$.getvalue",{"_index":2316,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationssubject$.next",{"_index":2315,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.unscrambleparams",{"_index":3140,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.unscrambleparams(value",{"_index":3157,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.updateaccordionitemstate(event.newstate",{"_index":1105,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.updateconditions",{"_index":1817,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.updateconditions(this.displaycontent",{"_index":1821,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.updateview",{"_index":2037,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.updateviewsubject",{"_index":1828,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.updateviewsubject.next",{"_index":1819,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.videos",{"_index":4256,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.viewcontainer.clear",{"_index":1829,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.viewcontainer.createcomponent",{"_index":1961,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["this.viewcontainer.createcomponent(component",{"_index":1855,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.viewcontainer.createembeddedview",{"_index":2114,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.hascookieelse",{"_index":2057,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.overrideconfiguration[status]?.template",{"_index":1852,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.template",{"_index":1938,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.templateref",{"_index":1859,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.thentemplateref",{"_index":2056,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.widthsubject$.asobservable",{"_index":4144,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.widthsubject$.getvalue",{"_index":4184,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.widthsubject$.next(this.window.innerwidth",{"_index":4180,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window",{"_index":4162,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window.addeventlistener('resize",{"_index":4182,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window.innerwidth",{"_index":4183,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window.scrollto(0",{"_index":4185,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice",{"_index":3394,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.windowservice.currentscrollposition",{"_index":4161,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.document",{"_index":4165,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.hasdocument",{"_index":4169,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.isbrowser",{"_index":1614,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["this.windowservice.runinbrowser",{"_index":1409,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxWindowService.html":{}}}],["this.windowservice.scrollingup",{"_index":4159,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.scrollto(500",{"_index":4167,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.width",{"_index":4157,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.window",{"_index":4163,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowsservice.runinbrowser",{"_index":2475,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.windowwidth",{"_index":4156,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.zoomlevels",{"_index":2646,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["those",{"_index":2296,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["though",{"_index":3792,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["through",{"_index":1390,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["throw",{"_index":377,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourStepComponent.html":{}}}],["throwerror",{"_index":4278,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["tick",{"_index":981,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["time",{"_index":1206,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["times",{"_index":2623,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["title",{"_index":511,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["titleelement",{"_index":621,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["titleelement.nativeelement.getattribute('id",{"_index":3884,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["titleelement.nativeelement.setattribute('id",{"_index":3885,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["titleid",{"_index":622,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["todo",{"_index":133,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["toggle",{"_index":1103,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["toggleevent",{"_index":1104,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["token",{"_index":3889,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{},"miscellaneous/typealiases.html":{}}}],["tokens",{"_index":1173,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["tokens/i18n.token",{"_index":2350,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["toolbar",{"_index":2727,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["toolbox",{"_index":2729,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["tools",{"_index":4626,"title":{},"body":{"index.html":{}}}],["tooltip",{"_index":3607,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"miscellaneous/typealiases.html":{}}}],["tooltipeventssubject",{"_index":3677,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipportal",{"_index":3746,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipposition",{"_index":3729,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref",{"_index":3749,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('id",{"_index":3754,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('position",{"_index":3752,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('positionclass",{"_index":3753,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('text",{"_index":3751,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltips",{"_index":4631,"title":{},"body":{"index.html":{}}}],["tooltipservice",{"_index":3637,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["top",{"_index":3376,"title":{},"body":{"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{}}}],["tort",{"_index":4723,"title":{},"body":{"index.html":{},"license.html":{}}}],["total",{"_index":630,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["touched",{"_index":395,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["touchedeventlistener",{"_index":1930,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["touchedeventlistener(this.abstractcontrol",{"_index":1948,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["touppercase",{"_index":4548,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["tour",{"_index":485,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["tour.types",{"_index":3890,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["touritem",{"_index":3768,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["touritem]'},{'name",{"_index":602,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["tourservice",{"_index":488,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["track",{"_index":2397,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxWindowService.html":{}}}],["tracked",{"_index":2797,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["trailing",{"_index":477,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["transform",{"_index":185,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"pipes/TransformPipe.html":{}}}],["transform(direction",{"_index":3590,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["transform(feature",{"_index":2123,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["transform(output",{"_index":444,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["transform(permission",{"_index":2217,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["transform(undefined",{"_index":1457,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["transform(value",{"_index":186,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/TransformPipe.html":{}}}],["transformer",{"_index":4541,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["transformer(value",{"_index":4549,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["transformertype",{"_index":4545,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["transformpipe",{"_index":4539,"title":{"pipes/TransformPipe.html":{}},"body":{"pipes/TransformPipe.html":{}}}],["transforms",{"_index":4546,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["translate",{"_index":2506,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["translate/core",{"_index":2342,"title":{},"body":{"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"dependencies.html":{}}}],["translateloader",{"_index":2340,"title":{},"body":{"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translatemodule",{"_index":2341,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["translatemodule.forchild",{"_index":2362,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["translatemodule.forroot",{"_index":2356,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["translateservice",{"_index":2489,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["translation",{"_index":1494,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["translation.fromstore",{"_index":2418,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts",{"_index":2366,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:13",{"_index":2373,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:19",{"_index":2371,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:31",{"_index":2375,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation/multi",{"_index":2365,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translationloader",{"_index":2334,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["translationloaderactionentity",{"_index":2279,"title":{"interfaces/TranslationLoaderActionEntity.html":{}},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["translationloaderactionssubject",{"_index":2263,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationloaderactionstateenum",{"_index":4551,"title":{},"body":{"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["translationloadingservice",{"_index":2367,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translations",{"_index":1502,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"index.html":{}}}],["translationsfailed",{"_index":2264,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationsfailedsubject",{"_index":2265,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationsloaded",{"_index":2266,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationsloading",{"_index":2267,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationspaths",{"_index":2370,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translationssubject",{"_index":2268,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationtype",{"_index":2497,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["tree",{"_index":481,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["treegrid",{"_index":3897,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["trigger",{"_index":1089,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["triggered",{"_index":1581,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{}}}],["triggering",{"_index":1589,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxWindowService.html":{}}}],["true",{"_index":47,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["trusted",{"_index":3268,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["truth",{"_index":2464,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["ts",{"_index":2379,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"dependencies.html":{}}}],["tuples",{"_index":2780,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["two",{"_index":2863,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["type",{"_index":16,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":4740,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":164,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"directives/NgxDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["typedaction",{"_index":165,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["typeof",{"_index":824,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["types",{"_index":718,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["typescript",{"_index":3959,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["typing",{"_index":1343,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["uarr",{"_index":3595,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["ui",{"_index":1995,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["unauthenticated",{"_index":1133,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["uncheck",{"_index":4427,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["undefined",{"_index":992,"title":{},"body":{"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["under",{"_index":3790,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["underneath",{"_index":1903,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["unique",{"_index":762,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{}}}],["unknown",{"_index":173,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"pipes/NgxTableGetPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["unless",{"_index":3009,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["unload",{"_index":3293,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["unregister",{"_index":2794,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["unscramble",{"_index":3098,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams",{"_index":3078,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams(params",{"_index":3096,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams(value",{"_index":3135,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams?(params",{"_index":3174,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambler",{"_index":3121,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambler(value.sorting",{"_index":3136,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unselect",{"_index":4451,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["unset",{"_index":1275,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"miscellaneous/typealiases.html":{}}}],["unsorted",{"_index":4499,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["unsubscribe",{"_index":3015,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["unused",{"_index":4322,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["up",{"_index":951,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["upcoming",{"_index":3720,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["update",{"_index":162,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["updateaccordionitemstate",{"_index":1025,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["updateaccordionitemstate(isopen",{"_index":1055,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["updateallvalueandvalidity",{"_index":374,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["updateallvalueandvalidity(form",{"_index":400,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["updateconditions",{"_index":1767,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["updateconditions(conditions",{"_index":1786,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["updated",{"_index":1818,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["updates",{"_index":402,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxStorageService.html":{}}}],["updatevalueandvalidity",{"_index":405,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["updateview",{"_index":2004,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["updateviewsubject",{"_index":1761,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["upon",{"_index":2065,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["url",{"_index":1150,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/SpecStoreAssets.html":{}}}],["us/docs/web/accessibility/aria/aria_live_regions",{"_index":1795,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["us/docs/web/accessibility/aria/attributes/aria",{"_index":2889,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["us/docs/web/api/broadcastchannel",{"_index":1369,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["use",{"_index":203,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":106,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStore.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["usedefaultlang",{"_index":2360,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["useexisting",{"_index":256,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["usefactory",{"_index":2357,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["useful",{"_index":2243,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["uselocalstorage",{"_index":1488,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["usemockdataduringtour",{"_index":503,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["user",{"_index":324,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["users",{"_index":1270,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"index.html":{}}}],["uses",{"_index":1220,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxTourItemDirective.html":{},"injectables/NgxWindowService.html":{}}}],["usevalue",{"_index":2361,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["using",{"_index":328,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["utilities",{"_index":4612,"title":{},"body":{"index.html":{}}}],["utils",{"_index":26,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["uuid",{"_index":815,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"dependencies.html":{}}}],["v",{"_index":2247,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["v3",{"_index":4623,"title":{},"body":{"index.html":{}}}],["v4",{"_index":814,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["v=1",{"_index":2249,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["v=1.0.0",{"_index":2250,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["v=1743428073628",{"_index":2252,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["valcke",{"_index":4662,"title":{},"body":{"index.html":{}}}],["valid",{"_index":3300,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{},"classes/NgxValidators.html":{}}}],["validates",{"_index":4062,"title":{},"body":{"classes/NgxValidators.html":{}}}],["validation",{"_index":258,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["validationerrors",{"_index":1879,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxValidators.html":{}}}],["validator",{"_index":30,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["validatorfn",{"_index":4046,"title":{},"body":{"classes/NgxValidators.html":{}}}],["validity",{"_index":403,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["value",{"_index":32,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/enumerations.html":{}}}],["value.charat(4",{"_index":221,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value.charat(8",{"_index":224,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value.isempty",{"_index":3580,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["value.isloading",{"_index":3581,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["value.length",{"_index":4425,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["value.match(/^[0",{"_index":3425,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["value.match(/{(.*:.*[,]{0,1",{"_index":3428,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["value.replace(/(.{4})/g",{"_index":470,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["value.replace(/\\./g",{"_index":217,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value.replace(/\\s/g",{"_index":466,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["value.tostring",{"_index":216,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["valuechanges",{"_index":2571,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["valuechanges.asobservable",{"_index":2743,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["valuechanges.next(event?.markerarea?.getstate",{"_index":2739,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["valuechanges.next(marker",{"_index":2746,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["values",{"_index":1871,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{}}}],["van",{"_index":4599,"title":{},"body":{"index.html":{},"license.html":{}}}],["vanilla",{"_index":1495,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"dependencies.html":{}}}],["var",{"_index":517,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["variables",{"_index":56,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["vars",{"_index":4323,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["vat",{"_index":198,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["veire",{"_index":4601,"title":{},"body":{"index.html":{},"license.html":{}}}],["version",{"_index":1358,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxStorageService.html":{},"index.html":{},"properties.html":{}}}],["vertical",{"_index":3795,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["very",{"_index":1597,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["videos",{"_index":4196,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["videoserror",{"_index":4208,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["videoserrormessage",{"_index":4209,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["videosloading",{"_index":4210,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["view",{"_index":1807,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["viewchild",{"_index":1081,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["viewchild('celltmpl",{"_index":1679,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{}}}],["viewchild('details",{"_index":1064,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["viewchild('imageelement",{"_index":2615,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["viewchild('summary",{"_index":1078,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["viewchild>('contenttmpl",{"_index":1432,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["viewchild>('steptitle",{"_index":655,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["viewchildren",{"_index":103,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{}}}],["viewchildren(baseformaccessor",{"_index":406,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["viewcontainer",{"_index":1762,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["viewcontainerref",{"_index":1810,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["viewmarkerbase",{"_index":2549,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["viewport",{"_index":3799,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["views",{"_index":2042,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"miscellaneous/typealiases.html":{}}}],["visible",{"_index":1604,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["visual",{"_index":1090,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["visualize",{"_index":3558,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["visualized",{"_index":3564,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["void",{"_index":317,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["vs",{"_index":3383,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["wait",{"_index":979,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["walkthrough",{"_index":4629,"title":{},"body":{"index.html":{}}}],["want",{"_index":237,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["warn",{"_index":425,"title":{},"body":{"directives/FormAccessorContainer.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["warning",{"_index":378,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["warranties",{"_index":4710,"title":{},"body":{"index.html":{},"license.html":{}}}],["warranty",{"_index":4705,"title":{},"body":{"index.html":{},"license.html":{}}}],["way",{"_index":1994,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStore.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ways",{"_index":1131,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["wcag",{"_index":1430,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["wcag/aria",{"_index":934,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{}}}],["wcag/wai",{"_index":2599,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["we'll",{"_index":2625,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["we're",{"_index":1609,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["we've",{"_index":1266,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["web",{"_index":3201,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["webcomponent",{"_index":3187,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["webcomponents",{"_index":3191,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["well",{"_index":84,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxConfigurableLayoutItemComponent.html":{}}}],["wen",{"_index":3016,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["went",{"_index":2321,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["when.directive.ts",{"_index":3827,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:123",{"_index":3833,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:26",{"_index":3840,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:27",{"_index":3841,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:32",{"_index":3836,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:37",{"_index":3838,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:38",{"_index":3839,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:39",{"_index":3837,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:40",{"_index":3830,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:63",{"_index":3831,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:68",{"_index":3832,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:70",{"_index":3834,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:74",{"_index":3835,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when/tour",{"_index":3826,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["whenactive",{"_index":3849,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["whenever",{"_index":1825,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{}}}],["wheninactive",{"_index":3848,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["whether",{"_index":691,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{},"license.html":{}}}],["whilst",{"_index":2323,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["whitespace",{"_index":3785,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["whose",{"_index":2790,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["width",{"_index":4113,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["widthsubject",{"_index":4114,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["wiki",{"_index":4606,"title":{},"body":{"index.html":{}}}],["window",{"_index":1607,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["window.scrolly",{"_index":4189,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["window:beforeunload",{"_index":3291,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["windowservice",{"_index":1370,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["windowservice.runinbrowser",{"_index":3395,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["windowsservice",{"_index":2431,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["windowwidth",{"_index":4155,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["wish",{"_index":194,"title":{},"body":{"pipes/BtwPipe.html":{},"components/MockTourStepComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["wishing",{"_index":1778,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["withcredentials",{"_index":1143,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["within",{"_index":1561,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{}}}],["withlatestfrom",{"_index":3842,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["without",{"_index":209,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["withpositions([this.positionrecord[tooltipposition",{"_index":3743,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["work",{"_index":1344,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["workflow",{"_index":4620,"title":{},"body":{"index.html":{}}}],["works",{"_index":918,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["world",{"_index":497,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/NgxStorageService.html":{}}}],["wouter",{"_index":134,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["wrap",{"_index":230,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["wrapped",{"_index":1395,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["wrapper",{"_index":1127,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["wraps",{"_index":1365,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["writablearraysignal",{"_index":4811,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["writablebooleansignal",{"_index":4812,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["writablenumbersignal",{"_index":4813,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["writablesignal",{"_index":658,"title":{},"body":{"components/MockTourStepComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["writablestringsignal",{"_index":4814,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["writengxtablevalue",{"_index":4313,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["writevalue",{"_index":4418,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["writevalue(value",{"_index":4420,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["wrong",{"_index":2322,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["wysiwyg",{"_index":3204,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["xxxx.xxx.xxx",{"_index":220,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["y",{"_index":3788,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["yes",{"_index":797,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"modules/NgxI18nModule.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"classes/NgxValidators.html":{}}}],["yourcomponent",{"_index":3387,"title":{},"body":{"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["youtube",{"_index":4201,"title":{},"body":{"interfaces/SpecStoreAssets.html":{}}}],["yyyy",{"_index":4056,"title":{},"body":{"classes/NgxValidators.html":{}}}],["zone.js",{"_index":4573,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":2569,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"overview.html":{}}}],["zooming",{"_index":2561,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["zoomlevels",{"_index":2590,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AtLeastOneRequiredValidatorOptions.html":{"url":"interfaces/AtLeastOneRequiredValidatorOptions.html","title":"interface - AtLeastOneRequiredValidatorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AtLeastOneRequiredValidatorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/validators/at-least-one-required/at-least-one-required.validator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            conditionalFunction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            controls\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        conditionalFunction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        conditionalFunction:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        controls\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        controls:     KeyType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyType[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FormGroup } from '@angular/forms';\nimport clean from 'obj-clean';\n\nimport { clearFormError, setFormError } from '../utils';\n\nexport interface AtLeastOneRequiredValidatorOptions {\n\tcontrols?: KeyType[];\n\tconditionalFunction?: (data: any) => boolean;\n}\n\n/**\n * FormGroup validator which checks if either at least one value is filled in\n *\n * @param options - An optional object with configuration options, see below params for more info\n */\nexport const atLeastOneRequiredValidator = (\n\toptions?: AtLeastOneRequiredValidatorOptions\n) => {\n\treturn (group: FormGroup): { atLeastOneRequiredError: true } | null => {\n\t\t// Iben: Get the optional configuration items\n\t\tlet conditionalFunction: (data: any) => boolean;\n\t\tlet keys: KeyType[];\n\n\t\tif (options) {\n\t\t\tconditionalFunction = options.conditionalFunction;\n\t\t\tkeys = options.controls;\n\t\t}\n\t\t// Iben: Setup the needed variables to handle the validator\n\t\tconst cleanedFormValue = clean(group.value);\n\t\tconst cleanedKeys = new Set(Object.keys(cleanedFormValue));\n\t\tconst controls = Object.values(group.controls);\n\t\tconst empty = cleanedKeys.size === 0;\n\n\t\t// Iben: If nothing is filled in, we return an error\n\t\tif (\n\t\t\t(empty && !conditionalFunction) ||\n\t\t\t(empty && conditionalFunction && conditionalFunction(group.value))\n\t\t) {\n\t\t\tfor (const control of controls) {\n\t\t\t\tsetFormError(control, 'required');\n\t\t\t}\n\n\t\t\treturn { atLeastOneRequiredError: true };\n\t\t}\n\n\t\t// Iben: Check if we need to check on a specific key\n\t\tif (keys) {\n\t\t\tconst hasOneKey = keys.reduce((hasOne, key) => hasOne || cleanedKeys.has(key), false);\n\n\t\t\t// Iben: Only return an error when there is no key matched at all\n\t\t\t// and in case of a conditionalFunction if the conditionalFunction is matched as well\n\t\t\tif (\n\t\t\t\t(!hasOneKey && !conditionalFunction) ||\n\t\t\t\t(!hasOneKey && conditionalFunction && conditionalFunction(group.value))\n\t\t\t) {\n\t\t\t\tfor (const key of keys) {\n\t\t\t\t\tsetFormError(group.get(key), 'required');\n\t\t\t\t}\n\n\t\t\t\treturn { atLeastOneRequiredError: true };\n\t\t\t}\n\t\t}\n\n\t\t// Iben: In case there are no errors, clean the required errors and return null\n\t\tfor (const control of controls) {\n\t\t\tclearFormError(control, 'required');\n\t\t}\n\n\t\treturn null;\n\t};\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseFormAccessor.html":{"url":"classes/BaseFormAccessor.html","title":"class - BaseFormAccessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseFormAccessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/base-form/base-form.accessor.ts\n        \n\n\n            \n                Description\n            \n            \n                In order to select all accessors in a FormContainer, we need this base class to pass to our ViewChildren.\nIMPORTANT: This will never be used as an actual functional component\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class BaseFormAccessor {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStore.html":{"url":"interfaces/BaseStore.html","title":"interface - BaseStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            errorMessage\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     StateInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StateInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorMessage:     ErrorInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ErrorInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreActions.html":{"url":"interfaces/BaseStoreActions.html","title":"interface - BaseStoreActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            effects\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:     ActionCreator>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        effects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        effects:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreAssets.html":{"url":"interfaces/BaseStoreAssets.html","title":"interface - BaseStoreAssets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreAssets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            reducers\n                                        \n                                \n                                \n                                        \n                                            selectors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:         BaseStoreActions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseStoreActions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reducers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reducers:     ActionReducer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionReducer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectors:         BaseStoreSelectors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseStoreSelectors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreAssetsGeneratorOptions.html":{"url":"interfaces/BaseStoreAssetsGeneratorOptions.html","title":"interface - BaseStoreAssetsGeneratorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreAssetsGeneratorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-assets-generator-options.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            initialStateValue\n                                        \n                                \n                                \n                                        \n                                            slice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        initialStateValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialStateValue:     StateInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StateInterface\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        slice:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\n\nexport interface EntityStoreAssetsGeneratorOptions {\n\tslice: string;\n\tselectId?: IdSelector;\n\tinitialStateValue?: StateInterface[];\n}\n\nexport interface BaseStoreAssetsGeneratorOptions {\n\tslice: string;\n\tinitialStateValue?: StateInterface;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreSelectors.html":{"url":"interfaces/BaseStoreSelectors.html","title":"interface - BaseStoreSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            select\n                                        \n                                \n                                \n                                        \n                                            selectError\n                                        \n                                \n                                \n                                        \n                                            selectErrorMessage\n                                        \n                                \n                                \n                                        \n                                            selectLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        select\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        select:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectError:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectErrorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectErrorMessage:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectLoading:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BasicEntityAdapterReducerActions.html":{"url":"interfaces/BasicEntityAdapterReducerActions.html","title":"interface - BasicEntityAdapterReducerActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BasicEntityAdapterReducerActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-adapter-reducers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            add\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        add\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        add:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EntityState } from '@ngrx/entity';\n\n// Iben: actions get typed to any as the type TypedAction from ngrx/store is sadly not exported\ninterface BasicEntityAdapterReducerActions {\n\tadd: any;\n\tset: any;\n\tdelete: any;\n\tupdate: any;\n}\n\nexport type BasicEntityAdapterActions = Partial;\n\nexport interface BasicEntityState extends EntityState {\n\tentityStatus: {\n\t\tloading: boolean;\n\t\terror: boolean;\n\t\terrorMessage: unknown;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BasicEntityState.html":{"url":"interfaces/BasicEntityState.html","title":"interface - BasicEntityState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BasicEntityState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-adapter-reducers.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        EntityState\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entityStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entityStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entityStatus:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EntityState } from '@ngrx/entity';\n\n// Iben: actions get typed to any as the type TypedAction from ngrx/store is sadly not exported\ninterface BasicEntityAdapterReducerActions {\n\tadd: any;\n\tset: any;\n\tdelete: any;\n\tupdate: any;\n}\n\nexport type BasicEntityAdapterActions = Partial;\n\nexport interface BasicEntityState extends EntityState {\n\tentityStatus: {\n\t\tloading: boolean;\n\t\terror: boolean;\n\t\terrorMessage: unknown;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/BtwPipe.html":{"url":"pipes/BtwPipe.html","title":"pipe - BtwPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  BtwPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        btw\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts:13\n                        \n                    \n\n\n            \n                \n                        Converts a BTW number to the correct format\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value we wish to convert\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        BtwPipe\nThe BtwPipe will format Belgian VAT numbers.\nFor example\n474603875 will format to 474.603.875.\nHow to use\n\n    \n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n\tname: 'btw',\n\tstandalone: true,\n})\nexport class BtwPipe implements PipeTransform {\n\t/**\n\t * Converts a BTW number to the correct format\n\t *\n\t * @param value - The value we wish to convert\n\t */\n\tpublic transform(value: string): string {\n\t\tif (!value) {\n\t\t\t// Denis: if the value is falsy, return it without transform.\n\t\t\treturn value;\n\t\t}\n\n\t\tconst addCharAtIndex = (original: string, char: string, index: number): string => {\n\t\t\treturn original.slice(0, index) + char + original.slice(index);\n\t\t};\n\n\t\t// Iben: Convert to string if it's a number\n\t\tvalue = value.toString();\n\n\t\tif (value.replace(/\\./g, '').length === 9) {\n\t\t\tvalue = '0' + value;\n\t\t}\n\n\t\t// Iben: Format: xxxx.xxx.xxx\n\t\tif (value.charAt(4) !== '.') {\n\t\t\tvalue = addCharAtIndex(value, '.', 4);\n\t\t}\n\n\t\tif (value.charAt(8) !== '.') {\n\t\t\tvalue = addCharAtIndex(value, '.', 8);\n\t\t}\n\n\t\treturn value;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentTypeWrapper.html":{"url":"interfaces/ComponentTypeWrapper.html","title":"interface - ComponentTypeWrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ComponentTypeWrapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/utils/accessor-providers/accessor-providers.util.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface to wrap an component class in.\nThis interface is for internal use, as a similar one already exists in the CDK, but we don't want to create a dependency on that for this package.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Provider, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { BaseFormAccessor } from '../../abstracts';\n\n/**\n * An interface to wrap an component class in.\n *\n * This interface is for internal use, as a similar one already exists in the CDK, but we don't want to create a dependency on that for this package.\n */\ninterface ComponentTypeWrapper {\n\tnew (...args: any[]): ComponentType;\n}\n\n/**\n * Generates the necessary providers for a (Data)FormAccessor.\n *\n * @param  component - The component class of the (Data)FormAccessor\n */\nexport const createAccessorProviders = (\n\tcomponent: ComponentTypeWrapper\n): Provider[] => {\n\treturn [\n\t\t// Iben: Generate a provider for the control handling\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: forwardRef(() => component),\n\t\t\tmulti: true,\n\t\t},\n\t\t// Iben: Generate a provider for the validation handling\n\t\t{\n\t\t\tprovide: NG_VALIDATORS,\n\t\t\tuseExisting: forwardRef(() => component),\n\t\t\tmulti: true,\n\t\t},\n\t\t// Iben: Generate a provider for the FormContainer handling\n\t\t{\n\t\t\tprovide: BaseFormAccessor,\n\t\t\tuseExisting: forwardRef(() => component),\n\t\t},\n\t];\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EffectsService.html":{"url":"injectables/EffectsService.html","title":"injectable - EffectsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EffectsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/effects.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fetchChannel\n                            \n                            \n                                    Public\n                                fetchVideos\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchChannel(isPublic: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/effects.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isPublic\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchVideos(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/effects.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DataType } from './store-assets';\nimport { mockChannel, mockPrivateChannel, mockVideos } from './store.spec';\n\n@Injectable()\nexport class EffectsService {\n\tpublic fetchChannel(isPublic: boolean): Observable {\n\t\tif (isPublic) {\n\t\t\treturn of(mockChannel);\n\t\t}\n\n\t\treturn of(mockPrivateChannel);\n\t}\n\n\tpublic fetchVideos(id: string): Observable {\n\t\treturn of(mockVideos);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreActions.html":{"url":"interfaces/EntityStoreActions.html","title":"interface - EntityStoreActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-store-assets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            add\n                                        \n                                \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            effects\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        add\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        add:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:     ActionCreator>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        effects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        effects:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n\tActionReducer,\n\tAction,\n\tMemoizedSelector,\n\tDefaultProjectorFn,\n\tActionCreator,\n} from '@ngrx/store';\n\nimport { EntityStoreEffectsInterface } from './effects';\nimport { BasicEntityState } from './entity-adapter-reducers';\n\nexport interface EntityStoreAssets {\n\treducers: ActionReducer, Action>;\n\tselectors: EntityStoreSelectors;\n\tactions: EntityStoreActions;\n}\n\nexport interface EntityStoreSelectors {\n\tselectAll: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\nexport interface EntityStoreActions {\n\tadd: ActionCreator { payload: StateInterface | StateInterface[] } & Action\n\t>;\n\tset: ActionCreator { payload: StateInterface[] } & Action\n\t>;\n\tupdate: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tdelete: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tadd: ActionCreator { payload: EffectsInterface['add'] } & Action\n\t\t>;\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t\tupdate: ActionCreator { payload: EffectsInterface['update'] } & Action\n\t\t>;\n\t\tdelete: ActionCreator { payload: EffectsInterface['delete'] } & Action\n\t\t>;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreAssets.html":{"url":"interfaces/EntityStoreAssets.html","title":"interface - EntityStoreAssets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreAssets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-store-assets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            reducers\n                                        \n                                \n                                \n                                        \n                                            selectors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:         EntityStoreActions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreActions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reducers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reducers:         ActionReducer | Action>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionReducer | Action>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectors:         EntityStoreSelectors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreSelectors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n\tActionReducer,\n\tAction,\n\tMemoizedSelector,\n\tDefaultProjectorFn,\n\tActionCreator,\n} from '@ngrx/store';\n\nimport { EntityStoreEffectsInterface } from './effects';\nimport { BasicEntityState } from './entity-adapter-reducers';\n\nexport interface EntityStoreAssets {\n\treducers: ActionReducer, Action>;\n\tselectors: EntityStoreSelectors;\n\tactions: EntityStoreActions;\n}\n\nexport interface EntityStoreSelectors {\n\tselectAll: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\nexport interface EntityStoreActions {\n\tadd: ActionCreator { payload: StateInterface | StateInterface[] } & Action\n\t>;\n\tset: ActionCreator { payload: StateInterface[] } & Action\n\t>;\n\tupdate: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tdelete: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tadd: ActionCreator { payload: EffectsInterface['add'] } & Action\n\t\t>;\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t\tupdate: ActionCreator { payload: EffectsInterface['update'] } & Action\n\t\t>;\n\t\tdelete: ActionCreator { payload: EffectsInterface['delete'] } & Action\n\t\t>;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreAssetsGeneratorOptions.html":{"url":"interfaces/EntityStoreAssetsGeneratorOptions.html","title":"interface - EntityStoreAssetsGeneratorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreAssetsGeneratorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-assets-generator-options.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            initialStateValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            selectId\n                                        \n                                \n                                \n                                        \n                                            slice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        initialStateValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialStateValue:     StateInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StateInterface[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectId:     IdSelector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IdSelector\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        slice:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\n\nexport interface EntityStoreAssetsGeneratorOptions {\n\tslice: string;\n\tselectId?: IdSelector;\n\tinitialStateValue?: StateInterface[];\n}\n\nexport interface BaseStoreAssetsGeneratorOptions {\n\tslice: string;\n\tinitialStateValue?: StateInterface;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreSelectors.html":{"url":"interfaces/EntityStoreSelectors.html","title":"interface - EntityStoreSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-store-assets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            selectAll\n                                        \n                                \n                                \n                                        \n                                            selectError\n                                        \n                                \n                                \n                                        \n                                            selectErrorMessage\n                                        \n                                \n                                \n                                        \n                                            selectLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        selectAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectAll:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectError:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectErrorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectErrorMessage:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectLoading:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n\tActionReducer,\n\tAction,\n\tMemoizedSelector,\n\tDefaultProjectorFn,\n\tActionCreator,\n} from '@ngrx/store';\n\nimport { EntityStoreEffectsInterface } from './effects';\nimport { BasicEntityState } from './entity-adapter-reducers';\n\nexport interface EntityStoreAssets {\n\treducers: ActionReducer, Action>;\n\tselectors: EntityStoreSelectors;\n\tactions: EntityStoreActions;\n}\n\nexport interface EntityStoreSelectors {\n\tselectAll: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\nexport interface EntityStoreActions {\n\tadd: ActionCreator { payload: StateInterface | StateInterface[] } & Action\n\t>;\n\tset: ActionCreator { payload: StateInterface[] } & Action\n\t>;\n\tupdate: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tdelete: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tadd: ActionCreator { payload: EffectsInterface['add'] } & Action\n\t\t>;\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t\tupdate: ActionCreator { payload: EffectsInterface['update'] } & Action\n\t\t>;\n\t\tdelete: ActionCreator { payload: EffectsInterface['delete'] } & Action\n\t\t>;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/FocusClickDirective.html":{"url":"directives/FocusClickDirective.html","title":"directive - FocusClickDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  FocusClickDirective\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [focusClick]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                disabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                focusClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                isClicked\n                            \n                            \n                                    \n                                    Public\n                                isEntered\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                keydown.enter\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:12\n                            \n                        \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:28\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.enter\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:37\n                \n            \n\n\n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isClicked\n                        \n                    \n                \n            \n            \n                \n                        \n                    isClicked(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isEntered\n                        \n                    \n                \n            \n            \n                \n                        \n                    isEntered()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.enter')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        focusClick\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:24\n                        \n                    \n\n            \n                \n                    This directive replaces the default click directive and allows the user to execute\nthe click event by clicking the mouse and  by using the enter key on focus.\nA tabindex of 0 gets added to the host.\n\n                \n            \n\n        \n    \n\n\n\n    \n\n    \n        FocusClickDirective\nThe FocusClickDirective provides an a11y friendly click handler.\nThis directive replaces the default click directive and allows the user to execute\nthe click event by clicking the mouse and by using the enter key on focus.\nHow to use\nExample :\n    My Button\n\n    \n\n    \n        import { Directive, HostListener, OutputEmitterRef, input, output } from '@angular/core';\n\n@Directive({\n\tselector: '[focusClick]',\n\tstandalone: true,\n\thost: {\n\t\t'[attr.tabIndex]': '0',\n\t},\n})\nexport class FocusClickDirective {\n\t// Allow the button to ignore click events when set to true\n\tpublic readonly disabled = input(false);\n\n\t// Allow the function passed by the host to be executed\n\t// when the emit() method gets called\n\t/**\n\t * This directive replaces the default `click` directive and allows the user to execute\n\t * the `click` event by clicking the mouse **and**  by using the `enter` key on focus.\n\t *\n\t * A tabindex of `0` gets added to the host.\n\t *\n\t * @memberof FocusClickDirective\n\t */\n\tpublic readonly focusClick: OutputEmitterRef = output();\n\n\t// Add eventhandler to the click event\n\t@HostListener('click', ['$event'])\n\tpublic isClicked(event: Event): void {\n\t\tif (!this.disabled()) {\n\t\t\tthis.focusClick.emit(event);\n\t\t}\n\t}\n\n\t// Add eventhandler to keydown event When enter is pressed and the event\n\t// isn't blocked, execute the click function of the host\n\t@HostListener('keydown.enter')\n\tpublic isEntered(): void {\n\t\tif (!this.disabled()) {\n\t\t\tthis.focusClick.emit();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/FormAccessorContainer.html":{"url":"directives/FormAccessorContainer.html","title":"directive - FormAccessorContainer","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  FormAccessorContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                accessors\n                            \n                            \n                                    Protected\n                                    Readonly\n                                destroyed$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleAccessorsAction\n                            \n                            \n                                    Public\n                                markAllAsDirty\n                            \n                            \n                                    Public\n                                markAllAsTouched\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                updateAllValueAndValidity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleAccessorsAction\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleAccessorsAction(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:85\n                        \n                    \n\n\n            \n                \n                        Handle the accessors action of the FormContainer and throw a warning if no accessors are provided\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAllAsDirty\n                        \n                    \n                \n            \n            \n                \n                    This method should no longer be used, use the markAsDirty on the form itself instead\n\nMarks the form and all the inputs of every subsequent form-accessors as dirty\n                \n            \n            \n                \n                        \n                    markAllAsDirty(form: AbstractControl, options: FormStateOptionsEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:33\n                        \n                    \n\n\n            \n                \n                        Marks the form and all the inputs of every subsequent form-accessors as dirty\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe form used in the component\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FormStateOptionsEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    \nOptions passed to the form state changer\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAllAsTouched\n                        \n                    \n                \n            \n            \n                \n                    This method should no longer be used, use the markAsTouched on the form itself instead\n\nMarks the form and all the inputs of every subsequent form-accessors as touched\n                \n            \n            \n                \n                        \n                    markAllAsTouched(form: AbstractControl, options: FormStateOptionsEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:47\n                        \n                    \n\n\n            \n                \n                        Marks the form and all the inputs of every subsequent form-accessors as touched\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe form used in the component\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FormStateOptionsEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    \nOptions passed to the form state changer\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:75\n                        \n                    \n\n\n            \n                \n                        Handle the destroy state of the component\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateAllValueAndValidity\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAllValueAndValidity(form: AbstractControl, options: FormStateOptionsEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:59\n                        \n                    \n\n\n            \n                \n                        Updates the value and validity of the form and all the inputs of every subsequent form-accessors\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe provided forms\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FormStateOptionsEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    \nOptions passed to the updateValueAndValidity\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        accessors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChildren(BaseFormAccessor)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:18\n                        \n                    \n\n            \n                \n                    A list of all DataFormAccessors en FormAccessors of this component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:23\n                        \n                    \n\n            \n                \n                    Destroyed state of the component\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, OnDestroy, viewChildren } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { FormStateOptionsEntity } from '../../interfaces';\nimport {\n\thandleFormAccessorMarkAsDirty,\n\thandleFormAccessorMarkAsTouched,\n\thandleFormAccessorUpdateValueAndValidity,\n} from '../../utils';\nimport { BaseFormAccessor } from '../base-form/base-form.accessor';\n\n@Directive()\nexport class FormAccessorContainer implements OnDestroy {\n\t/**\n\t * A list of all DataFormAccessors en FormAccessors of this component\n\t */\n\treadonly accessors = viewChildren(BaseFormAccessor);\n\n\t/**\n\t * Destroyed state of the component\n\t */\n\tprotected readonly destroyed$ = new Subject();\n\n\t/**\n\t * @deprecated This method should no longer be used, use the markAsDirty on the form itself instead\n\t *\n\t * Marks the form and all the inputs of every subsequent form-accessors as dirty\n\t *\n\t * @param  form - The form used in the component\n\t * @param options - Options passed to the form state changer\n\t */\n\tpublic markAllAsDirty(form: AbstractControl, options: FormStateOptionsEntity = {}): void {\n\t\tthis.handleAccessorsAction(() => {\n\t\t\thandleFormAccessorMarkAsDirty(form, this.accessors() as any || [], options);\n\t\t});\n\t}\n\n\t/**\n\t * @deprecated This method should no longer be used, use the markAsTouched on the form itself instead\n\t *\n\t * Marks the form and all the inputs of every subsequent form-accessors as touched\n\t *\n\t * @param  form - The form used in the component\n\t * @param options - Options passed to the form state changer\n\t */\n\tpublic markAllAsTouched(form: AbstractControl, options: FormStateOptionsEntity = {}): void {\n\t\tthis.handleAccessorsAction(() => {\n\t\t\thandleFormAccessorMarkAsTouched(form, this.accessors() as any || [], options);\n\t\t});\n\t}\n\n\t/**\n\t * Updates the value and validity of the form and all the inputs of every subsequent form-accessors\n\t *\n\t * @param form - The provided forms\n\t * @param options - Options passed to the updateValueAndValidity\n\t */\n\tpublic updateAllValueAndValidity(\n\t\tform: AbstractControl,\n\t\toptions: FormStateOptionsEntity = {}\n\t): void {\n\t\tthis.handleAccessorsAction(() => {\n\t\t\thandleFormAccessorUpdateValueAndValidity(\n\t\t\t\tform,\n\t\t\t\tthis.accessors() as any || [],\n\t\t\t\toptions\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Handle the destroy state of the component\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.destroyed$.next(undefined);\n\t\tthis.destroyed$.complete();\n\t}\n\n\t/**\n\t * Handle the accessors action of the FormContainer and throw a warning if no accessors are provided\n\t *\n\t * @param  action - The provided action\n\t */\n\tprivate handleAccessorsAction(action: () => void) {\n\t\t// Iben: Throw a warn in case there are no accessors found\n\t\tconst accessors = this.accessors();\n  if (!accessors || accessors.length === 0) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxForms: No (Data)FormAccessors were found in this component. Check if each (Data)FormAccessor also provides the BaseFormAccessor in its providers array. If this is intentional, this warning can be ignored.'\n\t\t\t);\n\t\t}\n\n\t\t// Iben: Handle the provided action\n\t\taction();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormStateOptionsEntity.html":{"url":"interfaces/FormStateOptionsEntity.html","title":"interface - FormStateOptionsEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FormStateOptionsEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/interfaces/form-state-options.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            emitEvent\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onlySelf\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        emitEvent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emitEvent:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onlySelf\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onlySelf:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FormStateOptionsEntity {\n\tonlySelf?: boolean;\n\temitEvent?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/HasObserversPipe.html":{"url":"pipes/HasObserversPipe.html","title":"pipe - HasObserversPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  HasObserversPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/has-observers/has-observers.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        hasObservers\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(output: EventEmitter<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/has-observers/has-observers.pipe.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                output\n                                            \n                                                        EventEmitter<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        HasObserversPipe\nThe HasObserversPipe will check if an Output property has observers.\nHow to use\nExample :\n  {{ somethingHasCompleted | hasObservers }}\nExample :@Component({\n    templateUrl: './my-component.component.html',\n    selector: 'my-component',\n})\nexport class MyComponent {\n    @Ouput() public somethingHasCompleted: EventEmitter = EventEmitter();\n}If a parent subscribes to the EventEmitter, hasObservers will return true\nExample :\n    \n\n    \n        import { Pipe, PipeTransform, EventEmitter } from '@angular/core';\n\n@Pipe({\n\tname: 'hasObservers',\n\tstandalone: true,\n})\nexport class HasObserversPipe implements PipeTransform {\n\tpublic transform(output: EventEmitter): boolean {\n\t\treturn output && output.observers.length > 0;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/IbanPipe.html":{"url":"pipes/IbanPipe.html","title":"pipe - IbanPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  IbanPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        IBAN\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        IbanPipe\nThe IbanPipe will format an IBAN number.\nFor example\nBE62510007547061 will format to BE62 5100 0754 7061.\nHow to use\nExample :\n  {{ ibanNumber | IBAN }}\n\n    \n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n\tname: 'IBAN',\n\tstandalone: true,\n})\nexport class IbanPipe implements PipeTransform {\n\tpublic transform(value = ''): string {\n\t\tvalue = value.replace(/\\s/g, ''); // replace all spaces\n\n\t\tlet reformat = value.replace(/(.{4})/g, function (match) {\n\t\t\treturn match + ' '; // reformat into groups of 4 succeeded with a space\n\t\t});\n\n\t\treformat = reformat.trim(); // remove trailing space\n\n\t\treturn reformat;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MockTourHolderComponent.html":{"url":"components/MockTourHolderComponent.html","title":"component - MockTourHolderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MockTourHolderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                mock-tour-holder\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                data$\n                            \n                            \n                                    Private\n                                    Readonly\n                                dataSourceSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                startTour\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        startTour\n                        \n                    \n                \n            \n            \n                \n                        \n                    startTour()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.dataSourceSubject\n\t\t.asObservable()\n\t\t.pipe(useMockDataDuringTour('World hello!'))\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dataSourceSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('Hello world!')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { useMockDataDuringTour } from '../operators';\nimport { NgxTourService } from '../services';\n\n// Iben: This mock tour holder is used in the test to test the useMockDataDuringTour operator\n@Component({\n\tselector: 'mock-tour-holder',\n\ttemplate: '',\n\tstandalone: true,\n})\nexport class MockTourHolderComponent {\n\tprivate readonly tourService = inject(NgxTourService);\n\n\tprivate readonly dataSourceSubject = new BehaviorSubject('Hello world!');\n\n\tpublic readonly data$ = this.dataSourceSubject\n\t\t.asObservable()\n\t\t.pipe(useMockDataDuringTour('World hello!'));\n\n\tpublic startTour() {\n\t\tthis.tourService.startTour([{ title: 'Mock', content: 'Mock' }]).subscribe();\n\t}\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'MockTourHolderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MockTourStepComponent.html":{"url":"components/MockTourStepComponent.html","title":"component - MockTourStepComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MockTourStepComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/inform/src/lib/mocks/tour-step.component.mock.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxTourStepComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                mock-tour-step-component\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                amountOfSteps\n                            \n                            \n                                    Public\n                                    Readonly\n                                content\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentStep\n                            \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                elementId\n                            \n                            \n                                    Public\n                                handleInteraction\n                            \n                            \n                                    Public\n                                    Readonly\n                                position\n                            \n                            \n                                    \n                                    Protected\n                                rootClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                stepClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                titleElement\n                            \n                            \n                                    Public\n                                titleId\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    \n                                    Public\n                                onEscape\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                amountOfSteps\n                            \n                            \n                                content\n                            \n                            \n                                currentStep\n                            \n                            \n                                data\n                            \n                            \n                                elementId\n                            \n                            \n                                stepClass\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown.escape\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        amountOfSteps\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:83\n\n                            \n                        \n                \n                    \n                        The total amount of steps\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:73\n\n                            \n                        \n                \n                    \n                        The content of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        currentStep\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:78\n\n                            \n                        \n                \n                    \n                        The index of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:88\n\n                            \n                        \n                \n                    \n                        Optional data we wish to use in a step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        elementId\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:53\n\n                            \n                        \n                \n                    \n                        The id of the element that the tour-step describes\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        stepClass\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:93\n\n                            \n                        \n                \n                    \n                        A custom step class we can set\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:68\n\n                            \n                        \n                \n                    \n                        The title of the step\n\n                    \n                \n            \n        \n\n\n    \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:45\n\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:keydown.escape\n                        \n                    \n                \n            \n            \n                \ndocument:keydown.escape()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:38\n\n                        \n                    \n\n\n            \n                \n                        Close the tour on escape pressed\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:112\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:105\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:38\n\n                        \n                    \n\n\n            \n                \n                        Close the tour on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        amountOfSteps\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:83\n\n                        \n                    \n\n            \n                \n                    The total amount of steps\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        content\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:73\n\n                        \n                    \n\n            \n                \n                    The content of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentStep\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:78\n\n                        \n                    \n\n            \n                \n                    The index of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:88\n\n                        \n                    \n\n            \n                \n                    Optional data we wish to use in a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementId\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:53\n\n                        \n                    \n\n            \n                \n                    The id of the element that the tour-step describes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleInteraction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:98\n\n                        \n                    \n\n            \n                \n                    Emits the possible interactions with a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:63\n\n                        \n                    \n\n            \n                \n                    The position of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Protected\n                        rootClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:45\n\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stepClass\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:93\n\n                        \n                    \n\n            \n                \n                    A custom step class we can set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:68\n\n                        \n                    \n\n            \n                \n                    The title of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        titleElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild>('stepTitle')\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:58\n\n                        \n                    \n\n            \n                \n                    The element of the tour-step that is seen as the title\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        titleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal('')\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:103\n\n                        \n                    \n\n            \n                \n                    The aria-labelledby id of the title element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:33\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\nimport { NgxTourStepComponent } from '../abstracts';\n\n// Iben: This mock tour step component can be used where needed\n@Component({\n\tselector: 'mock-tour-step-component',\n\ttemplate: '',\n\tstandalone: true,\n})\nexport class MockTourStepComponent extends NgxTourStepComponent {}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'MockTourStepComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAbstractTableCellDirective.html":{"url":"directives/NgxAbstractTableCellDirective.html","title":"directive - NgxAbstractTableCellDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAbstractTableCellDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/components/cell/cell.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        ngx-abstract-table-cell\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cellClass\n                            \n                            \n                                    Public\n                                cellTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                footerTemplate\n                            \n                            \n                                    Public\n                                headerTemplate\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:31\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:42\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:47\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:36\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:57\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:82\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:91\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:26\n                        \n                    \n\n            \n                \n                    An optional class that can be set for the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:31\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:42\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:47\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:19\n                        \n                    \n\n            \n                \n                    The templates used to set in the table\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:52\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:36\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:14\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, OutputEmitterRef, TemplateRef, input, output } from '@angular/core';\n\nimport { NgxTableSortDirection } from '../../enums/sort-direction.enum';\nimport { NgxTableCypressDataTags, NgxTableSortEvent } from '../../types';\n\n@Directive({\n\tselector: 'ngx-abstract-table-cell',\n\tstandalone: true,\n})\nexport class NgxAbstractTableCellDirective {\n\t/**\n\t * The current sortDirection of the cell\n\t */\n\tpublic sortDirection: NgxTableSortDirection | null = null;\n\n\t/**\n\t * The templates used to set in the table\n\t */\n\tpublic footerTemplate: TemplateRef;\n\tpublic headerTemplate: TemplateRef;\n\tpublic cellTemplate: TemplateRef;\n\n\t/**\n\t * An optional class that can be set for the cell\n\t */\n\tpublic cellClass: string;\n\n\t/**\n\t * The name of the column we want this cell to represent\n\t */\n\tpublic readonly column = input.required();\n\n\t/**\n\t * Whether or not the cell is sortable\n\t */\n\tpublic readonly sortable = input(false);\n\n\t/**\n\t * A tag that can be added to a column in the table, set according to the cypress best practices\n\t * See https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\t */\n\tpublic readonly cypressDataTags = input();\n\n\t/**\n\t * Whether the content of a cell is editable. By default, this is set to false\n\t */\n\tpublic readonly editable = input(false);\n\n\t/**\n\t * Emits the sortable event if a column is sortable\n\t */\n\tpublic sort: OutputEmitterRef = output();\n\n\t/**\n\t * Handles the sorting click events\n\t */\n\tpublic handleSort(): void {\n\t\t// Iben: Setup the sort direction\n\t\tlet newSortDirection = NgxTableSortDirection.ASCENDING;\n\n\t\t// Iben: If a an existing sorting direction exists, we switch based on the ones we have\n\t\tif (this.sortDirection) {\n\t\t\tnewSortDirection =\n\t\t\t\tthis.sortDirection === NgxTableSortDirection.ASCENDING\n\t\t\t\t\t? NgxTableSortDirection.DESCENDING\n\t\t\t\t\t: NgxTableSortDirection.ASCENDING;\n\t\t}\n\n\t\t// Iben: Set the internal sorting direction\n\t\tthis.setSortDirection(newSortDirection);\n\n\t\t// Iben: Emit the sorting event\n\t\tthis.sort.emit({\n\t\t\tdirection: this.sortDirection,\n\t\t\tcolumn: this.column(),\n\t\t});\n\t}\n\n\t/**\n\t * Resets the sort direction back to null\n\t */\n\tpublic resetSortDirection(): void {\n\t\tthis.sortDirection = null;\n\t}\n\n\t/**\n\t * Sets the sorting direction based on the provided direction\n\t *\n\t * @param direction - The provided direction\n\t */\n\tpublic setSortDirection(direction: NgxTableSortDirection): void {\n\t\tthis.sortDirection = direction;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{"url":"directives/NgxAccessibleAbstractDragAndDropItemDirective.html","title":"directive - NgxAccessibleAbstractDragAndDropItemDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAccessibleAbstractDragAndDropItemDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop-item.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class to avoid circular dependency with the ItemDirective and the HostDirective\n\n            \n\n            \n                Extends\n            \n            \n                            NgxHasFocusDragAndDropAbstractDirective\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                itemId\n                            \n                            \n                                    Public\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                markAsActive\n                            \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                    Optional\n                                onBlur\n                            \n                            \n                                    Public\n                                    Optional\n                                onFocus\n                            \n                            \n                                    \n                                    Public\n                                removeFocus\n                            \n                            \n                                    \n                                    Public\n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDragAndDropAbstractDirective:31\n\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDragAndDropAbstractDirective:20\n\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        markAsActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsActive()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop-item.directive.ts:18\n                        \n                    \n\n\n            \n                \n                         Marks the item as focussed and selected\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:41\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:54\n\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onBlur\n                        \n                    \n                \n            \n            \n                \n                        \n                    onBlur()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:45\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    onFocus()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:47\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:31\n\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:20\n\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        itemId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop-item.directive.ts:13\n                        \n                    \n\n            \n                \n                    An unique id of the draggable item\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject( ElementRef )\n                    \n                \n                        \n                            \n                                Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:39\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:15\n\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, Signal } from '@angular/core';\n\nimport { NgxHasFocusDragAndDropAbstractDirective } from './has-focus.directive';\n\n/**\n * An abstract class to avoid circular dependency with the ItemDirective and the HostDirective\n */\n@Directive()\nexport abstract class NgxAccessibleAbstractDragAndDropItemDirective extends NgxHasFocusDragAndDropAbstractDirective {\n\t/**\n\t * An unique id of the draggable item\n\t */\n\tabstract itemId: Signal;\n\n\t/**\n\t *  Marks the item as focussed and selected\n\t */\n\tabstract markAsActive(): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxAccessibleDragAndDropAbstractService.html":{"url":"classes/NgxAccessibleDragAndDropAbstractService.html","title":"class - NgxAccessibleDragAndDropAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxAccessibleDragAndDropAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service that is used to make drag and drop components accessible for assistive technologies\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                customMessages\n                            \n                            \n                                    Private\n                                    Readonly\n                                liveRegionService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setDragAndDropDescription\n                            \n                            \n                                    Public\n                                setMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                                \n                                    messageRecord\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        customMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:32\n                        \n                    \n\n            \n                \n                    A custom set of messages used for the drag and drop events.\n Please check the readme for more information on what is necessary to make these messages accessible.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        liveRegionService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LiveAnnouncer\n\n                    \n                \n                \n                    \n                        Default value : inject(LiveAnnouncer)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:20\n                        \n                    \n\n            \n                \n                    The live region service\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setDragAndDropDescription\n                        \n                    \n                \n            \n            \n                \n                        \n                    setDragAndDropDescription(parent: HTMLElement, description?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:119\n                        \n                    \n\n\n            \n                \n                        Adds a description to the drag and drop host explaining how the drag and drop functions\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                parent\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe drag and drop host\n\n\n                                            \n                                        \n                                        \n                                                description\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional description used to overwrite the default description\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    setMessage(message: NgxAccessibleDragAndDropMessage)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Sets a message to the live region\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            NgxAccessibleDragAndDropMessage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided message\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:25\n                                \n                            \n                    \n                        \n                                A method that passes the current language, can either be a string or an Observable\n\n\n                                \n                                    Returns :     string | Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        messageRecord\n                    \n                \n\n                \n                    \n                        getmessageRecord()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:161\n                                \n                            \n                    \n                        \n                                Returns the custom message record or the default when no custom record was provided\n\n\n                                \n                                    Returns :         Record\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { inject } from '@angular/core';\nimport { filter, map, Observable, of, take, tap } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxAccessibleDragAndDropMessageRecords } from '../../const';\nimport {\n\tNgxAccessibleDragAndDropMessage,\n\tNgxAccessibleDragAndDropMessageRecord,\n} from '../../types';\nimport { hideElement } from '../../utils';\n\n/**\n * An abstract service that is used to make drag and drop components accessible for assistive technologies\n */\nexport abstract class NgxAccessibleDragAndDropAbstractService {\n\t/**\n\t * The live region service\n\t */\n\tprivate readonly liveRegionService: LiveAnnouncer = inject(LiveAnnouncer);\n\n\t/**\n\t * A method that passes the current language, can either be a string or an Observable\n\t */\n\tabstract get currentLanguage(): string | Observable;\n\n\t/**\n\t * A custom set of messages used for the drag and drop events.\n\t *\n\t *  Please check the readme for more information on what is necessary to make these messages accessible.\n\t */\n\tpublic customMessages: Record;\n\n\t/**\n\t * Sets a message to the live region\n\t *\n\t * @param message - The provided message\n\t */\n\tpublic setMessage(message: NgxAccessibleDragAndDropMessage): Observable {\n\t\t// Iben: If no language was set, we early exit\n\t\tif (!this.currentLanguage) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxAccessibleDragAndDropAbstractService: No language was provided, so no message could be set.'\n\t\t\t);\n\n\t\t\treturn of();\n\t\t}\n\n\t\t// Iben: Take the current language to fetch the message\n\t\treturn (\n\t\t\ttypeof this.currentLanguage === 'string'\n\t\t\t\t? of(this.currentLanguage)\n\t\t\t\t: this.currentLanguage\n\t\t).pipe(\n\t\t\tfilter(Boolean),\n\t\t\ttake(1),\n\t\t\ttap((currentLanguage) => {\n\t\t\t\t// Iben: Fetch the necessary data\n\t\t\t\tconst { type, data } = message;\n\n\t\t\t\tlet result: string = this.messageRecord[currentLanguage][type];\n\n\t\t\t\t// Iben: If no message was found, we early exit and throw an error\n\t\t\t\tif (!result) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'NgxAccessibleDragAndDropAbstractService: No message for the corresponding drag and drop event was found.'\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Replace the necessary substrings\n\t\t\t\tif (type === 'selected' || type === 'deselected' || type === 'cancelled') {\n\t\t\t\t\tresult = result.replace(\n\t\t\t\t\t\t'{{#item}}',\n\t\t\t\t\t\tdata.itemLabel || `${this.messageRecord[currentLanguage].item} ${data.item}`\n\t\t\t\t\t);\n\t\t\t\t} else if (type === 'moved') {\n\t\t\t\t\tresult = result\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t'{{#item}}',\n\t\t\t\t\t\t\tdata.itemLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].item} ${data.item}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t`{{#from}}`,\n\t\t\t\t\t\t\tdata.fromLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].container} ${data.from}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t`{{#to}}`,\n\t\t\t\t\t\t\tdata.toLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].container} ${data.to}`\n\t\t\t\t\t\t);\n\t\t\t\t} else if (type === 'reordered') {\n\t\t\t\t\tresult = result\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t'{{#item}}',\n\t\t\t\t\t\t\tdata.itemLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].item} ${data.item}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.replace(`{{#from}}`, data.from)\n\t\t\t\t\t\t.replace(`{{#to}}`, data.to);\n\t\t\t\t}\n\n\t\t\t\t// Iben: Update the message in the live region\n\t\t\t\tthis.liveRegionService.announce(result);\n\t\t\t}),\n\t\t\tmap(() => null)\n\t\t);\n\t}\n\n\t/**\n\t * Adds a description to the drag and drop host explaining how the drag and drop functions\n\t *\n\t * @param  parent - The drag and drop host\n\t * @param description - An optional description used to overwrite the default description\n\t */\n\tpublic setDragAndDropDescription(parent: HTMLElement, description?: string): Observable {\n\t\t// Iben: Create the description element and its id\n\t\tconst element: HTMLParagraphElement = document.createElement('p');\n\t\tconst id: string = uuid();\n\n\t\t// Iben: Take the current language to fetch the message\n\t\treturn (\n\t\t\ttypeof this.currentLanguage === 'string'\n\t\t\t\t? of(this.currentLanguage)\n\t\t\t\t: this.currentLanguage\n\t\t).pipe(\n\t\t\ttap((language: string) => {\n\t\t\t\t// Iben: Get the description text\n\t\t\t\tconst text = description || this.messageRecord[language].description;\n\n\t\t\t\t// Iben: If no description was found, we early exit and throw an error\n\t\t\t\tif (!text) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'NgxAccessibleDragAndDropAbstractService: No description for the drag and drop container was found.'\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Set the description and id of the element\n\t\t\t\telement.innerText = text;\n\t\t\t\telement.setAttribute('id', id);\n\n\t\t\t\t// Iben: Attach the element to the parent and update the aria id\n\t\t\t\tparent.appendChild(element);\n\t\t\t\tparent.setAttribute('aria-describedby', id);\n\n\t\t\t\t// Iben: Hide element\n\t\t\t\thideElement(element);\n\t\t\t}),\n\t\t\tmap(() => null)\n\t\t);\n\t}\n\n\t/**\n\t * Returns the custom message record or the default when no custom record was provided\n\t */\n\tprivate get messageRecord(): Record {\n\t\treturn this.customMessages || NgxAccessibleDragAndDropMessageRecords;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{"url":"interfaces/NgxAccessibleDragAndDropBaseMessage.html","title":"interface - NgxAccessibleDragAndDropBaseMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAccessibleDragAndDropBaseMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     KeyType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type NgxAccessibleDragAndDropFromToMessage =\n\t| `${string}{{#item}}${string}{{#to}}${string}{{#from}}${string}`\n\t| `${string}{{#item}}${string}{{#from}}${string}{{#to}}${string}`\n\t| `${string}{{#to}}${string}{{#item}}${string}{{#from}}${string}`\n\t| `${string}{{#to}}${string}{{#from}}${string}{{#item}}${string}`\n\t| `${string}{{#from}}${string}{{#item}}${string}{{#to}}${string}`\n\t| `${string}{{#from}}${string}{{#to}}${string}{{#item}}${string}`;\n\nexport interface NgxAccessibleDragAndDropMessageRecord {\n\tselected: `${string}{{#item}}${string}`;\n\tdeselected: `${string}{{#item}}${string}`;\n\treordered: NgxAccessibleDragAndDropFromToMessage;\n\tmoved: NgxAccessibleDragAndDropFromToMessage;\n\tcancelled: `${string}{{#item}}${string}`;\n\titem: string;\n\tcontainer: string;\n\tdescription: string;\n}\n\nexport type NgxAccessibleDragAndDropMoveType = 'reordered' | 'moved';\n\ninterface NgxAccessibleDragAndDropBaseMessage {\n\ttype: KeyType;\n\tdata: DataType;\n}\n\nexport type NgxAccessibleDragAndDropMessage =\n\t| NgxAccessibleDragAndDropBaseMessage\n\t| NgxAccessibleDragAndDropBaseMessage;\n\nexport interface NgxAccessibleDragAndDropMoveEvent {\n\tpreviousIndex: number;\n\tnewIndex: number;\n\tpreviousContainer: number;\n\tnewContainer: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAccessibleDragAndDropContainerDirective.html":{"url":"directives/NgxAccessibleDragAndDropContainerDirective.html","title":"directive - NgxAccessibleDragAndDropContainerDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAccessibleDragAndDropContainerDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-container.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to handle accessible drag and drop flows. This directive is meant to be placed on the drag and drop container(s).\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxAccessibleDragAndDropContainer]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxAccessibleDragAndDropContainer\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                index\n                            \n                            \n                                    Public\n                                    Readonly\n                                label\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required({ alias: \"ngxAccessibleDragAndDropContainerIndex\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-container.directive.ts:15\n                        \n                    \n\n            \n                \n                    The index of the container\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(undefined, { alias: \"ngxAccessibleDragAndDropContainerLabel\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-container.directive.ts:20\n                        \n                    \n\n            \n                \n                    An optional label used in the event messages\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\n\n/**\n * A directive to handle accessible drag and drop flows. This directive is meant to be placed on the drag and drop container(s).\n */\n@Directive({\n\tselector: '[ngxAccessibleDragAndDropContainer]',\n\texportAs: 'ngxAccessibleDragAndDropContainer',\n\tstandalone: true,\n})\nexport class NgxAccessibleDragAndDropContainerDirective {\n\t/**\n\t * The index of the container\n\t */\n\tpublic readonly index = input.required({ alias: \"ngxAccessibleDragAndDropContainerIndex\" });\n\n\t/**\n\t * An optional label used in the event messages\n\t */\n\tpublic readonly label = input(undefined, { alias: \"ngxAccessibleDragAndDropContainerLabel\" });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAccessibleDragAndDropHostDirective.html":{"url":"directives/NgxAccessibleDragAndDropHostDirective.html","title":"directive - NgxAccessibleDragAndDropHostDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAccessibleDragAndDropHostDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to handle accessible drag and drop flows. This directive is meant to be placed on the host of the drag and drop container(s).\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxAccessibleDragAndDropHost]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxAccessibleDragAndDropHost\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                containers\n                            \n                            \n                                    Public\n                                    Readonly\n                                description\n                            \n                            \n                                    Private\n                                    Readonly\n                                dragAndDropService\n                            \n                            \n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                items\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getContainer\n                            \n                            \n                                    Public\n                                markAsActive\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                registerDragAndDropItem\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getContainer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContainer(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:51\n                        \n                    \n\n\n            \n                \n                        Returns the container based on the provided index\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the container\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxAccessibleDragAndDropContainerDirective\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAsActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsActive(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:42\n                        \n                    \n\n\n            \n                \n                        Mark a specific drag and drop item as active\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the drag and drop item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:55\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerDragAndDropItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerDragAndDropItem(item: NgxAccessibleAbstractDragAndDropItemDirective)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            NgxAccessibleAbstractDragAndDropItemDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        containers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChildren(NgxAccessibleDragAndDropContainerDirective, { descendants: true })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:30\n                        \n                    \n\n            \n                \n                    A list of all the drag and drop containers\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(undefined, { alias: \"ngxAccessibleDragAndDropHostDescription\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:35\n                        \n                    \n\n            \n                \n                    An optional description describing how the drag and drop works.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dragAndDropService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxAccessibleDragAndDropAbstractService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:25\n                        \n                    \n\n            \n                \n                    A list of all the drag and drop items\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, AfterViewInit, inject, input, contentChildren } from '@angular/core';\n\nimport {\n\tNgxAccessibleAbstractDragAndDropItemDirective,\n\tNgxAccessibleDragAndDropAbstractService,\n} from '../../abstracts';\n\nimport { NgxAccessibleDragAndDropContainerDirective } from './drag-and-drop-container.directive';\n\n/**\n * A directive to handle accessible drag and drop flows. This directive is meant to be placed on the host of the drag and drop container(s).\n */\n@Directive({\n\tselector: '[ngxAccessibleDragAndDropHost]',\n\texportAs: 'ngxAccessibleDragAndDropHost',\n\tstandalone: true,\n})\nexport class NgxAccessibleDragAndDropHostDirective implements AfterViewInit {\n\tprivate readonly dragAndDropService = inject(NgxAccessibleDragAndDropAbstractService);\n\treadonly elementRef = inject>(ElementRef);\n\n\t/**\n\t * A list of all the drag and drop items\n\t */\n\tpublic items: Record = {};\n\n\t/**\n\t * A list of all the drag and drop containers\n\t */\n\tpublic readonly containers = contentChildren(NgxAccessibleDragAndDropContainerDirective, { descendants: true });\n\n\t/**\n\t * An optional description describing how the drag and drop works.\n\t */\n\tpublic readonly description = input(undefined, { alias: \"ngxAccessibleDragAndDropHostDescription\" });\n\n\t/**\n\t * Mark a specific drag and drop item as active\n\t *\n\t * @param  id - The id of the drag and drop item\n\t */\n\tpublic markAsActive(id: string): void {\n\t\tthis.items[id].markAsActive();\n\t}\n\n\t/**\n\t * Returns the container based on the provided index\n\t *\n\t * @param index - The index of the container\n\t */\n\tpublic getContainer(index: number): NgxAccessibleDragAndDropContainerDirective {\n\t\treturn this.containers().find((container) => container.index() === index);\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Add the description tag\n\t\tthis.dragAndDropService\n\t\t\t.setDragAndDropDescription(this.elementRef.nativeElement, this.description())\n\t\t\t.subscribe();\n\t}\n\n\tpublic registerDragAndDropItem(item: NgxAccessibleAbstractDragAndDropItemDirective): void {\n\t\tthis.items[item.itemId()] = item;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{"url":"interfaces/NgxAccessibleDragAndDropMessageRecord.html","title":"interface - NgxAccessibleDragAndDropMessageRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAccessibleDragAndDropMessageRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cancelled\n                                        \n                                \n                                \n                                        \n                                            container\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            deselected\n                                        \n                                \n                                \n                                        \n                                            item\n                                        \n                                \n                                \n                                        \n                                            moved\n                                        \n                                \n                                \n                                        \n                                            reordered\n                                        \n                                \n                                \n                                        \n                                            selected\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cancelled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cancelled:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        container\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        container:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deselected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deselected:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        item:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        moved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        moved:         NgxAccessibleDragAndDropFromToMessage\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxAccessibleDragAndDropFromToMessage\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reordered\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reordered:         NgxAccessibleDragAndDropFromToMessage\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxAccessibleDragAndDropFromToMessage\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selected:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type NgxAccessibleDragAndDropFromToMessage =\n\t| `${string}{{#item}}${string}{{#to}}${string}{{#from}}${string}`\n\t| `${string}{{#item}}${string}{{#from}}${string}{{#to}}${string}`\n\t| `${string}{{#to}}${string}{{#item}}${string}{{#from}}${string}`\n\t| `${string}{{#to}}${string}{{#from}}${string}{{#item}}${string}`\n\t| `${string}{{#from}}${string}{{#item}}${string}{{#to}}${string}`\n\t| `${string}{{#from}}${string}{{#to}}${string}{{#item}}${string}`;\n\nexport interface NgxAccessibleDragAndDropMessageRecord {\n\tselected: `${string}{{#item}}${string}`;\n\tdeselected: `${string}{{#item}}${string}`;\n\treordered: NgxAccessibleDragAndDropFromToMessage;\n\tmoved: NgxAccessibleDragAndDropFromToMessage;\n\tcancelled: `${string}{{#item}}${string}`;\n\titem: string;\n\tcontainer: string;\n\tdescription: string;\n}\n\nexport type NgxAccessibleDragAndDropMoveType = 'reordered' | 'moved';\n\ninterface NgxAccessibleDragAndDropBaseMessage {\n\ttype: KeyType;\n\tdata: DataType;\n}\n\nexport type NgxAccessibleDragAndDropMessage =\n\t| NgxAccessibleDragAndDropBaseMessage\n\t| NgxAccessibleDragAndDropBaseMessage;\n\nexport interface NgxAccessibleDragAndDropMoveEvent {\n\tpreviousIndex: number;\n\tnewIndex: number;\n\tpreviousContainer: number;\n\tnewContainer: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{"url":"interfaces/NgxAccessibleDragAndDropMoveEvent.html","title":"interface - NgxAccessibleDragAndDropMoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAccessibleDragAndDropMoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            newContainer\n                                        \n                                \n                                \n                                        \n                                            newIndex\n                                        \n                                \n                                \n                                        \n                                            previousContainer\n                                        \n                                \n                                \n                                        \n                                            previousIndex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        newContainer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newContainer:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        newIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previousContainer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previousContainer:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previousIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previousIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type NgxAccessibleDragAndDropFromToMessage =\n\t| `${string}{{#item}}${string}{{#to}}${string}{{#from}}${string}`\n\t| `${string}{{#item}}${string}{{#from}}${string}{{#to}}${string}`\n\t| `${string}{{#to}}${string}{{#item}}${string}{{#from}}${string}`\n\t| `${string}{{#to}}${string}{{#from}}${string}{{#item}}${string}`\n\t| `${string}{{#from}}${string}{{#item}}${string}{{#to}}${string}`\n\t| `${string}{{#from}}${string}{{#to}}${string}{{#item}}${string}`;\n\nexport interface NgxAccessibleDragAndDropMessageRecord {\n\tselected: `${string}{{#item}}${string}`;\n\tdeselected: `${string}{{#item}}${string}`;\n\treordered: NgxAccessibleDragAndDropFromToMessage;\n\tmoved: NgxAccessibleDragAndDropFromToMessage;\n\tcancelled: `${string}{{#item}}${string}`;\n\titem: string;\n\tcontainer: string;\n\tdescription: string;\n}\n\nexport type NgxAccessibleDragAndDropMoveType = 'reordered' | 'moved';\n\ninterface NgxAccessibleDragAndDropBaseMessage {\n\ttype: KeyType;\n\tdata: DataType;\n}\n\nexport type NgxAccessibleDragAndDropMessage =\n\t| NgxAccessibleDragAndDropBaseMessage\n\t| NgxAccessibleDragAndDropBaseMessage;\n\nexport interface NgxAccessibleDragAndDropMoveEvent {\n\tpreviousIndex: number;\n\tnewIndex: number;\n\tpreviousContainer: number;\n\tnewContainer: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxAccordionComponent.html":{"url":"components/NgxAccordionComponent.html","title":"component - NgxAccordionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxAccordionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/accordion/accordion.component.ts\n\n\n\n    \n        Description\n    \n    \n        A WCAG/ARIA compliant implementation of the accordion pattern.\nhttps://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-accordion\n            \n\n\n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroyedSubject\n                            \n                            \n                                    Private\n                                itemRegisteredSubject\n                            \n                            \n                                    Public\n                                items\n                            \n                            \n                                    Public\n                                open\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                moveFocus\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                registerItem\n                            \n                            \n                                    Public\n                                removeItem\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                open\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        open\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48\n                            \n                        \n                \n                    \n                        Open the specific items in the accordion\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        moveFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveFocus(id: string, direction: \"up\" | \"down\" | \"first\" | \"last\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:111\n                        \n                    \n\n\n            \n                \n                        Moves the focus to an accordion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the current item\n\n\n                                            \n                                        \n                                        \n                                                direction\n                                            \n                                                        \"up\" | \"down\" | \"first\" | \"last\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe direction we move in\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:128\n                        \n                    \n\n\n            \n                \n                        Handle the destroyed state\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerItem(item: NgxAccordionItemComponent)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:82\n                        \n                    \n\n\n            \n                \n                        Register an accordion item to the container\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            NgxAccordionItemComponent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn accordion item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeItem(item: NgxAccordionItemComponent)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Removes an accordion item from the container\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            NgxAccordionItemComponent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn accordion item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:38\n                        \n                    \n\n            \n                \n                    A subject to hold the destroyed event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        itemRegisteredSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:33\n                        \n                    \n\n            \n                \n                    A subject to hold a registered event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxAccordionItemComponent[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:43\n                        \n                    \n\n            \n                \n                    A list of all accordion items\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        open\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48\n                        \n                    \n\n            \n                \n                    Open the specific items in the accordion\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n\tChangeDetectionStrategy,\n\tComponent,\n\teffect,\n\tinput,\n\tInputSignal,\n\tOnDestroy,\n} from '@angular/core';\nimport { Subject, take, tap } from 'rxjs';\n\nimport { NgxAccordionOpenBehavior } from '../../types';\n\nimport { NgxAccordionItemComponent } from './item/accordion-item.component';\n\n/**\n * A WCAG/ARIA compliant implementation of the accordion pattern.\n *\n * https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n */\n@Component({\n\tselector: 'ngx-accordion',\n\ttemplate: '',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\thost: {\n\t\tclass: 'ngx-accordion',\n\t\trole: 'region',\n\t},\n})\nexport class NgxAccordionComponent implements OnDestroy {\n\t/**\n\t * A subject to hold a registered event\n\t */\n\tprivate itemRegisteredSubject: Subject = new Subject();\n\n\t/**\n\t * A subject to hold the destroyed event\n\t */\n\tprivate destroyedSubject: Subject = new Subject();\n\n\t/**\n\t * A list of all accordion items\n\t */\n\tpublic items: NgxAccordionItemComponent[] = [];\n\n\t/**\n\t * Open the specific items in the accordion\n\t */\n\tpublic open: InputSignal = input();\n\n\tconstructor() {\n\t\teffect(() => {\n\t\t\tconst open = this.open();\n\n\t\t\tthis.itemRegisteredSubject.pipe(\n\t\t\t\ttake(1),\n\t\t\t\ttap(() => {\n\t\t\t\t\t// Iben: Use a setTimeOut so we wait an extra tick\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t// Iben: Open all items\n\t\t\t\t\t\tif (open === 'all') {\n\t\t\t\t\t\t\tthis.items.forEach((item) => item.updateAccordionItemState(true));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Iben: Open specific items\n\t\t\t\t\t\t\tconst indexes =\n\t\t\t\t\t\t\t\topen === 'first' ? [0] : Array.isArray(open) ? open : [open];\n\n\t\t\t\t\t\t\tindexes.forEach((index) => {\n\t\t\t\t\t\t\t\tthis.items[index]?.updateAccordionItemState(true);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Register an accordion item to the container\n\t *\n\t * @param item - An accordion item\n\t */\n\tpublic registerItem(item: NgxAccordionItemComponent): void {\n\t\tthis.itemRegisteredSubject.next();\n\t\tthis.items.push(item);\n\t}\n\n\t/**\n\t * Removes an accordion item from the container\n\t *\n\t * @param item - An accordion item\n\t */\n\tpublic removeItem(item: NgxAccordionItemComponent): void {\n\t\t// Iben: Get the index of the item\n\t\tconst index = this.items.findIndex(({ id }) => id === item.id);\n\n\t\t// Iben: If no item was found, we early exit\n\t\tif (index === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Remove the item\n\t\tthis.items = [...this.items.slice(0, index), ...this.items.slice(index + 1)];\n\t}\n\n\t/**\n\t * Moves the focus to an accordion\n\t *\n\t * @param  id - The id of the current item\n\t * @param  direction - The direction we move in\n\t */\n\tpublic moveFocus(id: string, direction: 'up' | 'down' | 'first' | 'last') {\n\t\t// Iben: If we go to the first or last accordion, we don't need to find the index\n\t\tif (direction === 'first' || direction === 'last') {\n\t\t\tthis.items[direction === 'first' ? 0 : this.items.length - 1].focus();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Find the index and move to the next\n\t\tconst index = this.items.findIndex((item) => id === item.id);\n\n\t\tthis.items[direction === 'down' ? index + 1 : index - 1]?.focus();\n\t}\n\n\t/**\n\t * Handle the destroyed state\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.destroyedSubject.next();\n\t\tthis.destroyedSubject.complete();\n\t}\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxAccordionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxAccordionItemComponent.html":{"url":"components/NgxAccordionItemComponent.html","title":"component - NgxAccordionItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxAccordionItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts\n\n\n\n    \n        Description\n    \n    \n        A WCAG/ARIA compliant implementation of an item in the accordion pattern.\nhttps://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                AfterViewInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-accordion-item\n            \n\n\n            \n                imports\n                \n                            NgTemplateOutlet\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./accordion-item.component.html\n            \n\n\n\n            \n                styleUrl\n                ./accordion-item.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                contentTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                detailsElement\n                            \n                            \n                                    Public\n                                    Readonly\n                                disabled\n                            \n                            \n                                    Private\n                                hasFocus\n                            \n                            \n                                    Public\n                                    Readonly\n                                headerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isOpen\n                            \n                            \n                                    Private\n                                    Readonly\n                                parent\n                            \n                            \n                                    Private\n                                    Readonly\n                                renderer\n                            \n                            \n                                    Public\n                                    Readonly\n                                summaryElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                arrowDown\n                            \n                            \n                                    \n                                arrowUp\n                            \n                            \n                                    \n                                end\n                            \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    Private\n                                handleWhenFocussed\n                            \n                            \n                                    \n                                home\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    Public\n                                setFocus\n                            \n                            \n                                    Public\n                                updateAccordionItemState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                keydown.ArrowDown\n                            \n                            \n                                keydown.ArrowUp\n                            \n                            \n                                keydown.End\n                            \n                            \n                                keydown.Home\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:107\n                            \n                        \n                \n                    \n                        Whether the accordion item is disabled\n\n                    \n                \n            \n        \n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        keydown.ArrowDown\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nkeydown.ArrowDown(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item below the current one\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keydown.ArrowUp\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nkeydown.ArrowUp(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item above the current one\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keydown.End\n                        \n                    \n                \n            \n            \n                \nkeydown.End()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the last accordion item\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keydown.Home\n                        \n                    \n                \n            \n            \n                \nkeydown.Home()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the first accordion item\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        arrowDown\n                        \n                    \n                \n            \n            \n                \n                        \n                    arrowDown(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowDown', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item below the current one\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        arrowUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    arrowUp(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowUp', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item above the current one\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        end\n                        \n                    \n                \n            \n            \n                \n                        \n                    end()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.End')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the last accordion item\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:137\n                        \n                    \n\n\n            \n                \n                        Set the focus on the summary item\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:193\n                        \n                    \n\n\n            \n                \n                        Only perform an action when the item has focus\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        home\n                        \n                    \n                \n            \n            \n                \n                        \n                    home()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.Home')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the first accordion item\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Listen to the default HTML events of the details object\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:184\n                        \n                    \n\n\n            \n                \n                        Remove the item from its parent when destroyed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:153\n                        \n                    \n\n\n            \n                \n                        Register the item to its parent\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus(hasFocus: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:146\n                        \n                    \n\n\n            \n                \n                        Set the focus state of the accordion item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                hasFocus\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether the item has focus\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateAccordionItemState\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAccordionItemState(isOpen: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Updates the current open/closed state of the accordion item, regardless of the disabled state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isOpen\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        contentTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChild>('contentTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:57\n                        \n                    \n\n            \n                \n                    The template for the content\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        detailsElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('details')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:47\n                        \n                    \n\n            \n                \n                    The details element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:107\n                        \n                    \n\n            \n                \n                    Whether the accordion item is disabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:122\n                        \n                    \n\n            \n                \n                    Whether the accordion item is focussed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChild>('headerTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:62\n                        \n                    \n\n            \n                \n                    The template for the header\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : uuid()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:112\n                        \n                    \n\n            \n                \n                    The id of the accordion item\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:117\n                        \n                    \n\n            \n                \n                    Whether the accordion item is open\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxAccordionComponent\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxAccordionComponent)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                \n                    \n                        Default value : inject(Renderer2)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        summaryElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('summary')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:52\n                        \n                    \n\n            \n                \n                    The summary element\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgTemplateOutlet } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostListener,\n  inject,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  TemplateRef,\n  input,\n  viewChild,\n  contentChild,\n  WritableSignal,\n  signal\n} from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxAccordionComponent } from '../accordion.component';\n\n/**\n * A WCAG/ARIA compliant implementation of an item in the accordion pattern.\n *\n * https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n */\n@Component({\n\tselector: 'ngx-accordion-item',\n\ttemplateUrl: './accordion-item.component.html',\n\tstyleUrl: './accordion-item.component.scss',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\timports: [NgTemplateOutlet],\n\thost: {\n\t\tclass: 'ngx-accordion-item',\n\t},\n})\nexport class NgxAccordionItemComponent implements OnInit, AfterViewInit, OnDestroy {\n\tprivate readonly parent: NgxAccordionComponent = inject(NgxAccordionComponent);\n\tprivate readonly cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\tprivate readonly renderer: Renderer2 = inject(Renderer2);\n\n\t/**\n\t * The details element\n\t */\n\tpublic readonly detailsElement = viewChild('details');\n\n\t/**\n\t * The summary element\n\t */\n\tpublic readonly summaryElement = viewChild('summary');\n\n\t/**\n\t * The template for the content\n\t */\n\tpublic readonly contentTemplate = contentChild>('contentTmpl');\n\n\t/**\n\t * The template for the header\n\t */\n\tpublic readonly headerTemplate = contentChild>('headerTmpl');\n\n\t/**\n\t * Moves the focus to the accordion item above the current one\n\t */\n\t@HostListener('keydown.ArrowUp', ['$event']) arrowUp(event: Event) {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopImmediatePropagation();\n\t\t\tthis.parent.moveFocus(this.id, 'up');\n\t\t});\n\t}\n\n\t/**\n\t * Moves the focus to the accordion item below the current one\n\t */\n\t@HostListener('keydown.ArrowDown', ['$event']) arrowDown(event: Event) {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopImmediatePropagation();\n\t\t\tthis.parent.moveFocus(this.id, 'down');\n\t\t});\n\t}\n\n\t/**\n\t * Moves the focus to the first accordion item\n\t */\n\t@HostListener('keydown.Home') home() {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tthis.parent.moveFocus(this.id, 'first');\n\t\t});\n\t}\n\n\t/**\n\t * Moves the focus to the last accordion item\n\t */\n\t@HostListener('keydown.End') end() {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tthis.parent.moveFocus(this.id, 'last');\n\t\t});\n\t}\n\n\t/**\n\t * Whether the accordion item is disabled\n\t */\n\tpublic readonly disabled = input(false);\n\n\t/**\n\t * The id of the accordion item\n\t */\n\tpublic readonly id: string = uuid();\n\n\t/**\n\t * Whether the accordion item is open\n\t */\n\tpublic isOpen: WritableSignal = signal(false);\n\n\t/**\n\t * Whether the accordion item is focussed\n\t */\n\tprivate hasFocus: WritableSignal = signal(false);\n\n\t/**\n\t * Updates the current open/closed state of the accordion item, regardless of the disabled state\n\t */\n\tpublic updateAccordionItemState(isOpen: boolean): void {\n\t\t// Iben: Sets the item to open and updates the parent state\n\t\tthis.isOpen.set(isOpen)\n\n\t\t// Iben: Trigger the visual changes\n\t\tthis.cdRef.detectChanges();\n\t}\n\t/**\n\t * Set the focus on the summary item\n\t */\n\tpublic focus() {\n\t\tthis.summaryElement()?.nativeElement.focus();\n\t}\n\n\t/**\n\t * Set the focus state of the accordion item\n\t *\n\t * @param hasFocus - Whether the item has focus\n\t */\n\tpublic setFocus(hasFocus: boolean) {\n\t\tthis.hasFocus.set(hasFocus);\n\t}\n\n\t/**\n\t * Register the item to its parent\n\t */\n\tpublic ngOnInit(): void {\n\t\tthis.parent.registerItem(this);\n\t}\n\n\t/**\n\t * Listen to the default HTML events of the details object\n\t */\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: If for some reason no accordion item is found, we return\n\t\tconst detailsElement = this.detailsElement();\n\t\tif (!detailsElement?.nativeElement) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Prevent the accordion from being opened if it is disabled\n\t\tthis.renderer.listen(detailsElement.nativeElement, 'click', (event: Event) => {\n\t\t\tif (this.disabled()) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Listen to the open state of details and update the internal one\n\t\tthis.renderer.listen(detailsElement.nativeElement, 'toggle', (event: ToggleEvent) => {\n\t\t\tthis.updateAccordionItemState(event.newState === 'open');\n\t\t});\n\t}\n\n\t/**\n\t * Remove the item from its parent when destroyed\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.parent.removeItem(this);\n\t}\n\n\t/**\n\t * Only perform an action when the item has focus\n\t *\n\t * @param  action - The provided action\n\t */\n\tprivate handleWhenFocussed(action: () => void) {\n\t\t// Iben: Early exit if there's no focus\n\t\tif (!this.hasFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Perform the action\n\t\taction();\n\t}\n}\n\n    \n\n    \n        \n\t\n\t\t\n\t\n\n\t\n\t\t\n\t\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t\t\t\t\t\t\t\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxAccordionItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxAriaSortPipe.html":{"url":"pipes/NgxAriaSortPipe.html","title":"pipe - NgxAriaSortPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxAriaSortPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/aria-sort/aria-sort.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxAriaSort\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/aria-sort/aria-sort.pipe.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     \"none\" | \"ascending\" | \"descending\"\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { NgxAbstractTableCellDirective } from '../../components';\nimport { NgxTableSortEvent } from '../../types';\n\n\n@Pipe({\n\tname: 'ngxAriaSort',\n\tstandalone: true,\n})\nexport class NgxAriaSortPipe implements PipeTransform {\n\ttransform(value: {\n\t\tcurrentSorting: NgxTableSortEvent;\n\t\tcell: NgxAbstractTableCellDirective;\n\t}): 'none' | 'ascending' | 'descending' {\n\t\tconst { cell } = value;\n\n\t\tif (!cell || !cell.sortDirection) {\n\t\t\treturn 'none';\n\t\t}\n\n\t\treturn cell.sortDirection.toLocaleLowerCase() as 'ascending' | 'descending';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxAuthenticatedHttpClient.html":{"url":"injectables/NgxAuthenticatedHttpClient.html","title":"injectable - NgxAuthenticatedHttpClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxAuthenticatedHttpClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An opinionated wrapper of the HttpClient providing easy ways to make authenticated and unauthenticated calls\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                download\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Private\n                                handleUrl\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(url: string, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:99\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a DELETE request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(url: string, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Constructs a GET request tailored to downloading to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(url: string, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:41\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a GET request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUrl(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Adds a base-url to every request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe url of the request\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                        \n                    patch(url: string, body: any, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:166\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a PATCH request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe body we wish to send\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post\n                        \n                    \n                \n            \n            \n                \n                        \n                    post(url: string, body: any, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:120\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a POST request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe body we wish to send\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(url: string, body?: any, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:143\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a PUT request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe body we wish to send\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpClient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable, inject } from '@angular/core';\nimport clean from 'obj-clean';\nimport { map, Observable } from 'rxjs';\n\nimport { NgxAuthenticationUrlHandlerToken } from '../../tokens';\nimport { NgxAuthenticatedHttpClientConfiguration } from '../../types';\n\n/**\n * An opinionated wrapper of the HttpClient providing easy ways to make authenticated and unauthenticated calls\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxAuthenticatedHttpClient {\n\tprivate readonly httpClient = inject(HttpClient);\n\n\tprivate baseUrl: string;\n\n\tconstructor() {\n\t\tconst baseUrlHandler = inject(NgxAuthenticationUrlHandlerToken);\n\n\t\t// Iben: Setup the base url\n\t\tthis.baseUrl = baseUrlHandler ? baseUrlHandler() : '';\n\t}\n\n\t/**\n\t * Adds a base-url to every request\n\t * @param {string} url - The url of the request\n\t */\n\tprivate handleUrl(url: string): string {\n\t\treturn `${this.baseUrl}/${url}`;\n\t}\n\n\t/**\n\t * Constructs a GET request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic get(\n\t\turl: string,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.get(\n\t\t\tthis.handleUrl(url),\n\t\t\tclean({ withCredentials, params, context }) as Parameters[1]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a GET request tailored to downloading to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic download(\n\t\turl: string,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient\n\t\t\t.get(\n\t\t\t\tthis.handleUrl(url),\n\t\t\t\tclean({\n\t\t\t\t\twithCredentials,\n\t\t\t\t\tparams,\n\t\t\t\t\tresponseType: 'blob',\n\t\t\t\t\tobserve: 'response',\n\t\t\t\t\tcontext,\n\t\t\t\t}) as Parameters[1]\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\tmap((response: HttpResponse) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfileType: response.headers.get('content-disposition').split('.')[1],\n\t\t\t\t\t\tblob: response.body as Blob,\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\t/**\n\t * Constructs a DELETE request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic delete(\n\t\turl: string,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.delete(\n\t\t\tthis.handleUrl(url),\n\t\t\tclean({ params, withCredentials, context }) as Parameters[1]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a POST request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param body - The body we wish to send\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic post(\n\t\turl: string,\n\t\tbody: any,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.post(\n\t\t\tthis.handleUrl(url),\n\t\t\tbody,\n\t\t\tclean({ params, withCredentials, context }) as Parameters[2]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a PUT request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param body - The body we wish to send\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic put(\n\t\turl: string,\n\t\tbody?: any,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.put(\n\t\t\tthis.handleUrl(url),\n\t\t\tbody,\n\t\t\tclean({ params, withCredentials, context }) as Parameters[2]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a PATCH request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param body - The body we wish to send\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic patch(\n\t\turl: string,\n\t\tbody: any,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.patch(\n\t\t\tthis.handleUrl(url),\n\t\t\tbody,\n\t\t\tclean({ params, withCredentials, context }) as Parameters[2]\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{"url":"interfaces/NgxAuthenticatedHttpClientConfiguration.html","title":"interface - NgxAuthenticatedHttpClientConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAuthenticatedHttpClientConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/types/authentication-configuration.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            authenticatedCallHandler\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            baseUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            interceptors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authenticatedCallHandler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authenticatedCallHandler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional handler for each authenticated API request made by the NgxAuthenticatedHttpClient\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseUrl:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A base url generator function that will be run at injection time used by any request made by the NgxAuthenticatedHttpClient\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interceptors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        interceptors:     HttpInterceptorFn[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpInterceptorFn[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional list of interceptors that will be provided to the HttpClient\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpInterceptorFn, HttpRequest } from '@angular/common/http';\nimport { Type } from '@angular/core';\n\nimport { NgxAuthenticationAbstractService } from '../abstracts';\n\n/**\n * The configuration of the authentication handlers\n */\nexport interface NgxAuthenticationConfiguration {\n\t/**\n\t * The provided implementation of the NgxAuthenticationAbstractService\n\t */\n\tservice: Type;\n\t/**\n\t * An optional set of configuration to provide when the NgxAuthenticatedHttpClient needs to be used\n\t */\n\thttpClientConfiguration?: NgxAuthenticatedHttpClientConfiguration;\n}\n\nexport interface NgxAuthenticatedHttpClientConfiguration {\n\t/**\n\t * An optional list of interceptors that will be provided to the HttpClient\n\t */\n\tinterceptors?: HttpInterceptorFn[];\n\t/**\n\t * A base url generator function that will be run at injection time used by any request made by the NgxAuthenticatedHttpClient\n\t */\n\tbaseUrl?: () => string;\n\t/**\n\t * An optional handler for each authenticated API request made by the NgxAuthenticatedHttpClient\n\t */\n\tauthenticatedCallHandler?: (request: HttpRequest) => HttpRequest;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAuthenticatedRoute.html":{"url":"interfaces/NgxAuthenticatedRoute.html","title":"interface - NgxAuthenticatedRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAuthenticatedRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/types/authenticated-route.types.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface for the routes used in an application that has uses the NgxAuthenticationAbstractService\n\n            \n\n            \n                Extends\n            \n            \n                        Route\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Route } from '@angular/router';\n\n/**\n * An interface for the routes used in an application that has uses the NgxAuthenticationAbstractService\n */\nexport interface NgxAuthenticatedRoute extends Route {\n\tdata?: {\n\t\t/**\n\t\t * The features for the NgxHasFeatureGuard\n\t\t */\n\t\tfeature?: FeatureType | FeatureType[];\n\t\t/**\n\t\t * Whether all features should be provided, by default true, for the NgxHasFeatureGuard\n\t\t */\n\t\tshouldHaveAllFeatures?: boolean;\n\t\t/**\n\t\t * The permissions for the NgxHasPermissionGuard\n\t\t */\n\t\tpermission?: PermissionType | PermissionType[];\n\t\t/**\n\t\t * Whether all permissions should be provided, by default true, for the NgxHasPermissionGuard\n\t\t */\n\t\tshouldHaveAllPermissions?: boolean;\n\t\t/**\n\t\t * Whether the user should be authenticated, for the NgxIsAuthenticatedGuard\n\t\t */\n\t\tshouldBeAuthenticated?: boolean;\n\t\t/**\n\t\t * The location to redirect to if one of the guards conditions isn't met\n\t\t */\n\t\tredirect?: string[];\n\t\t/**\n\t\t * Remaining additional properties\n\t\t */\n\t\t[key: string]: unknown;\n\t};\n}\n\nexport type NgxAuthenticatedRoutes = NgxAuthenticatedRoute[];\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxAuthenticationAbstractService.html":{"url":"classes/NgxAuthenticationAbstractService.html","title":"class - NgxAuthenticationAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxAuthenticationAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/abstracts/authentication.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service used by the directives, guards and other components of @ibenvandeveire/ngx-auth\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationResponseSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                authenticationStatusSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                globalFeaturesSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                hasAuthenticated$\n                            \n                            \n                                    Public\n                                    Readonly\n                                isAuthenticated$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                getAuthenticationResponse\n                            \n                            \n                                    Private\n                                getSession\n                            \n                            \n                                    Public\n                                hasFeature\n                            \n                            \n                                    Public\n                                hasPermission\n                            \n                            \n                                    Public\n                                setGlobalFeatures\n                            \n                            \n                                    Public\n                                signIn\n                            \n                            \n                                    Protected\n                                    Abstract\n                                signInUser\n                            \n                            \n                                    Public\n                                signOut\n                            \n                            \n                                    Protected\n                                    Abstract\n                                signOutUser\n                            \n                            \n                                    Protected\n                                storeAuthenticationResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    user$\n                                \n                                \n                                    session$\n                                \n                                \n                                    metadata$\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationResponseSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(undefined)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:34\n                        \n                    \n\n            \n                \n                    A subject to store the authentication response if no other state implementation was provided\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationStatusSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject('unset')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:40\n                        \n                    \n\n            \n                \n                    A subject to store whether we've authenticated already\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        globalFeaturesSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject[]>([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:46\n                        \n                    \n\n            \n                \n                    A subject to store global features that are available for all users, regardless of their authenticated state\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        hasAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status !== 'unset')\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:53\n                        \n                    \n\n            \n                \n                    Whether an authentication attempt has been made\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        isAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status === 'signed-in')\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:61\n                        \n                    \n\n            \n                \n                    Whether the user is authenticated\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getAuthenticationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuthenticationResponse()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Returns the authentication response from the state\n\n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:232\n                        \n                    \n\n\n            \n                \n                        Returns a session or an empty session depending on the authenticated state\n\n\n                        \n                            Returns :     Observable<>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasFeature\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasFeature(requiredFeatures: NgxAuthenticationResponseFeature[], shouldHaveAllFeatures: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Returns whether the user has the required features.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                requiredFeatures\n                                            \n                                                            NgxAuthenticationResponseFeature[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn array of required features\n\n\n                                            \n                                        \n                                        \n                                                shouldHaveAllFeatures\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether all features in the array are required, by default true\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasPermission\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasPermission(requiredPermissions, shouldHaveAllPermissions: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:211\n                        \n                    \n\n\n            \n                \n                        Returns whether the user has the required permissions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                requiredPermissions\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn array of required permissions\n\n\n                                            \n                                        \n                                        \n                                                shouldHaveAllPermissions\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether all permissions in the array are required, by default true\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setGlobalFeatures\n                        \n                    \n                \n            \n            \n                \n                        \n                    setGlobalFeatures(features: NgxAuthenticationResponseFeature[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:199\n                        \n                    \n\n\n            \n                \n                        Sets a set of global features that are always present, regardless of the authenticated state of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                features\n                                            \n                                                            NgxAuthenticationResponseFeature[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA list of features\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInData: SignInDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Signs in a user and stores the authentication response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInData\n                                            \n                                                            SignInDataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data needed to sign in a user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        signInUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInUser(signInData: SignInDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:71\n                        \n                    \n\n\n            \n                \n                        The call required to sign in a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInData\n                                            \n                                                            SignInDataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data needed to sign in a user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        signOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOut(signoutDataType?: SignoutDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:158\n                        \n                    \n\n\n            \n                \n                        Signs out a user and removes the stored authentication response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signoutDataType\n                                            \n                                                            SignoutDataType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional data needed to sign out a use\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        signOutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOutUser(signoutDataType?: SignoutDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:80\n                        \n                    \n\n\n            \n                \n                        The call required to sign out a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signoutDataType\n                                            \n                                                            SignoutDataType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional data needed to sign out a user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        storeAuthenticationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeAuthenticationResponse(response: AuthenticationResponseType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Stores the authentication response in the state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                        AuthenticationResponseType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authentication response\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        user$\n                    \n                \n\n                \n                    \n                        getuser$()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:103\n                                \n                            \n                    \n                        \n                                The authenticated user\n\n\n                                \n                                    Returns :     Observable<>\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        session$\n                    \n                \n\n                \n                    \n                        getsession$()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:114\n                                \n                            \n                    \n                        \n                                The session of the authenticated user\n\n\n                                \n                                    Returns :     Observable<>\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        metadata$\n                    \n                \n\n                \n                    \n                        getmetadata$()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:125\n                                \n                            \n                    \n                        \n                                The metadata of the authenticated user\n\n\n                                \n                                    Returns :     Observable<>\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { AuthenticationResponse } from '@ibenvandeveire/types-authentication';\nimport {\n\tBehaviorSubject,\n\tcombineLatest,\n\tdistinctUntilChanged,\n\tfilter,\n\tmap,\n\tObservable,\n\tof,\n\tswitchMap,\n\ttap,\n} from 'rxjs';\n\nimport { NgxAuthenticationResponseFeature, NgxAuthenticationStatus } from '../types';\n\n/**\n * An abstract service used by the directives, guards and other components of @ibenvandeveire/ngx-auth\n *\n * @template AuthenticationResponseType - The type of authentication response\n * @template SignInDataType - The data type used to sign in a user\n * @template SignoutDataType - The data type used to sign out a user\n * @template SignOutResponseType - The data type you get when signing out a user\n */\nexport abstract class NgxAuthenticationAbstractService = AuthenticationResponse,\n\tSignInDataType = any,\n\tSignoutDataType = any,\n\tSignOutResponseType = void,\n> {\n\t/**\n\t * A subject to store the authentication response if no other state implementation was provided\n\t */\n\tprivate readonly authenticationResponseSubject: BehaviorSubject =\n\t\tnew BehaviorSubject(undefined);\n\n\t/**\n\t * A subject to store whether we've authenticated already\n\t */\n\tprivate readonly authenticationStatusSubject: BehaviorSubject =\n\t\tnew BehaviorSubject('unset');\n\n\t/**\n\t * A subject to store global features that are available for all users, regardless of their authenticated state\n\t */\n\tprivate readonly globalFeaturesSubject: BehaviorSubject[]\n\t> = new BehaviorSubject[]>([]);\n\n\t/**\n\t * Whether an authentication attempt has been made\n\t */\n\tpublic readonly hasAuthenticated$: Observable = this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status !== 'unset')\n\t);\n\n\t/**\n\t * Whether the user is authenticated\n\t */\n\tpublic readonly isAuthenticated$: Observable = this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status === 'signed-in')\n\t);\n\n\t/**\n\t * The call required to sign in a user\n\t *\n\t * @param signInData - The data needed to sign in a user\n\t */\n\tprotected abstract signInUser(\n\t\tsignInData: SignInDataType\n\t): Observable;\n\n\t/**\n\t * The call required to sign out a user\n\t *\n\t * @param signoutDataType - Optional data needed to sign out a user\n\t */\n\tprotected abstract signOutUser(\n\t\tsignoutDataType?: SignoutDataType\n\t): Observable;\n\n\t/**\n\t * Stores the authentication response in the state\n\t *\n\t * @param response - The authentication response\n\t */\n\tprotected storeAuthenticationResponse(response: AuthenticationResponseType): void {\n\t\tthis.authenticationResponseSubject.next(response);\n\t}\n\n\t/**\n\t * Returns the authentication response from the state\n\t */\n\tprotected getAuthenticationResponse(): Observable {\n\t\treturn this.authenticationResponseSubject.asObservable();\n\t}\n\n\t/**\n\t * The authenticated user\n\t */\n\tpublic get user$(): Observable {\n\t\treturn this.getAuthenticationResponse().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap((response) => response.user),\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * The session of the authenticated user\n\t */\n\tpublic get session$(): Observable {\n\t\treturn this.getAuthenticationResponse().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap(({ session }: AuthenticationResponseType) => session),\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * The metadata of the authenticated user\n\t */\n\tpublic get metadata$(): Observable {\n\t\treturn this.getAuthenticationResponse().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap(({ metadata }: AuthenticationResponseType) => metadata),\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * Signs in a user and stores the authentication response\n\t *\n\t * @param signInData - The data needed to sign in a user\n\t */\n\tpublic signIn(signInData: SignInDataType): Observable {\n\t\t// Iben: Perform the call to sign in a user\n\t\treturn this.signInUser(signInData).pipe(\n\t\t\ttap((response: AuthenticationResponseType) => {\n\t\t\t\t// Iben: Set the user as signed in\n\t\t\t\tthis.authenticationStatusSubject.next('signed-in');\n\n\t\t\t\t// Iben: Store the authentication response\n\t\t\t\tthis.storeAuthenticationResponse(response);\n\t\t\t}),\n\t\t\t// Iben: Convert to void\n\t\t\tmap(() => undefined)\n\t\t);\n\t}\n\n\t/**\n\t * Signs out a user and removes the stored authentication response\n\t *\n\t * @param signoutDataType - Optional data needed to sign out a use\n\t */\n\tpublic signOut(signoutDataType?: SignoutDataType): Observable {\n\t\t// Iben: Perform the call to sign out a user\n\t\treturn this.signOutUser(signoutDataType).pipe(\n\t\t\ttap(() => {\n\t\t\t\t// Iben: Set the user as signed out\n\t\t\t\tthis.authenticationStatusSubject.next('signed-out');\n\n\t\t\t\t// Iben: Remove the stored authentication response\n\t\t\t\tthis.storeAuthenticationResponse(undefined);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Returns whether the user has the required features.\n\t *\n\t * @param requiredFeatures - An array of required features\n\t * @param shouldHaveAllFeatures - Whether all features in the array are required, by default true\n\t */\n\tpublic hasFeature(\n\t\trequiredFeatures: NgxAuthenticationResponseFeature[],\n\t\tshouldHaveAllFeatures: boolean = true\n\t): Observable {\n\t\t// Iben: Get the session\n\t\treturn combineLatest([this.getSession(), this.globalFeaturesSubject.asObservable()]).pipe(\n\t\t\tmap(([{ features }, globalFeatures]) => {\n\t\t\t\tconst sessionFeatures = new Set([...(features || []), ...(globalFeatures || [])]);\n\t\t\t\t// Iben: Return whether the user has the required features\n\t\t\t\t// We cast to strings here to make the typing work\n\t\t\t\treturn shouldHaveAllFeatures\n\t\t\t\t\t? requiredFeatures.every((feature) => sessionFeatures.has(`${feature}`))\n\t\t\t\t\t: requiredFeatures.some((feature) => sessionFeatures.has(`${feature}`));\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Sets a set of global features that are always present, regardless of the authenticated state of the user\n\t *\n\t * @param  features - A list of features\n\t */\n\tpublic setGlobalFeatures(\n\t\tfeatures: NgxAuthenticationResponseFeature[]\n\t): void {\n\t\tthis.globalFeaturesSubject.next(features);\n\t}\n\n\t/**\n\t * Returns whether the user has the required permissions.\n\t *\n\t * @param requiredPermissions - An array of required permissions\n\t * @param shouldHaveAllPermissions - Whether all permissions in the array are required, by default true\n\t */\n\tpublic hasPermission(\n\t\trequiredPermissions: AuthenticationResponseType['session']['permissions'],\n\t\tshouldHaveAllPermissions: boolean = true\n\t): Observable {\n\t\t// Iben: Get the session\n\t\treturn this.getSession().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap(({ permissions }) => {\n\t\t\t\tconst sessionPermissions = new Set([...permissions]);\n\n\t\t\t\t// Iben: Return whether the user has the required permissions\n\t\t\t\treturn shouldHaveAllPermissions\n\t\t\t\t\t? requiredPermissions.every((permission) => sessionPermissions.has(permission))\n\t\t\t\t\t: requiredPermissions.some((permission) => sessionPermissions.has(permission));\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Returns a session or an empty session depending on the authenticated state\n\t */\n\tprivate getSession(): Observable {\n\t\treturn this.isAuthenticated$.pipe(\n\t\t\tswitchMap((isAuthenticated) => {\n\t\t\t\t// Iben: If the user is authenticated, we return the session, if not, we return an empty version for the hasPermission and hasFeature methods\n\t\t\t\t// This ensures we always get a response\n\t\t\t\treturn isAuthenticated\n\t\t\t\t\t? this.session$\n\t\t\t\t\t: of({\n\t\t\t\t\t\t\tfeatures: [],\n\t\t\t\t\t\t\tpermissions: [],\n\t\t\t\t\t\t});\n\t\t\t})\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAuthenticationConfiguration.html":{"url":"interfaces/NgxAuthenticationConfiguration.html","title":"interface - NgxAuthenticationConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAuthenticationConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/types/authentication-configuration.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration of the authentication handlers\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            httpClientConfiguration\n                                        \n                                \n                                \n                                        \n                                            service\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        httpClientConfiguration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        httpClientConfiguration:         NgxAuthenticatedHttpClientConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxAuthenticatedHttpClientConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional set of configuration to provide when the NgxAuthenticatedHttpClient needs to be used\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        service\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        service:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The provided implementation of the NgxAuthenticationAbstractService\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpInterceptorFn, HttpRequest } from '@angular/common/http';\nimport { Type } from '@angular/core';\n\nimport { NgxAuthenticationAbstractService } from '../abstracts';\n\n/**\n * The configuration of the authentication handlers\n */\nexport interface NgxAuthenticationConfiguration {\n\t/**\n\t * The provided implementation of the NgxAuthenticationAbstractService\n\t */\n\tservice: Type;\n\t/**\n\t * An optional set of configuration to provide when the NgxAuthenticatedHttpClient needs to be used\n\t */\n\thttpClientConfiguration?: NgxAuthenticatedHttpClientConfiguration;\n}\n\nexport interface NgxAuthenticatedHttpClientConfiguration {\n\t/**\n\t * An optional list of interceptors that will be provided to the HttpClient\n\t */\n\tinterceptors?: HttpInterceptorFn[];\n\t/**\n\t * A base url generator function that will be run at injection time used by any request made by the NgxAuthenticatedHttpClient\n\t */\n\tbaseUrl?: () => string;\n\t/**\n\t * An optional handler for each authenticated API request made by the NgxAuthenticatedHttpClient\n\t */\n\tauthenticatedCallHandler?: (request: HttpRequest) => HttpRequest;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxBroadcastChannelService.html":{"url":"injectables/NgxBroadcastChannelService.html","title":"injectable - NgxBroadcastChannelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxBroadcastChannelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that wraps the BroadCastChannel API and provides an Observable based implementation to the channel messages.\nFor more information:\nhttps://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                broadcastChannel\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closeChannel\n                            \n                            \n                                    Public\n                                initChannel\n                            \n                            \n                                    Public\n                                postMessage\n                            \n                            \n                                    Public\n                                selectChannelMessageErrors\n                            \n                            \n                                    Public\n                                selectChannelMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        closeChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeChannel(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:55\n                        \n                    \n\n\n            \n                \n                        closeChannel\nThe closeChannel method closes a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    initChannel(...args: ConstructorParameters<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:29\n                        \n                    \n\n\n            \n                \n                        initChannel\nThe initChannel method initializes a new BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ConstructorParameters<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe arguments to pass to the BroadcastChannel constructor.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        postMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    postMessage(channelName: string, message: MessageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:72\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    MessageType\n                            \n                        \n                    \n\n            \n                \n                        postMessage\nThe postMessage method sends a message to a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                        \n                                                message\n                                            \n                                                        MessageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe payload to send through the channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectChannelMessageErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectChannelMessageErrors(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:115\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    MessageType\n                            \n                        \n                    \n\n            \n                \n                        selectChannelMessageErrors\nThe selectChannelMessageErrors method subscribes to the messageerror (bc.onmessageerror) event of a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                Observable - The messageerror event of the channel wrapped in an observable.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectChannelMessages\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectChannelMessages(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:93\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    MessageType\n                            \n                        \n                    \n\n            \n                \n                        selectChannelMessages\nThe selectChannelMessages method subscribes to the message (bc.onmessage) event of a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                Observable - The message event of the channel wrapped in an observable.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        broadcastChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:20\n                        \n                    \n\n            \n                \n                    A record holding all the broadcast channels\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { EMPTY, fromEvent, Observable } from 'rxjs';\n\n/**\n * A service that wraps the BroadCastChannel API and provides an Observable based implementation to the channel messages.\n *\n * For more information:\n * https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxBroadcastChannelService {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A record holding all the broadcast channels\n\t */\n\tprivate broadcastChannel: Record = {};\n\n\t/**\n\t * initChannel\n\t *\n\t * The initChannel method initializes a new BroadcastChannel instance.\n\t *\n\t * @param args{ConstructorParameters} - The arguments to pass to the BroadcastChannel constructor.\n\t */\n\tpublic initChannel(...args: ConstructorParameters): void {\n\t\t// Iben: Only run when in browser\n\t\tthis.windowService.runInBrowser(() => {\n\t\t\tconst [channelName] = args;\n\n\t\t\tif (!channelName) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t'NgxUtils: There was an attempt to initialize a BroadcastChannel without providing a name.'\n\t\t\t\t);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this.broadcastChannel[channelName]) {\n\t\t\t\tthis.broadcastChannel[channelName] = new BroadcastChannel(...args);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * closeChannel\n\t *\n\t * The closeChannel method closes a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t */\n\tpublic closeChannel(channelName: string): void {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.broadcastChannel[channelName].close();\n\t\tdelete this.broadcastChannel[channelName];\n\t}\n\n\t/**\n\t * postMessage\n\t *\n\t * The postMessage method sends a message to a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t * @param message{any} - The payload to send through the channel.\n\t */\n\tpublic postMessage(channelName: string, message: MessageType): void {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxUtils: There was an attempt to post a message to a channel without providing a name or the selected channel does not exist. The included message was:',\n\t\t\t\tmessage\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.broadcastChannel[channelName].postMessage(message);\n\t}\n\n\t/**\n\t * selectChannelMessages\n\t *\n\t * The selectChannelMessages method subscribes to the `message` (bc.onmessage) event of a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t * @returns Observable - The message event of the channel wrapped in an observable.\n\t */\n\tpublic selectChannelMessages(\n\t\tchannelName: string\n\t): Observable> {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\tconsole.error(\n\t\t\t\t\"NgxUtils: There was an attempt to select a BroadcastChannel's messages without providing a name or the selected channel does not exist.\"\n\t\t\t);\n\n\t\t\treturn EMPTY;\n\t\t}\n\n\t\treturn fromEvent>(this.broadcastChannel[channelName], 'message');\n\t}\n\n\t/**\n\t * selectChannelMessageErrors\n\t *\n\t * The selectChannelMessageErrors method subscribes to the `messageerror` (bc.onmessageerror) event of a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t * @returns Observable - The messageerror event of the channel wrapped in an observable.\n\t */\n\tpublic selectChannelMessageErrors(\n\t\tchannelName: string\n\t): Observable> {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\tconsole.error(\n\t\t\t\t\"NgxUtils: There was an attempt to select a BroadcastChannel's message errors without providing a name or the selected channel does not exist.\"\n\t\t\t);\n\n\t\t\treturn EMPTY;\n\t\t}\n\n\t\treturn fromEvent>(\n\t\t\tthis.broadcastChannel[channelName],\n\t\t\t'messageerror'\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxConfigurableLayoutItemComponent.html":{"url":"components/NgxConfigurableLayoutItemComponent.html","title":"component - NgxConfigurableLayoutItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxConfigurableLayoutItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts\n\n\n\n    \n        Description\n    \n    \n        The layout item pairs with the  container.\nThis component will in itself not be rendered. The key provided in this component\nwill need to be provided in the [keys] input or the formControl of the layout container\nas well. The order in which they are provided there, will define the order in which\nthe items will be rendered.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-configurable-layout-item\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./configurable-layout-item.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                key\n                            \n                            \n                                    Public\n                                    Readonly\n                                label\n                            \n                            \n                                    Public\n                                    Readonly\n                                template\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                key\n                            \n                            \n                                label\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        key\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:19\n                            \n                        \n                \n                    \n                        The unique key of the layout item.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:24\n                            \n                        \n                \n                    \n                        An optional label for the layout item used for WCAG purposes.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        key\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:19\n                        \n                    \n\n            \n                \n                    The unique key of the layout item.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        label\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:24\n                        \n                    \n\n            \n                \n                    An optional label for the layout item used for WCAG purposes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        template\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild>('contentTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:29\n                        \n                    \n\n            \n                \n                    The template reference of the;\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, TemplateRef, input, viewChild } from '@angular/core';\n\n/**\n * The layout item pairs with the `` container.\n * This component will in itself not be rendered. The key provided in this component\n * will need to be provided in the `[keys]` input or the `formControl` of the layout container\n * as well. The order in which they are provided there, will define the order in which\n * the items will be rendered.\n */\n@Component({\n\tselector: 'ngx-configurable-layout-item',\n\ttemplateUrl: './configurable-layout-item.component.html',\n\tstandalone: true,\n})\nexport class NgxConfigurableLayoutItemComponent {\n\t/**\n\t * The unique key of the layout item.\n\t */\n\tpublic readonly key = input.required();\n\n\t/**\n\t * An optional label for the layout item used for WCAG purposes.\n\t */\n\tpublic readonly label = input();\n\n\t/**\n\t * The template reference of the;\n\t */\n\tpublic readonly template = viewChild>('contentTmpl');\n}\n\n    \n\n    \n        \n\t\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxConfigurableLayoutItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{"url":"interfaces/NgxConfigurableLayoutItemDropEvent.html","title":"interface - NgxConfigurableLayoutItemDropEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxConfigurableLayoutItemDropEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/configurable-layout.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentGrid\n                                        \n                                \n                                \n                                        \n                                            element\n                                        \n                                \n                                \n                                        \n                                            eventType\n                                        \n                                \n                                \n                                        \n                                            showInactive\n                                        \n                                \n                                \n                                        \n                                            targetRowIndex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentGrid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentGrid:         NgxConfigurableLayoutGrid\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxConfigurableLayoutGrid\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        element:         NgxConfigurableLayoutItemEntity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxConfigurableLayoutItemEntity\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventType:     \"sorting\" | \"moving\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"sorting\" | \"moving\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showInactive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showInactive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targetRowIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        targetRowIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxConfigurableLayoutItemSizeOption = 'fit-content' | 'fill' | 'equal';\n\nexport type NgxConfigurableLayoutType = 'static' | 'editable';\n\nexport interface NgxConfigurableLayoutItemEntity {\n\tkey: string;\n\tisActive: boolean;\n\tdisabled?: boolean;\n}\n\nexport type NgxConfigurableLayoutGrid = NgxConfigurableLayoutItemEntity[][];\n\nexport interface NgxConfigurableLayoutItemDropEvent {\n\tcurrentGrid: NgxConfigurableLayoutGrid;\n\teventType: 'sorting' | 'moving';\n\telement: NgxConfigurableLayoutItemEntity;\n\tshowInactive: boolean;\n\ttargetRowIndex: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxConfigurableLayoutItemEntity.html":{"url":"interfaces/NgxConfigurableLayoutItemEntity.html","title":"interface - NgxConfigurableLayoutItemEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxConfigurableLayoutItemEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/configurable-layout.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            disabled\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxConfigurableLayoutItemSizeOption = 'fit-content' | 'fill' | 'equal';\n\nexport type NgxConfigurableLayoutType = 'static' | 'editable';\n\nexport interface NgxConfigurableLayoutItemEntity {\n\tkey: string;\n\tisActive: boolean;\n\tdisabled?: boolean;\n}\n\nexport type NgxConfigurableLayoutGrid = NgxConfigurableLayoutItemEntity[][];\n\nexport interface NgxConfigurableLayoutItemDropEvent {\n\tcurrentGrid: NgxConfigurableLayoutGrid;\n\teventType: 'sorting' | 'moving';\n\telement: NgxConfigurableLayoutItemEntity;\n\tshowInactive: boolean;\n\ttargetRowIndex: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxConfigurableLayoutItemSizePipe.html":{"url":"pipes/NgxConfigurableLayoutItemSizePipe.html","title":"pipe - NgxConfigurableLayoutItemSizePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxConfigurableLayoutItemSizePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/item-size/item-size.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxConfigurableLayoutItemSize\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(undefined: literal type, itemSize: NgxConfigurableLayoutItemSizeOption)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/item-size/item-size.pipe.ts:17\n                        \n                    \n\n\n            \n                \n                        Returns the needed styling for the ngx-configurable-layout component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {\n\t\t\tkeys: null,\n\t\t\tshowInactive: true,\n\t\t}\n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                itemSize\n                                            \n                                                            NgxConfigurableLayoutItemSizeOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe itemSize used by the layout\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { NgxConfigurableLayoutItemEntity, NgxConfigurableLayoutItemSizeOption } from '../../types';\n\n@Pipe({\n\tname: 'ngxConfigurableLayoutItemSize',\n\tstandalone: true,\n})\nexport class NgxConfigurableLayoutItemSizePipe implements PipeTransform {\n\t/**\n\t * Returns the needed styling for the ngx-configurable-layout component\n\t *\n\t * @param keys - The keys used in the grid\n\t * @param showInactive - Whether we want to show inactive items\n\t * @param itemSize - The itemSize used by the layout\n\t */\n\ttransform(\n\t\t{\n\t\t\tkeys,\n\t\t\tshowInactive,\n\t\t}: { keys: NgxConfigurableLayoutItemEntity[][]; showInactive: boolean } = {\n\t\t\tkeys: null,\n\t\t\tshowInactive: true,\n\t\t},\n\t\titemSize: NgxConfigurableLayoutItemSizeOption\n\t): Record {\n\t\t// Iben: If non data source is provided or if the itemSize is 'fill',\n\t\t// we can use the default grid size which will result in filling up the available grid space.\n\t\tif (!keys || itemSize === 'fill') {\n\t\t\treturn {};\n\t\t}\n\n\t\t// Iben: If itemSize is 'fit-content', the columns will be based on the content of the template\n\t\tif (itemSize === 'fit-content') {\n\t\t\treturn {\n\t\t\t\t'grid-auto-columns': 'max-content',\n\t\t\t};\n\t\t}\n\n\t\t// Iben: If itemSize is 'equal', all items in the grid need to be of equal size.\n\t\t// For this, we grab the row with the largest amount of items, which will define the amount of columns\n\t\tconst longestRow = Math.max(\n\t\t\t...[...keys].map((item) => {\n\t\t\t\treturn item.filter((key) => {\n\t\t\t\t\tif (!showInactive) {\n\t\t\t\t\t\treturn key.isActive;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}).length;\n\t\t\t})\n\t\t);\n\n\t\treturn {\n\t\t\t'grid-template-columns': `repeat(${longestRow}, minmax(0, 1fr))`,\n\t\t};\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookie.html":{"url":"interfaces/NgxCookie.html","title":"interface - NgxCookie","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookie\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            domain\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresAfterDays\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sameSite\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useLocalStorage\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        domain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresAfterDays\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresAfterDays:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sameSite\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sameSite:     \"Lax\" | \"Strict\" | \"None\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"Lax\" | \"Strict\" | \"None\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useLocalStorage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useLocalStorage:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieChangedEvent.html":{"url":"interfaces/NgxCookieChangedEvent.html","title":"interface - NgxCookieChangedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieChangedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxCookieEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            changedCategories\n                                        \n                                \n                                \n                                        \n                                            changedServices\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        changedCategories\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        changedCategories:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        changedServices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        changedServices:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieConfiguration.html":{"url":"interfaces/NgxCookieConfiguration.html","title":"interface - NgxCookieConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoClearCookies\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            autoShow\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cookie\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            guiOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideFromBots\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lazyHtmlGeneration\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            manageScriptTags\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revision\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            root\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoClearCookies\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoClearCookies:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        autoShow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoShow:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cookie\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cookie:         NgxCookie\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxCookie\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        guiOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        guiOptions:     GuiOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     GuiOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideFromBots\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideFromBots:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lazyHtmlGeneration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lazyHtmlGeneration:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        manageScriptTags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        manageScriptTags:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"opt-in\" | \"opt-out\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"opt-in\" | \"opt-out\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revision\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revision:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        root\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        root:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieEvent.html":{"url":"interfaces/NgxCookieEvent.html","title":"interface - NgxCookieEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cookie\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cookie\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cookie:     CookieValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CookieValue\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieLanguageConfiguration.html":{"url":"interfaces/NgxCookieLanguageConfiguration.html","title":"interface - NgxCookieLanguageConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieLanguageConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoDetect\n                                        \n                                \n                                \n                                        \n                                            default\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            rtl\n                                        \n                                \n                                \n                                        \n                                            translations\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoDetect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoDetect:     \"document\" | \"browser\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"document\" | \"browser\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rtl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rtl:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translations:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxCookieService.html":{"url":"injectables/NgxCookieService.html","title":"injectable - NgxCookieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxCookieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/services/cookie/cookie.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that implements the CookieConsent from https://cookieconsent.orestbida.com and provides the necessary Observables to handle this setup.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                cookiesChanged$\n                            \n                            \n                                    Private\n                                    Readonly\n                                cookiesChangedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                cookiesConsentChanged$\n                            \n                            \n                                    Private\n                                    Readonly\n                                cookiesConsentChangedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                cookiesConsented$\n                            \n                            \n                                    Private\n                                    Readonly\n                                cookiesConsentedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                firstCookiesConsented$\n                            \n                            \n                                    Private\n                                    Readonly\n                                firstCookiesConsentedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                modalVisible$\n                            \n                            \n                                    Private\n                                    Readonly\n                                modalVisibleSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                acceptCategory\n                            \n                            \n                                    Public\n                                acceptService\n                            \n                            \n                                    Public\n                                getCookie\n                            \n                            \n                                    Public\n                                getCookieObservable\n                            \n                            \n                                    Public\n                                hasAcceptedCategory\n                            \n                            \n                                    Public\n                                hasAcceptedService\n                            \n                            \n                                    Public\n                                removeCookie\n                            \n                            \n                                    Public\n                                setCookie\n                            \n                            \n                                    Public\n                                setupCookiesHandler\n                            \n                            \n                                    Public\n                                showModal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        acceptCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    acceptCategory(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:184\n                        \n                    \n\n\n            \n                \n                        Accept a category of cookies\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the categories\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        acceptService\n                        \n                    \n                \n            \n            \n                \n                        \n                    acceptService(category: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:213\n                        \n                    \n\n\n            \n                \n                        Accept a category of cookies\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the category\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the service\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCookie(cookie: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:229\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Get a cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nName of the cookie\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataType | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCookieObservable\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCookieObservable(cookie: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:238\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Get a cookie as an observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nName of the cookie\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasAcceptedCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasAcceptedCategory(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:166\n                        \n                    \n\n\n            \n                \n                        Whether a certain category of cookies was accepted\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the category\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasAcceptedService\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasAcceptedService(category: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:194\n                        \n                    \n\n\n            \n                \n                        Whether a certain service within a category was accepted\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the category\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the service\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeCookie(cookie: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:277\n                        \n                    \n\n\n            \n                \n                        Remove a cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cookie we wish to remove\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    setCookie(cookie: NgxCookieValue)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:256\n                        \n                    \n\n\n            \n                \n                        Set a cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            NgxCookieValue\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cookie we wish to set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setupCookiesHandler\n                        \n                    \n                \n            \n            \n                \n                        \n                    setupCookiesHandler(categories: NgxCookieCategories, language: NgxCookieLanguageConfiguration, configuration?: NgxCookieConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Sets up the CookieConsent.\nFor more information of on this configuration, check the documentation\nhttps://cookieconsent.orestbida.com/essential/getting-started.html\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                categories\n                                            \n                                                            NgxCookieCategories\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe categories of cookies\n\n\n                                            \n                                        \n                                        \n                                                language\n                                            \n                                                            NgxCookieLanguageConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe language settings of the cookies\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxCookieConfiguration\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional set configuration settings\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showModal\n                        \n                    \n                \n            \n            \n                \n                        \n                    showModal()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:220\n                        \n                    \n\n\n            \n                \n                        Show the cookie modal\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cookiesChanged$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable>\n\n                    \n                \n                \n                    \n                        Default value : this.cookiesChangedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:86\n                        \n                    \n\n            \n                \n                    Emits every time the set cookies have been changed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cookiesChangedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject>\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:53\n                        \n                    \n\n            \n                \n                    Subject to hold the cookiesChanged event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cookiesConsentChanged$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.cookiesConsentChangedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:75\n                        \n                    \n\n            \n                \n                    An event triggered when the user modifies their preferences and only if consent has already been provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cookiesConsentChangedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:41\n                        \n                    \n\n            \n                \n                    Subject to hold the consentChanged event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cookiesConsented$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.cookiesConsentedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:69\n                        \n                    \n\n            \n                \n                    An event triggering the choice of consent on every page load.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cookiesConsentedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:36\n                        \n                    \n\n            \n                \n                    Subject to hold the onConsent event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        firstCookiesConsented$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.firstCookiesConsentedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:63\n                        \n                    \n\n            \n                \n                    An event triggered only the very first time that the user expresses their choice of consent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        firstCookiesConsentedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:31\n                        \n                    \n\n            \n                \n                    Subject to hold the onFirstConsent event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        modalVisible$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.modalVisibleSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:81\n                        \n                    \n\n            \n                \n                    Whether the cookies modal is currently visible\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        modalVisibleSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tfalse\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:46\n                        \n                    \n\n            \n                \n                    Subject to hold the modalVisible event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:58\n                        \n                    \n\n            \n                \n                    Instance of the window service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport {\n\tBehaviorSubject,\n\tObservable,\n\tSubject,\n\tcombineLatest,\n\tdistinctUntilChanged,\n\tmap,\n\tstartWith,\n} from 'rxjs';\nimport * as CookieConsent from 'vanilla-cookieconsent';\n\nimport {\n\tNgxCookieCategories,\n\tNgxCookieChangedEvent,\n\tNgxCookieConfiguration,\n\tNgxCookieEvent,\n\tNgxCookieLanguageConfiguration,\n\tNgxCookieValue,\n} from '../../types';\n\n/**\n * A service that implements the CookieConsent from https://cookieconsent.orestbida.com and provides the necessary Observables to handle this setup.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxCookieService {\n\t/**\n\t * Subject to hold the onFirstConsent event\n\t */\n\tprivate readonly firstCookiesConsentedSubject: Subject = new Subject();\n\n\t/**\n\t * Subject to hold the onConsent event\n\t */\n\tprivate readonly cookiesConsentedSubject: Subject = new Subject();\n\n\t/**\n\t * Subject to hold the consentChanged event\n\t */\n\tprivate readonly cookiesConsentChangedSubject: Subject = new Subject();\n\n\t/**\n\t * Subject to hold the modalVisible event\n\t */\n\tprivate readonly modalVisibleSubject: BehaviorSubject = new BehaviorSubject(\n\t\tfalse\n\t);\n\n\t/**\n\t * Subject to hold the cookiesChanged event\n\t */\n\tprivate readonly cookiesChangedSubject: Subject> = new Subject();\n\n\t/**\n\t * Instance of the window service\n\t */\n\tprivate readonly windowService: NgxWindowService = inject(NgxWindowService);\n\n\t/**\n\t * An event triggered only the very first time that the user expresses their choice of consent\n\t */\n\tpublic readonly firstCookiesConsented$: Observable =\n\t\tthis.firstCookiesConsentedSubject.asObservable();\n\n\t/**\n\t * An event triggering the choice of consent on every page load.\n\t */\n\tpublic readonly cookiesConsented$: Observable =\n\t\tthis.cookiesConsentedSubject.asObservable();\n\n\t/**\n\t * An event triggered when the user modifies their preferences and only if consent has already been provided.\n\t */\n\tpublic readonly cookiesConsentChanged$: Observable =\n\t\tthis.cookiesConsentChangedSubject.asObservable();\n\n\t/**\n\t * Whether the cookies modal is currently visible\n\t */\n\tpublic readonly modalVisible$: Observable = this.modalVisibleSubject.asObservable();\n\n\t/**\n\t * Emits every time the set cookies have been changed\n\t */\n\tpublic readonly cookiesChanged$: Observable> =\n\t\tthis.cookiesChangedSubject.asObservable();\n\n\t/**\n\t * Sets up the CookieConsent.\n\t *\n\t * For more information of on this configuration, check the documentation\n\t * https://cookieconsent.orestbida.com/essential/getting-started.html\n\t *\n\t * @param categories - The categories of cookies\n\t * @param language - The language settings of the cookies\n\t * @param configuration - An optional set configuration settings\n\t */\n\tpublic setupCookiesHandler(\n\t\tcategories: NgxCookieCategories,\n\t\tlanguage: NgxCookieLanguageConfiguration,\n\t\tconfiguration?: NgxCookieConfiguration\n\t): void {\n\t\t// Iben: If we're not in the browser, we early exit, so server-side rendering can be enabled\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If no categories were provided, we early exit and throw an error, as the cookie preference cannot be shown without.\n\t\tif (!categories || Object.keys(categories).length === 0) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxCookies: No categories were provided for the cookie handler. At least one category is required.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Setup the onFirstConsent listener\n\t\tconst onFirstConsent = (event) => {\n\t\t\tthis.firstCookiesConsentedSubject.next(event);\n\t\t};\n\t\tonFirstConsent.bind(this);\n\n\t\t// Iben: Setup the onConsent listener\n\t\tconst onConsent = (event) => {\n\t\t\tthis.cookiesConsentedSubject.next(event);\n\t\t};\n\t\tonConsent.bind(this);\n\n\t\t// Iben: Setup the onChange listener\n\t\tconst onChange = (event) => {\n\t\t\tthis.cookiesConsentChangedSubject.next(event);\n\t\t};\n\t\tonChange.bind(this);\n\n\t\t// Iben: Setup the onModalShow listener\n\t\tconst onModalShow = () => {\n\t\t\tthis.modalVisibleSubject.next(true);\n\t\t};\n\t\tonModalShow.bind(this);\n\n\t\t// Iben: Setup the onModalHide listener\n\t\tconst onModalHide = () => {\n\t\t\tthis.modalVisibleSubject.next(false);\n\t\t};\n\t\tonModalHide.bind(this);\n\n\t\t// Iben: Run the CookieConsent handler\n\t\tCookieConsent.run({\n\t\t\t...(configuration || {}),\n\t\t\tonFirstConsent,\n\t\t\tonConsent,\n\t\t\tonChange,\n\t\t\tonModalHide,\n\t\t\tonModalShow,\n\t\t\tcategories,\n\t\t\tlanguage,\n\t\t});\n\t}\n\n\t/**\n\t * Whether a certain category of cookies was accepted\n\t *\n\t * @param name - The name of the category\n\t */\n\tpublic hasAcceptedCategory(name: string): Observable {\n\t\t// Iben: Return every time the cookie consent has changed\n\t\treturn combineLatest([\n\t\t\tthis.cookiesConsented$.pipe(startWith(undefined)),\n\t\t\tthis.cookiesConsentChanged$.pipe(startWith(undefined)),\n\t\t]).pipe(\n\t\t\tmap(() => {\n\t\t\t\t// Iben: Check if the category was accepted\n\t\t\t\treturn CookieConsent.acceptedCategory(name);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Accept a category of cookies\n\t *\n\t * @param name - The name of the categories\n\t */\n\tpublic acceptCategory(name: string): void {\n\t\tCookieConsent.acceptCategory(name);\n\t}\n\n\t/**\n\t * Whether a certain service within a category was accepted\n\t *\n\t * @param category - The name of the category\n\t * @param name - The name of the service\n\t */\n\tpublic hasAcceptedService(category: string, name: string): Observable {\n\t\t// Iben: Return every time the cookie consent has changed\n\t\treturn combineLatest([\n\t\t\tthis.cookiesConsented$.pipe(startWith(undefined)),\n\t\t\tthis.cookiesConsentChanged$.pipe(startWith(undefined)),\n\t\t]).pipe(\n\t\t\tmap(() => {\n\t\t\t\t// Iben: Check if the service within the provided category was accepted\n\t\t\t\treturn CookieConsent.acceptedService(name, category);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Accept a category of cookies\n\t *\n\t * @param category - The name of the category\n\t * @param name - The name of the service\n\t */\n\tpublic acceptService(category: string, name: string): void {\n\t\tCookieConsent.acceptService(name, category);\n\t}\n\n\t/**\n\t * Show the cookie modal\n\t */\n\tpublic showModal(): void {\n\t\tCookieConsent.show(true);\n\t}\n\n\t/**\n\t * Get a cookie\n\t *\n\t * @param cookie - Name of the cookie\n\t */\n\tpublic getCookie(cookie: string): DataType | undefined {\n\t\treturn (CookieConsent.getCookie('data') || {})[cookie];\n\t}\n\n\t/**\n\t * Get a cookie as an observable\n\t *\n\t * @param cookie - Name of the cookie\n\t */\n\tpublic getCookieObservable(cookie: string): Observable {\n\t\t// Iben: Return every time the set cookies are changed\n\t\treturn this.cookiesChanged$.pipe(\n\t\t\tstartWith(CookieConsent.getCookie('data') || {}),\n\t\t\t// Iben: Get the cookie value\n\t\t\tmap(() => {\n\t\t\t\treturn this.getCookie(cookie);\n\t\t\t}),\n\t\t\t// Iben: As the cookiesChanged event emits every time all cookies are rest, we check if the cookie value was really changed\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * Set a cookie\n\t *\n\t * @param cookie - The cookie we wish to set\n\t */\n\tpublic setCookie(cookie: NgxCookieValue): void {\n\t\t// Iben: Set the cookie\n\t\tconst isSet = CookieConsent.setCookieData({\n\t\t\tvalue: { [cookie.name]: cookie.value },\n\t\t\tmode: 'update',\n\t\t});\n\n\t\t// Iben: If the cookie was not set, we return\n\t\tif (!isSet) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Update the subject so we can notify listeners\n\t\tthis.cookiesChangedSubject.next(CookieConsent.getCookie('data'));\n\t}\n\n\t/**\n\t * Remove a cookie\n\t *\n\t * @param cookie - The cookie we wish to remove\n\t */\n\tpublic removeCookie(cookie: string): void {\n\t\t// Iben: Get the current cookies\n\t\tconst currentCookies = CookieConsent.getCookie('data') || {};\n\n\t\t// Iben: Remove the cookie from the currently set cookies\n\t\tconst { [cookie]: _removedValue, ...value } = currentCookies;\n\n\t\t// Iben: Remove the cookie from the cookies holder\n\t\tconst isSet = CookieConsent.setCookieData({ value, mode: 'overwrite' });\n\n\t\t// Iben: If the cookie was not set, we return\n\t\tif (!isSet) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Update the subject so we can notify listeners\n\t\tthis.cookiesChangedSubject.next(CookieConsent.getCookie('data'));\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieValue.html":{"url":"interfaces/NgxCookieValue.html","title":"interface - NgxCookieValue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieValue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/set-cookie.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgxCookieValue {\n\tname: string;\n\tvalue: DataType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxCookiesFallBackComponent.html":{"url":"directives/NgxCookiesFallBackComponent.html","title":"directive - NgxCookiesFallBackComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxCookiesFallBackComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/abstracts/cookie-fallback/cookie-fallback.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component that can optionally be used as a fallback to content that depends on accepted cookies\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                cookies\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        cookies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/abstracts/cookie-fallback/cookie-fallback.component.ts:13\n                        \n                    \n\n            \n                \n                    The cookies that were required to show the original content\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\n\nimport { NgxHasCookieConfiguration } from '../../types';\n\n/**\n *An abstract component that can optionally be used as a fallback to content that depends on accepted cookies\n */\n@Directive()\nexport abstract class NgxCookiesFallBackComponent {\n\t/**\n\t * The cookies that were required to show the original content\n\t */\n\treadonly cookies = input([]);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxCurrencyTableCellComponent.html":{"url":"components/NgxCurrencyTableCellComponent.html","title":"component - NgxCurrencyTableCellComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxCurrencyTableCellComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/cell/currency-cell.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxAbstractTableCellDirective\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NgxAbstractTableCellDirective, useExisting: NgxCurrencyTableCellComponent,\n}\n                \n            \n\n\n            \n                selector\n                ngx-table-currency-cell\n            \n\n\n            \n                imports\n                \n                            CurrencyPipe\n                \n            \n\n\n\n            \n                template\n                \n\t{{ item | currency: currency() }}\n\n\t\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                cellClass\n                            \n                            \n                                    \n                                    Public\n                                    \n                                cellTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                currency\n                            \n                            \n                                    \n                                    Public\n                                    \n                                footerTemplate\n                            \n                            \n                                    \n                                    Public\n                                    \n                                headerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:31\n\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:42\n\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:47\n\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:36\n\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:57\n\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:82\n\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:91\n\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ngx-currency-table-cell'\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:49\n\n                        \n                    \n\n            \n                \n                    A generic class to indicate that this is a currency cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('cellTmpl', {static: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:44\n\n                        \n                    \n\n            \n                \n                    ViewChild that represents the cell template\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('EUR')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/currency-cell.component.ts:25\n                        \n                    \n\n            \n                \n                    The ISO 4217 format of the provided amount, by default EUR\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('footerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:38\n\n                        \n                    \n\n            \n                \n                    A template for the footer of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('headerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:32\n\n                        \n                    \n\n            \n                \n                    A template for the header of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:31\n\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:42\n\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:47\n\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:52\n\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:36\n\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:14\n\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CurrencyPipe } from '@angular/common';\nimport { Component, ContentChild, TemplateRef, ViewChild, input } from '@angular/core';\n\nimport { NgxAbstractTableCellDirective } from './cell.directive';\n\n@Component({\n\tselector: 'ngx-table-currency-cell',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NgxAbstractTableCellDirective,\n\t\t\tuseExisting: NgxCurrencyTableCellComponent,\n\t\t},\n\t],\n\ttemplate: `\n\t\t\n\t\t\t{{ item | currency: currency() }}\n\t\t\n\t`,\n\timports: [CurrencyPipe],\n})\nexport class NgxCurrencyTableCellComponent extends NgxAbstractTableCellDirective {\n\t/**\n\t * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format of the provided amount, by default `EUR`\n\t */\n\tpublic readonly currency = input('EUR');\n\n\t/**\n\t * A template for the header of the cell\n\t */\n\n\t@ContentChild('headerTmpl', { static: false })\n\tpublic override headerTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the footer of the cell\n\t */\n\n\t@ContentChild('footerTmpl', { static: false })\n\tpublic override footerTemplate: TemplateRef = undefined;\n\n\t/**\n\t * ViewChild that represents the cell template\n\t */\n\n\t@ViewChild('cellTmpl', { static: true }) public override cellTemplate: TemplateRef = undefined;\n\n\t/**\n\t * A generic class to indicate that this is a currency cell\n\t */\n\tpublic override cellClass: string = 'ngx-currency-table-cell';\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t{{ item | currency: currency() }}\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxCurrencyTableCellComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxCypressTagDirective.html":{"url":"directives/NgxCypressTagDirective.html","title":"directive - NgxCypressTagDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxCypressTagDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [cypressTag]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cypressTag\n                            \n                            \n                                    Public\n                                tag\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                cypressTag\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        cypressTag\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts:25\n                            \n                        \n                \n                    \n                        Sets the tag for Cypress\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cypressTag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts:25\n                        \n                    \n\n            \n                \n                    Sets the tag for Cypress\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n\t\treturn get({}, this.cypressTag());\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tcomputed,\n\tDirective,\n\tinput,\n\tInputSignal,\n\tSignal,\n} from '@angular/core';\nimport { get } from 'lodash';\n\n@Directive({\n\tselector: '[cypressTag]',\n\tstandalone: true,\n\thost: {\n\t\t'[attr.data-cy]': 'tag()',\n\t},\n})\nexport class NgxCypressTagDirective {\n\tpublic tag: Signal = computed(() => {\n\t\treturn get({}, this.cypressTag());\n\t});\n\n\t/**\n\t * Sets the tag for Cypress\n\t */\n\tpublic cypressTag: InputSignal = input.required();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxDateTableCellComponent.html":{"url":"components/NgxDateTableCellComponent.html","title":"component - NgxDateTableCellComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxDateTableCellComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/cell/date-cell.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxAbstractTableCellDirective\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NgxAbstractTableCellDirective, useExisting: NgxDateTableCellComponent,\n}\n                \n            \n\n\n            \n                selector\n                ngx-table-date-cell\n            \n\n\n            \n                imports\n                \n                            DatePipe\n                                NgxTableGetPipe\n                \n            \n\n\n\n            \n                template\n                \n\t@if (rowKey()) { @if (row | getProp: rowKey(); as rowItem) {\n\t\n\t\t{{ rowItem | date : format() }}\n\t\n\t} @else {\n\t{{ emptyLabel() }}\n\t} } @else { @if (item) {\n\t{{ (itemKey() ? item[itemKey()] : item) | date : format() }}\n\t} @else {\n\t{{ emptyLabel() }}\n\t} }\n\n\t\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                cellClass\n                            \n                            \n                                    \n                                    Public\n                                    \n                                cellTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                emptyLabel\n                            \n                            \n                                    \n                                    Public\n                                    \n                                footerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                format\n                            \n                            \n                                    \n                                    Public\n                                    \n                                headerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                itemKey\n                            \n                            \n                                    Public\n                                    Readonly\n                                rowKey\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                itemKey\n                            \n                            \n                                rowKey\n                            \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        itemKey\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:47\n                            \n                        \n                \n                    \n                        In case the date is nested in an object, we can provide a key to fetch it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        rowKey\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:52\n                            \n                        \n                \n                    \n                        In case the date is nested in the row, we can provide a key to fetch it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:31\n\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:42\n\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:47\n\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:36\n\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:57\n\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:82\n\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:91\n\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ngx-date-table-cell'\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:77\n\n                        \n                    \n\n            \n                \n                    A generic class to indicate that this is a date cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('cellTmpl', {static: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:72\n\n                        \n                    \n\n            \n                \n                    ViewChild that represents the cell template\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        emptyLabel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('Empty date')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:42\n                        \n                    \n\n            \n                \n                    The label to display when date is invalid or empty\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('footerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:65\n\n                        \n                    \n\n            \n                \n                    A template for the footer of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('dd/MM/yyyy')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:37\n                        \n                    \n\n            \n                \n                    The format of the provided date, by default dd/MM/yyyy\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('headerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:59\n\n                        \n                    \n\n            \n                \n                    A template for the header of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        itemKey\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:47\n                        \n                    \n\n            \n                \n                    In case the date is nested in an object, we can provide a key to fetch it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        rowKey\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:52\n                        \n                    \n\n            \n                \n                    In case the date is nested in the row, we can provide a key to fetch it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:31\n\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:42\n\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:47\n\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:52\n\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:36\n\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:14\n\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { DatePipe } from '@angular/common';\nimport { Component, ContentChild, TemplateRef, ViewChild, input } from '@angular/core';\n\nimport { NgxTableGetPipe } from '../../pipes/get-pipe/get.pipe';\n\nimport { NgxAbstractTableCellDirective } from './cell.directive';\n\n@Component({\n\tselector: 'ngx-table-date-cell',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NgxAbstractTableCellDirective,\n\t\t\tuseExisting: NgxDateTableCellComponent,\n\t\t},\n\t],\n\ttemplate: `\n\t\t\n\t\t\t@if (rowKey()) { @if (row | getProp: rowKey(); as rowItem) {\n\t\t\t\n\t\t\t\t{{ rowItem | date : format() }}\n\t\t\t\n\t\t\t} @else {\n\t\t\t{{ emptyLabel() }}\n\t\t\t} } @else { @if (item) {\n\t\t\t{{ (itemKey() ? item[itemKey()] : item) | date : format() }}\n\t\t\t} @else {\n\t\t\t{{ emptyLabel() }}\n\t\t\t} }\n\t\t\n\t`,\n\timports: [DatePipe, NgxTableGetPipe],\n})\nexport class NgxDateTableCellComponent extends NgxAbstractTableCellDirective {\n\t/**\n\t * The format of the provided date, by default `dd/MM/yyyy`\n\t */\n\tpublic readonly format = input('dd/MM/yyyy');\n\n\t/**\n\t * The label to display when date is invalid or empty\n\t */\n\tpublic readonly emptyLabel = input('Empty date');\n\n\t/**\n\t * In case the date is nested in an object, we can provide a key to fetch it\n\t */\n\tpublic readonly itemKey = input();\n\n\t/**\n\t * In case the date is nested in the row, we can provide a key to fetch it\n\t */\n\tpublic readonly rowKey = input();\n\n\t/**\n\t * A template for the header of the cell\n\t */\n\n\t@ContentChild('headerTmpl', { static: false })\n\tpublic override headerTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the footer of the cell\n\t */\n\n\t@ContentChild('footerTmpl', { static: false })\n\tpublic override footerTemplate: TemplateRef = undefined;\n\n\t/**\n\t * ViewChild that represents the cell template\n\t */\n\n\t@ViewChild('cellTmpl', { static: true })\n\tpublic override cellTemplate: TemplateRef = undefined;\n\n\t/**\n\t * A generic class to indicate that this is a date cell\n\t */\n\tpublic override cellClass: string = 'ngx-date-table-cell';\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t@if (rowKey()) { @if (row | getProp: rowKey(); as rowItem) {\t\t\t{{ rowItem | date : format() }}\t\t} @else {\t{{ emptyLabel() }}\t} } @else { @if (item) {\t{{ (itemKey() ? item[itemKey()] : item) | date : format() }}\t} @else {\t{{ emptyLabel() }}\t} }\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxDateTableCellComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxDisplayContentComponent.html":{"url":"directives/NgxDisplayContentComponent.html","title":"directive - NgxDisplayContentComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxDisplayContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class to use when implementing custom fallbacks for the NgxDisplayContentDirective\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts:11\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts:11\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\n\n/**\n * An abstract class to use when implementing custom fallbacks for the NgxDisplayContentDirective\n */\n@Directive()\nexport abstract class NgxDisplayContentComponent {\n\t/**\n\t * An optional data input to provide data to the fallback components. This property is typed as any.\n\t */\n\treadonly data = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxDisplayContentConfiguration.html":{"url":"interfaces/NgxDisplayContentConfiguration.html","title":"interface - NgxDisplayContentConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxDisplayContentConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/display-content.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            components\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideWhenNoTemplateProvided\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            listenToOnlineStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        components\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        components:         NgxDisplayContentComponentConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxDisplayContentComponentConfiguration\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideWhenNoTemplateProvided\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideWhenNoTemplateProvided:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        listenToOnlineStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        listenToOnlineStatus:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TemplateRef, Type } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../abstracts';\n\nexport type NgxDisplayContentStatus = 'loading' | 'error' | 'offline';\n\nexport type NgxDisplayContentAriaLive = 'polite' | 'assertive' | 'off';\n\ntype NgxDisplayContentRecord = Partial>;\n\nexport type NgxDisplayContentConditions = NgxDisplayContentRecord;\n\nexport type NgxDisplayContentComponentConfiguration = NgxDisplayContentRecord\n>;\n\nexport type NgxDisplayContentOverrideConfiguration = NgxDisplayContentRecord;\n\tdata?: any;\n}>;\n\nexport interface NgxDisplayContentConfiguration {\n\tcomponents: NgxDisplayContentComponentConfiguration;\n\thideWhenNoTemplateProvided?: boolean;\n\tlistenToOnlineStatus?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxDisplayContentDirective.html":{"url":"directives/NgxDisplayContentDirective.html","title":"directive - NgxDisplayContentDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxDisplayContentDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                NgxDisplayContentDirective handles whether content should be shown based on a loading, error or offline condition by using provided default components or a provided override template\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [displayContent]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                conditions\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                displayContent\n                            \n                            \n                                    Readonly\n                                displayContentAriaLive\n                            \n                            \n                                    Public\n                                displayContentConfiguration\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                onlineService\n                            \n                            \n                                    Private\n                                overrideConfiguration\n                            \n                            \n                                    Private\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                updateViewSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                renderInitialTemplate\n                            \n                            \n                                    Private\n                                renderTemplate\n                            \n                            \n                                    Private\n                                setAriaBusyTag\n                            \n                            \n                                    Private\n                                setAriaLiveTag\n                            \n                            \n                                    Private\n                                updateConditions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                displayContent\n                            \n                            \n                                displayContentConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:81\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        displayContent\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:68\n                            \n                        \n                \n                    \n                        Renders the item or a default fallback based on the provided conditions\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        displayContentConfiguration\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:73\n                            \n                        \n                \n                    \n                        Override the existing configuration with custom configuration\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:118\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:168\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderInitialTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderInitialTemplate()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:214\n                        \n                    \n\n\n            \n                \n                        Renders the initial template\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderTemplate(status: NgxDisplayContentStatus, component: Type)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:179\n                        \n                    \n\n\n            \n                \n                        Renders the provided component or template\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            NgxDisplayContentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe status we're handling\n\n\n                                            \n                                        \n                                        \n                                                component\n                                            \n                                                            Type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component we're wishing to render\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setAriaBusyTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAriaBusyTag(isLoading: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:277\n                        \n                    \n\n\n            \n                \n                        Sets the aria-busy tag of the item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isLoading\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe loading state of the item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setAriaLiveTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAriaLiveTag(value: \"polite\" | \"assertive\" | \"off\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:237\n                        \n                    \n\n\n            \n                \n                        Sets the aria-live tag of the item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        \"polite\" | \"assertive\" | \"off\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value we wish to set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateConditions\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateConditions(conditions: NgxDisplayContentConditions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:223\n                        \n                    \n\n\n            \n                \n                        Updates the conditions\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                conditions\n                                            \n                                                            NgxDisplayContentConditions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe conditions we want to merge with the current set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        conditions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxDisplayContentConditions\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:63\n                        \n                    \n\n            \n                \n                    Holds the conditions we use to render the component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxDisplayContentConfigurationToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        displayContent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:68\n                        \n                    \n\n            \n                \n                    Renders the item or a default fallback based on the provided conditions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        displayContentAriaLive\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('polite')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:81\n                        \n                    \n\n            \n                \n                    The aria-live label we wish to provide to the parent element. By default, this is 'polite'.\nhttps://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        displayContentConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:73\n                        \n                    \n\n            \n                \n                    Override the existing configuration with custom configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:48\n                        \n                    \n\n            \n                \n                    A subject to handle the destroyed flow\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onlineService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxOnlineService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overrideConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxDisplayContentOverrideConfiguration\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:58\n                        \n                    \n\n            \n                \n                    Holds an optional override configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        updateViewSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:53\n                        \n                    \n\n            \n                \n                    A subject to know when we need to update the view\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tAfterViewInit,\n\tChangeDetectorRef,\n\tDirective,\n\tElementRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tType,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject, distinctUntilChanged, takeUntil, tap } from 'rxjs';\n\nimport { NgxDisplayContentComponent } from '../../abstracts';\nimport { NgxOnlineService } from '../../services';\nimport { NgxDisplayContentConfigurationToken } from '../../tokens';\nimport {\n\tNgxDisplayContentAriaLive,\n\tNgxDisplayContentConditions,\n\tNgxDisplayContentConfiguration,\n\tNgxDisplayContentOverrideConfiguration,\n\tNgxDisplayContentStatus,\n} from '../../types';\n\n/**\n * NgxDisplayContentDirective handles whether content should be shown based on a loading, error or offline condition by using provided default components or a provided override template\n */\n@Directive({\n\tselector: '[displayContent]',\n\tstandalone: true,\n})\nexport class NgxDisplayContentDirective implements AfterViewInit, OnDestroy {\n\tprivate readonly elementRef = inject(ElementRef);\n\tprivate readonly templateRef = inject>(TemplateRef);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\tprivate readonly viewContainer = inject(ViewContainerRef);\n\tprivate readonly onlineService = inject(NgxOnlineService);\n\tprivate readonly configuration = inject(\n\t\tNgxDisplayContentConfigurationToken\n\t);\n\n\t/**\n\t * A subject to handle the destroyed flow\n\t */\n\tprivate readonly onDestroySubject: Subject = new Subject();\n\n\t/**\n\t * A subject to know when we need to update the view\n\t */\n\tprivate readonly updateViewSubject: Subject = new Subject();\n\n\t/**\n\t * Holds an optional override configuration\n\t */\n\tprivate overrideConfiguration: NgxDisplayContentOverrideConfiguration = {};\n\n\t/**\n\t * Holds the conditions we use to render the component\n\t */\n\tprivate conditions: NgxDisplayContentConditions = {};\n\n\t/**\n\t * Renders the item or a default fallback based on the provided conditions\n\t */\n\tpublic displayContent: InputSignal = input.required();\n\n\t/**\n\t * Override the existing configuration with custom configuration\n\t */\n\tpublic displayContentConfiguration: InputSignal =\n\t\tinput();\n\n\t/**\n\t * The aria-live label we wish to provide to the parent element. By default, this is 'polite'.\n\t *\n\t * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n\t */\n\treadonly displayContentAriaLive = input('polite');\n\n\tconstructor() {\n\t\t// Iben: If we want to listen to the online status, we set up a listener to the status of the application\n\t\tif (this.configuration.listenToOnlineStatus) {\n\t\t\tthis.onlineService.online$\n\t\t\t\t.pipe(\n\t\t\t\t\tdistinctUntilChanged(),\n\t\t\t\t\ttap((online) => {\n\t\t\t\t\t\t// Iben: Update the conditions with the new status\n\t\t\t\t\t\tthis.updateConditions({ offline: !online });\n\n\t\t\t\t\t\t// Iben: Notify that the view needs to be updated\n\t\t\t\t\t\tthis.updateViewSubject.next();\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.onDestroySubject)\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\t\t}\n\n\t\teffect(() => {\n\t\t\t// Iben: Update the conditions\n\t\t\tthis.updateConditions(this.displayContent() || {});\n\n\t\t\t// Iben: Notify that the view needs to be updated\n\t\t\tthis.updateViewSubject.next();\n\t\t});\n\n\t\teffect(() => {\n\t\t\t// Iben: Update the override configuration\n\t\t\tthis.overrideConfiguration = this.displayContentConfiguration() || {};\n\n\t\t\t// Iben: Notify that the view needs to be updated\n\t\t\tthis.updateViewSubject.next();\n\t\t});\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Set the aria-live and aria-busy tag of the parent\n\t\tthis.setAriaLiveTag(this.displayContentAriaLive());\n\n\t\t// Iben: Listen to whenever we need to update the view and act accordingly\n\t\tthis.updateViewSubject\n\t\t\t.asObservable()\n\t\t\t.pipe(\n\t\t\t\ttap(() => {\n\t\t\t\t\t// Iben: Clear the current view container\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Update the busy tag\n\t\t\t\t\tthis.setAriaBusyTag(this.conditions.loading);\n\n\t\t\t\t\t// Iben: If we're offline, we render the offline component or template\n\t\t\t\t\tif (this.conditions.offline) {\n\t\t\t\t\t\tthis.renderTemplate('offline', this.configuration.components.offline);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Iben: If we're loading, we render the loading component or template\n\t\t\t\t\tif (this.conditions.loading) {\n\t\t\t\t\t\tthis.renderTemplate('loading', this.configuration.components.loading);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Iben: If we've encountered an error, we render the error component or template\n\t\t\t\t\tif (this.conditions.error) {\n\t\t\t\t\t\tthis.renderTemplate('error', this.configuration.components.error);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t//Iben: Render the initial template\n\t\t\t\t\tthis.renderInitialTemplate();\n\t\t\t\t}),\n\t\t\t\t// Iben: We add a second tap here, so the detectChanges gets run after each outcome we did earlier\n\t\t\t\ttap(() => {\n\t\t\t\t\t// Iben: Detect the changes so this works with (nested) OnPush component\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Run the initial content check\n\t\tthis.updateViewSubject.next();\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.onDestroySubject.next();\n\t\tthis.onDestroySubject.complete();\n\t}\n\n\t/**\n\t * Renders the provided component or template\n\t *\n\t * @param  status - The status we're handling\n\t * @param  component - The component we're wishing to render\n\t */\n\tprivate renderTemplate(\n\t\tstatus: NgxDisplayContentStatus,\n\t\tcomponent: Type\n\t): void {\n\t\t// Iben: If an override for this template exists, we render the override template and early exit\n\t\tif (this.overrideConfiguration[status]?.template) {\n\t\t\tthis.viewContainer.createEmbeddedView(this.overrideConfiguration[status]?.template);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If a component was provided, we render this component and pass along the provided data and early exit\n\t\tif (component) {\n\t\t\t// Iben: Render the component\n\t\t\tconst componentRef =\n\t\t\t\tthis.viewContainer.createComponent(component);\n\n\t\t\t// Iben: Pass the data\n\t\t\tcomponentRef.setInput('data', this.overrideConfiguration[status]?.data);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If we need to hide the template when no template was provided, we early exit\n\t\tif (this.configuration.hideWhenNoTemplateProvided) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: In case we don't need to hide the initial template, we render it\n\t\tthis.renderInitialTemplate();\n\t}\n\n\t/**\n\t * Renders the initial template\n\t */\n\tprivate renderInitialTemplate(): void {\n\t\tthis.viewContainer.createEmbeddedView(this.templateRef);\n\t}\n\n\t/**\n\t * Updates the conditions\n\t *\n\t * @param conditions - The conditions we want to merge with the current set\n\t */\n\tprivate updateConditions(conditions: NgxDisplayContentConditions): void {\n\t\t// Iben: Update the conditions, but use a merge so that the online status can be preserved\n\t\tif (conditions) {\n\t\t\tthis.conditions = {\n\t\t\t\t...this.conditions,\n\t\t\t\t...conditions,\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Sets the aria-live tag of the item\n\t * @param  value - The value we wish to set\n\t */\n\tprivate setAriaLiveTag(value: 'polite' | 'assertive' | 'off'): void {\n\t\t// Iben: Get the parent element and early exit if it isn't found\n\t\tconst parentElement: HTMLElement = this.elementRef.nativeElement.parentElement;\n\n\t\tif (!parentElement) {\n\t\t\t// Iben:\n\t\t\tconsole.error(\n\t\t\t\t'NgxLayout: No parent element was found for NgxDisplayContentDirective. Because of that, the correct aria-live label could not be set.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the value is assertive then we always set it, as it has the highest priority\n\t\tif (value === 'assertive') {\n\t\t\tparentElement.setAttribute('aria-live', value);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Fetch the current aria-live label. If none were found, set it automatically\n\t\tconst currentValue = parentElement.getAttribute('aria-live');\n\n\t\tif (!currentValue) {\n\t\t\tparentElement.setAttribute('aria-live', value);\n\t\t}\n\n\t\t// Iben: If the current value is assertive or if the values are the same, we early exit\n\t\tif (currentValue === 'assertive' || currentValue === value) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Set the value\n\t\tparentElement.setAttribute('aria-live', value);\n\t}\n\n\t/**\n\t * Sets the aria-busy tag of the item\n\t * @param  isLoading - The loading state of the item\n\t */\n\tprivate setAriaBusyTag(isLoading: boolean): void {\n\t\tthis.elementRef.nativeElement.parentElement?.setAttribute('aria-busy', `${isLoading}`);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxFormsErrorAbstractComponent.html":{"url":"directives/NgxFormsErrorAbstractComponent.html","title":"directive - NgxFormsErrorAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxFormsErrorAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                errorKeys\n                            \n                            \n                                    Public\n                                    Readonly\n                                errors\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:17\n                            \n                        \n                \n                    \n                        The error object provided by the control\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:17\n                        \n                    \n\n            \n                \n                    The error object provided by the control\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        errorKeys\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:13\n                        \n                    \n\n            \n                \n                    An array of error keys that can be rendered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:9\n                        \n                    \n\n            \n                \n                    An array of error messages that can be rendered\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\nimport { ValidationErrors } from '@angular/forms';\n\n@Directive()\nexport class NgxFormsErrorAbstractComponent {\n\t/**\n\t * An array of error messages that can be rendered\n\t */\n\tpublic readonly errors = input.required();\n\t/**\n\t * An array of error keys that can be rendered\n\t */\n\tpublic readonly errorKeys = input.required();\n\t/**\n\t * The error object provided by the control\n\t */\n\tpublic readonly data = input.required();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxFormsErrorConfigurationOptions.html":{"url":"interfaces/NgxFormsErrorConfigurationOptions.html","title":"interface - NgxFormsErrorConfigurationOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxFormsErrorConfigurationOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/interfaces/errors.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for the ngx-errors directive\n errors - A record with the error key and the corresponding message we wish to show\n showWhen - A setting to know when an error has to be shown. Either 'touched' or 'dirty'\n component - An optional component to provide, which will be used to render the error. If not provided,\n                it will render a p-tag with class ngx-forms-error\n show - The amount of errors we wish to show at once. By default, only one error is shown at a time.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            errors\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            show\n                                        \n                                \n                                \n                                        \n                                            showWhen\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errors:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        show\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        show:         NgxFormsErrorShowSettings\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxFormsErrorShowSettings\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showWhen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showWhen:         NgxFormsErrorShowWhenSettings\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxFormsErrorShowWhenSettings\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxFormsErrorAbstractComponent } from '../abstracts';\n\nexport type NgxFormsErrorShowWhenSettings = 'touched' | 'dirty';\nexport type NgxFormsErrorShowSettings = 'all' | number;\n\n/**\n * Configuration for the ngx-errors directive\n *\n *  errors - A record with the error key and the corresponding message we wish to show\n *  showWhen - A setting to know when an error has to be shown. Either 'touched' or 'dirty'\n *  component - An optional component to provide, which will be used to render the error. If not provided,\n * \t\t\t\tit will render a p-tag with class `ngx-forms-error`\n *  show - The amount of errors we wish to show at once. By default, only one error is shown at a time.\n */\nexport interface NgxFormsErrorConfigurationOptions {\n\terrors: Record;\n\tshowWhen: NgxFormsErrorShowWhenSettings;\n\tcomponent?: Type;\n\tshow?: NgxFormsErrorShowSettings;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxFormsErrorsDirective.html":{"url":"directives/NgxFormsErrorsDirective.html","title":"directive - NgxFormsErrorsDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxFormsErrorsDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/directives/errors/errors.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxFormsErrors]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                abstractControl\n                            \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                componentRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                config\n                            \n                            \n                                    Public\n                                    Readonly\n                                control\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Private\n                                errorComponent\n                            \n                            \n                                    Private\n                                errorsElement\n                            \n                            \n                                    Private\n                                    Readonly\n                                formGroupDirective\n                            \n                            \n                                    Private\n                                    Readonly\n                                formNameDirective\n                            \n                            \n                                    Private\n                                    Readonly\n                                onDestroy$\n                            \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject$\n                            \n                            \n                                    Private\n                                    Readonly\n                                renderer\n                            \n                            \n                                    Private\n                                template\n                            \n                            \n                                    Private\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getErrors\n                            \n                            \n                                    Private\n                                handleComponentRender\n                            \n                            \n                                    Private\n                                handleNoComponentFlow\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:80\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrors(data: ValidationErrors)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:230\n                        \n                    \n\n\n            \n                \n                        Returns the errors based on the provided settings\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        ValidationErrors\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe error data we wish to use\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleComponentRender\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleComponentRender(shouldShow: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:156\n                        \n                    \n\n\n            \n                \n                        Renders a provided custom component underneath the input component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                shouldShow\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether the error should be shown\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleNoComponentFlow\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNoComponentFlow(shouldShow: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:193\n                        \n                    \n\n\n            \n                \n                        Renders a p tag underneath the input component when no custom component was provided\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                shouldShow\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether the error should be shown\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:93\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        abstractControl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AbstractControl\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:60\n                        \n                    \n\n            \n                \n                    The AbstractControl we wish to listen to when using the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        componentRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:75\n                        \n                    \n\n            \n                \n                    The ref of the component we wish to add error data to\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxFormsErrorConfigurationOptions\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxFormsErrorsConfigurationToken,\n\t\t{ optional: true }\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(undefined, { alias: \"ngxFormsErrors\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:80\n                        \n                    \n\n            \n                \n                    A reference to a control or a string reference to the control\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxFormsErrorAbstractComponent\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:70\n                        \n                    \n\n            \n                \n                    The component to which the error data is added\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorsElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:65\n                        \n                    \n\n            \n                \n                    The p element we add to the dom when no component is provided\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        formGroupDirective\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroupDirective\n\n                    \n                \n                \n                    \n                        Default value : inject(FormGroupDirective, {\n\t\toptional: true,\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        formNameDirective\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroupName\n\n                    \n                \n                \n                    \n                        Default value : inject(FormGroupName, { optional: true })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Observable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                \n                    \n                        Default value : inject(Renderer2)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        template\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:55\n                        \n                    \n\n            \n                \n                     The actual template of the input element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : inject(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ViewContainerRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  inject,\n  Inject,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  TemplateRef,\n  ViewContainerRef,\n  input\n} from '@angular/core';\nimport {\n\tAbstractControl,\n\tFormGroupDirective,\n\tFormGroupName,\n\tValidationErrors,\n} from '@angular/forms';\nimport { Observable, Subject, combineLatest, startWith, takeUntil, tap } from 'rxjs';\n\nimport { NgxFormsErrorAbstractComponent } from '../../abstracts';\nimport { NgxFormsErrorConfigurationOptions } from '../../interfaces';\nimport { NgxFormsErrorsConfigurationToken } from '../../tokens';\nimport { touchedEventListener } from '../../utils';\n\n@Directive({\n\tselector: '[ngxFormsErrors]',\n\tstandalone: true,\n})\nexport class NgxFormsErrorsDirective implements AfterViewInit, OnDestroy {\n\tprivate readonly formGroupDirective: FormGroupDirective = inject(FormGroupDirective, {\n\t\toptional: true,\n\t});\n\tprivate readonly formNameDirective: FormGroupName = inject(FormGroupName, { optional: true });\n\tprivate readonly config: NgxFormsErrorConfigurationOptions = inject(\n\t\tNgxFormsErrorsConfigurationToken,\n\t\t{ optional: true }\n\t);\n\tprivate readonly viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\tprivate readonly elementRef: ElementRef = inject(ElementRef);\n\tprivate readonly renderer: Renderer2 = inject(Renderer2);\n\tprivate readonly templateRef: TemplateRef = inject(TemplateRef);\n\tprivate readonly cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n\t// Iben: Handle the OnDestroy flow\n\tprivate readonly onDestroySubject$ = new Subject();\n\tprivate readonly onDestroy$ = new Observable();\n\n\t/**\n\t *  The actual template of the input element\n\t */\n\tprivate template: TemplateRef;\n\n\t/**\n\t * The AbstractControl we wish to listen to when using the directive\n\t */\n\tprivate abstractControl: AbstractControl;\n\n\t/**\n\t * The p element we add to the dom when no component is provided\n\t */\n\tprivate errorsElement: any;\n\n\t/**\n\t * The component to which the error data is added\n\t */\n\tprivate errorComponent: NgxFormsErrorAbstractComponent;\n\n\t/**\n\t * The ref of the component we wish to add error data to\n\t */\n\tprivate componentRef: ComponentRef;\n\n\t/**\n\t * A reference to a control or a string reference to the control\n\t */\n\tpublic readonly control = input(undefined, { alias: \"ngxFormsErrors\" });\n\n\tconstructor() {\n\t\t// Iben: Set the current template ref at constructor time so we actually have the provided template (as done in the *ngIf directive)\n\t\tthis.template = this.templateRef;\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Handle the on destroy flow\n\t\tthis.onDestroySubject$.next();\n\t\tthis.onDestroySubject$.complete();\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Render the actual input so that it is always visible\n\t\tthis.viewContainer.clear();\n\t\tthis.viewContainer.createEmbeddedView(this.template);\n\n\t\t// Iben: If no control was provided, we early exit and log an error\n\t\tconst control = this.control();\n  if (!control) {\n\t\t\tconsole.error('NgxForms: No control was provided to the NgxFormsErrorDirective');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the control is a string, we check the parent to find the actual control.\n\t\t// If not, we use the provided control\n\t\tif (typeof control === 'string') {\n\t\t\tthis.abstractControl = this.formGroupDirective\n\t\t\t\t? this.formGroupDirective.form.get(control)\n\t\t\t\t: this.formNameDirective?.control.get(control);\n\t\t} else {\n\t\t\tthis.abstractControl = control;\n\t\t}\n\n\t\t// Iben: If no control was found, we early exit and log an error\n\t\tif (!this.abstractControl) {\n\t\t\tconsole.error('NgxForms: No control was provided to the NgxFormsErrorDirective');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Listen to the value changes, status changes and the touched changes of the control\n\t\tcombineLatest([\n\t\t\tthis.abstractControl.valueChanges.pipe(startWith(this.abstractControl.value)),\n\t\t\ttouchedEventListener(this.abstractControl),\n\t\t\tthis.abstractControl.statusChanges.pipe(startWith(this.abstractControl.status)),\n\t\t])\n\t\t\t.pipe(\n\t\t\t\ttap(([, touched]) => {\n\t\t\t\t\t// Iben: Check whether we should show the error based on the provided config\n\t\t\t\t\tconst shouldShow =\n\t\t\t\t\t\tthis.abstractControl.invalid &&\n\t\t\t\t\t\t(this.config.showWhen === 'touched' ? touched : this.abstractControl.dirty);\n\n\t\t\t\t\t// Iben: Show the error based on whether or not a component was provided\n\t\t\t\t\tif (!this.config.component) {\n\t\t\t\t\t\tthis.handleNoComponentFlow(shouldShow);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.handleComponentRender(shouldShow);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so this works with (nested) OnPush components\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.onDestroy$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Renders a provided custom component underneath the input component\n\t *\n\t * @param shouldShow - Whether the error should be shown\n\t */\n\tprivate handleComponentRender(shouldShow: boolean) {\n\t\t// Iben: If the error should not be shown, we check if there's already an error component and destroy it if needed\n\t\tif (!shouldShow) {\n\t\t\tif (this.errorComponent) {\n\t\t\t\tthis.componentRef.destroy();\n\t\t\t\tthis.componentRef = undefined;\n\t\t\t\tthis.errorComponent = undefined;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If there already is a component, destroy it so it can update correctly\n\t\tif (this.componentRef) {\n\t\t\tthis.componentRef.destroy();\n\t\t\tthis.componentRef = undefined;\n\t\t}\n\n\t\t// Iben: Add the new component to the view\n\t\tthis.componentRef = this.viewContainer.createComponent(\n\t\t\tthis.config.component\n\t\t);\n\t\tthis.errorComponent = this.componentRef.instance;\n\n\t\t// Iben: Set the data of the error component\n\t\tconst { errors, errorKeys, data } = this.getErrors(this.abstractControl.errors);\n\n    this.componentRef.setInput( 'errors',errors );\n    this.componentRef.setInput( 'errorKeys',errorKeys );\n    this.componentRef.setInput( 'data',data );\n\t}\n\n\t/**\n\t * Renders a p tag underneath the input component when no custom component was provided\n\t *\n\t * @param shouldShow - Whether the error should be shown\n\t */\n\tprivate handleNoComponentFlow(shouldShow: boolean) {\n\t\t// Iben: We remove the current errors so that we always have a new element to work with\n\t\tif (this.errorsElement) {\n\t\t\tthis.renderer.removeChild(this.elementRef.nativeElement.parentNode, this.errorsElement);\n\n\t\t\tthis.errorsElement = null;\n\t\t}\n\n\t\t// Iben: Early exit in case there's no error to show\n\t\tif (!shouldShow) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Create a new error paragraph\n\t\tthis.errorsElement = this.renderer.createElement('p');\n\t\tthis.renderer.setAttribute(this.errorsElement, 'class', 'ngx-forms-error');\n\n\t\t// Iben: Set the errors based on the keys\n\t\tthis.renderer.setProperty(\n\t\t\tthis.errorsElement,\n\t\t\t'innerHTML',\n\t\t\tthis.getErrors(this.abstractControl.errors).errors.join(', ')\n\t\t);\n\n\t\t// Iben: insert the paragraph underneath the input component\n\t\tthis.renderer.insertBefore(\n\t\t\tthis.elementRef.nativeElement.parentNode,\n\t\t\tthis.errorsElement,\n\t\t\tthis.renderer.nextSibling(this.elementRef.nativeElement)\n\t\t);\n\t}\n\n\t/**\n\t * Returns the errors based on the provided settings\n\t *\n\t * @param data - The error data we wish to use\n\t */\n\tprivate getErrors(data: ValidationErrors): {\n\t\terrors: string[];\n\t\tdata: ValidationErrors;\n\t\terrorKeys: string[];\n\t} {\n\t\t// Iben: Early exit in case the errors object is null\n\t\tif (!data) {\n\t\t\treturn {\n\t\t\t\terrors: [],\n\t\t\t\tdata: null,\n\t\t\t\terrorKeys: [],\n\t\t\t};\n\t\t}\n\n\t\t// Iben: If the config is set to all, we always show all errors\n\t\tif (this.config.show === 'all') {\n\t\t\treturn {\n\t\t\t\terrors: Object.keys(data).map((key) => this.config.errors[key]),\n\t\t\t\terrorKeys: Object.keys(data),\n\t\t\t\tdata,\n\t\t\t};\n\t\t}\n\n\t\t// Iben: If no limit is provided, we default to a single error\n\t\tconst limit = this.config.show === undefined ? 1 : this.config.show;\n\n\t\t// Iben: Slice the errors based on the provided limit\n\t\treturn {\n\t\t\terrors: Object.keys(data)\n\t\t\t\t.map((key) => this.config.errors[key])\n\t\t\t\t.slice(0, limit),\n\t\t\terrorKeys: Object.keys(data).slice(0, limit),\n\t\t\tdata,\n\t\t};\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxHasCookieConfiguration.html":{"url":"interfaces/NgxHasCookieConfiguration.html","title":"interface - NgxHasCookieConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxHasCookieConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/has-cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            services\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        services\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        services:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgxHasCookieConfiguration {\n\tcategory: string;\n\tservices?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasCookieDirective.html":{"url":"directives/NgxHasCookieDirective.html","title":"directive - NgxHasCookieDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasCookieDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A structural directive that provides a way to render UI elements based on whether a (set of) cookie(s) have been accepted by the user.\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hasCookie]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                component\n                            \n                            \n                                    Private\n                                componentRef\n                            \n                            \n                                    Private\n                                cookies\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Public\n                                hasCookie\n                            \n                            \n                                    Public\n                                hasCookieElse\n                            \n                            \n                                    Private\n                                    Readonly\n                                ngxCookieService\n                            \n                            \n                                    Private\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                renderElseTemplate\n                            \n                            \n                                    Private\n                                renderThenTemplate\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hasCookie\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:70\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        hasCookie\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:64\n                            \n                        \n                \n                    \n                        A cookie or list of cookies the item should have\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:148\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:89\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderElseTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderElseTemplate()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:168\n                        \n                    \n\n\n            \n                \n                        Render the fallbackTemplate or fallBackComponent\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderThenTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderThenTemplate()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:158\n                        \n                    \n\n\n            \n                \n                        Render the template on which the directive is set\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:96\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        component\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Type\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxCookiesFallbackComponentToken,\n\t\t{ optional: true }\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        componentRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:54\n                        \n                    \n\n            \n                \n                    The ref of the component we wish to render as a fallback\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cookies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxHasCookieConfiguration[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:59\n                        \n                    \n\n            \n                \n                    The list of cookies we need to check\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:34\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasCookie\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:64\n                        \n                    \n\n            \n                \n                    A cookie or list of cookies the item should have\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasCookieElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                \n                    \n                        Default value : input>()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:70\n                        \n                    \n\n            \n                \n                    The else template in case the cookie is not accepted\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        ngxCookieService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxCookieService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxCookieService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : inject(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:48\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ViewContainerRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tComponentRef,\n\tDirective,\n\tTemplateRef,\n\tType,\n\tViewContainerRef,\n\tOnDestroy,\n\tinject,\n\teffect,\n\tinput,\n\tInputSignal,\n} from '@angular/core';\nimport { flatten } from 'lodash';\nimport { Subject, tap, takeUntil, combineLatest, map } from 'rxjs';\n\nimport { NgxCookiesFallBackComponent } from '../../abstracts';\nimport { NgxCookieService } from '../../services';\nimport { NgxCookiesFallbackComponentToken } from '../../tokens';\nimport { NgxHasCookieConfiguration } from '../../types';\n\n/**\n * A structural directive that provides a way to render UI elements based on whether a (set of) cookie(s) have been accepted by the user.\n */\n@Directive({\n\tselector: '[hasCookie]',\n\tstandalone: true,\n})\nexport class NgxHasCookieDirective implements OnDestroy {\n\t//TODO: Iben: Replace this with the OnDestroyComponent flow once we have a shared lib\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\tprivate readonly templateRef: TemplateRef = inject(TemplateRef);\n\tprivate viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\tprivate readonly ngxCookieService: NgxCookieService = inject(NgxCookieService);\n\tprivate readonly cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\tprivate readonly component: Type = inject(\n\t\tNgxCookiesFallbackComponentToken,\n\t\t{ optional: true }\n\t);\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\n\t/**\n\t * The ref of the component we wish to render as a fallback\n\t */\n\tprivate componentRef: ComponentRef;\n\n\t/**\n\t * The list of cookies we need to check\n\t */\n\tprivate cookies: NgxHasCookieConfiguration[] = [];\n\n\t/**\n\t * A cookie or list of cookies the item should have\n\t */\n\tpublic hasCookie: InputSignal =\n\t\tinput.required();\n\n\t/**\n\t * The else template in case the cookie is not accepted\n\t */\n\tpublic hasCookieElse: InputSignal> = input>();\n\n\tconstructor() {\n\t\tthis.thenTemplateRef = this.templateRef;\n\n\t\teffect(() => {\n\t\t\tconst value = this.hasCookie();\n\t\t\tthis.cookies = Array.isArray(value) ? value : [value];\n\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tif (this.hasCookieElse()) {\n\t\t\t\tthis.updateView();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tcombineLatest(\n\t\t\t// Iben Check for each cookie if it is accepted\n\t\t\tthis.cookies.map((cookie) => {\n\t\t\t\t// Iben: If no specific services were provided, we can just check the category\n\t\t\t\tif (!cookie.services) {\n\t\t\t\t\treturn this.ngxCookieService.hasAcceptedCategory(cookie.category);\n\t\t\t\t}\n\n\t\t\t\t// Iben: If specific services were provided, we can just check each individual category\n\t\t\t\treturn combineLatest(\n\t\t\t\t\tcookie.services.map((service) => {\n\t\t\t\t\t\treturn this.ngxCookieService.hasAcceptedService(cookie.category, service);\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t})\n\t\t)\n\t\t\t.pipe(\n\t\t\t\tmap((hasCookies) => {\n\t\t\t\t\treturn flatten(hasCookies).every((hasCookie) => hasCookie);\n\t\t\t\t}),\n\t\t\t\ttap((hasCookie) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: If there already is a component, destroy it so it can update correctly\n\t\t\t\t\tif (this.componentRef) {\n\t\t\t\t\t\tthis.componentRef.destroy();\n\t\t\t\t\t\tthis.componentRef = undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\thasCookie ? this.renderThenTemplate() : this.renderElseTemplate();\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n\n\t/**\n\t * Render the template on which the directive is set\n\t */\n\tprivate renderThenTemplate(): void {\n\t\t// Iben: If a thenTemplateRef is provided, render the template\n\t\tif (this.thenTemplateRef) {\n\t\t\tthis.viewContainer.createEmbeddedView(this.thenTemplateRef);\n\t\t}\n\t}\n\n\t/**\n\t * Render the fallbackTemplate or fallBackComponent\n\t */\n\tprivate renderElseTemplate(): void {\n\t\t// Iben: If a custom template ref was provided, render the template and early exit\n\t\tif (this.hasCookieElse()) {\n\t\t\tthis.viewContainer.createEmbeddedView(this.hasCookieElse());\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If a component was provided as a fallback, we render that\n\t\tif (this.component) {\n\t\t\t// Iben: Render the provided component\n\t\t\tthis.componentRef = this.viewContainer.createComponent(\n\t\t\t\tthis.component\n\t\t\t);\n\n\t\t\t// Iben: Set the cookies of the component\n\t\t\tthis.componentRef.setInput('cookies', this.cookies);\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasFeatureDirective.html":{"url":"directives/NgxHasFeatureDirective.html","title":"directive - NgxHasFeatureDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasFeatureDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that will render a part of the template based on whether the required feature(s) are provided.\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxHasFeature]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationService\n                            \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Private\n                                feature\n                            \n                            \n                                    Public\n                                ngxHasFeature\n                            \n                            \n                                    Public\n                                ngxHasFeatureElse\n                            \n                            \n                                    Public\n                                ngxHasFeatureShouldHaveAllFeatures\n                            \n                            \n                                    Public\n                                ngxHasFeatureShouldHaveFeature\n                            \n                            \n                                    Private\n                                shouldHaveAllFeatures\n                            \n                            \n                                    Private\n                                shouldHaveFeature\n                            \n                            \n                                templateRef\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxHasFeature\n                            \n                            \n                                ngxHasFeatureElse\n                            \n                            \n                                ngxHasFeatureShouldHaveAllFeatures\n                            \n                            \n                                ngxHasFeatureShouldHaveFeature\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:95\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxHasFeature\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:80\n                            \n                        \n                \n                    \n                        A feature or list of features the item should have\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasFeatureElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:85\n                            \n                        \n                \n                    \n                        The else template in case the feature is not enabled\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasFeatureShouldHaveAllFeatures\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:95\n                            \n                        \n                \n                    \n                        Whether all features should be enabled, by default this is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasFeatureShouldHaveFeature\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:90\n                            \n                        \n                \n                    \n                        Whether the feature should be enabled, by default this is true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:175\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:116\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:123\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxAuthenticationServiceToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:41\n                        \n                    \n\n            \n                \n                    The provided AuthenticationService implementation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:47\n                        \n                    \n\n            \n                \n                    The provided ChangeDetectorRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:52\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        feature\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FeatureType | FeatureType[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:65\n                        \n                    \n\n            \n                \n                    The (list of) feature(s) we need to check\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:80\n                        \n                    \n\n            \n                \n                    A feature or list of features the item should have\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeatureElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:85\n                        \n                    \n\n            \n                \n                    The else template in case the feature is not enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeatureShouldHaveAllFeatures\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:95\n                        \n                    \n\n            \n                \n                    Whether all features should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeatureShouldHaveFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:90\n                        \n                    \n\n            \n                \n                    Whether the feature should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHaveAllFeatures\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:75\n                        \n                    \n\n            \n                \n                    Whether all features should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHaveFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:70\n                        \n                    \n\n            \n                \n                    Whether the feature should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:33\n                        \n                    \n\n            \n                \n                    The provided template ref\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:57\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:37\n                        \n                    \n\n            \n                \n                    The provided ViewContainerRef\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A directive that will render a part of the template based on whether the required feature(s) are provided.\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n\n//TODO: Iben: Implement Cypress/PlayWright tests\n@Directive({\n\tselector: '[ngxHasFeature]',\n})\nexport class NgxHasFeatureDirective implements OnDestroy {\n\t/**\n\t * The provided template ref\n\t */\n\ttemplateRef = inject>(TemplateRef);\n\t/**\n\t * The provided ViewContainerRef\n\t */\n\tprivate viewContainer = inject(ViewContainerRef);\n\t/**\n\t * The provided AuthenticationService implementation\n\t */\n\tprivate readonly authenticationService = inject(\n\t\tNgxAuthenticationServiceToken\n\t);\n\t/**\n\t * The provided ChangeDetectorRef\n\t */\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * The (list of) feature(s) we need to check\n\t */\n\tprivate feature: FeatureType | FeatureType[] = [];\n\n\t/**\n\t * Whether the feature should be enabled\n\t */\n\tprivate shouldHaveFeature: boolean = true;\n\n\t/**\n\t * Whether all features should be enabled\n\t */\n\tprivate shouldHaveAllFeatures: boolean = true;\n\n\t/**\n\t * A feature or list of features the item should have\n\t */\n\tpublic ngxHasFeature: InputSignal = input();\n\n\t/**\n\t * The else template in case the feature is not enabled\n\t */\n\tpublic ngxHasFeatureElse: InputSignal> = input();\n\n\t/**\n\t * Whether the feature should be enabled, by default this is true\n\t */\n\tpublic ngxHasFeatureShouldHaveFeature: InputSignal = input();\n\n\t/**\n\t * Whether all features should be enabled, by default this is true\n\t */\n\tpublic ngxHasFeatureShouldHaveAllFeatures: InputSignal = input();\n\n\tconstructor() {\n\t\tconst templateRef = this.templateRef;\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tthis.shouldHaveAllFeatures = this.ngxHasFeatureShouldHaveAllFeatures();\n\t\t\tthis.shouldHaveFeature = this.ngxHasFeatureShouldHaveFeature();\n\t\t\tthis.feature = this.ngxHasFeature();\n\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxHasFeatureElse();\n\t\t\tthis.elseViewRef = null;\n\t\t});\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.authenticationService\n\t\t\t.hasFeature(convertToArray(this.feature), this.shouldHaveAllFeatures)\n\t\t\t.pipe(\n\t\t\t\ttap((hasFeature) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tconst shouldRender: boolean = this.shouldHaveFeature ? hasFeature : !hasFeature;\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\tif (shouldRender) {\n\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\tthis.elseViewRef = null;\n\n\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxHasFeaturePipe.html":{"url":"pipes/NgxHasFeaturePipe.html","title":"pipe - NgxHasFeaturePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxHasFeaturePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that returns whether a (list of) feature(s) has been provided\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxHasFeature\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:88\n                        \n                    \n\n\n            \n                \n                        Dispose of the feature observable when existing\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribe(observable: Observable)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:64\n                        \n                    \n\n\n            \n                \n                        Handles the changeDetection, latest value and dispose of the hasFeature observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                observable\n                                            \n                                                        Observable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hasFeature observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(feature: FeatureType | FeatureType[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:53\n                        \n                    \n\n\n            \n                \n                        Returns whether or not a feature is provided for the environment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                feature\n                                            \n                                                        FeatureType | FeatureType[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided feature\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxAuthenticationServiceToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        changeDetectorRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef | null\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:31\n                        \n                    \n\n            \n                \n                    Instance of the change detector ref, implemented like this according to the async pipe implementation\nhttps://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:22\n                        \n                    \n\n            \n                \n                    Subject to hold the destroyed state of the current observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:26\n                        \n                    \n\n            \n                \n                    The latest value of the Observable, whether or not the feature is provided\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform, inject } from '@angular/core';\nimport { Observable, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A pipe that returns whether a (list of) feature(s) has been provided\n */\n@Pipe({\n\tname: 'ngxHasFeature',\n\tpure: false,\n})\nexport class NgxHasFeaturePipe implements PipeTransform, OnDestroy {\n\tprivate readonly authenticationService = inject(NgxAuthenticationServiceToken);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * Subject to hold the destroyed state of the current observable\n\t */\n\tprivate destroyed$: Subject;\n\t/**\n\t * The latest value of the Observable, whether or not the feature is provided\n\t */\n\tprivate hasFeature: boolean;\n\t/**\n\t * Instance of the change detector ref, implemented like this according to the async pipe implementation\n\t * https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\t */\n\tprivate changeDetectorRef: ChangeDetectorRef | null;\n\n\tconstructor() {\n\t\tconst cdRef = this.cdRef;\n\n\t\t// Iben: Use instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = cdRef;\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Call the dispose when the component is destroyed so we have no running subscriptions left\n\t\tthis.dispose();\n\n\t\t// Iben: Clear instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = null;\n\t}\n\n\t/**\n\t * Returns whether or not a feature is provided for the environment\n\t *\n\t * @param feature - The provided feature\n\t */\n\tpublic transform(feature: FeatureType | FeatureType[]): boolean {\n\t\tthis.subscribe(this.authenticationService.hasFeature(convertToArray(feature)));\n\n\t\treturn this.hasFeature;\n\t}\n\n\t/**\n\t * Handles the changeDetection, latest value and dispose of the hasFeature observable\n\t *\n\t * @param observable - The hasFeature observable\n\t */\n\tprivate subscribe(observable: Observable): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new destroyed subject to handle the destruction when needed\n\t\tthis.destroyed$ = new Subject();\n\n\t\tobservable\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: Update the latest value when it a new value is provided\n\t\t\t\t\tthis.hasFeature = value;\n\n\t\t\t\t\t// Iben: Mark the component as ready for check\n\t\t\t\t\tthis.changeDetectorRef.markForCheck();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose of the feature observable when existing\n\t */\n\tprivate dispose(): void {\n\t\t// Iben: In case there's a destroyed, we have an observable and we destroy the subscription and reset the observable\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasFocusDirective.html":{"url":"directives/NgxHasFocusDirective.html","title":"directive - NgxHasFocusDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasFocusDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract directive used as a base to handle focussed base actions\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                isFocussedOn\n                            \n                            \n                                    \n                                removeFocus\n                            \n                            \n                                    \n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:25\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:18\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:34\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isFocussedOn\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFocussedOn()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:43\n                        \n                    \n\n\n            \n                \n                        Returns when the item has been focussed on\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:25\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:18\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:13\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener } from '@angular/core';\n\n/**\n * An abstract directive used as a base to handle focussed base actions\n */\n@Directive({\n\tstandalone: true,\n})\nexport abstract class NgxHasFocusDirective {\n\t/**\n\t * Whether the current element is focussed\n\t */\n\tprotected hasFocus: boolean = false;\n\n\t/**\n\t * Set the hasFocus flag\n\t */\n\t@HostListener('focus') setFocus() {\n\t\tthis.hasFocus = true;\n\t}\n\n\t/**\n\t * Remove the hasFocus flag\n\t */\n\t@HostListener('blur') removeFocus() {\n\t\tthis.hasFocus = false;\n\t}\n\n\t/**\n\t * Execute an action when the element has focussed\n\t *\n\t * @param action - The provided action\n\t */\n\tpublic handleWhenFocussed(action: () => void): void {\n\t\tif (this.hasFocus) {\n\t\t\taction();\n\t\t}\n\t}\n\n\t/**\n   * Returns when the item has been focussed on\n   */\n  public isFocussedOn(): boolean {\n\t\treturn this.hasFocus;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{"url":"directives/NgxHasFocusDragAndDropAbstractDirective.html","title":"directive - NgxHasFocusDragAndDropAbstractDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasFocusDragAndDropAbstractDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract directive used as a base to handle focussed base actions\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                    Optional\n                                onBlur\n                            \n                            \n                                    Public\n                                    Optional\n                                onFocus\n                            \n                            \n                                    \n                                    Public\n                                removeFocus\n                            \n                            \n                                    \n                                    Public\n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:31\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:20\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:54\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onBlur\n                        \n                    \n                \n            \n            \n                \n                        \n                    onBlur()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    onFocus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:31\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:20\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject( ElementRef )\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:15\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, inject } from '@angular/core';\n\n//TODO: Iben: Move this copy to a shared lib once we have figured out how to handle that.\n\n/**\n * An abstract directive used as a base to handle focussed base actions\n */\n@Directive({\n\tstandalone: true,\n})\nexport abstract class NgxHasFocusDragAndDropAbstractDirective {\n\t/**\n\t * Whether the current element is focussed\n\t */\n\tprotected hasFocus: boolean = false;\n\n\t/**\n\t * Set the hasFocus flag\n\t */\n\t@HostListener('focus') public setFocus(): void {\n\t\tthis.hasFocus = true;\n\n\t\tif (this.onFocus) {\n\t\t\tthis.onFocus();\n\t\t}\n\t}\n\n\t/**\n\t * Remove the hasFocus flag\n\t */\n\t@HostListener('blur') public removeFocus() {\n\t\tthis.hasFocus = false;\n\n\t\tif (this.onBlur) {\n\t\t\tthis.onBlur();\n\t\t}\n\t}\n\n  public readonly elementRef: ElementRef = inject( ElementRef );\n\n\tpublic focus(): void {\n\t\tthis.elementRef.nativeElement.focus();\n\t}\n\n\tpublic onBlur?(): void;\n\n\tpublic onFocus?(): void;\n\n\t/**\n\t * Execute an action when the element has focussed\n\t *\n\t * @param action - The provided action\n\t */\n\tpublic handleWhenFocussed(action: () => void): void {\n\t\tif (this.hasFocus) {\n\t\t\taction();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasPermissionDirective.html":{"url":"directives/NgxHasPermissionDirective.html","title":"directive - NgxHasPermissionDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasPermissionDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that will render a part of the template based on whether the required permissions(s) are provided.\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxHasPermission]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationService\n                            \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Public\n                                ngxHasPermission\n                            \n                            \n                                    Public\n                                ngxHasPermissionElse\n                            \n                            \n                                    Public\n                                ngxHasPermissionShouldHaveAllPermissions\n                            \n                            \n                                    Public\n                                ngxHasPermissionShouldHavePermission\n                            \n                            \n                                    Private\n                                permission\n                            \n                            \n                                    Private\n                                shouldHaveAllPermissions\n                            \n                            \n                                    Private\n                                shouldHavePermission\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxHasPermission\n                            \n                            \n                                ngxHasPermissionElse\n                            \n                            \n                                ngxHasPermissionShouldHaveAllPermissions\n                            \n                            \n                                ngxHasPermissionShouldHavePermission\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:82\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxHasPermission\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:67\n                            \n                        \n                \n                    \n                        A permission or list of permissions the item should have\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasPermissionElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:72\n                            \n                        \n                \n                    \n                        The else template in case the permission is not enabled\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasPermissionShouldHaveAllPermissions\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:82\n                            \n                        \n                \n                    \n                        Whether all permissions should be enabled, by default this is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasPermissionShouldHavePermission\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:77\n                            \n                        \n                \n                    \n                        Whether the permission should be enabled, by default this is true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:167\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:103\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:110\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxAuthenticationServiceToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:39\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:67\n                        \n                    \n\n            \n                \n                    A permission or list of permissions the item should have\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermissionElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:72\n                        \n                    \n\n            \n                \n                    The else template in case the permission is not enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermissionShouldHaveAllPermissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:82\n                        \n                    \n\n            \n                \n                    Whether all permissions should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermissionShouldHavePermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:77\n                        \n                    \n\n            \n                \n                    Whether the permission should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        permission\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PermissionType | PermissionType[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:52\n                        \n                    \n\n            \n                \n                    The (list of) permission(s) we need to check\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHaveAllPermissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:62\n                        \n                    \n\n            \n                \n                    Whether all permissions should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHavePermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:57\n                        \n                    \n\n            \n                \n                    Whether the permission should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:44\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A directive that will render a part of the template based on whether the required permissions(s) are provided.\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n\n//TODO: Iben: Implement Cypress/PlayWright tests\n@Directive({\n\tselector: '[ngxHasPermission]',\n})\nexport class NgxHasPermissionDirective implements OnDestroy {\n\tprivate viewContainer = inject(ViewContainerRef);\n\tprivate readonly authenticationService = inject(\n\t\tNgxAuthenticationServiceToken\n\t);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * The (list of) permission(s) we need to check\n\t */\n\tprivate permission: PermissionType | PermissionType[] = [];\n\n\t/**\n\t * Whether the permission should be enabled\n\t */\n\tprivate shouldHavePermission: boolean = true;\n\n\t/**\n\t * Whether all permissions should be enabled\n\t */\n\tprivate shouldHaveAllPermissions: boolean = true;\n\n\t/**\n\t * A permission or list of permissions the item should have\n\t */\n\tpublic ngxHasPermission: InputSignal = input();\n\n\t/**\n\t * The else template in case the permission is not enabled\n\t */\n\tpublic ngxHasPermissionElse: InputSignal> = input();\n\n\t/**\n\t * Whether the permission should be enabled, by default this is true\n\t */\n\tpublic ngxHasPermissionShouldHavePermission: InputSignal = input();\n\n\t/**\n\t * Whether all permissions should be enabled, by default this is true\n\t */\n\tpublic ngxHasPermissionShouldHaveAllPermissions: InputSignal = input();\n\n\tconstructor() {\n\t\tconst templateRef = inject>(TemplateRef);\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tthis.shouldHaveAllPermissions = this.ngxHasPermissionShouldHaveAllPermissions();\n\t\t\tthis.shouldHavePermission = this.ngxHasPermissionShouldHavePermission();\n\t\t\tthis.permission = this.ngxHasPermission();\n\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxHasPermissionElse();\n\t\t\tthis.elseViewRef = null;\n\t\t});\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.authenticationService\n\t\t\t.hasPermission(\n\t\t\t\tconvertToArray(this.permission),\n\t\t\t\tthis.shouldHaveAllPermissions\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\ttap((hasPermission) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tconst shouldRender: boolean = this.shouldHavePermission\n\t\t\t\t\t\t? hasPermission\n\t\t\t\t\t\t: !hasPermission;\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\tif (shouldRender) {\n\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\tthis.elseViewRef = null;\n\n\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxHasPermissionPipe.html":{"url":"pipes/NgxHasPermissionPipe.html","title":"pipe - NgxHasPermissionPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxHasPermissionPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that returns whether a (list of) permission(s) has been provided\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxHasPermission\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:92\n                        \n                    \n\n\n            \n                \n                        Dispose of the permission observable when existing\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribe(observable: Observable)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:68\n                        \n                    \n\n\n            \n                \n                        Handles the changeDetection, latest value and dispose of the hasPermission observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                observable\n                                            \n                                                        Observable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hasPermission observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(permission: PermissionType | PermissionType[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:55\n                        \n                    \n\n\n            \n                \n                        Returns whether or not a permission is provided for the environment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                permission\n                                            \n                                                        PermissionType | PermissionType[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided permission\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxAuthenticationServiceToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        changeDetectorRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef | null\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:33\n                        \n                    \n\n            \n                \n                    Instance of the change detector ref, implemented like this according to the async pipe implementation\nhttps://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:24\n                        \n                    \n\n            \n                \n                    Subject to hold the destroyed state of the current observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasPermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:28\n                        \n                    \n\n            \n                \n                    The latest value of the Observable, whether or not the permission is provided\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform, inject } from '@angular/core';\nimport { Observable, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A pipe that returns whether a (list of) permission(s) has been provided\n */\n@Pipe({\n\tname: 'ngxHasPermission',\n\tpure: false,\n})\nexport class NgxHasPermissionPipe\n\timplements PipeTransform, OnDestroy\n{\n\tprivate readonly authenticationService = inject(NgxAuthenticationServiceToken);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * Subject to hold the destroyed state of the current observable\n\t */\n\tprivate destroyed$: Subject;\n\t/**\n\t * The latest value of the Observable, whether or not the permission is provided\n\t */\n\tprivate hasPermission: boolean;\n\t/**\n\t * Instance of the change detector ref, implemented like this according to the async pipe implementation\n\t * https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\t */\n\tprivate changeDetectorRef: ChangeDetectorRef | null;\n\n\tconstructor() {\n\t\tconst cdRef = this.cdRef;\n\n\t\t// Iben: Use instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = cdRef;\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Call the dispose when the component is destroyed so we have no running subscriptions left\n\t\tthis.dispose();\n\n\t\t// Iben: Clear instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = null;\n\t}\n\n\t/**\n\t * Returns whether or not a permission is provided for the environment\n\t *\n\t * @param permission - The provided permission\n\t */\n\tpublic transform(permission: PermissionType | PermissionType[]): boolean {\n\t\tthis.subscribe(\n\t\t\tthis.authenticationService.hasPermission(convertToArray(permission))\n\t\t);\n\n\t\treturn this.hasPermission;\n\t}\n\n\t/**\n\t * Handles the changeDetection, latest value and dispose of the hasPermission observable\n\t *\n\t * @param observable - The hasPermission observable\n\t */\n\tprivate subscribe(observable: Observable): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new destroyed subject to handle the destruction when needed\n\t\tthis.destroyed$ = new Subject();\n\n\t\tobservable\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: Update the latest value when it a new value is provided\n\t\t\t\t\tthis.hasPermission = value;\n\n\t\t\t\t\t// Iben: Mark the component as ready for check\n\t\t\t\t\tthis.changeDetectorRef.markForCheck();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose of the permission observable when existing\n\t */\n\tprivate dispose(): void {\n\t\t// Iben: In case there's a destroyed, we have an observable and we destroy the subscription and reset the observable\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxI18nAbstractService.html":{"url":"classes/NgxI18nAbstractService.html","title":"class - NgxI18nAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxI18nAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/abstracts/i18n-service.abstract.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/abstracts/i18n-service.abstract.ts:2\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        export abstract class NgxI18nAbstractService {\n\tpublic abstract get currentLanguage(): Language;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxI18nConfiguration.html":{"url":"interfaces/NgxI18nConfiguration.html","title":"interface - NgxI18nConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxI18nConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/i18n.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            availableLanguages\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cacheBust\n                                        \n                                \n                                \n                                        \n                                            defaultAssetPaths\n                                        \n                                \n                                \n                                        \n                                            defaultLanguage\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            languageRouteParam\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        availableLanguages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        availableLanguages:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cacheBust\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheBust:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The cache busting parameter to append to the translation file requests.\nThis can be useful when you want to force the browser to fetch the latest\nversion of the translation files by appending this value to the v query\nparameter.\nWhen not provided, no query parameter will be added to the request.\nExample :`?v=1` when `cacheBust: '' + 1`\n`?v=1.0.0` when `cacheBust: '1.0.0'`\n`?v=1743428073628` when `cacheBust: String(Date.now())`\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultAssetPaths\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultAssetPaths:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultLanguage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultLanguage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        languageRouteParam\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        languageRouteParam:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgxI18nConfiguration {\n\tdefaultLanguage: string;\n\tavailableLanguages?: string[];\n\tdefaultAssetPaths: string[];\n\tlanguageRouteParam?: string;\n\t/**\n\t * The cache busting parameter to append to the translation file requests.\n\t * This can be useful when you want to force the browser to fetch the latest\n\t * version of the translation files by appending this value to the `v` query\n\t * parameter.\n\t *\n\t * When not provided, no query parameter will be added to the request.\n\t *\n\t * @example\n\t * `?v=1` when `cacheBust: '' + 1`\n\t * `?v=1.0.0` when `cacheBust: '1.0.0'`\n\t * `?v=1743428073628` when `cacheBust: String(Date.now())`\n\t */\n\tcacheBust?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxI18nEmptyComponent.html":{"url":"components/NgxI18nEmptyComponent.html","title":"component - NgxI18nEmptyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxI18nEmptyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/i18n/src/lib/components/empty-component/empty.component.ts\n\n\n\n    \n        Description\n    \n    \n        This is an empty dummy component that can be used in combination with the NgxI18nSetLanguageGuard when needed\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-i18n-empty\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/**\n * This is an empty dummy component that can be used in combination with the NgxI18nSetLanguageGuard when needed\n */\n@Component({\n\tselector: 'ngx-i18n-empty',\n\tstandalone: true,\n\ttemplate: '',\n})\nexport class NgxI18nEmptyComponent {}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxI18nEmptyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nLoadingService.html":{"url":"injectables/NgxI18nLoadingService.html","title":"injectable - NgxI18nLoadingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nLoadingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                translationLoaderActionsSubject$\n                            \n                            \n                                    Public\n                                    Readonly\n                                translationsFailed$\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationsFailedSubject$\n                            \n                            \n                                    Public\n                                    Readonly\n                                translationsLoaded$\n                            \n                            \n                                    Private\n                                translationsLoading\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationsSubject$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLoadedTranslations\n                            \n                            \n                                    Public\n                                dispatchTranslationLoaderAction\n                            \n                            \n                                    Public\n                                getTranslations\n                            \n                            \n                                    Public\n                                loadTranslations\n                            \n                            \n                                    Public\n                                markTranslationsLoadedAsFailed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addLoadedTranslations\n                        \n                    \n                \n            \n            \n                \n                        \n                    addLoadedTranslations(translations: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Add loaded translations to the loaded translations record\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                translations\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe newly loaded translations\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dispatchTranslationLoaderAction\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispatchTranslationLoaderAction(action: TranslationLoaderActionEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Dispatch the loading state of a set of translations\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            TranslationLoaderActionEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe loading state of a set of translations\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslations()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Fetches all the currently loaded translations\n\n\n                        \n                            Returns :     Record\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loadTranslations\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadTranslations(paths: string, observable: Observable<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Groups all the requests for a series of paths and ensures we only have a single observable to subscribe to\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paths\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe paths of we're loading translations for\n\n\n                                            \n                                        \n                                        \n                                                observable\n                                            \n                                                        Observable<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe translations loading observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markTranslationsLoadedAsFailed\n                        \n                    \n                \n            \n            \n                \n                        \n                    markTranslationsLoadedAsFailed()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Mark the loading of the translations as failed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationLoaderActionsSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        translationsFailed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.translationsFailedSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationsFailedSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        translationsLoaded$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.translationLoaderActionsSubject$.pipe(\n\t\t// Iben: Hold a list of all actions and only add those that have a loading state\n\t\t// If the action is not loading, remove it from the actions array\n\t\tscan((actions: string[], action: TranslationLoaderActionEntity) => {\n\t\t\treturn action.state === 'LOADING'\n\t\t\t\t? actions.concat(action.id)\n\t\t\t\t: actions.filter((actionFromResult) => actionFromResult !== action.id);\n\t\t}, []),\n\t\t// Iben: If no more actions are loading, we return true\n\t\tmap((result) => result.length === 0)\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        translationsLoading\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record>\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationsSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject>({})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:18\n                        \n                    \n\n            \n                \n                    A subject to store all the currently loaded translation files in\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { scan, map, shareReplay } from 'rxjs/operators';\n\nimport { TranslationLoaderActionEntity } from './i18n-loading.types';\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxI18nLoadingService {\n\t// Iben: Keep a subject to store all the translation loading actions\n\tprivate readonly translationLoaderActionsSubject$ =\n\t\tnew Subject();\n\n\t/**\n\t * A subject to store all the currently loaded translation files in\n\t */\n\tprivate readonly translationsSubject$ = new BehaviorSubject>({});\n\n\tprivate readonly translationsFailedSubject$ = new BehaviorSubject(false);\n\n\tprivate translationsLoading: Record> = {};\n\n\t// Iben: Check if all translations actions have completed\n\tpublic readonly translationsLoaded$ = this.translationLoaderActionsSubject$.pipe(\n\t\t// Iben: Hold a list of all actions and only add those that have a loading state\n\t\t// If the action is not loading, remove it from the actions array\n\t\tscan((actions: string[], action: TranslationLoaderActionEntity) => {\n\t\t\treturn action.state === 'LOADING'\n\t\t\t\t? actions.concat(action.id)\n\t\t\t\t: actions.filter((actionFromResult) => actionFromResult !== action.id);\n\t\t}, []),\n\t\t// Iben: If no more actions are loading, we return true\n\t\tmap((result) => result.length === 0)\n\t);\n\n\tpublic readonly translationsFailed$: Observable =\n\t\tthis.translationsFailedSubject$.asObservable();\n\n\t/**\n\t * Dispatch the loading state of a set of translations\n\t *\n\t * @param action - The loading state of a set of translations\n\t */\n\tpublic dispatchTranslationLoaderAction(action: TranslationLoaderActionEntity) {\n\t\tthis.translationLoaderActionsSubject$.next(action);\n\t}\n\n\t/**\n\t * Add loaded translations to the loaded translations record\n\t *\n\t * @param translations - The newly loaded translations\n\t */\n\tpublic addLoadedTranslations(translations: Record) {\n\t\tthis.translationsSubject$.next({\n\t\t\t...this.translationsSubject$.getValue(),\n\t\t\t...translations,\n\t\t});\n\t}\n\n\t/**\n\t * Fetches all the currently loaded translations\n\t */\n\tpublic getTranslations(): Record {\n\t\treturn this.translationsSubject$.getValue();\n\t}\n\n\t/**\n\t * Groups all the requests for a series of paths and ensures we only have a single observable to subscribe to\n\t *\n\t * @param paths - The paths of we're loading translations for\n\t * @param observable - The translations loading observable\n\t */\n\tpublic loadTranslations(paths: string, observable: Observable) {\n\t\t// Iben: If loading of the translations has not been added to the array yet, we set it so we return a single observable\n\t\tif (!this.translationsLoading[paths]) {\n\t\t\t// Iben: Add shareReplay so the result is passed over each subscription\n\t\t\tthis.translationsLoading[paths] = observable.pipe(shareReplay());\n\t\t}\n\n\t\t// Iben: Return the observable\n\t\treturn this.translationsLoading[paths];\n\t}\n\n\t/**\n\t * Mark the loading of the translations as failed\n\t */\n\tpublic markTranslationsLoadedAsFailed() {\n\t\tconsole.error('Something went wrong whilst fetching the translations.');\n\n\t\tthis.translationsFailedSubject$.next(false);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxI18nModule.html":{"url":"modules/NgxI18nModule.html","title":"module - NgxI18nModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxI18nModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/i18n.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forChild\n                        \n                    \n                \n            \n            \n                \n                        \n                    forChild(translationLoader?: (http?: HttpBackend) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/i18n.module.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                translationLoader\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ModuleWithProviders\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot(config: NgxI18nConfiguration, translationLoader?: (http?: HttpBackend) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/i18n.module.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            NgxI18nConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                translationLoader\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ModuleWithProviders\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { HttpBackend } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule, inject } from '@angular/core';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\n\nimport { NgxI18nConfiguration } from './i18n.types';\nimport { NgxI18nMultiTranslationHttpLoader } from './loader';\nimport { NgxI18nTranslationLoaderResolver } from './resolvers';\nimport { NgxI18nService } from './services';\nimport { NgxI18nConfigurationToken } from './tokens/i18n.token';\n\nfunction FallBackTranslationLoader(http: HttpBackend) {\n\t// Iben: Inject the config\n\tconst config = inject(NgxI18nConfigurationToken);\n\n\t// Iben: Return a default loader\n\treturn new NgxI18nMultiTranslationHttpLoader(http, config.defaultAssetPaths || []);\n}\n\n@NgModule({\n\timports: [TranslateModule],\n\texports: [TranslateModule],\n})\nexport class NgxI18nModule {\n\tpublic static forRoot(\n\t\tconfig: NgxI18nConfiguration,\n\t\ttranslationLoader?: (http: HttpBackend) => NgxI18nMultiTranslationHttpLoader\n\t): ModuleWithProviders {\n\t\tconst providers = [\n\t\t\t...TranslateModule.forRoot({\n\t\t\t\tloader: {\n\t\t\t\t\tprovide: TranslateLoader,\n\t\t\t\t\tuseFactory: translationLoader || FallBackTranslationLoader,\n\t\t\t\t\tdeps: [HttpBackend],\n\t\t\t\t},\n\t\t\t\tuseDefaultLang: true,\n\t\t\t}).providers,\n\t\t\t{\n\t\t\t\tprovide: NgxI18nConfigurationToken,\n\t\t\t\tuseValue: config,\n\t\t\t},\n\t\t\tNgxI18nService,\n\t\t];\n\n\t\treturn {\n\t\t\tngModule: NgxI18nModule,\n\t\t\tproviders,\n\t\t};\n\t}\n\n\tpublic static forChild(\n\t\ttranslationLoader?: (http: HttpBackend) => NgxI18nMultiTranslationHttpLoader\n\t): ModuleWithProviders {\n\t\tconst providers = [\n\t\t\t...TranslateModule.forChild({\n\t\t\t\tloader: {\n\t\t\t\t\tprovide: TranslateLoader,\n\t\t\t\t\tuseFactory: translationLoader || FallBackTranslationLoader,\n\t\t\t\t\tdeps: [HttpBackend],\n\t\t\t\t},\n\t\t\t\tisolate: true,\n\t\t\t}).providers,\n\t\t\tNgxI18nService,\n\t\t\tNgxI18nTranslationLoaderResolver,\n\t\t];\n\n\t\treturn {\n\t\t\tngModule: NgxI18nModule,\n\t\t\tproviders,\n\t\t};\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxI18nMultiTranslationHttpLoader.html":{"url":"classes/NgxI18nMultiTranslationHttpLoader.html","title":"class - NgxI18nMultiTranslationHttpLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxI18nMultiTranslationHttpLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        TranslateLoader\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                config\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationLoadingService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getTranslation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpBackend: HttpBackend, translationsPaths: string[])\n                    \n                \n                        \n                            \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpBackend\n                                                  \n                                                        \n                                                                    HttpBackend\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        translationsPaths\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:19\n                        \n                    \n\n            \n                \n                    The configuration for the NgxI18nModule.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationLoadingService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nLoadingService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nLoadingService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslation(lang: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:31\n                        \n                    \n\n\n            \n                \n                        Fetches the provided translation files and saves them to the translation store\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                lang\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currently used language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpBackend, HttpClient } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { TranslateLoader } from '@ngx-translate/core';\nimport { deepmerge } from 'deepmerge-ts';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { NgxI18nConfiguration } from '../../i18n.types';\nimport { NgxI18nLoadingService } from '../../services';\nimport { NgxI18nConfigurationToken } from '../../tokens';\n\nexport class NgxI18nMultiTranslationHttpLoader implements TranslateLoader {\n\tprivate readonly translationLoadingService: NgxI18nLoadingService =\n\t\tinject(NgxI18nLoadingService);\n\n\t/**\n\t * The configuration for the NgxI18nModule.\n\t */\n\tprivate readonly config: NgxI18nConfiguration = inject(NgxI18nConfigurationToken);\n\n\tconstructor(\n\t\tprivate readonly httpBackend: HttpBackend,\n\t\tprivate readonly translationsPaths: string[]\n\t) {}\n\n\t/**\n\t * Fetches the provided translation files and saves them to the translation store\n\t *\n\t * @param  lang - The currently used language\n\t */\n\tpublic getTranslation(lang: string): Observable {\n\t\t// Iben: Fetch the currently existing translations, so we can see if they already exist in the loading service\n\t\tconst availableTranslations = this.translationLoadingService.getTranslations();\n\n\t\t// Iben: Convert the translation paths to a combination of calls to get the translations or from the translations store\n\t\tconst requestedTranslations = this.translationsPaths.map((path) => {\n\t\t\tconst fromStore = Boolean(availableTranslations[path]);\n\t\t\tif (fromStore) {\n\t\t\t\t// Iben: If the translations came from the store, mark them as such\n\t\t\t\treturn of({\n\t\t\t\t\ttranslations: availableTranslations[path],\n\t\t\t\t\tfromStore,\n\t\t\t\t\tpath,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Iben: If the translations aren't available in the store, we fetch them from the server\n\t\t\t\t// Wouter: When provided, add a cache busting param so that each request is fetched from the server instead of the browser cache\n\t\t\t\tconst fetchPath = `${path}${lang}.json${this.config.cacheBust ? '?v=' + this.config.cacheBust : ''}`;\n\n\t\t\t\treturn new HttpClient(this.httpBackend).get(fetchPath).pipe(\n\t\t\t\t\t// Iben: Map this to an object so we can track which results corresponds with which path\n\t\t\t\t\tmap((translations) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttranslations,\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\tfromStore,\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t\t// Iben: In case the translation is not loaded, we log an error\n\t\t\t\t\tcatchError((res) => {\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t'Something went wrong for the following translation file:',\n\t\t\t\t\t\t\tfetchPath\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconsole.error(res.message);\n\n\t\t\t\t\t\t// Iben: If we get a not-authorized error from the server, we redirect to the resources not found page\n\t\t\t\t\t\tif (res.status === 401) {\n\t\t\t\t\t\t\tthis.translationLoadingService.markTranslationsLoadedAsFailed();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Iben: Return a translation loaded object so the translations service isn't broken\n\t\t\t\t\t\treturn of({\n\t\t\t\t\t\t\ttranslations: {},\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\tfromStore,\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Join all the requests and merge them\n\t\treturn this.translationLoadingService.loadTranslations(\n\t\t\tthis.translationsPaths.toString(),\n\t\t\tforkJoin(requestedTranslations).pipe(\n\t\t\t\ttap((translations) => {\n\t\t\t\t\t// Iben: Filter out the newly requested translations, and add them to the loaded translations store\n\t\t\t\t\tthis.translationLoadingService.addLoadedTranslations(\n\t\t\t\t\t\ttranslations\n\t\t\t\t\t\t\t.filter((translation) => !translation.fromStore)\n\t\t\t\t\t\t\t.reduce((previous, next) => {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t...previous,\n\t\t\t\t\t\t\t\t\t[next.path]: next.translations,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}, {})\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t\t// Iben: Merge all the translations in a single object for the translation service\n\t\t\t\tmap((response) => deepmerge(...response.map((item) => item.translations)))\n\t\t\t)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nRootService.html":{"url":"injectables/NgxI18nRootService.html","title":"injectable - NgxI18nRootService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nRootService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                availableLanguages$\n                            \n                            \n                                    Private\n                                    Readonly\n                                availableLanguagesSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentLanguage$\n                            \n                            \n                                    Private\n                                    Readonly\n                                currentLanguageSubject\n                            \n                            \n                                    Public\n                                defaultLanguage\n                            \n                            \n                                    Public\n                                languageRouteParam\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getNewLanguage\n                            \n                            \n                                    Public\n                                initializeLanguage\n                            \n                            \n                                    Public\n                                setAvailableLanguages\n                            \n                            \n                                    Public\n                                setCurrentLanguage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:50\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getNewLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNewLanguage(language: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:126\n                        \n                    \n\n\n            \n                \n                        Checks if the newly proposed language can be set, if not we return either the current language or the default language\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe newly proposed language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initializeLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeLanguage()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Sets the initial language of the application when no language is set yet.\nIf a previous language was set in the local storage, said language is used. If not, the default language gets used.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setAvailableLanguages\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAvailableLanguages(languages: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:117\n                        \n                    \n\n\n            \n                \n                        Set the list of available languages\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                languages\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of available languages\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setCurrentLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    setCurrentLanguage(language: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Sets the current language of the application and saves it to the local storage. Returns true if the language was set\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        availableLanguages$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.availableLanguagesSubject\n\t\t.asObservable()\n\t\t.pipe(filter((languages) => languages?.length > 0))\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:38\n                        \n                    \n\n            \n                \n                    The available languages\nOnly emits once the list contains at least one language\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        availableLanguagesSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:31\n                        \n                    \n\n            \n                \n                    A subject to hold the available languages\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:14\n                        \n                    \n\n            \n                \n                    Instance of the configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentLanguage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentLanguageSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:62\n                        \n                    \n\n            \n                \n                    The current language of the application, as an Observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        currentLanguageSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tundefined\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:24\n                        \n                    \n\n            \n                \n                    A subject to hold the current language\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        defaultLanguage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:45\n                        \n                    \n\n            \n                \n                    The default language of the application\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        languageRouteParam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:50\n                        \n                    \n\n            \n                \n                    The route param we use to set the language, by default this is language\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:19\n                        \n                    \n\n            \n                \n                    Instance of the @ibenvandeveire/ngx-core NgxWindowService\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:68\n                                \n                            \n                    \n                        \n                                The current language of the application\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { BehaviorSubject, filter, Observable } from 'rxjs';\n\nimport { NgxI18nConfiguration } from '../../i18n.types';\nimport { NgxI18nConfigurationToken } from '../../tokens';\n\n//TODO: Iben: Once we have a shared lib we should replace the storage and the browser approaches with their corresponding implementations\n@Injectable({ providedIn: 'root' })\nexport class NgxI18nRootService {\n\t/**\n\t * Instance of the configuration\n\t */\n\tprivate readonly configuration: NgxI18nConfiguration = inject(NgxI18nConfigurationToken);\n\n\t/**\n\t * Instance of the @ibenvandeveire/ngx-core NgxWindowService\n\t */\n\tprivate readonly windowsService: NgxWindowService = inject(NgxWindowService);\n\n\t/**\n\t * A subject to hold the current language\n\t */\n\tprivate readonly currentLanguageSubject: BehaviorSubject = new BehaviorSubject(\n\t\tundefined\n\t);\n\n\t/**\n\t * A subject to hold the available languages\n\t */\n\tprivate readonly availableLanguagesSubject: BehaviorSubject = new BehaviorSubject([]);\n\n\t/**\n\t * The available languages\n\t *\n\t * Only emits once the list contains at least one language\n\t */\n\tpublic readonly availableLanguages$: Observable = this.availableLanguagesSubject\n\t\t.asObservable()\n\t\t.pipe(filter((languages) => languages?.length > 0));\n\n\t/**\n\t * The default language of the application\n\t */\n\tpublic defaultLanguage: string;\n\n\t/**\n\t * The route param we use to set the language, by default this is `language`\n\t */\n\tpublic languageRouteParam: string;\n\n\tconstructor() {\n\t\t// Iben: Set the initial values so that we can refer to the services as the source of truth\n\t\tthis.defaultLanguage = this.configuration.defaultLanguage;\n\t\tthis.languageRouteParam = this.configuration.languageRouteParam || 'language';\n\t\tthis.availableLanguagesSubject.next(this.configuration.availableLanguages || []);\n\t}\n\n\t/**\n\t * The current language of the application, as an Observable\n\t */\n\tpublic readonly currentLanguage$: Observable =\n\t\tthis.currentLanguageSubject.asObservable();\n\n\t/**\n\t * The current language of the application\n\t */\n\tpublic get currentLanguage(): string {\n\t\treturn this.currentLanguageSubject.getValue();\n\t}\n\n\t/**\n\t * Sets the current language of the application and saves it to the local storage. Returns true if the language was set\n\t *\n\t * @param language - The provided language\n\t */\n\tpublic setCurrentLanguage(language: string): void {\n\t\t// Iben: get the new language\n\t\tconst newLanguage = this.getNewLanguage(language);\n\n\t\t// Iben: Save the current language to the localStorage when we're in the browser\n\t\tthis.windowsService.runInBrowser(() => {\n\t\t\tlocalStorage.setItem('ngx-i18n-language', newLanguage);\n\t\t});\n\n\t\t// Iben: Update the subject\n\t\tthis.currentLanguageSubject.next(newLanguage);\n\t}\n\n\t/**\n\t * Sets the initial language of the application when no language is set yet.\n\t *\n\t * If a previous language was set in the local storage, said language is used. If not, the default language gets used.\n\t */\n\tpublic initializeLanguage(): void {\n\t\t// Iben: If the current language already exists, we early exit\n\t\tif (this.currentLanguage) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the current language does not exist, we check if it exists in the local storage, if not, we use the default config\n\t\tlet language = this.defaultLanguage;\n\n\t\tthis.windowsService.runInBrowser(() => {\n\t\t\tlanguage = localStorage.getItem('ngx-i18n-language') || this.defaultLanguage;\n\t\t});\n\n\t\t// Iben: We set the new language\n\t\tthis.setCurrentLanguage(language);\n\t}\n\n\t/**\n\t * Set the list of available languages\n\t *\n\t * @param languages - The list of available languages\n\t */\n\tpublic setAvailableLanguages(languages: string[]): void {\n\t\tthis.availableLanguagesSubject.next(languages);\n\t}\n\n\t/**\n\t * Checks if the newly proposed language can be set, if not we return either the current language or the default language\n\t *\n\t * @param {string} language - The newly proposed language\n\t */\n\tprivate getNewLanguage(language: string): string {\n\t\t// Iben: Save the currently being set language\n\t\tlet newLanguage = language;\n\n\t\t// Iben: Check if the new language is part of the available languages\n\t\tif (!this.availableLanguagesSubject.getValue().includes(language)) {\n\t\t\t// Iben: If a language is set that's not part of the available languages, we return a warn\n\t\t\tconsole.warn(\n\t\t\t\t`NgxI18n: A language, ${language}, was attempted to be set that was not part of the available languages (${this.availableLanguagesSubject\n\t\t\t\t\t.getValue()\n\t\t\t\t\t.join(', ')})`\n\t\t\t);\n\n\t\t\t// Iben: If there is already a language set, we early exit and keep the remaining language\n\t\t\tif (this.currentLanguage) {\n\t\t\t\treturn this.currentLanguage;\n\t\t\t}\n\n\t\t\t// Iben: If no language exists, we use the default language\n\t\t\tnewLanguage = this.defaultLanguage;\n\t\t}\n\n\t\treturn newLanguage;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nService.html":{"url":"injectables/NgxI18nService.html","title":"injectable - NgxI18nService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/i18n/i18n.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                rootI18nService\n                            \n                            \n                                    Public\n                                setLanguage\n                            \n                            \n                                    Private\n                                    Readonly\n                                translateService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getTranslation\n                            \n                            \n                                    Public\n                                getTranslationObservable\n                            \n                            \n                                    Public\n                                initI18n\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                                \n                                    availableLanguages\n                                \n                                \n                                    defaultLanguage\n                                \n                                \n                                    translations\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslation(key: string, params?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:73\n                        \n                    \n\n\n            \n                \n                        Returns an instant translation based on a provided key and params\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the translation\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional set of params\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslationObservable\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslationObservable(key: string, params?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:84\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TranslationType\n                            \n                        \n                    \n\n            \n                \n                        Returns a observable based translation based on a provided key and params\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the translation\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional set of params\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initI18n\n                        \n                    \n                \n            \n            \n                \n                        \n                    initI18n(language: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Initializes the translations based on the provided language\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        rootI18nService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nRootService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nRootService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:18\n                        \n                    \n\n            \n                \n                    Instance of the NgxI8nRootService\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setLanguage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:62\n                        \n                    \n\n            \n                \n                    Set the current language of the application\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    language\n                                                    \n                                                            \nThe provided language\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translateService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TranslateService\n\n                    \n                \n                \n                    \n                        Default value : inject(TranslateService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:13\n                        \n                    \n\n            \n                \n                    Instance of the ngx-translate TranslateService\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:23\n                                \n                            \n                    \n                        \n                                Returns the current language of the application\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        availableLanguages\n                    \n                \n\n                \n                    \n                        getavailableLanguages()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:30\n                                \n                            \n                    \n                        \n                                Returns the available languages of the application\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        defaultLanguage\n                    \n                \n\n                \n                    \n                        getdefaultLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:37\n                                \n                            \n                    \n                        \n                                Returns the default language of the application\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        translations\n                    \n                \n\n                \n                    \n                        gettranslations()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:94\n                                \n                            \n                    \n                        \n                                Returns the currently loaded translations\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\n\nimport { NgxI18nAbstractService } from '../../abstracts';\nimport { NgxI18nRootService } from '../root-i18n/root-i18n.service';\n\n@Injectable()\nexport class NgxI18nService implements NgxI18nAbstractService {\n\t/**\n\t * Instance of the ngx-translate TranslateService\n\t */\n\tprivate readonly translateService: TranslateService = inject(TranslateService);\n\n\t/**\n\t * Instance of the NgxI8nRootService\n\t */\n\tprivate readonly rootI18nService: NgxI18nRootService = inject(NgxI18nRootService);\n\n\t/**\n\t * Returns the current language of the application\n\t */\n\tpublic get currentLanguage(): string {\n\t\treturn this.rootI18nService.currentLanguage;\n\t}\n\n\t/**\n\t * Returns the available languages of the application\n\t */\n\tpublic get availableLanguages(): string[] {\n\t\treturn this.translateService.langs;\n\t}\n\n\t/**\n\t * Returns the default language of the application\n\t */\n\tpublic get defaultLanguage(): string {\n\t\treturn this.translateService.getDefaultLang();\n\t}\n\n\t/**\n\t * Initializes the translations based on the provided language\n\t *\n\t * @param language - The provided language\n\t */\n\tpublic initI18n(language: string): Observable {\n\t\t// Iben: If the language is provided, set it in the root service\n\t\tif (language) {\n\t\t\tthis.rootI18nService.setCurrentLanguage(language);\n\t\t}\n\n\t\tthis.translateService.use(this.rootI18nService.currentLanguage);\n\n\t\treturn this.translateService.reloadLang(language);\n\t}\n\n\t/**\n\t * Set the current language of the application\n\t *\n\t * @param language - The provided language\n\t */\n\tpublic setLanguage = (language: string): void => {\n\t\tthis.rootI18nService.setCurrentLanguage(language);\n\t\tthis.translateService.use(this.rootI18nService.currentLanguage);\n\t};\n\n\t/**\n\t * Returns an instant translation based on a provided key and params\n\t *\n\t * @param key - The key of the translation\n\t * @param params - An optional set of params\n\t */\n\tpublic getTranslation(key: string, params?: any): string {\n\t\treturn this.translateService.instant(key, params);\n\t}\n\n\t// Denis: Set the default to string but allow for others.\n\t/**\n\t * Returns a observable based translation based on a provided key and params\n\t *\n\t * @param key - The key of the translation\n\t * @param params - An optional set of params\n\t */\n\tpublic getTranslationObservable(\n\t\tkey: string,\n\t\tparams?: any\n\t): Observable {\n\t\treturn this.translateService.get(key, params);\n\t}\n\n\t/**\n\t * Returns the currently loaded translations\n\t */\n\tpublic get translations() {\n\t\treturn this.translateService.translations;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nTranslationLoaderResolver.html":{"url":"injectables/NgxI18nTranslationLoaderResolver.html","title":"injectable - NgxI18nTranslationLoaderResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nTranslationLoaderResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts\n        \n\n\n            \n                Description\n            \n            \n                This NgxI18nTranslationLoaderResolver will make sure that the translations are loaded from the moment you route to a detail module\nIt is essential you put this resolver at the root of your modules, whether it be lazy loaded through the guard or calling the resolver in the constructor\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                i18nLoadingService\n                            \n                            \n                                    Private\n                                    Readonly\n                                i18nService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resolve\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolve()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        i18nLoadingService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nLoadingService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nLoadingService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:20\n                        \n                    \n\n            \n                \n                    The NgxI18nLoadingService instance\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        i18nService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:16\n                        \n                    \n\n            \n                \n                    The NgxI18nService instance\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { finalize, map, Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxI18nLoadingService, NgxI18nService } from '../../services';\n\n/**\n * This NgxI18nTranslationLoaderResolver will make sure that the translations are loaded from the moment you route to a detail module\n * It is essential you put this resolver at the root of your modules, whether it be lazy loaded through the guard or calling the resolver in the constructor\n */\n@Injectable()\nexport class NgxI18nTranslationLoaderResolver {\n\t/**\n\t * The NgxI18nService instance\n\t */\n\tprivate readonly i18nService: NgxI18nService = inject(NgxI18nService);\n\t/**\n\t * The NgxI18nLoadingService instance\n\t */\n\tprivate readonly i18nLoadingService: NgxI18nLoadingService = inject(NgxI18nLoadingService);\n\n\tpublic resolve(): Observable {\n\t\t// Iben: Generate an id for the translations we're about to load\n\t\tconst id = uuid();\n\n\t\t// Iben: Dispatch to the loader service that we're about to load a set of translations\n\t\tthis.i18nLoadingService.dispatchTranslationLoaderAction({ id, state: 'LOADING' });\n\n\t\t// Iben: This will reload the translations, and fetch the newly needed lazy loaded translations\n\t\treturn this.i18nService.initI18n(this.i18nService.currentLanguage).pipe(\n\t\t\t// Iben: Map to true for the guard\n\t\t\tmap(() => true),\n\t\t\tfinalize(() => {\n\t\t\t\t// Iben: Dispatch to the loader service that the translations have been loaded\n\t\t\t\tthis.i18nLoadingService.dispatchTranslationLoaderAction({ id, state: 'LOADED' });\n\t\t\t})\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerBase.html":{"url":"interfaces/NgxImageMarkerBase.html","title":"interface - NgxImageMarkerBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            close\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        close\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        close:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"view\" | \"edit\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"view\" | \"edit\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxImageMarkerComponent.html":{"url":"components/NgxImageMarkerComponent.html","title":"component - NgxImageMarkerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxImageMarkerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts\n\n\n\n    \n        Description\n    \n    \n        A component wrapper for MarkerJs views\nhttps://markerjs.com/\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnChanges\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-image-marker\n            \n\n\n\n\n\n            \n                template\n                \n            \n\n\n\n\n            \n                styleUrl\n                ./image-marker.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                canEdit\n                            \n                            \n                                    Private\n                                currentMarker\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentZoomLevel\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                image\n                            \n                            \n                                    Public\n                                    Readonly\n                                imageDescription\n                            \n                            \n                                    Public\n                                    Readonly\n                                imageElement\n                            \n                            \n                                    Private\n                                    Readonly\n                                imageMarkerService\n                            \n                            \n                                    Public\n                                markerClicked\n                            \n                            \n                                    Private\n                                    Readonly\n                                markerDestroyedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                markerTypes\n                            \n                            \n                                    Public\n                                    Readonly\n                                startState\n                            \n                            \n                                    Public\n                                stateUpdated\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                            \n                                    Public\n                                    Readonly\n                                zoomLevels\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createMarker\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                canEdit\n                            \n                            \n                                currentZoomLevel\n                            \n                            \n                                image\n                            \n                            \n                                imageDescription\n                            \n                            \n                                markerTypes\n                            \n                            \n                                startState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                markerClicked\n                            \n                            \n                                stateUpdated\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        canEdit\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:84\n                            \n                        \n                \n                    \n                        Whether we can edit the view, by default this is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        currentZoomLevel\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:89\n                            \n                        \n                \n                    \n                        An optional current zoom level\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        image\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:69\n                            \n                        \n                \n                    \n                        The url to the image we wish to render\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        imageDescription\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:74\n                            \n                        \n                \n                    \n                        A WCAG/WAI-ARIA compliant description of the image\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        markerTypes\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:99\n                            \n                        \n                \n                    \n                        An optional record of types of Markerjs markers we wish to render\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        startState\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:79\n                            \n                        \n                \n                    \n                        The start data we wish to render\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        markerClicked\n                    \n                \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:109\n                            \n                        \n                \n                    \n                        Emits when a marker is clicked when the view is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        stateUpdated\n                    \n                \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:104\n                            \n                        \n                \n                    \n                        Emits when the state has been updated\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarker()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:149\n                        \n                    \n\n\n            \n                \n                        Creates a MarkerJs view based on the provided configuration\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:111\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:137\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        canEdit\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:84\n                        \n                    \n\n            \n                \n                    Whether we can edit the view, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentMarker\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxImageMarker\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:54\n                        \n                    \n\n            \n                \n                    The currently created marker\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentZoomLevel\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:89\n                        \n                    \n\n            \n                \n                    An optional current zoom level\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        image\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:69\n                        \n                    \n\n            \n                \n                    The url to the image we wish to render\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        imageDescription\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:74\n                        \n                    \n\n            \n                \n                    A WCAG/WAI-ARIA compliant description of the image\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        imageElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('imageElement')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:64\n                        \n                    \n\n            \n                \n                    The rendered image element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        imageMarkerService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxImageMarkerService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxImageMarkerService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markerClicked\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:109\n                        \n                    \n\n            \n                \n                    Emits when a marker is clicked when the view is in readonly mode\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        markerDestroyedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:59\n                        \n                    \n\n            \n                \n                    A subject holding the destroy state of the marker\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        markerTypes\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:99\n                        \n                    \n\n            \n                \n                    An optional record of types of Markerjs markers we wish to render\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        startState\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:79\n                        \n                    \n\n            \n                \n                    The start data we wish to render\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stateUpdated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:104\n                        \n                    \n\n            \n                \n                    Emits when the state has been updated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        zoomLevels\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:94\n                        \n                    \n\n            \n                \n                    An optional amount of times we can zoom in and out\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  inject,\n  OnChanges,\n  OnDestroy,\n  input,\n  OutputEmitterRef,\n  output,\n  viewChild\n} from '@angular/core';\nimport { NgxWindowService, simpleChangeHasChanged } from '@ibenvandeveire/ngx-core';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxImageMarkerService } from '../../services';\nimport {\n\tNgxImageMarker,\n\tNgxImageMarkerItem,\n\tNgxImageMarkerState,\n\tNgxImageMarkerTypes,\n} from '../../types';\n\n/**\n * A component wrapper for MarkerJs views\n *\n * https://markerjs.com/\n */\n\n// TODO: Iben: Once we figured out how we'll share the FormAccessors with other packages, we should make this a ControlValueAccessor\n@Component({\n\tselector: 'ngx-image-marker',\n\ttemplate: ``,\n\tstyleUrl: './image-marker.component.scss',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\thost: {\n\t\tclass: 'ngx-image-marker',\n\t},\n})\nexport class NgxImageMarkerComponent implements AfterViewInit, OnChanges, OnDestroy {\n\tprivate readonly imageMarkerService: NgxImageMarkerService = inject(NgxImageMarkerService);\n\tprivate readonly windowService: NgxWindowService = inject(NgxWindowService);\n\tprivate readonly elementRef: ElementRef = inject(ElementRef);\n\n\t/**\n\t * The currently created marker\n\t */\n\tprivate currentMarker: NgxImageMarker;\n\n\t/**\n\t * A subject holding the destroy state of the marker\n\t */\n\tprivate readonly markerDestroyedSubject: Subject = new Subject();\n\n\t/**\n\t * The rendered image element\n\t */\n\tpublic readonly imageElement = viewChild('imageElement');\n\n\t/**\n\t * The url to the image we wish to render\n\t */\n\tpublic readonly image = input.required();\n\n\t/**\n\t * A WCAG/WAI-ARIA compliant description of the image\n\t */\n\tpublic readonly imageDescription = input.required();\n\n\t/**\n\t * The start data we wish to render\n\t */\n\tpublic readonly startState = input();\n\n\t/**\n\t * Whether we can edit the view, by default this is true\n\t */\n\tpublic readonly canEdit = input(true);\n\n\t/**\n\t * An optional current zoom level\n\t */\n\tpublic readonly currentZoomLevel = input();\n\n\t/**\n\t * An optional amount of times we can zoom in and out\n\t */\n\tpublic readonly zoomLevels = input();\n\n\t/**\n\t * An optional record of types of Markerjs markers we wish to render\n\t */\n\tpublic readonly markerTypes = input();\n\n\t/**\n\t * Emits when the state has been updated\n\t */\n\tpublic stateUpdated: OutputEmitterRef = output();\n\n\t/**\n\t * Emits when a marker is clicked when the view is in readonly mode\n\t */\n\tpublic markerClicked: OutputEmitterRef = output();\n\n\tngAfterViewInit(): void {\n\t\t// Iben: Create the initial marker\n\t\tthis.createMarker();\n\t}\n\n\tngOnChanges(changes: any): void {\n\t\t// Iben: If no marker exists or if the image has not rendered, early exit\n\t\tif (!this.currentMarker || !this.imageElement()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Check if there are changes to the state or the configuration when there is a marker\n\t\tconst hasChanges =\n\t\t\tthis.currentMarker &&\n\t\t\t(simpleChangeHasChanged(changes.startState) ||\n\t\t\t\tsimpleChangeHasChanged(changes.canEdit) ||\n\t\t\t\tsimpleChangeHasChanged(changes.markerTypes) ||\n\t\t\t\tsimpleChangeHasChanged(changes.currentZoomLevel) ||\n\t\t\t\tsimpleChangeHasChanged(changes.zoomLevels));\n\n\t\t// Iben: Recreate the marker whenever the configuration is adjusted\n\t\tif (!this.currentMarker || hasChanges) {\n\t\t\tthis.createMarker();\n\t\t}\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Close the marker\n\t\tthis.currentMarker.close();\n\n\t\t// Iben: Complete the destroy subject\n\t\tthis.markerDestroyedSubject.next();\n\t\tthis.markerDestroyedSubject.complete();\n\t}\n\n\t/**\n\t * Creates a MarkerJs view based on the provided configuration\n\t */\n\tprivate createMarker() {\n\t\t// Iben: Only create the image when we're in the browser\n\t\tthis.windowService.runInBrowser(() => {\n\t\t\t// Iben: Close the existing marker if needed\n\t\t\tif (this.currentMarker) {\n\t\t\t\tthis.currentMarker.close();\n\t\t\t\tthis.markerDestroyedSubject.next();\n\t\t\t}\n\n\t\t\t// Iben: Create a new marker view based on the provided configuration\n\t\t\tconst currentZoomLevel = this.currentZoomLevel();\n\t\t\tconst zoomLevels = this.zoomLevels();\n\t\t\tthis.currentMarker = this.imageMarkerService.createImageMarker(\n\t\t\t\tthis.imageElement().nativeElement,\n\t\t\t\tthis.elementRef.nativeElement,\n\t\t\t\t{\n\t\t\t\t\tmode: this.canEdit() ? 'edit' : 'view',\n\t\t\t\t\tallowZoom: true,\n\t\t\t\t\tdefaultState: this.startState() || undefined,\n\t\t\t\t\tmarkerTypes: this.markerTypes(),\n\t\t\t\t\tzoom:\n\t\t\t\t\t\tcurrentZoomLevel !== undefined && zoomLevels\n\t\t\t\t\t\t\t? { current: currentZoomLevel, levels: zoomLevels }\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Iben: Listen to the valueChanges based on the provided type.\n\t\t\tif (this.currentMarker.mode === 'edit') {\n\t\t\t\tthis.currentMarker.valueChanges\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\ttap((value) => {\n\t\t\t\t\t\t\tthis.stateUpdated.emit(value);\n\t\t\t\t\t\t}),\n\t\t\t\t\t\ttakeUntil(this.markerDestroyedSubject)\n\t\t\t\t\t)\n\t\t\t\t\t.subscribe();\n\t\t\t} else {\n\t\t\t\tthis.currentMarker.valueChanges\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\ttap((value) => {\n\t\t\t\t\t\t\tthis.markerClicked.emit(value);\n\t\t\t\t\t\t}),\n\t\t\t\t\t\ttakeUntil(this.markerDestroyedSubject)\n\t\t\t\t\t)\n\t\t\t\t\t.subscribe();\n\t\t\t}\n\t\t});\n\t}\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxImageMarkerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerConfiguration.html":{"url":"interfaces/NgxImageMarkerConfiguration.html","title":"interface - NgxImageMarkerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for the marker view\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowClear\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            allowZoom\n                                        \n                                \n                                \n                                        \n                                            defaultState\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            markerTypes\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            zoom\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowClear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowClear:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether clearing the marker view is allowed, by default false\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowZoom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowZoom:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether zooming in is allowed, by default false\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultState\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultState:         NgxImageMarkerState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxImageMarkerState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state the view has to start from\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        markerTypes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        markerTypes:         NgxImageMarkerTypes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxImageMarkerTypes\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional set of allowed marker types, by default all\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"view\" | \"edit\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"view\" | \"edit\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the record is readonly or not\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zoom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zoom:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerEdit.html":{"url":"interfaces/NgxImageMarkerEdit.html","title":"interface - NgxImageMarkerEdit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerEdit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxImageMarkerBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                        \n                                            valueChanges\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valueChanges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        valueChanges:     Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Observable\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxImageMarkerService.html":{"url":"injectables/NgxImageMarkerService.html","title":"injectable - NgxImageMarkerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxImageMarkerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that serves as a wrapper for MarkerJs2 and MarkerJs-live\nhttps://markerjs.com/\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                markers\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createImageMakerEdit\n                            \n                            \n                                    Public\n                                createImageMarker\n                            \n                            \n                                    Private\n                                createMarkerClickedListener\n                            \n                            \n                                    Private\n                                createMarkerValueChanges\n                            \n                            \n                                    Private\n                                createReadonlyImageMarker\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createImageMakerEdit\n                        \n                    \n                \n            \n            \n                \n                        \n                    createImageMakerEdit(id: string, image: HTMLImageElement | HTMLElement, rootTarget: HTMLElement, configuration: NgxImageMarkerConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:117\n                        \n                    \n\n\n            \n                \n                        Creates an editable marker view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                image\n                                            \n                                                        HTMLImageElement | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe image element we wish to draw markers on\n\n\n                                            \n                                        \n                                        \n                                                rootTarget\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we render the image in\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxImageMarkerConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration we wish to pass to the image markers\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxImageMarkerEdit\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createImageMarker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createImageMarker(image: HTMLImageElement | HTMLElement, rootTarget: HTMLElement, configuration: NgxImageMarkerConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Create an image with markers\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                image\n                                            \n                                                        HTMLImageElement | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe image element we wish to draw markers on\n\n\n                                            \n                                        \n                                        \n                                                rootTarget\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we render the image in\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxImageMarkerConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration we wish to pass to the image markers\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxImageMarker\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarkerClickedListener\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarkerClickedListener(marker: MarkerView)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:207\n                        \n                    \n\n\n            \n                \n                        Listen to the marker clicks in the readonly view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                marker\n                                            \n                                                        MarkerView\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe marker view\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarkerValueChanges\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarkerValueChanges(marker: MarkerArea)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:188\n                        \n                    \n\n\n            \n                \n                        Listen to the value changes in the editable view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                marker\n                                            \n                                                        MarkerArea\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe marker view\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createReadonlyImageMarker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReadonlyImageMarker(id: string, image: HTMLImageElement | HTMLElement, rootTarget: HTMLElement, configuration: NgxImageMarkerConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Creates a readonly marker view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                image\n                                            \n                                                        HTMLImageElement | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe image element we wish to draw markers on\n\n\n                                            \n                                        \n                                        \n                                                rootTarget\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we render the image in\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxImageMarkerConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration we wish to pass to the image markers\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxImageMarkerView\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:221\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        markers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:31\n                        \n                    \n\n            \n                \n                    A record with all markers\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { MarkerView } from 'markerjs-live';\nimport { MarkerArea, MarkerAreaState } from 'markerjs2';\nimport { Observable, Subject } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport {\n\tNgxImageMarker,\n\tNgxImageMarkerConfiguration,\n\tNgxImageMarkerEdit,\n\tNgxImageMarkerItem,\n\tNgxImageMarkerView,\n} from '../../types';\n\n/**\n * A service that serves as a wrapper for MarkerJs2 and MarkerJs-live\n *\n * https://markerjs.com/\n */\n// TODO: Iben: To avoid essentially only testing a mocked version of this package, we need to test this through Cypress/Playwrite/... tests\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxImageMarkerService implements OnDestroy {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A record with all markers\n\t */\n\tprivate readonly markers: Record = {};\n\n\t/**\n\t * Create an image with markers\n\t *\n\t * @param image - The image element we wish to draw markers on\n\t * @param rootTarget - The element we render the image in\n\t * @param configuration - The configuration we wish to pass to the image markers\n\t */\n\tpublic createImageMarker(\n\t\timage: HTMLImageElement | HTMLElement,\n\t\trootTarget: HTMLElement,\n\t\tconfiguration: NgxImageMarkerConfiguration\n\t): NgxImageMarker {\n\t\t// Iben: Return undefined if we're not in the browser\n\t\tif (!this.windowService.isBrowser) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Create an id for the marker\n\t\tconst id = uuid();\n\n\t\t// Iben: Depending on the provided mode, we create a edit view or a non editable view\n\t\treturn configuration.mode === 'edit'\n\t\t\t? this.createImageMakerEdit(id, image, rootTarget, configuration)\n\t\t\t: this.createReadonlyImageMarker(id, image, rootTarget, configuration);\n\t}\n\n\t/**\n\t * Creates a readonly marker view\n\t *\n\t * @param image - The image element we wish to draw markers on\n\t * @param rootTarget - The element we render the image in\n\t * @param configuration - The configuration we wish to pass to the image markers\n\t */\n\tprivate createReadonlyImageMarker(\n\t\tid: string,\n\t\timage: HTMLImageElement | HTMLElement,\n\t\trootTarget: HTMLElement,\n\t\tconfiguration: NgxImageMarkerConfiguration\n\t): NgxImageMarkerView {\n\t\t// Iben: Create the new marker view\n\t\tconst marker = new MarkerView(image);\n\n\t\t// Iben: Set the root element so the marker layer is rendered in the same element\n\t\tmarker.targetRoot = rootTarget;\n\n\t\t// Iben: Create the Angular marker view\n\t\tconst result: NgxImageMarkerView = {\n\t\t\tmode: 'view',\n\t\t\tclose: (() => {\n\t\t\t\t// Iben: Remove the event listener and close the marker\n\t\t\t\tmarker.removeEventListener('select', () => {});\n\t\t\t\tmarker.close();\n\n\t\t\t\t// Iben: Remove the marker from the record\n\t\t\t\tthis.markers[id] = undefined;\n\t\t\t}).bind(this),\n\t\t\tvalueChanges: this.createMarkerClickedListener(marker),\n\t\t};\n\n\t\t// Iben: Create a clicked listener for the currently clicked item\n\t\tthis.createMarkerClickedListener(marker);\n\n\t\t// Iben: If custom marker types were provided, set them as the available types\n\t\tif (configuration.markerTypes?.view) {\n\t\t\tmarker.availableMarkerTypes = configuration.markerTypes.view;\n\t\t}\n\n\t\t// Iben: Show the marker once all settings are set\n\t\tmarker.show(configuration.defaultState);\n\n\t\t// Iben: Add the marker to the record\n\t\tthis.markers[id] = result;\n\n\t\t// Iben: Return the Angular view\n\t\treturn result;\n\t}\n\n\t/**\n\t * Creates an editable marker view\n\t *\n\t * @param image - The image element we wish to draw markers on\n\t * @param rootTarget - The element we render the image in\n\t * @param configuration - The configuration we wish to pass to the image markers\n\t */\n\tprivate createImageMakerEdit(\n\t\tid: string,\n\t\timage: HTMLImageElement | HTMLElement,\n\t\trootTarget: HTMLElement,\n\t\tconfiguration: NgxImageMarkerConfiguration\n\t): NgxImageMarkerEdit {\n\t\t// Iben: Create a new marker view\n\t\tconst marker = new MarkerArea(image);\n\n\t\t// Iben: Set the root element so the marker layer is rendered in the same element\n\t\tmarker.targetRoot = rootTarget;\n\n\t\t// Iben: Create the Angular based view\n\t\tconst result: NgxImageMarkerEdit = {\n\t\t\tmode: 'edit',\n\t\t\tclose: (() => {\n\t\t\t\t// Iben: Remove the event listener and close the marker\n\t\t\t\tmarker.removeEventListener('statechange', () => {});\n\t\t\t\tmarker.close();\n\n\t\t\t\t// Iben: Remove the marker from the record\n\t\t\t\tthis.markers[id] = undefined;\n\t\t\t}).bind(this),\n\t\t\tvalueChanges: this.createMarkerValueChanges(marker),\n\t\t};\n\n\t\t// Iben: Set the configuration settings\n\t\t// These can later on be extended when needed\n\t\tmarker.uiStyleSettings.zoomButtonVisible = configuration.allowZoom;\n\t\tmarker.uiStyleSettings.zoomOutButtonVisible = configuration.allowZoom;\n\t\tmarker.zoomSteps = configuration.zoom?.levels || [1, 2, 3, 4];\n\t\tmarker.zoomLevel = configuration.zoom?.current ?? 1;\n\t\tmarker.uiStyleSettings.clearButtonVisible = configuration.allowClear;\n\n\t\t// Iben: Set the available marker types\n\t\tmarker.availableMarkerTypes =\n\t\t\t(configuration.markerTypes?.edit as any) || marker.ALL_MARKER_TYPES;\n\n\t\t// Iben: Set the class names of the items\n\t\tmarker.uiStyleSettings.notesAreaStyleClassName = 'ngx-image-marker-notes-area';\n\t\tmarker.uiStyleSettings.toolbarStyleColorsClassName = 'ngx-image-marker-toolbar';\n\t\tmarker.uiStyleSettings.toolboxStyleColorsClassName = 'ngx-image-marker-toolbox';\n\t\tmarker.uiStyleSettings.toolbarButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbar-button';\n\t\tmarker.uiStyleSettings.toolbarActiveButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbar-button-active';\n\t\tmarker.uiStyleSettings.toolboxButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbox-button';\n\t\tmarker.uiStyleSettings.toolboxActiveButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbox-button-active';\n\n\t\t// Iben: Show the marker once all settings are set\n\t\tmarker.show();\n\n\t\t// Iben: If there was state before, set it accordingly\n\t\tif (configuration.defaultState) {\n\t\t\tmarker.restoreState(configuration.defaultState);\n\t\t}\n\n\t\t// Iben: Add the marker to the record\n\t\tthis.markers[id] = result;\n\n\t\t// Iben: Return the Angular view\n\t\treturn result;\n\t}\n\n\t/**\n\t * Listen to the value changes in the editable view\n\t *\n\t * @param {MarkerArea} marker - The marker view\n\t */\n\tprivate createMarkerValueChanges(marker: MarkerArea): Observable {\n\t\t// Iben: Setup valueChanges\n\t\tconst valueChanges = new Subject();\n\n\t\t// Iben: Update the subject whenever a new item was added to the marker view\n\t\tmarker.addEventListener('statechange', (event) => {\n\t\t\tvalueChanges.next(event?.markerArea?.getState());\n\t\t});\n\n\t\t// Iben: Return changes observable\n\t\t// This Observable gets closed in the NgxImageMarkerComponent and therefor do not require a takeUntil here\n\t\treturn valueChanges.asObservable();\n\t}\n\n\t/**\n\t * Listen to the marker clicks in the readonly view\n\t *\n\t * @param {MarkerArea} marker - The marker view\n\t */\n\tprivate createMarkerClickedListener(marker: MarkerView): Observable {\n\t\t// Iben: Setup valueChanges\n\t\tconst valueChanges = new Subject();\n\n\t\t// Iben: Update the subject whenever a marker was clicked\n\t\tmarker.addEventListener('select', (_, marker) => {\n\t\t\tvalueChanges.next(marker);\n\t\t});\n\n\t\t// Iben: Return changes observable\n\t\t// This Observable gets closed in the NgxImageMarkerComponent and therefor do not require a takeUntil here\n\t\treturn valueChanges.asObservable();\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Close all existing markers, removing the listeners where needed\n\t\tObject.values(this.markers)\n\t\t\t.filter(Boolean)\n\t\t\t.forEach((marker) => {\n\t\t\t\tmarker.close();\n\t\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerTypes.html":{"url":"interfaces/NgxImageMarkerTypes.html","title":"interface - NgxImageMarkerTypes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerTypes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n            \n                Description\n            \n            \n                A record with the marker types we wish to show, both for the view and the edit mode\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edit\n                                        \n                                \n                                \n                                        \n                                            view\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edit:     ()[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ()[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        view\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        view:     ()[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ()[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerView.html":{"url":"interfaces/NgxImageMarkerView.html","title":"interface - NgxImageMarkerView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxImageMarkerBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                        \n                                            valueChanges\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valueChanges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        valueChanges:     Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Observable\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxIsAuthenticatedDirective.html":{"url":"directives/NgxIsAuthenticatedDirective.html","title":"directive - NgxIsAuthenticatedDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxIsAuthenticatedDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                \nA directive that will render a part of the template based on whether the user is authenticated.\n\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxIsAuthenticated]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationService\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Public\n                                ngxIsAuthenticated\n                            \n                            \n                                    Public\n                                ngxIsAuthenticatedElse\n                            \n                            \n                                    Private\n                                shouldBeAuthenticated\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxIsAuthenticated\n                            \n                            \n                                ngxIsAuthenticatedElse\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:48\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxIsAuthenticated\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:70\n                            \n                        \n                \n                    \n                        Whether the user has to be authenticated\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxIsAuthenticatedElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:74\n                            \n                        \n                \n                    \n                        The else template in case the condition is not matched\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:125\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:76\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:80\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxAuthenticationServiceToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:35\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxIsAuthenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:70\n                        \n                    \n\n            \n                \n                    Whether the user has to be authenticated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxIsAuthenticatedElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:74\n                        \n                    \n\n            \n                \n                    The else template in case the condition is not matched\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldBeAuthenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:48\n                        \n                    \n\n            \n                \n                    Whether the user has to be authenticated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:40\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\n\n/**\n *  * A directive that will render a part of the template based on whether the user is authenticated.\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n@Directive({\n\tselector: '[ngxIsAuthenticated]',\n})\nexport class NgxIsAuthenticatedDirective implements OnDestroy {\n\tprivate readonly authenticationService = inject(\n\t\tNgxAuthenticationServiceToken\n\t);\n\tprivate viewContainer = inject(ViewContainerRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * Whether the user has to be authenticated\n\t */\n\tprivate shouldBeAuthenticated: boolean = true;\n\n\tconstructor() {\n\t\tconst templateRef = inject>(TemplateRef);\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tthis.shouldBeAuthenticated = this.ngxIsAuthenticated();\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxIsAuthenticatedElse();\n\t\t\tthis.elseViewRef = null;\n\t\t\tthis.updateView();\n\t\t});\n\t}\n\n\t/**\n\t * Whether the user has to be authenticated\n\t */\n\tpublic ngxIsAuthenticated: InputSignal = input();\n\t/**\n\t * The else template in case the condition is not matched\n\t */\n\tpublic ngxIsAuthenticatedElse: InputSignal> = input();\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.authenticationService.isAuthenticated$\n\t\t\t.pipe(\n\t\t\t\ttap((isAuthenticated) => {\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tif (\n\t\t\t\t\t\t(isAuthenticated && this.shouldBeAuthenticated) ||\n\t\t\t\t\t\t(!isAuthenticated && !this.shouldBeAuthenticated)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.thenViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.elseViewRef = null;\n\t\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxMediaQueryService.html":{"url":"injectables/NgxMediaQueryService.html","title":"injectable - NgxMediaQueryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxMediaQueryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that can be used to track media queries and their changes. It exposes a method\nto register media queries, which takes an array of tuples with the id of the media query\nand the query itself. The service will then emit the id of the media query that has\nchanged when subscribed to the getMatchingQuery$ method.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                mediaQueryListenerMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                queryChangedSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                queryIdMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                queryListMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getMatchingQuery$\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                registerMediaQueries\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getMatchingQuery$\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMatchingQuery$(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Pass the id of the query whose changes need to be listened to.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the media query that should be checked.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits a boolean value whenever the requested media query changes.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:121\n                        \n                    \n\n\n            \n                \n                        Unregister all media query subscriptions from the service.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerMediaQueries\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerMediaQueries(...queries: [])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Register a list of media queries that need to be tracked by the service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                        []\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA list of media queries that should be registered with the service.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        mediaQueryListenerMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queryChangedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReplaySubject\n\n                    \n                \n                \n                    \n                        Default value : new ReplaySubject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:37\n                        \n                    \n\n            \n                \n                    A subject that emits the id of the media query that has changed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queryIdMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:23\n                        \n                    \n\n            \n                \n                    A map of the registered media queries with their id.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queryListMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:18\n                        \n                    \n\n            \n                \n                    A map of media queries that are registered with the service.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { filter, map, Observable, ReplaySubject } from 'rxjs';\n\n/**\n * A service that can be used to track media queries and their changes. It exposes a method\n * to register media queries, which takes an array of tuples with the id of the media query\n * and the query itself. The service will then emit the id of the media query that has\n * changed when subscribed to the `getMatchingQuery$` method.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxMediaQueryService implements OnDestroy {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A map of media queries that are registered with the service.\n\t */\n\tprivate readonly queryListMap: Map = new Map();\n\n\t/**\n\t * A map of the registered media queries with their id.\n\t */\n\tprivate readonly queryIdMap: Map = new Map();\n\n\t/*\n\t * A map of listeners that are registered with the service.\n\t * They are saved to be able to remove them when the service is destroyed.\n\t */\n\tprivate readonly mediaQueryListenerMap: Map void\n\t> = new Map();\n\n\t/**\n\t * A subject that emits the id of the media query that has changed.\n\t */\n\tprivate readonly queryChangedSubject: ReplaySubject = new ReplaySubject();\n\n\t/**\n\t * Register a list of media queries that need to be tracked by the service.\n\t *\n\t * @param queries - A list of media queries that should be registered with the service.\n\t */\n\tpublic registerMediaQueries(...queries: [id: string, query: string][]): void {\n\t\tthis.windowService.runInBrowser(({ browserWindow }) => {\n\t\t\tfor (const [id, query] of queries) {\n\t\t\t\t// Wouter: Warn if the id has already been registered.\n\t\t\t\tif (this.queryIdMap.get(id)) {\n\t\t\t\t\treturn console.warn(\n\t\t\t\t\t\t`NgxMediaQueryService: Media query with id '${id}' already exists and is defined by '${this.queryIdMap.get(\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t)}'`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Wouter: If the query has already been registered, throw an error to prevent duplicate subscriptions\n\t\t\t\tif ([...this.queryIdMap].some(([_, value]) => value === query)) {\n\t\t\t\t\tconst duplicateQuery = [...this.queryIdMap].find(\n\t\t\t\t\t\t([_, value]) => value === query\n\t\t\t\t\t);\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`NgxMediaQueryService: Query of ['${id}', ${query}] already exists and is defined by ['${duplicateQuery[0]}', ${duplicateQuery[1]}]`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Wouter: save the id and query\n\t\t\t\tthis.queryIdMap.set(id, query);\n\n\t\t\t\t// Wouter: For each query, create a MediaQueryList object\n\t\t\t\tconst matchedQuery = browserWindow.matchMedia(query);\n\n\t\t\t\t// Wouter: Save the query\n\t\t\t\tthis.queryListMap.set(id, matchedQuery);\n\n\t\t\t\t// Wouter: Emit the id of the query that has changed\n\t\t\t\tthis.queryChangedSubject.next(id);\n\n\t\t\t\t// Wouter: Create a listener for the query. This is done separately to be\n\t\t\t\t// able to remove the listener when the service is destroyed\n\t\t\t\tconst listener = (queryChangedEvent: MediaQueryListEvent) => {\n\t\t\t\t\tthis.queryListMap.set(id, queryChangedEvent.currentTarget as MediaQueryList);\n\n\t\t\t\t\t// Wouter: Emit the id of the query that has changed\n\t\t\t\t\tthis.queryChangedSubject.next(id);\n\t\t\t\t};\n\n\t\t\t\t// Wouter: Register the listener to the query\n\t\t\t\tmatchedQuery.addEventListener('change', listener);\n\n\t\t\t\t// Wouter: Save the listener\n\t\t\t\tthis.mediaQueryListenerMap.set(id, listener);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Pass the id of the query whose changes need to be listened to.\n\t *\n\t * @param id - The id of the media query that should be checked.\n\t * @returns An observable that emits a boolean value whenever the requested media query changes.\n\t */\n\tpublic getMatchingQuery$(id: string): Observable {\n\t\t// Wouter: Throw an error if the query has not been registered\n\t\tif (!this.queryIdMap.has(id)) {\n\t\t\tthrow new Error(\n\t\t\t\t`NgxMediaQueryService: No media query with id '${id}' has been registered. Please register the media query first using the 'registerMediaQueries' method.`\n\t\t\t);\n\t\t}\n\n\t\treturn this.queryChangedSubject.asObservable().pipe(\n\t\t\t// Wouter: Filter the query that has changed.\n\t\t\t// This will make sure only the [id] streams are triggered.\n\t\t\tfilter((queryId) => queryId === id),\n\t\t\tmap(() => this.queryListMap.get(id).matches)\n\t\t);\n\t}\n\n\t/**\n\t * Unregister all media query subscriptions from the service.\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.windowService.runInBrowser(() => {\n\t\t\t// Wouter: Remove all eventListeners\n\t\t\tfor (const [id, query] of this.queryListMap) {\n\t\t\t\tquery.removeEventListener('change', this.mediaQueryListenerMap.get(id));\n\t\t\t}\n\n\t\t\t// Wouter: Complete subscriptions\n\t\t\tthis.queryChangedSubject.next(null);\n\t\t\tthis.queryChangedSubject.complete();\n\n\t\t\t// Wouter: Clear maps\n\t\t\tthis.queryListMap.clear();\n\t\t\tthis.mediaQueryListenerMap.clear();\n\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxModalAbstractComponent.html":{"url":"directives/NgxModalAbstractComponent.html","title":"directive - NgxModalAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxModalAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract for the NgxModalService\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                            \n                                    Public\n                                    Readonly\n                                ariaDescribedBy\n                            \n                            \n                                    Public\n                                    Readonly\n                                ariaLabelledBy\n                            \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    \n                                    Public\n                                onEscape\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ariaDescribedBy\n                            \n                            \n                                ariaLabelledBy\n                            \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown.escape\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ariaDescribedBy\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:31\n                            \n                        \n                \n                    \n                        An optional aria-describedBy property\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ariaLabelledBy\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:26\n                            \n                        \n                \n                    \n                        An optional aria-labelledby property\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:36\n                            \n                        \n                \n                    \n                        Optional data that can be passed to the modal\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            document:keydown.escape\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:19\n                \n            \n\n\n            \n                \n                    Remove the modal on escape pressed\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:19\n                        \n                    \n\n\n            \n                \n                        Remove the modal on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:41\n                        \n                    \n\n            \n                \n                    An emitter that will emit an action we can later respond to\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ariaDescribedBy\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:31\n                        \n                    \n\n            \n                \n                    An optional aria-describedBy property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ariaLabelledBy\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:26\n                        \n                    \n\n            \n                \n                    An optional aria-labelledby property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        close\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:47\n                        \n                    \n\n            \n                \n                    An emitter that will emit if the modal is closed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:36\n                        \n                    \n\n            \n                \n                    Optional data that can be passed to the modal\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { AfterViewInit, Directive, ElementRef, HostListener, OutputEmitterRef, inject, input, output } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nimport { NgxModalActionType } from '../../types';\n\n/**\n * An abstract for the NgxModalService\n */\n@Directive()\nexport class NgxModalAbstractComponent\n\timplements AfterViewInit\n{\n\tprivate readonly windowService = inject(NgxWindowService);\n\tprivate readonly elementRef = inject>(ElementRef);\n\n\t/**\n\t * Remove the modal on escape pressed\n\t */\n\t@HostListener('document:keydown.escape') public onEscape() {\n\t\tthis.close.emit();\n\t}\n\n\t/**\n\t * An optional aria-labelledby property\n\t */\n\tpublic readonly ariaLabelledBy = input();\n\n\t/**\n\t * An optional aria-describedBy property\n\t */\n\tpublic readonly ariaDescribedBy = input();\n\n\t/**\n\t * Optional data that can be passed to the modal\n\t */\n\tpublic readonly data = input();\n\n\t/**\n\t * An emitter that will emit an action we can later respond to\n\t */\n\tpublic action: OutputEmitterRef = output();\n\n\t/**\n\t * An emitter that will emit if the modal is closed\n\t */\n\t// eslint-disable-next-line @angular-eslint/no-output-native\n\tpublic close: OutputEmitterRef = output();\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: If we are in the browser, check if either of the two accessibility labels are set\n\t\tconst ariaLabelledBy = this.ariaLabelledBy();\n\t\tconst ariaDescribedBy = this.ariaDescribedBy();\n\t\tif (this.windowService.isBrowser() && (ariaLabelledBy || ariaDescribedBy)) {\n\t\t\t// Iben: Find the element with the id and the parent\n\t\t\tconst element = document.getElementById(ariaLabelledBy || ariaDescribedBy);\n\t\t\tconst parent = this.elementRef.nativeElement;\n\n\t\t\t// Iben: If no corresponding element was found or if it isn't part of the modal, throw an error\n\t\t\tif (!element || !parent.contains(element)) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`NgxModalAbstractComponent: The ${\n\t\t\t\t\t\tariaLabelledBy ? '\"aria-labelledBy\"' : 'aria-describedBy'\n\t\t\t\t\t} property was passed to the modal but no element with said id was found. Because of that, the necessary accessibility attributes could not be set. Please add an id with the value \"${\n\t\t\t\t\t\tariaLabelledBy || ariaDescribedBy\n\t\t\t\t\t}\" to an element of the modal.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalAriaLabelBaseOptions.html":{"url":"interfaces/NgxModalAriaLabelBaseOptions.html","title":"interface - NgxModalAriaLabelBaseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalAriaLabelBaseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            labelledById\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The label passed to the modal.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelledById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelledById:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The ID of the element that labels the modal.\nFrom the Mozilla docs:\nIt should reference brief text that provides the element with an accessible name.\n[...] a label describes the essence of an object.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalAriaLabelOptions.html":{"url":"interfaces/NgxModalAriaLabelOptions.html","title":"interface - NgxModalAriaLabelOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalAriaLabelOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalAriaLabelBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            labelledById\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelledById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelledById:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalAriaLabelledOptions.html":{"url":"interfaces/NgxModalAriaLabelledOptions.html","title":"interface - NgxModalAriaLabelledOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalAriaLabelledOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalAriaLabelBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            labelledById\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelledById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelledById:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalBaseConfiguration.html":{"url":"interfaces/NgxModalBaseConfiguration.html","title":"interface - NgxModalBaseConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalBaseConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            modals\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        modals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        modals:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The global modals that were configured in the root of the application.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalBaseOptions.html":{"url":"interfaces/NgxModalBaseOptions.html","title":"interface - NgxModalBaseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalBaseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            describedById\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onClose\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The component that should be rendered as the modal. This component must extend the\nNgxModalAbstractComponent.\nThis property will take precedence over the type property.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data that will be passed to the modal. This data will be accessible in the\nprovided component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        describedById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        describedById:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The ID of the element that describes the dialog.\nFrom the Mozilla docs:\n[...] [it] lists the ids of the descriptions or elements providing more information\nthat the user might need.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onClose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onClose:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The method that should be called when the modal is closed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The name of a config object defined in the global config at the root of\nthe project.\nIf a component value is provided alongside a type in the local config, the\ncomponent value will take precedence.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalCDKModalConfiguration.html":{"url":"interfaces/NgxModalCDKModalConfiguration.html","title":"interface - NgxModalCDKModalConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalCDKModalConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoFocus\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            injector\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            restoreFocus\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            viewContainerRef\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoFocus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoFocus:     AutoFocusTarget | string | boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AutoFocusTarget | string | boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Where (or whether) the dialog should focus after it is opened.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        injector\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        injector:     Injector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Injector\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                     The Injector used for the instantiation of the component to be attached.\nIf provided, takes precedence over the injector indirectly provided by\nthe ViewContainerRef. This will allow for host-service injection to\nthe component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        restoreFocus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        restoreFocus:     boolean | string | HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | string | HTMLElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the dialog should restore focus to the previously-focused element\nupon closing.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewContainerRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewContainerRef:     ViewContainerRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ViewContainerRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Where the attached component should live in Angular's logical component tree.\nThis affects what is available for injection and the change detection order\nfor the component instantiated inside of the dialog. This does not affect\nwhere the dialog content will be rendered in the DOM.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalComponentConfiguration.html":{"url":"interfaces/NgxModalComponentConfiguration.html","title":"interface - NgxModalComponentConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalComponentConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The component that should be rendered as the modal. This component must extend the\nNgxModalAbstractComponent.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data that will be passed to the modal. This data will be accessible in the\nprovided component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         NgxModalRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxModalRole\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The role that should be applied to the modal.\nIf the role is set to alertdialog, the modal indicates an alert or a message that\nrequires user interaction (e.g. a dismiss / proceed dialog).\nIf the role is set to dialog, the modal indicates a dialog that requires user\nattention, but no interaction. (e.g. an advertisement).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalComponentOptions.html":{"url":"interfaces/NgxModalComponentOptions.html","title":"interface - NgxModalComponentOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalComponentOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         NgxModalRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxModalRole\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The role that should be applied to the modal.\nIf the role is set to alertdialog, the modal indicates an alert or a message that\nrequires user interaction (e.g. a dismiss / proceed dialog).\nIf the role is set to dialog, the modal indicates a dialog that requires user\nattention, but no interaction. (e.g. an advertisement).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalGlobalCDKConfiguration.html":{"url":"interfaces/NgxModalGlobalCDKConfiguration.html","title":"interface - NgxModalGlobalCDKConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalGlobalCDKConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoClose\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            closeOnNavigation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            direction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hasBackdrop\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            panelClass\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoClose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoClose:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the modal should close when an event is fired.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        closeOnNavigation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        closeOnNavigation:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the modal should close on navigation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        direction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        direction:     Direction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Direction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The direction of the modal.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hasBackdrop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hasBackdrop:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the modal has a backdrop.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        panelClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        panelClass:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The class that should be applied to the modal.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxModalService.html":{"url":"injectables/NgxModalService.html","title":"injectable - NgxModalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxModalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/services/modal/modal.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A wrapper service to Angular CDK Dialog that provides a WCAG/ARIA compliant implementation of modals\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Private\n                                    Readonly\n                                dialogService\n                            \n                            \n                                    Public\n                                    Readonly\n                                hasActiveModal$\n                            \n                            \n                                    Private\n                                hasModalSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Private\n                                createModalComponent\n                            \n                            \n                                    Private\n                                getValue\n                            \n                            \n                                    Private\n                                hasRequiredDescription\n                            \n                            \n                                    Public\n                                open\n                            \n                            \n                                    Private\n                                runARIAChecks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        close\n                        \n                    \n                \n            \n            \n                \n                        \n                    close(onClose?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Closes the currently active modal\n\n@param onClose - An optional onClose function\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                onClose\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional onClose function\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createModalComponent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createModalComponent(options: NgxModalOptions, component: Type>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:177\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Creates the modal component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe options of the modal\n\n\n                                            \n                                        \n                                        \n                                                component\n                                            \n                                                            Type>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component we wish to render\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxModalAbstractComponent\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    getValue(configurationValue: any, optionsValue: any, defaultValue: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:244\n                        \n                    \n\n\n            \n                \n                        Returns a value based on whether one of the overwrites is defined\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                configurationValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe overwrite on configuration level\n\n\n                                            \n                                        \n                                        \n                                                optionsValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe overwrite on options level\n\n\n                                            \n                                        \n                                        \n                                                defaultValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe default value if no overwrite was defined\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasRequiredDescription\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasRequiredDescription(options: NgxModalOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:222\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                            \n                        \n                    \n\n            \n                \n                        Checks if the description is provided when the role requires it\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe options of the modal\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        open\n                        \n                    \n                \n            \n            \n                \n                        \n                    open(options: NgxModalOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:49\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Opens a modal based on the provided options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe modal options\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        runARIAChecks\n                        \n                    \n                \n            \n            \n                \n                        \n                    runARIAChecks(options: NgxModalOptions, component: Type>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:146\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                            \n                        \n                    \n\n            \n                \n                        Checks if all the necessary preconditions are met\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe options of the modal\n\n\n                                            \n                                        \n                                        \n                                                component\n                                            \n                                                            Type>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component we wish to render\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxModalConfigurationToken, {\n\t\toptional: true,\n\t})!\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dialogService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Dialog)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        hasActiveModal$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.hasModalSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:42\n                        \n                    \n\n            \n                \n                    An observable that keeps track of whether a modal is currently active.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasModalSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:37\n                        \n                    \n\n            \n                \n                    A subject that keeps track of whether a modal is currently active\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Dialog } from '@angular/cdk/dialog';\nimport { Injectable, Type, inject } from '@angular/core';\nimport { outputToObservable } from '@angular/core/rxjs-interop';\nimport {\n\tBehaviorSubject,\n\tcombineLatest,\n\tfilter,\n\tfinalize,\n\tmap,\n\tNEVER,\n\tObservable,\n\tstartWith,\n\ttakeUntil,\n\ttap,\n} from 'rxjs';\n\nimport { NgxModalAbstractComponent } from '../../abstracts';\nimport { NgxModalConfigurationToken } from '../../tokens';\nimport { NgxModalActionType, NgxModalConfiguration, NgxModalOptions } from '../../types';\n\n/**\n * A wrapper service to Angular CDK Dialog that provides a WCAG/ARIA compliant implementation of modals\n *\n * @export\n * @class NgxModalService\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxModalService {\n\tprivate readonly configuration = inject(NgxModalConfigurationToken, {\n\t\toptional: true,\n\t})!;\n\tprivate readonly dialogService = inject(Dialog);\n\n\t/**\n\t * A subject that keeps track of whether a modal is currently active\n\t */\n\tprivate hasModalSubject: BehaviorSubject = new BehaviorSubject(false);\n\n\t/**\n\t * An observable that keeps track of whether a modal is currently active.\n\t */\n\tpublic readonly hasActiveModal$: Observable = this.hasModalSubject.asObservable();\n\n\t/**\n\t * Opens a modal based on the provided options\n\t *\n\t * @param {NgxModalOptions} options - The modal options\n\t */\n\tpublic open(\n\t\toptions: NgxModalOptions\n\t): Observable {\n\t\t// Iben: If a previous modal is still active, we early exit.\n\t\tif (this.hasModalSubject.value) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxInform: An active modal is currently displayed, close the active modal before opening a new one'\n\t\t\t);\n\n\t\t\treturn NEVER;\n\t\t}\n\n\t\t// Iben: Declare the modal as active\n\t\tthis.hasModalSubject.next(true);\n\n\t\t// Iben: Fetch the type of component we wish to show\n\t\tconst configuration = this.configuration?.modals?.[options.type];\n\t\tconst component: Type> =\n\t\t\toptions.component ||\n\t\t\t(configuration.component as Type>);\n\n\t\t// Iben: Check if all the correct parameters are set and return NEVER when they're not correctly set\n\t\tif (!this.runARIAChecks(options, component)) {\n\t\t\treturn NEVER;\n\t\t}\n\n\t\t// Iben: Render the modal\n\t\tconst modal = this.createModalComponent(options, component);\n\n\t\t// Iben: Return the modal action\n\t\treturn combineLatest([\n\t\t\t// Iben: Set the start value to undefined so both actions at least emit once\n\t\t\toutputToObservable(modal.action).pipe(startWith(undefined)),\n\t\t\toutputToObservable(modal.close).pipe(\n\t\t\t\t// Iben: Map so we can keep the emit value void, but can work with the filter later down the line\n\t\t\t\tmap(() => 'NgxModalClose'),\n\t\t\t\t// Iben: Set the start value to undefined so both actions at least emit once\n\t\t\t\tstartWith(undefined)\n\t\t\t),\n\t\t]).pipe(\n\t\t\t// Iben: Only emit if one of the two actions actually has an emit\n\t\t\tfilter(([action, closed]: [ActionType, 'NgxModalClose']) => {\n\t\t\t\treturn Boolean(action) || Boolean(closed);\n\t\t\t}),\n\t\t\tmap(([action, closed]: [ActionType, 'NgxModalClose']) => {\n\t\t\t\treturn closed || action;\n\t\t\t}),\n\t\t\ttap((action: ActionType | 'NgxModalClose') => {\n\t\t\t\t// Iben: If the autoClose is specifically set to false, we early exit unless we're running in a close event\n\t\t\t\tif (\n\t\t\t\t\taction !== 'NgxModalClose' &&\n\t\t\t\t\t((options.autoClose !== undefined && options.autoClose === false) ||\n\t\t\t\t\t\t(configuration?.autoClose !== undefined &&\n\t\t\t\t\t\t\tconfiguration.autoClose === false))\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Close the modal\n\t\t\t\tthis.close(options.onClose);\n\t\t\t}),\n\t\t\t// Iben: Map the action back to the ActionType\n\t\t\tmap((action: ActionType | 'NgxModalClose') => {\n\t\t\t\treturn action === 'NgxModalClose' ? undefined : (action as ActionType);\n\t\t\t}),\n\t\t\t// Wouter: Unsubscribe wen no modal is open\n\t\t\ttakeUntil(this.hasModalSubject.pipe(filter((hasModal) => !hasModal)))\n\t\t);\n\t}\n\n\t/**\n\t * Closes the currently active modal\n\t *\n\t * * @param onClose - An optional onClose function\n\t */\n\tpublic close(onClose?: () => void): void {\n\t\t// Wouter: The setTimeout delay is needed, so that the `open` method can emit before its subscription end gets triggered\n\t\tsetTimeout(() => {\n\t\t\t// Iben: Close the modal\n\t\t\tthis.dialogService.closeAll();\n\n\t\t\t// Iben: Mark the modal as closed\n\t\t\tthis.hasModalSubject.next(false);\n\n\t\t\t// Iben: Run an optional onClose function\n\t\t\tif (onClose) {\n\t\t\t\tonClose();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Checks if all the necessary preconditions are met\n\t *\n\t * @param options - The options of the modal\n\t * @param  component - The component we wish to render\n\t */\n\tprivate runARIAChecks(\n\t\toptions: NgxModalOptions,\n\t\tcomponent: Type>\n\t): boolean {\n\t\t// Iben: If no component was found, we return NEVER and throw an error\n\t\tif (!component) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxInform: No component was provided or found in the configuration to render.'\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Iben: If no description was provided when required, we return NEVER and throw an error\n\t\tif (!this.hasRequiredDescription(options)) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxInform: The role of the modal was set to \"alertdialog\" but no \"describedById\" was provided.'\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Creates the modal component\n\t *\n\t * @param options - The options of the modal\n\t * @param  component - The component we wish to render\n\t */\n\tprivate createModalComponent(\n\t\toptions: NgxModalOptions,\n\t\tcomponent: Type>\n\t): NgxModalAbstractComponent {\n\t\tconst configuration = this.configuration?.modals?.[options.type];\n\n\t\t// Iben: Create the modal and render it\n\t\tconst dialogRef = this.dialogService.open(component, {\n\t\t\trole: configuration?.role || options.role,\n\t\t\tariaLabel: options.label,\n\t\t\tariaLabelledBy: options.labelledById,\n\t\t\tariaDescribedBy: options.describedById,\n\t\t\tdisableClose: true,\n\t\t\trestoreFocus: this.getValue(undefined, options.restoreFocus, true),\n\t\t\tautoFocus: this.getValue(undefined, options.autoFocus, true),\n\t\t\tviewContainerRef: options.viewContainerRef,\n\t\t\tdirection: configuration?.direction || options.direction,\n\t\t\thasBackdrop: this.getValue(configuration?.hasBackdrop, options.hasBackdrop, true),\n\t\t\tpanelClass: this.getValue(configuration?.panelClass, options.panelClass, []),\n\t\t\tcloseOnNavigation: this.getValue(\n\t\t\t\tconfiguration?.closeOnNavigation,\n\t\t\t\toptions.closeOnNavigation,\n\t\t\t\ttrue\n\t\t\t),\n\t\t\tcloseOnDestroy: true,\n\t\t\tcloseOnOverlayDetachments: true,\n\t\t});\n\t\tconst modal = dialogRef.componentInstance;\n\n\t\t// Iben: Set the data of the modal\n\t\tdialogRef.componentRef.setInput(\n\t\t\t'data',\n\t\t\tthis.getValue(configuration?.data, options.data, undefined)\n\t\t);\n\t\tdialogRef.componentRef.setInput('ariaDescribedBy', options.describedById);\n\t\tdialogRef.componentRef.setInput('ariaLabelledBy', options.labelledById);\n\n\t\treturn modal;\n\t}\n\n\t/**\n\t * Checks if the description is provided when the role requires it\n\t *\n\t * @param options - The options of the modal\n\t */\n\tprivate hasRequiredDescription(\n\t\toptions: NgxModalOptions\n\t): boolean {\n\t\t// Iben: If the options has provided a default type, we check based on the configuration role\n\t\tif (options.type) {\n\t\t\tconst configuration = this.configuration?.modals[options.type];\n\n\t\t\treturn !(configuration.role === 'alertdialog' && !options.describedById);\n\t\t}\n\n\t\t//  Iben: Check based on the options role\n\t\treturn !(options.role === 'alertdialog' && !options.describedById);\n\t}\n\n\t/**\n\t * Returns a value based on whether one of the overwrites is defined\n\t *\n\t * @private\n\t * @param configurationValue - The overwrite on configuration level\n\t * @param optionsValue - The overwrite on options level\n\t * @param defaultValue - The default value if no overwrite was defined\n\t */\n\tprivate getValue(configurationValue: any, optionsValue: any, defaultValue: any): any {\n\t\tif (configurationValue === undefined && optionsValue === undefined) {\n\t\t\treturn defaultValue;\n\t\t}\n\n\t\tif (optionsValue !== undefined) {\n\t\t\treturn optionsValue;\n\t\t}\n\n\t\treturn configurationValue;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalTypeOptions.html":{"url":"interfaces/NgxModalTypeOptions.html","title":"interface - NgxModalTypeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalTypeOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxOnlineService.html":{"url":"injectables/NgxOnlineService.html","title":"injectable - NgxOnlineService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxOnlineService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/online-service/online.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that provides the currently online status of the application\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                online$\n                            \n                            \n                                    Private\n                                    Readonly\n                                onlineSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:25\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:20\n                        \n                    \n\n            \n                \n                    A subject to handle the destroyed flow\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        online$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.onlineSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:25\n                        \n                    \n\n            \n                \n                    An observable that emits whenever the application is on or offline\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onlineSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:15\n                        \n                    \n\n            \n                \n                    A subject that emits whenever the application is on or offline\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { Observable, Subject, fromEvent, takeUntil, tap } from 'rxjs';\n\n/**\n * A service that provides the currently online status of the application\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxOnlineService implements OnDestroy {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A subject that emits whenever the application is on or offline\n\t */\n\tprivate readonly onlineSubject: Subject = new Subject();\n\n\t/**\n\t * A subject to handle the destroyed flow\n\t */\n\tprivate readonly onDestroySubject: Subject = new Subject();\n\n\t/**\n\t * An observable that emits whenever the application is on or offline\n\t */\n\tpublic readonly online$: Observable = this.onlineSubject.asObservable();\n\n\tconstructor() {\n\t\t// Iben: When we're in the browser, listen to the online and offline status of the application\n\t\tif (this.windowService.isBrowser()) {\n\t\t\t// Iben: Handle the on and offline status of the application\n\t\t\tfromEvent(window, 'online')\n\t\t\t\t.pipe(\n\t\t\t\t\ttap(() => {\n\t\t\t\t\t\tthis.onlineSubject.next(true);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\n\t\t\tfromEvent(window, 'offline')\n\t\t\t\t.pipe(\n\t\t\t\t\ttap(() => {\n\t\t\t\t\t\tthis.onlineSubject.next(false);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\t\t}\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Complete the destroyed subject\n\t\tthis.onDestroySubject.next();\n\t\tthis.onDestroySubject.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxQueryParamFormSyncComponent.html":{"url":"directives/NgxQueryParamFormSyncComponent.html","title":"directive - NgxQueryParamFormSyncComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxQueryParamFormSyncComponent\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnDestroy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                destroyed$\n                            \n                            \n                                    Public\n                                form\n                            \n                            \n                                    Protected\n                                queryParams$\n                            \n                            \n                                    Protected\n                                    Readonly\n                                route\n                            \n                            \n                                    Protected\n                                    Readonly\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clearData\n                            \n                            \n                                    Protected\n                                    Abstract\n                                    Optional\n                                handleDataChanges\n                            \n                            \n                                    Protected\n                                    Abstract\n                                initForm\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    Protected\n                                    Optional\n                                scrambleParams\n                            \n                            \n                                    Private\n                                setDataInRoute\n                            \n                            \n                                    Protected\n                                    Optional\n                                unscrambleParams\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearData\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearData()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:110\n                        \n                    \n\n\n            \n                \n                        Clears the data in the form\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                            Optional\n                        handleDataChanges\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDataChanges(data: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:161\n                        \n                    \n\n\n            \n                \n                        An optional method that will handle what happens when the data have been updated. Do NOT subscribe to an Observable in this method.\nThis method is useful in case you wish to save your currently selected data to a global state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data provided by the form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        initForm\n                        \n                    \n                \n            \n            \n                \n                        \n                    initForm()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:152\n                        \n                    \n\n\n            \n                \n                        A method that that will provide a form that will be used to store the current data\n\n\n                        \n                            Returns :     FormType\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:100\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        scrambleParams\n                        \n                    \n                \n            \n            \n                \n                        \n                    scrambleParams(params: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:168\n                        \n                    \n\n\n            \n                \n                        An optional method to scramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided params we wish to set in the route\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     QueryParamsType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setDataInRoute\n                        \n                    \n                \n            \n            \n                \n                        \n                    setDataInRoute(data: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:119\n                        \n                    \n\n\n            \n                \n                        Sets the provided data in the route, so the filtered view can be shared by url\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided data\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        unscrambleParams\n                        \n                    \n                \n            \n            \n                \n                        \n                    unscrambleParams(params: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:174\n                        \n                    \n\n\n            \n                \n                        An optional method to unscramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided params we wish to patch in the form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     QueryParamsType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormType\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:25\n                        \n                    \n\n            \n                \n                    The form in which we will save the queryParam data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        queryParams$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable>\n\n                    \n                \n                \n                    \n                        Default value : this.route\n\t\t.queryParams as Observable>\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:30\n                        \n                    \n\n            \n                \n                    The query params we wish to form\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        route\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ActivatedRoute)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Router)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n    \n        NgxQueryParamFormSyncComponent\nThe NgxQueryParamFormSyncComponent allows you to sync queryParams with a form provided in the component.\nAn ideal use-case for this component is filtered views that keep the selected filters in queryParams. This abstraction ensures that both the visual filters and the url stay in sync. This way the url can be shared, and the view will be filtered as shared.\nMethods\nWhen implementing the NgxQueryParamFormSyncComponent, there is only one method that requires implementation, being the initForm method. This method should return a form that will be used to store the queryParams in the component.\nThe component also provides a clearData method that will automatically clear the form.\nOptional methods\nOptionally, you want to interact with the changes in the form, like dispatching the data to a store. By implementing the optional handleDataChanges method, you can listen to these changes and handle them accordingly. It is very important to not subscribe to an Observable in this method, as it within itself is already used within a subscription.\nSometimes, certain data cannot be put in the queryParams without being scrambled first. This can be useful in situations in which some of the items in the queryParams are protected by GDPR, but you still wish to be able to share the url to a filtered view. In order to handle these situations, we provide the optional methods scrambleParams and the unscrambleParams, in which you can provide an implementation to scramble these items before sending them to the url.\nExample\nExample :import { scrambler, unscrambler } from 'ngx-random-package';\n\ninterface Filters {\n    searchQuery: string;\n    sorting: string;\n}\n\ninterface FiltersForm {\n    searchQuery: FormControl;\n    sorting: FormControl;\n}\n\n@Component({\n    selector: 'table-view',\n    templateUrl: './survey.component.html',\n})\nexport class TableViewComponent extends NgxQueryParamFormSyncComponent\n> {\n    constructor(\n        readonly route: ActivatedRoute,\n        readonly router: Router,\n        readonly storeService: NgxStoreService\n    ) {\n        super(route, router);\n    }\n\n    initForm(): FormGroup {\n        return new FormGroup({\n            searchQuery: new FormControl(),\n            sorting: new FormControl(),\n        });\n    }\n\n    handleDataChanges(value: Filters) {\n        this.storeService.setFilters(value);\n    }\n\n    scrambleParams(value: Filters) {\n        return {\n            ...value,\n            sorting: scrambler(value.sorting),\n        };\n    }\n\n    unscrambleParams(value: Filters) {\n        return {\n            ...value,\n            sorting: unscrambler(value.sorting),\n        };\n    }\n}\n    \n\n    \n        import { Directive, OnDestroy, OnInit, inject } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, Subject, filter, take, takeUntil, tap } from 'rxjs';\n\nexport type StringifiedQueryParamsType = {\n\t[key in keyof QueryParamsType]: string;\n};\n\n@Directive()\nexport abstract class NgxQueryParamFormSyncComponent\n\timplements OnInit, OnDestroy\n{\n\tprotected readonly route = inject(ActivatedRoute);\n\tprotected readonly router = inject(Router);\n\n\tprotected readonly destroyed$: Subject = new Subject();\n\n\t/**\n\t * The form in which we will save the queryParam data\n\t */\n\tpublic form: FormType;\n\n\t/**\n\t * The query params we wish to form\n\t */\n\tprotected queryParams$: Observable> = this.route\n\t\t.queryParams as Observable>;\n\n\tpublic ngOnInit(): void {\n\t\t//Iben: Warn the user if one of the two methods isn't provided\n\t\tif (\n\t\t\t(!this.scrambleParams && this.unscrambleParams) ||\n\t\t\t(this.scrambleParams && !this.unscrambleParams)\n\t\t) {\n\t\t\tconsole.error(\n\t\t\t\t`NgxUtils: NgxQueryParamFormSyncComponent detected the use of the parameter scrambling but is missing an implementation for the ${\n\t\t\t\t\tthis.scrambleParams ? 'unscrambleParams' : 'scrambleParams'\n\t\t\t\t} method. Please provide this method in order for this flow to work correctly.`\n\t\t\t);\n\t\t}\n\n\t\t// Iben: Setup the form for the data\n\t\tthis.form = this.initForm();\n\n\t\t// Iben: Listen to the form changes\n\t\tthis.form.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((data) => {\n\t\t\t\t\t// Iben: Update the route params\n\t\t\t\t\tthis.setDataInRoute(data);\n\n\t\t\t\t\t// Iben: Handle the route data changes\n\t\t\t\t\tif (this.handleDataChanges) {\n\t\t\t\t\t\tthis.handleDataChanges(data);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Listen to the initial query param update so we can set the data in the form if we navigate to a link with the params\n\t\tthis.queryParams$\n\t\t\t.pipe(\n\t\t\t\ttake(1),\n\t\t\t\tfilter(Boolean),\n\t\t\t\ttap((data) => {\n\t\t\t\t\t// Iben: Convert the route data properties to the actual data\n\t\t\t\t\tlet value: QueryParamsType = Object.keys(data || {}).reduce(\n\t\t\t\t\t\t(previous, current) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...previous,\n\t\t\t\t\t\t\t\t[current]: data[current] ? JSON.parse(data[current]) : undefined,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as QueryParamsType;\n\n\t\t\t\t\t// Iben: In case the unscrambleParams method is provided, we unscramble the data\n\t\t\t\t\tif (this.unscrambleParams) {\n\t\t\t\t\t\tvalue = this.unscrambleParams(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t//Iben: If the entire object is empty, we early exit and do not set the form\n\t\t\t\t\tif (Object.keys(value).length === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Set the current form value\n\t\t\t\t\tthis.form.setValue(value);\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.destroyed$.next();\n\t\tthis.destroyed$.complete();\n\n\t\tthis.clearData();\n\t}\n\n\t/**\n\t * Clears the data in the form\n\t */\n\tpublic clearData(): void {\n\t\tthis.form.reset();\n\t}\n\n\t/**\n\t * Sets the provided data in the route, so the filtered view can be shared by url\n\t *\n\t * @param  data - The provided data\n\t */\n\tprivate setDataInRoute(data: QueryParamsType): void {\n\t\t// Iben: If no data was provided, we simply unset the current params\n\t\tif (Object.keys(data || {}).length === 0) {\n\t\t\tthis.router.navigate([], {\n\t\t\t\trelativeTo: this.route,\n\t\t\t\tqueryParams: {},\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: In case a scrambleParams function was provided, we scramble the params first\n\t\tconst parsedData = this.scrambleParams ? this.scrambleParams(data) : data;\n\n\t\t// Iben: Stringify all properties of the data\n\t\tconst queryParams = Object.keys(parsedData || {}).reduce((previous, current) => {\n\t\t\treturn {\n\t\t\t\t...previous,\n\t\t\t\t[current]: JSON.stringify(parsedData[current]),\n\t\t\t};\n\t\t}, {});\n\n\t\t// Iben: Add the queryParams to the route\n\t\tthis.router.navigate([], {\n\t\t\trelativeTo: this.route,\n\t\t\tqueryParamsHandling: 'merge',\n\t\t\tqueryParams,\n\t\t});\n\t}\n\n\t/**\n\t * A method that that will provide a form that will be used to store the current data\n\t */\n\tprotected abstract initForm(): FormType;\n\n\t/**\n\t * An optional method that will handle what happens when the data have been updated. Do NOT subscribe to an Observable in this method.\n\t *\n\t * This method is useful in case you wish to save your currently selected data to a global state.\n\t *\n\t * @param data - The data provided by the form\n\t */\n\tprotected abstract handleDataChanges?(data: QueryParamsType): void;\n\n\t/**\n\t * An optional method to scramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\t *\n\t * @param params - The provided params we wish to set in the route\n\t */\n\tprotected scrambleParams?(params: QueryParamsType): QueryParamsType;\n\t/**\n\t * An optional method to unscramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\t *\n\t * @param params - The provided params we wish to patch in the form\n\t */\n\tprotected unscrambleParams?(params: QueryParamsType): QueryParamsType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxReplaceElementsConfigurationElement.html":{"url":"interfaces/NgxReplaceElementsConfigurationElement.html","title":"interface - NgxReplaceElementsConfigurationElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxReplaceElementsConfigurationElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/replace-elements.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            element\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            includeInnerHtml\n                                        \n                                \n                                \n                                        \n                                            selector\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        element:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        includeInnerHtml\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        includeInnerHtml:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selector\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selector:         NgxReplaceElementsSelector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxReplaceElementsSelector\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxReplaceElementsSelector = `${string}{{id}}${string}`;\n\nexport interface NgxReplaceElementsConfigurationElement {\n\telement: string;\n\tselector: NgxReplaceElementsSelector;\n\tincludeInnerHtml?: boolean;\n}\n\nexport type NgxReplaceElementsConfiguration = Record;\n\nexport interface NgxReplaceElementsItem {\n\tid: string;\n\telementId: string;\n\tdata?: Record, string>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxReplaceElementsItem.html":{"url":"interfaces/NgxReplaceElementsItem.html","title":"interface - NgxReplaceElementsItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxReplaceElementsItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/replace-elements.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            elementId\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     Record | string>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record | string>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxReplaceElementsSelector = `${string}{{id}}${string}`;\n\nexport interface NgxReplaceElementsConfigurationElement {\n\telement: string;\n\tselector: NgxReplaceElementsSelector;\n\tincludeInnerHtml?: boolean;\n}\n\nexport type NgxReplaceElementsConfiguration = Record;\n\nexport interface NgxReplaceElementsItem {\n\tid: string;\n\telementId: string;\n\tdata?: Record, string>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxReplaceElementsPipe.html":{"url":"pipes/NgxReplaceElementsPipe.html","title":"pipe - NgxReplaceElementsPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxReplaceElementsPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that allows to replace text elements with a WebComponent\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxReplaceElements\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string, items: NgxReplaceElementsItem[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts:24\n                        \n                    \n\n\n            \n                \n                        Replaces all matches of a specific selector with provided WebComponents\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe original string value\n\n\n                                            \n                                        \n                                        \n                                                items\n                                            \n                                                            NgxReplaceElementsItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe items we wish to replace\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SafeHtml\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxReplaceElementsConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sanitizer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DomSanitizer)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n    \n        ngxReplaceElements\nThe ngxReplaceElements pipe will provide a way to transform a string that contains one or more parts that need an Angular component by taking advantage of Angular web components.\nThis can be useful in combination with translation strings that require in-app links or WYSIWYG content from an external source.\nHow to use\nSet up\nThe pipe requires a couple of things to be provided before it can be used.\nFirst, create a component that will be used to replace your target:\nExample :@Component({\n    selector: 'link',\n    template: '',\n})\nexport class LinkComponent {\n    // Keep in mind that Angular's innerHTML & outerHTML will convert attributes to lower casing.\n    // This input property will need to be lowercased to make this work.\n    public link: InputSignal: input();\n}Then register it as a web component in your app.component.ts:\nExample :@Component({\n    //...\n})\nexport class AppComponent {\n    constructor(\n        // ...\n        private readonly windowService: NgxWindowService,\n        private readonly injector: Injector\n    ) {\n        // Note that we are using our NgxWindowService (ngx-core) to avoid SSR issues.\n        if (this.windowService.isBrowser) {\n            const linkComponent = createCustomElement(LinkComponent, { injector: this.injector });\n\n            customElements.define('ngx-link', linkComponent);\n        }\n    }\n}Lastly set up the global config in your root provider array:\nExample :providers: [\n    //...\n    provideNgxReplaceElementsConfiguration({\n        link: {\n            element: 'ngx-link',\n            selector: 'a[data-link-id={{id}}]',\n            includeInnerHtml: true,\n        },\n        image: {\n            element: 'ngx-image',\n            selector: 'img[data-link-id={{id}}]',\n        },\n    }),\n];For each element we want to register, we define the WebComponent name using the element property. In order to be able to select an item to replace later on in the text, we create a selector. This selector should always include a part to identify the id, being {{id}}.\nIf we wish to use the original innerText of the element whilst replacing, we can do so by setting includeInnerHtml to true.\nUsing the pipe\nWhen the web component is set up, you can start using the pipe.\nFirst set up anchors in your input string:\nExample :\"This is a text with a link.\"The someUniqueId will be used by the pipe to find and replace your link element so make sure that each anchor within your translation has a unique identifier.\nWithin the template you can now provide the string and transform it like this:\nExample :Whilst id refers to the id in the string, elementId refers to the element we have configured in the configuration.\nThe data property can be used to set the inputs of our provided WebComponent. We once again want to stress that due to the nature of WebComponents, these properties can only have lowercase keys.\n\n    \n\n    \n        import { Pipe, PipeTransform, inject } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\nimport { NgxReplaceElementsConfigurationToken } from '../../tokens';\nimport { NgxReplaceElementsConfiguration, NgxReplaceElementsItem } from '../../types';\n\n/**\n * A pipe that allows to replace text elements with a WebComponent\n */\n@Pipe({\n\tname: 'ngxReplaceElements',\n\tstandalone: true,\n})\nexport class NgxReplaceElementsPipe implements PipeTransform {\n\tprivate readonly configuration = inject(NgxReplaceElementsConfigurationToken);\n\tprivate readonly sanitizer = inject(DomSanitizer);\n\n\t/**\n\t * Replaces all matches of a specific selector with provided WebComponents\n\t *\n\t * @param value - The original string value\n\t * @param items - The items we wish to replace\n\t */\n\ttransform(value: string, items: NgxReplaceElementsItem[]): SafeHtml {\n\t\t// Iben: If the value isn't a string we early exit and warn the user\n\t\tif (typeof value !== 'string') {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxReplaceElements: A non string-value was provided to the NgxReplaceElementsPipe'\n\t\t\t);\n\t\t\treturn '';\n\t\t}\n\n\t\t// Iben: If no items were provided to replace, we just return the value\n\t\tif (!items || items.length === 0) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: set up a new instance of the DOMParser and parse the value as text/html.\n\t\t// This will return a Document which we can work with to find/replace elements.\n\t\tconst parser: DOMParser = new DOMParser();\n\t\tconst body: Document = parser.parseFromString(value, 'text/html');\n\n\t\t// Iben: Loop over all items we wish to replace\n\t\titems.forEach((item) => {\n\t\t\t// Iben: Get the selector and the element we want to replace the target with\n\t\t\tconst { selector, element, includeInnerHtml } = this.configuration[item.elementId];\n\n\t\t\t// Iben: Select the target\n\t\t\tconst target: HTMLElement = body.querySelector(selector.replace('{{id}}', item.id));\n\n\t\t\t// Iben: If no target was found, early exit\n\t\t\tif (!target) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Iben: Create a new element within the Document based on the provided selector.\n\t\t\t// The selector can be any native or custom web component (not an Angular component).\n\t\t\t// Keep in mind that the element will need to have a lowercase input prop for the reference.\n\t\t\tconst replacement: HTMLElement = body.createElement(element);\n\n\t\t\t// Iben: If the item included data, we set these attributes\n\t\t\tif (item.data) {\n\t\t\t\tObject.entries(item.data).forEach(([key, value]) => {\n\t\t\t\t\treplacement.setAttribute(key, value);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Iben: Copy the innerHtml of the target element to the new element if needed.\n      if (includeInnerHtml) {\n\t\t\treplacement.innerHTML = target.innerHTML;\n\t\t}\n\n\t\t\t// Iben: Replace the target with the new element within the Document.\n\t\t\ttarget.replaceWith(replacement);\n\t\t});\n\n\t\t// Iben: sanitize the document and mark it as trusted HTML before returning it to the template.\n\t\treturn this.sanitizer.bypassSecurityTrustHtml(body.documentElement.innerHTML);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxSaveOnExitAbstractService.html":{"url":"classes/NgxSaveOnExitAbstractService.html","title":"class - NgxSaveOnExitAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxSaveOnExitAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.service.abstract.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bypassSaveOnExit\n                            \n                            \n                                    Public\n                                    Abstract\n                                handleDirtyState\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bypassSaveOnExit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.service.abstract.ts:15\n                        \n                    \n\n            \n                \n                    An optional method that, if implemented, provides the ability to bypass the guard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        handleDirtyState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.service.abstract.ts:10\n                        \n                    \n\n            \n                \n                    Take action when the component is dirty\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxSaveOnExitComponent } from './save-on-exit.component.abstract';\n\nexport abstract class NgxSaveOnExitAbstractService {\n\t/**\n\t * Take action when the component is dirty\n\t */\n\tpublic abstract handleDirtyState: (component: NgxSaveOnExitComponent) => Observable;\n\n\t/**\n\t * An optional method that, if implemented, provides the ability to bypass the guard\n\t */\n\tpublic bypassSaveOnExit?: (\n\t\tcurrentRoute: ActivatedRouteSnapshot,\n\t\tnextState: RouterStateSnapshot\n\t) => boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxSaveOnExitComponent.html":{"url":"directives/NgxSaveOnExitComponent.html","title":"directive - NgxSaveOnExitComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxSaveOnExitComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                allowBeforeUnloadHandler\n                            \n                            \n                                    Public\n                                    Readonly\n                                destroyed$\n                            \n                            \n                                    Private\n                                    Readonly\n                                destroyedSubject$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleUnloadEvent\n                            \n                            \n                                    Public\n                                    Abstract\n                                isDirty\n                            \n                            \n                                    Public\n                                    Abstract\n                                isValid\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:beforeunload\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            window:beforeunload\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:12\n                \n            \n\n\n            \n                \n                    Handles the unload event of the browser and will warn the user that the application prevented the user from closing the browser\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe unload event from the browser\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUnloadEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUnloadEvent(event: BeforeUnloadEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:beforeunload', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:12\n                        \n                    \n\n\n            \n                \n                        Handles the unload event of the browser and will warn the user that the application prevented the user from closing the browser\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        BeforeUnloadEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unload event from the browser\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        isDirty\n                        \n                    \n                \n            \n            \n                \n                        \n                    isDirty()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:38\n                        \n                    \n\n\n            \n                \n                        Return whether or not the component is dirty\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        isValid\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValid()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:43\n                        \n                    \n\n\n            \n                \n                        Return whether or not the component is valid\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        allowBeforeUnloadHandler\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:33\n                        \n                    \n\n            \n                \n                    Whether or not the beforeUnload event should be intercepted or not. By default, this behavior is set to false\nIf set to true, closing a tab or the browser will be interrupted and a message will be displayed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.destroyedSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:27\n                        \n                    \n\n            \n                \n                    An observable that emits the onDestroy event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        destroyedSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:22\n                        \n                    \n\n            \n                \n                    A subject to handle the onDestroy flow\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Directive()\nexport abstract class NgxSaveOnExitComponent implements OnDestroy {\n\t/**\n\t * Handles the unload event of the browser and will warn the user that the application prevented the user from closing the browser\n\t *\n\t * @param event - The unload event from the browser\n\t */\n\t@HostListener('window:beforeunload', ['$event'])\n\thandleUnloadEvent(event: BeforeUnloadEvent) {\n\t\t// Iben: If the component is dirty, we prevent the browser from closing the window or tab\n\t\tif (this.allowBeforeUnloadHandler && this.isDirty()) {\n\t\t\tevent.returnValue = true;\n\t\t}\n\t}\n\n\t/**\n\t * A subject to handle the onDestroy flow\n\t */\n\tprivate readonly destroyedSubject$ = new Subject();\n\n\t/**\n\t * An observable that emits the onDestroy event\n\t */\n\tpublic readonly destroyed$ = this.destroyedSubject$.asObservable();\n\n\t/**\n\t * Whether or not the beforeUnload event should be intercepted or not. By default, this behavior is set to false\n\t * If set to true, closing a tab or the browser will be interrupted and a message will be displayed\n\t */\n\tpublic readonly allowBeforeUnloadHandler: boolean = false;\n\n\t/**\n\t * Return whether or not the component is dirty\n\t */\n\tpublic abstract isDirty(): boolean;\n\n\t/**\n\t * Return whether or not the component is valid\n\t */\n\tpublic abstract isValid(): boolean;\n\n\tngOnDestroy() {\n\t\t// Iben: Emit if the component gets destroyed\n\t\tthis.destroyedSubject$.next(undefined);\n\t\tthis.destroyedSubject$.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorage.html":{"url":"interfaces/NgxStorage.html","title":"interface - NgxStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                        \n                                            getItem\n                                        \n                                \n                                \n                                        \n                                            getItemObservable\n                                        \n                                \n                                \n                                        \n                                            removeItem\n                                        \n                                \n                                \n                                        \n                                            setItem\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItemObservable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getItemObservable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        removeItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        removeItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageBaseEvent.html":{"url":"interfaces/NgxStorageBaseEvent.html","title":"interface - NgxStorageBaseEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageBaseEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            storage\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        storage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        storage:         NgxStorageType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxStorageType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"set\" | \"clear\" | \"remove\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"set\" | \"clear\" | \"remove\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageClearEvent.html":{"url":"interfaces/NgxStorageClearEvent.html","title":"interface - NgxStorageClearEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageClearEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStorageBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageRemoveEvent.html":{"url":"interfaces/NgxStorageRemoveEvent.html","title":"interface - NgxStorageRemoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageRemoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStorageBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            oldValue\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oldValue:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxStorageService.html":{"url":"injectables/NgxStorageService.html","title":"injectable - NgxStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxStorageService\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/services/storage-service/storage.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that provides a SSR-proof Observable based approach to the session- and localStorage.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                localStorageRecord\n                            \n                            \n                                    Private\n                                    Readonly\n                                sessionStorageRecord\n                            \n                            \n                                    Public\n                                    Readonly\n                                storageEvents$\n                            \n                            \n                                    Private\n                                    Readonly\n                                storageEventSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clearStorage\n                            \n                            \n                                    Private\n                                getItem\n                            \n                            \n                                    Private\n                                getItemObservable\n                            \n                            \n                                    Private\n                                parseValue\n                            \n                            \n                                    Private\n                                removeItem\n                            \n                            \n                                    Private\n                                setItem\n                            \n                            \n                                    Private\n                                setupStorage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    localStorage\n                                \n                                \n                                    sessionStorage\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:39\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clearStorage\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearStorage(storage: Storage, record: NgxStorageRecord, type: NgxStorageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:214\n                        \n                    \n\n\n            \n                \n                        Clears the storage, completes all subjects and emits a clear event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage we wish to clear\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe record with the subjects\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            NgxStorageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of storage\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     NgxStorageClearEvent | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItem(key: string, storage: Storage)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:83\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getItemObservable\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItemObservable(key: string, record: NgxStorageRecord)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:93\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Returns an observable version of the storage value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the storage value\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage record\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseValue(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:265\n                        \n                    \n\n\n            \n                \n                        Parses a string value from the storage to an actual value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided string value\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        removeItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeItem(key: string, storage: Storage, record: NgxStorageRecord, type: NgxStorageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Remove an item from the storage and emit a remove event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the item\n\n\n                                            \n                                        \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage we wish to remove the item from\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe record with the subject\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            NgxStorageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of storage\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     NgxStorageRemoveEvent | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    setItem(key: string, item: DataType, storage: Storage, record: NgxStorageRecord, type: NgxStorageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:122\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Sets an item in the storage\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the item\n\n\n                                            \n                                        \n                                        \n                                                item\n                                            \n                                                            DataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe item in the storage\n\n\n                                            \n                                        \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage in which we want to save the item\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe corresponding storage record\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            NgxStorageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     NgxStorageSetEvent | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setupStorage\n                        \n                    \n                \n            \n            \n                \n                        \n                    setupStorage(storage: Storage, record: NgxStorageRecord)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:254\n                        \n                    \n\n\n            \n                \n                        Grabs the existing storage and updates the record\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current state of the storage\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        localStorageRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxStorageRecord\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:29\n                        \n                    \n\n            \n                \n                    A record to hold the properties in the localStorage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sessionStorageRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxStorageRecord\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:25\n                        \n                    \n\n            \n                \n                    A record to hold the properties in the sessionStorage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        storageEvents$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.storageEventSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:38\n                        \n                    \n\n            \n                \n                    An observable that emits whenever the session- or the localStorage was updated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        storageEventSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:33\n                        \n                    \n\n            \n                \n                    A subject to hold the events of the storage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        localStorage\n                    \n                \n\n                \n                    \n                        getlocalStorage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:54\n                                \n                            \n                    \n                        \n                                A localStorage implementation using observables\n\n\n                                \n                                    Returns :         NgxStorage\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        sessionStorage\n                    \n                \n\n                \n                    \n                        getsessionStorage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:70\n                                \n                            \n                    \n                        \n                                A sessionStorage implementation using observables\n\n\n                                \n                                    Returns :         NgxStorage\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n    \n        NgxStorageService\nThe NgxStorageService provides a SSR proof Observable approach to both session- and localStorage. It allows for listing to change events on specific properties or on the entire storage.\nApproach\nIn order to provide an Observable based approach to both the session- and localStorage, the session provides a localStorage and a sessionStorage object that offer custom methods that will also emit to the corresponding Observables. Data that was set to the session- or localStorage on the window directly will not be represented in the Observable.\nOn top of an Observable based approach, the new localStorage and sessionStorage implementations will automatically parse the data to a string when saving it to the window session- or localStorage, and will return the parsed value back when calling either getItem or getItemObservable.\nThe service is also SSR proof, and will prevent any actions from occurring when not in the browser.\nProperties\nlocalStorage/sessionStorage\nThe localStorage and sessionStorage objects of the NgxStorageService provide an Observable based approach to storage.\nIf we want to get an item from the storage, we can either use getItem or getItemObservable if we want the real time value vs an Observable respectively.\nUsing setItem and removeItem will set and remove an item in/from the storage respectively, and will emit an event on the storageEvents$ Observable.\nWhen using clear, the entire storage will be cleared, the Observables that were fetched using getItemObservable will be completed and an event will be emitted on the storageEvents$ observable.\nExample :import { NgxStorageService } from '@ibenvandeveire/ngx-utils';\n\nexport class YourComponent {\n    constructor(private storageService: NgxStorageService) {\n        storageService.localStorage.setItem('Hello', { world: true });\n        storageService.sessionStorage.setItem('Hello', { world: true });\n    }\n}storageEvents$\nThe storageEvents$ property is an Observable that will emit a NgxStorageEvent whenever the session- or localStorage was updated (set or remove) or cleared.\nExample :import { NgxStorageService } from '@ibenvandeveire/ngx-utils';\n\nexport class YourComponent {\n    constructor(private storageService: NgxStorageService) {\n        storageService.storageEvent$.subscribe(console.log);\n        // logs: {type: 'update', oldValue: undefined, newValue: {world: true}, key: 'Hello', storage: 'local'}\n        storageService.localStorage.setItem('Hello', { world: true });\n    }\n}\n    \n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { BehaviorSubject, NEVER, Observable, Subject } from 'rxjs';\n\nimport {\n\tNgxStorage,\n\tNgxStorageClearEvent,\n\tNgxStorageEvent,\n\tNgxStorageRecord,\n\tNgxStorageRemoveEvent,\n\tNgxStorageSetEvent,\n\tNgxStorageType,\n} from '../../types';\n\n/**\n * A service that provides a SSR-proof Observable based approach to the session- and localStorage.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxStorageService {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A record to hold the properties in the sessionStorage\n\t */\n\tprivate readonly sessionStorageRecord: NgxStorageRecord = {};\n\t/**\n\t * A record to hold the properties in the localStorage\n\t */\n\tprivate readonly localStorageRecord: NgxStorageRecord = {};\n\t/**\n\t * A subject to hold the events of the storage\n\t */\n\tprivate readonly storageEventSubject: Subject = new Subject();\n\n\t/**\n\t * An observable that emits whenever the session- or the localStorage was updated\n\t */\n\tpublic readonly storageEvents$: Observable =\n\t\tthis.storageEventSubject.asObservable();\n\n\tconstructor() {\n\t\tconst windowService = this.windowService;\n\n\t\t// Iben: Get the initial values of the session and the local storage\n\t\twindowService.runInBrowser(() => {\n\t\t\tthis.setupStorage(sessionStorage, this.sessionStorageRecord);\n\t\t\tthis.setupStorage(localStorage, this.localStorageRecord);\n\t\t});\n\t}\n\n\t/**\n\t * A localStorage implementation using observables\n\t */\n\tpublic get localStorage(): NgxStorage {\n\t\treturn {\n\t\t\tgetItem: (key: string) => this.getItem(key, localStorage),\n\t\t\tgetItemObservable: (key: string) =>\n\t\t\t\tthis.getItemObservable(key, this.localStorageRecord),\n\t\t\tremoveItem: (key: string) =>\n\t\t\t\tthis.removeItem(key, localStorage, this.localStorageRecord, 'local'),\n\t\t\tsetItem: (key: string, item: DataType) =>\n\t\t\t\tthis.setItem(key, item, localStorage, this.localStorageRecord, 'local'),\n\t\t\tclear: () => this.clearStorage(localStorage, this.localStorageRecord, 'local'),\n\t\t};\n\t}\n\n\t/**\n\t * A sessionStorage implementation using observables\n\t */\n\tpublic get sessionStorage(): NgxStorage {\n\t\treturn {\n\t\t\tgetItem: (key: string) => this.getItem(key, sessionStorage),\n\t\t\tgetItemObservable: (key: string) =>\n\t\t\t\tthis.getItemObservable(key, this.sessionStorageRecord),\n\t\t\tremoveItem: (key: string) =>\n\t\t\t\tthis.removeItem(key, sessionStorage, this.sessionStorageRecord, 'session'),\n\t\t\tsetItem: (key: string, item: DataType) =>\n\t\t\t\tthis.setItem(key, item, sessionStorage, this.sessionStorageRecord, 'session'),\n\t\t\tclear: () => this.clearStorage(sessionStorage, this.sessionStorageRecord, 'session'),\n\t\t};\n\t}\n\n\tprivate getItem(key: string, storage: Storage): DataType {\n\t\treturn this.parseValue(storage.getItem(key));\n\t}\n\n\t/**\n\t * Returns an observable version of the storage value\n\t *\n\t * @param key - The key of the storage value\n\t * @param record  - The storage record\n\t */\n\tprivate getItemObservable(\n\t\tkey: string,\n\t\trecord: NgxStorageRecord\n\t): Observable {\n\t\t// Iben: Return NEVER when not in browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn NEVER;\n\t\t}\n\n\t\t// Iben: If the subject already exists, we return the observable\n\t\tif (record[key]) {\n\t\t\treturn record[key].asObservable();\n\t\t}\n\n\t\t// Iben: If no subject exits, we create a new one\n\t\trecord[key] = new BehaviorSubject(undefined);\n\n\t\t// Iben: Return the observable\n\t\treturn this.getItemObservable(key, record);\n\t}\n\n\t/**\n\t * Sets an item in the storage\n\t *\n\t * @param key - The key of the item\n\t * @param item - The item in the storage\n\t * @param storage - The storage in which we want to save the item\n\t * @param record - The corresponding storage record\n\t */\n\tprivate setItem(\n\t\tkey: string,\n\t\titem: DataType,\n\t\tstorage: Storage,\n\t\trecord: NgxStorageRecord,\n\t\ttype: NgxStorageType\n\t): NgxStorageSetEvent | undefined {\n\t\t// Iben: Early exit when we're in the browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Check if there's already a subject for this item. If not, we create one\n\t\tlet subject = record[key];\n\n\t\tif (!subject) {\n\t\t\tsubject = new BehaviorSubject(undefined);\n\t\t\tstorage[key] = subject;\n\t\t}\n\n\t\t// Iben: Store the current value of the subject\n\t\tconst oldValue = subject.getValue();\n\n\t\t// Iben: Set the item in the storage\n\t\tstorage.setItem(key, typeof item === 'string' ? item : JSON.stringify(item));\n\n\t\t// Iben: Update the subject in the record\n\t\tsubject.next(item);\n\n\t\t// Iben: Create the storage event\n\t\tconst event: NgxStorageSetEvent = {\n\t\t\tkey,\n\t\t\tnewValue: item,\n\t\t\toldValue,\n\t\t\tstorage: type,\n\t\t\ttype: 'set',\n\t\t};\n\n\t\t// Iben: Emit the storage event\n\t\tthis.storageEventSubject.next(event);\n\n\t\t// Iben: Return the storage event\n\t\treturn event;\n\t}\n\n\t/**\n\t * Remove an item from the storage and emit a remove event\n\t *\n\t * @param  key - The key of the item\n\t * @param storage - The storage we wish to remove the item from\n\t * @param record - The record with the subject\n\t * @param type - The type of storage\n\t */\n\tprivate removeItem(\n\t\tkey: string,\n\t\tstorage: Storage,\n\t\trecord: NgxStorageRecord,\n\t\ttype: NgxStorageType\n\t): NgxStorageRemoveEvent | undefined {\n\t\t// Iben: Early exit when we're not in the browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Get the old item\n\t\tconst oldValue = this.parseValue(storage.getItem(key));\n\n\t\t// Iben: Remove the item from the storage\n\t\tstorage.removeItem(key);\n\n\t\t// Iben Update the subject if it exists\n\t\trecord[key]?.next(undefined);\n\n\t\t// Iben: Create the event and return and emit it\n\t\tconst event: NgxStorageRemoveEvent = {\n\t\t\toldValue,\n\t\t\tstorage: type,\n\t\t\tkey,\n\t\t\ttype: 'remove',\n\t\t};\n\n\t\tthis.storageEventSubject.next(event);\n\t\treturn event;\n\t}\n\n\t/**\n\t * Clears the storage, completes all subjects and emits a clear event\n\t *\n\t * @param storage - The storage we wish to clear\n\t * @param record - The record with the subjects\n\t * @param type - The type of storage\n\t */\n\tprivate clearStorage(\n\t\tstorage: Storage,\n\t\trecord: NgxStorageRecord,\n\t\ttype: NgxStorageType\n\t): NgxStorageClearEvent | undefined {\n\t\t// Iben: Early exit when we're not in the browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Clear the storage\n\t\tstorage.clear();\n\n\t\t// Iben: Clear the record and complete all subjects\n\t\tObject.entries(record).forEach(([key, subject]) => {\n\t\t\tsubject.next(undefined);\n\t\t\tsubject.complete();\n\n\t\t\trecord[key] = undefined;\n\t\t});\n\n\t\t// Iben: Create and emit event\n\t\tconst event: NgxStorageClearEvent = {\n\t\t\ttype: 'clear',\n\t\t\tstorage: type,\n\t\t};\n\n\t\tthis.storageEventSubject.next(event);\n\n\t\treturn event;\n\t}\n\n\t/**\n\t * Grabs the existing storage and updates the record\n\t *\n\t * @private\n\t * @param {Storage} storage - The current state of the storage\n\t * @param {NgxStorageRecord} record\n\t * @memberof NgxStorageService\n\t */\n\tprivate setupStorage(storage: Storage, record: NgxStorageRecord) {\n\t\tObject.entries(storage).forEach(([key, value]) => {\n\t\t\trecord[key] = new BehaviorSubject(this.parseValue(value));\n\t\t});\n\t}\n\n\t/**\n\t * Parses a string value from the storage to an actual value\n\t *\n\t * @param value - The provided string value\n\t */\n\tprivate parseValue(value: string): any {\n\t\t// Iben: If the value does not exist, return the value\n\t\tif (!value) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: If the value is either true or false, return a boolean version of the value\n\t\tif (value === 'true' || value === 'false') {\n\t\t\treturn value === 'true';\n\t\t}\n\n\t\t// Iben: If the value is a number, return the parsed number\n\t\tif (value.match(/^[0-9]*[,.]{0,1}[0-9]*$/)) {\n\t\t\treturn Number(value);\n\t\t}\n\n\t\t// Iben: If the value is an object, return the parsed object\n\t\tif (value.match(/{(.*:.*[,]{0,1})*}/)) {\n\t\t\treturn JSON.parse(value);\n\t\t}\n\n\t\t// Iben: Return the string value as is\n\t\treturn value;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageSetEvent.html":{"url":"interfaces/NgxStorageSetEvent.html","title":"interface - NgxStorageSetEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageSetEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStorageBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            newValue\n                                        \n                                \n                                \n                                        \n                                            oldValue\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        newValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newValue:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oldValue:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStore.html":{"url":"interfaces/NgxStore.html","title":"interface - NgxStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-generator.ts\n        \n\n\n            \n                Description\n            \n            \n                The typing of the store of all sub slices\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            reducers\n                                        \n                                \n                                \n                                        \n                                            selectors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:         NgxStoreActions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxStoreActions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reducers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reducers:     ActionReducer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionReducer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectors:         NgxStoreSelectors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxStoreSelectors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\nimport { ActionReducer, Action } from '@ngrx/store';\n\nimport { BaseStoreAssets } from './base-store';\nimport { EntityStoreAssets } from './entity-store-assets';\nimport {\n\tBaseStoreAssetsGeneratorOptions,\n\tEntityStoreAssetsGeneratorOptions,\n} from './store-assets-generator-options';\n\n/**\n * These objects will be used as a blueprint for our store slices\n *\n * @template SliceKey - The keys of our store\n */\nexport interface StoreAssetsOptions {\n\tsubSlice: SliceKey;\n\tgenerator:\n\t\t| ((options: EntityStoreAssetsGeneratorOptions) => EntityStoreAssets)\n\t\t| ((options: BaseStoreAssetsGeneratorOptions) => BaseStoreAssets);\n\n\tselectId?: IdSelector;\n\tinitialValue?: any;\n}\n\n// Iben: The base type for our flow assets which we'll pass to the create generator\nexport type StoreFlowAssets = Record | BaseStoreAssets>;\n\n// Iben: Type to extract the selectors from the provided ResultType, so that we know if we have a BaseStoreSelector or an EntityStoreSelector, this way\n// we get correct typing in our services\nexport type NgxStoreSelectors = {\n\t[Key in keyof ResultType]: ResultType[Key]['selectors'];\n};\n\n// Iben: Type to extract the actions from the provided ResultType, so that we know if we have a BaseStoreAction or an EntityStoreAction, this way\n// we get correct typing in our services\ntype NgxStoreActions = {\n\t[Key in keyof ResultType]: ResultType[Key]['actions'];\n};\n\n/**\n * The typing of the store of all sub slices\n *\n * @template ResultType - The typing we wish to see for our actions, reducers and selectors\n */\nexport interface NgxStore {\n\tselectors: NgxStoreSelectors;\n\tactions: NgxStoreActions;\n\treducers: ActionReducer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxStoreService.html":{"url":"injectables/NgxStoreService.html","title":"injectable - NgxStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/abstracts/store.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stateWrapper\n                            \n                            \n                                    Protected\n                                    Readonly\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                selectErrorFromStore\n                            \n                            \n                                    Public\n                                selectErrorMessageFromStore\n                            \n                            \n                                    Public\n                                selectFromStore\n                            \n                            \n                                    Public\n                                selectLoadingFromStore\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(selectors?: NgxStoreSelectors)\n                    \n                \n                        \n                            \n                                Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        selectors\n                                                  \n                                                        \n                                                                        NgxStoreSelectors\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Select the error state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorMessageFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorMessageFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:69\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ErrorMessage\n                            \n                        \n                    \n\n            \n                \n                        Select the error message state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:42\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    StoreItem\n                            \n                        \n                    \n\n            \n                \n                        Select the data of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectLoadingFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectLoadingFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Select the loading state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StoreState\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:13\n                        \n                    \n\n            \n                \n                    A wrapper object for the store state selectors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:78\n                                \n                            \n                    \n                        \n                                An object that holds all the state selectors of the provided store slice.\nThe generated selectors need to be provided to the constructor of the service in order for this object not to be undefined.\n\n\n                                \n                                    Returns :         StoreState\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Inject, inject, Injectable, Optional } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { NgxStoreSelectors, StoreFlowAssets, StoreState } from '../interfaces';\n\n@Injectable()\nexport class NgxStoreService {\n\t/**\n\t * A wrapper object for the store state selectors\n\t */\n\tprivate stateWrapper: StoreState;\n\n\tprotected readonly store: Store = inject(Store);\n\n\tconstructor(\n\t\t@Optional()\n\t\t@Inject('selectors')\n\t\tselectors?: NgxStoreSelectors\n\t) {\n\t\t// Iben: If the selectors are provided, we create an object that will create an object with selectors for each slice in the state\n\t\tif (selectors) {\n\t\t\tthis.stateWrapper = Object.keys(selectors).reduce((previous, key) => {\n\t\t\t\treturn {\n\t\t\t\t\t...previous,\n\t\t\t\t\t[`${key}$`]: this.selectFromStore(selectors[key]),\n\t\t\t\t\t[`${key}Loading$`]: this.selectLoadingFromStore(selectors[key]),\n\t\t\t\t\t[`${key}Error$`]: this.selectErrorFromStore(selectors[key]),\n\t\t\t\t\t[`${key}ErrorMessage$`]: this.selectErrorMessageFromStore(selectors[key]),\n\t\t\t\t};\n\t\t\t}, {}) as StoreState;\n\t\t}\n\t}\n\n\t/**\n\t * Select the data of a store slice\n\t *\n\t * @template StoreItem - The interface of the selected item/items\n\t * @param selector - The selector object\n\t */\n\tpublic selectFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.select || selector.selectAll));\n\t}\n\n\t/**\n\t * Select the loading state of a store slice\n\t *\n\t * @param selector - The selector object\n\t */\n\tpublic selectLoadingFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.loading || selector.selectLoading));\n\t}\n\n\t/**\n\t * Select the error state of a store slice\n\t *\n\t * @param selector - The selector object\n\t */\n\tpublic selectErrorFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.error || selector.selectError));\n\t}\n\n\t/**\n\t * Select the error message state of a store slice\n\t *\n\t * @param selector - The selector object\n\t */\n\tpublic selectErrorMessageFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.errorMessage || selector.selectErrorMessage));\n\t}\n\n\t/**\n\t * An object that holds all the state selectors of the provided store slice.\n\t *\n\t * The generated selectors need to be provided to the constructor of the service in order for this object not to be undefined.\n\t */\n\tpublic get state(): StoreState {\n\t\t// Iben: If no selectors were provided, we throw an error informing the user\n\t\tif (!this.stateWrapper) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxStore: No selectors were provided to the constructor of the NgxStoreService extender. Without it, the state object cannot be created and will result in an error.'\n\t\t\t);\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Return the stateWrapper\n\t\treturn this.stateWrapper;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableCellDirective.html":{"url":"directives/NgxTableCellDirective.html","title":"directive - NgxTableCellDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableCellDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/components/cell/generic-cell.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxAbstractTableCellDirective\n            \n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Providers\n                        \n                            \n                                {\n    provide: NgxAbstractTableCellDirective, useExisting: NgxTableCellDirective,\n}\n                            \n                        \n                    \n\n                    \n                        Selector\n                        ngx-table-cell\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    \n                                cellTemplate\n                            \n                            \n                                    \n                                    Public\n                                    \n                                footerTemplate\n                            \n                            \n                                    \n                                    Public\n                                    \n                                headerTemplate\n                            \n                            \n                                    Public\n                                cellClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:31\n\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:42\n\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:47\n\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:36\n\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:57\n\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:82\n\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:91\n\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('cellTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:27\n\n                        \n                    \n\n            \n                \n                    A template for the body of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('footerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:33\n\n                        \n                    \n\n            \n                \n                    A template for the footer of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('headerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:21\n\n                        \n                    \n\n            \n                \n                    A template for the header of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:26\n\n                        \n                    \n\n            \n                \n                    An optional class that can be set for the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:31\n\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:42\n\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:47\n\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:52\n\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:36\n\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:14\n\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { ContentChild, Directive, TemplateRef } from '@angular/core';\n\nimport { NgxAbstractTableCellDirective } from './cell.directive';\n\n@Directive({\n\tselector: 'ngx-table-cell',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NgxAbstractTableCellDirective,\n\t\t\tuseExisting: NgxTableCellDirective,\n\t\t},\n\t],\n\tstandalone: true,\n})\nexport class NgxTableCellDirective extends NgxAbstractTableCellDirective {\n\t/**\n\t * A template for the header of the cell\n\t */\n\n\t@ContentChild('headerTmpl', { static: false })\n\tpublic override headerTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the body of the cell\n\t */\n\n\t@ContentChild('cellTmpl', { static: false })\n\tpublic override cellTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the footer of the cell\n\t */\n\n\t@ContentChild('footerTmpl', { static: false })\n\tpublic override footerTemplate: TemplateRef = undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableConfiguration.html":{"url":"interfaces/NgxTableConfiguration.html","title":"interface - NgxTableConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/tokens/ngx-table-config.token.ts\n        \n\n\n            \n                Description\n            \n            \n                A configuration we can provide to set properties of the table globally\nshowDetailRow - Defines the default open behavior of detail rows. 'always' will open all rows by default, 'on-click' will only open them on click, 'on-single-item' will open the row on click and when there's only one item in the table.\nngxTableClass - A default class that will be set on the ngx-table component itself\nshowOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\nallowMultipleRowsOpen - Defines whether multiple rows can be open at once.\nshowOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\nshowSelectedOpenRow - Defines whether we want a class to be added to the currently opened row\nemitValueOnSingleItem - Defines whether we want to emit the rowClicked when there's only one item in the table and the showDetailRow is set to 'on-single-item'\nhideHeaderWhen - Defines whether we want to show the header when the table is empty or loading\ncomponents - A set of components we can use as defaults for the loading, error and empty state of the\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowMultipleRowsOpen\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            components\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            emitValueOnSingleItem\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideHeaderWhen\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            highlightKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ngxTableClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showDetailRow\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showOpenRowState\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showSelectedOpenRow\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowMultipleRowsOpen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowMultipleRowsOpen:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        components\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        components:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emitValueOnSingleItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emitValueOnSingleItem:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideHeaderWhen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideHeaderWhen:         HideHeaderRowOption\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HideHeaderRowOption\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        highlightKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        highlightKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ngxTableClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ngxTableClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showDetailRow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showDetailRow:         ShowDetailRowOption\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ShowDetailRowOption\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showOpenRowState\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showOpenRowState:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showSelectedOpenRow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showSelectedOpenRow:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken, Type } from '@angular/core';\n\nimport {\n\tNgxDisplayContentComponent,\n\tNgxTableOpenRowStateTemplateAbstractComponent,\n\tNgxTableSelectTemplateAbstractComponent,\n\tNgxTableSortTemplateAbstractComponent,\n} from '../abstracts';\n\ntype HideHeaderRowOptions = 'when-loading' | 'when-empty';\nexport type HideHeaderRowOption =\n\t| 'never'\n\t| [HideHeaderRowOptions]\n\t| [HideHeaderRowOptions, HideHeaderRowOptions];\nexport type ShowDetailRowOption = 'always' | 'on-click' | 'on-single-item';\n\n/**\n * A configuration we can provide to set properties of the table globally\n *\n * showDetailRow - Defines the default open behavior of detail rows. 'always' will open all rows by default, 'on-click' will only open them on click, 'on-single-item' will open the row on click and when there's only one item in the table.\n * ngxTableClass - A default class that will be set on the ngx-table component itself\n * showOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\n * allowMultipleRowsOpen - Defines whether multiple rows can be open at once.\n * showOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\n * showSelectedOpenRow - Defines whether we want a class to be added to the currently opened row\n * emitValueOnSingleItem - Defines whether we want to emit the rowClicked when there's only one item in the table and the showDetailRow is set to 'on-single-item'\n * hideHeaderWhen - Defines whether we want to show the header when the table is empty or loading\n * components - A set of components we can use as defaults for the loading, error and empty state of the\n */\nexport interface NgxTableConfiguration {\n\tshowDetailRow?: ShowDetailRowOption;\n\tngxTableClass?: string;\n\tshowOpenRowState?: boolean;\n\tallowMultipleRowsOpen?: boolean;\n\thighlightKey?: string;\n\tshowSelectedOpenRow?: boolean;\n\temitValueOnSingleItem?: boolean;\n\thideHeaderWhen?: HideHeaderRowOption;\n\tcomponents?: {\n\t\tloading?: Type;\n\t\tempty?: Type;\n\t\tradio?: Type;\n\t\tcheckbox?: Type;\n\t\topenRowState?: Type;\n\t\tsort?: Type;\n\t};\n}\n\nexport const NgxTableConfigurationToken = new InjectionToken(\n\t'NgxTableConfiguration'\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableCypressDataTagsBase.html":{"url":"interfaces/NgxTableCypressDataTagsBase.html","title":"interface - NgxTableCypressDataTagsBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableCypressDataTagsBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/show-header-requirements.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cell\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            header\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cell\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cell:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        header\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        header:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequireAtLeastOne } from './internal-helpers';\n\nexport interface NgxTableShowHeaderRequirements {\n\tisLoading: boolean;\n\tisEmpty: boolean;\n}\n\ninterface NgxTableCypressDataTagsBase {\n\theader?: string;\n\tcell?: string;\n\tfooter?: string;\n}\n\nexport type NgxTableCypressDataTags = RequireAtLeastOne;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableGetPipe.html":{"url":"pipes/NgxTableGetPipe.html","title":"pipe - NgxTableGetPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableGetPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/get-pipe/get.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                This pipe returns a value based on a provided path\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        getProp\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value, path: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/get-pipe/get.pipe.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { getProperty } from 'dot-prop';\n\n/**\n * This pipe returns a value based on a provided path\n *\n * @export\n * @class NgxTableGetPipe\n * @implements {PipeTransform}\n */\n@Pipe({\n\tname: 'getProp',\n\tstandalone: true,\n})\nexport class NgxTableGetPipe implements PipeTransform {\n\tpublic transform(value: unknown, path: string): any {\n\t\t// Iben: Check if the value is not an object and return an empty string so the frontend doesn't break and warn the user\n\t\tif (typeof value !== 'object' || Array.isArray(value) || value === null) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxTableGetPipe encountered a value that was not an object and returned an empty string instead.'\n\t\t\t);\n\n\t\t\treturn '';\n\t\t}\n\n\t\t// Iben: If no path was provided, we return the value and warn the user\n\t\tif (!path) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxTableGetPipe did not receive a path to a property and returned an empty string instead.'\n\t\t\t);\n\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: Return the property using dot-prop\n\t\treturn getProperty(value, path);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableHasObserversPipe.html":{"url":"pipes/NgxTableHasObserversPipe.html","title":"pipe - NgxTableHasObserversPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableHasObserversPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/has-observers/has-observers.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxTableHasObservers\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(output: OutputEmitterRef<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/has-observers/has-observers.pipe.ts:13\n                        \n                    \n\n\n            \n                \n                        Returns true in case an observer was set to an EventEmitter\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                output\n                                            \n                                                        OutputEmitterRef<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided EventEmitter\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe,PipeTransform,OutputEmitterRef } from '@angular/core';\n\n@Pipe({\n\tname: 'ngxTableHasObservers',\n\tstandalone: true,\n})\nexport class NgxTableHasObserversPipe implements PipeTransform {\n\t/**\n\t * Returns true in case an observer was set to an EventEmitter\n\t *\n\t * @param output - The provided EventEmitter\n\t */\n  public transform ( output: OutputEmitterRef ): boolean {\n\t\treturn output && output['listeners']?.length > 0;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{"url":"directives/NgxTableOpenRowStateTemplateAbstractComponent.html","title":"directive - NgxTableOpenRowStateTemplateAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableOpenRowStateTemplateAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component provided for the NgxTableComponent, allowing to user to set a default open row state template for all tables\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                index\n                            \n                            \n                                    Public\n                                isOpen\n                            \n                            \n                                    Public\n                                row\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                index\n                            \n                            \n                                isOpen\n                            \n                            \n                                row\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:22\n                            \n                        \n                \n                    \n                        The index of the row\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isOpen\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:12\n                            \n                        \n                \n                    \n                        The current open state the component has to visualize\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        row\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:17\n                            \n                        \n                \n                    \n                        The row data\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:22\n                        \n                    \n\n            \n                \n                    The index of the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:12\n                        \n                    \n\n            \n                \n                    The current open state the component has to visualize\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        row\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:17\n                        \n                    \n\n            \n                \n                    The row data\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input, InputSignal } from '@angular/core';\n\n/**\n * An abstract component provided for the NgxTableComponent, allowing to user to set a default open row state template for all tables\n *\n */\n@Directive()\nexport abstract class NgxTableOpenRowStateTemplateAbstractComponent {\n\t/**\n\t * The current open state the component has to visualize\n\t */\n\tpublic isOpen: InputSignal = input();\n\n\t/**\n\t * The row data\n\t */\n\tpublic row: InputSignal = input();\n\n\t/**\n\t * The index of the row\n\t */\n\tpublic index: InputSignal = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableSelectTemplateAbstractComponent.html":{"url":"directives/NgxTableSelectTemplateAbstractComponent.html","title":"directive - NgxTableSelectTemplateAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableSelectTemplateAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/table/select-template.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component provided for the NgxTableComponent, allowing to user to set a default select template for all tables\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                control\n                            \n                            \n                                    Public\n                                index\n                            \n                            \n                                    Public\n                                row\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                control\n                            \n                            \n                                index\n                            \n                            \n                                row\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        control\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:13\n                            \n                        \n                \n                    \n                        The control we wish to pass to the input\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:23\n                            \n                        \n                \n                    \n                        The index of the row\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        row\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:18\n                            \n                        \n                \n                    \n                        The row that is visualized\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:13\n                        \n                    \n\n            \n                \n                    The control we wish to pass to the input\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:23\n                        \n                    \n\n            \n                \n                    The index of the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        row\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:18\n                        \n                    \n\n            \n                \n                    The row that is visualized\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input, InputSignal } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n/**\n * An abstract component provided for the NgxTableComponent, allowing to user to set a default select template for all tables\n *\n */\n@Directive()\nexport abstract class NgxTableSelectTemplateAbstractComponent {\n\t/**\n\t * The control we wish to pass to the input\n\t */\n\tpublic control: InputSignal> = input();\n\n\t/**\n\t * The row that is visualized\n\t */\n\tpublic row: InputSignal = input();\n\n\t/**\n\t * The index of the row\n\t */\n\tpublic index: InputSignal = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableShowHeaderPipe.html":{"url":"pipes/NgxTableShowHeaderPipe.html","title":"pipe - NgxTableShowHeaderPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableShowHeaderPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/show-header/show-header.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                This pipe returns whether we want to show the header\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxTableShowHeader\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: NgxTableShowHeaderRequirements, hideHeaderRowWhen: HideHeaderRowOption)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/show-header/show-header.pipe.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            NgxTableShowHeaderRequirements\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hideHeaderRowWhen\n                                            \n                                                            HideHeaderRowOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { HideHeaderRowOption } from '../../tokens';\nimport { NgxTableShowHeaderRequirements } from '../../types';\n\n/**\n * This pipe returns whether we want to show the header\n *\n * @export\n * @class NgxTableShowHeaderPipe\n * @implements {PipeTransform}\n */\n@Pipe({\n\tname: 'ngxTableShowHeader',\n\tstandalone: true,\n})\nexport class NgxTableShowHeaderPipe implements PipeTransform {\n\tpublic transform(\n\t\tvalue: NgxTableShowHeaderRequirements,\n\t\thideHeaderRowWhen: HideHeaderRowOption\n\t): boolean {\n\t\t// Iben: If we never want to hide the header row, we return true\n\t\tif (hideHeaderRowWhen === 'never') {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Iben: Check if the value is not an object and return an empty string so the frontend doesn't break and warn the user\n\t\tif (typeof value !== 'object' || !value) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxTableShowHeaderPipe encountered a value that was not an object and showed the header.'\n\t\t\t);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Iben: Add to set for better performance\n\t\tconst options = new Set(hideHeaderRowWhen);\n\n\t\t// Iben: Check which cases need the header to be hidden, and then flip it\n\t\treturn !(\n\t\t\t(options.has('when-empty') && value.isEmpty) ||\n\t\t\t(options.has('when-loading') && value.isLoading)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableShowHeaderRequirements.html":{"url":"interfaces/NgxTableShowHeaderRequirements.html","title":"interface - NgxTableShowHeaderRequirements","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableShowHeaderRequirements\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/show-header-requirements.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isEmpty\n                                        \n                                \n                                \n                                        \n                                            isLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isEmpty\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isEmpty:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequireAtLeastOne } from './internal-helpers';\n\nexport interface NgxTableShowHeaderRequirements {\n\tisLoading: boolean;\n\tisEmpty: boolean;\n}\n\ninterface NgxTableCypressDataTagsBase {\n\theader?: string;\n\tcell?: string;\n\tfooter?: string;\n}\n\nexport type NgxTableCypressDataTags = RequireAtLeastOne;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableSortEvent.html":{"url":"interfaces/NgxTableSortEvent.html","title":"interface - NgxTableSortEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableSortEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/sort-event.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            column\n                                        \n                                \n                                \n                                        \n                                            direction\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        column:     ColumnKey\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ColumnKey\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        direction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        direction:         NgxTableSortDirection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTableSortDirection\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NgxTableSortDirection } from '../enums/sort-direction.enum';\n\nexport interface NgxTableSortEvent {\n\tdirection: NgxTableSortDirection;\n\tcolumn: ColumnKey;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableSortIconPipe.html":{"url":"pipes/NgxTableSortIconPipe.html","title":"pipe - NgxTableSortIconPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableSortIconPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/sort-icon/sort-icon.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxTableSortIcon\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(direction: null | NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/sort-icon/sort-icon.pipe.ts:15\n                        \n                    \n\n\n            \n                \n                        Returns a icon based on the provided sort direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            null | NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided sort direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { NgxTableSortDirection } from '../../enums';\n\n@Pipe({\n\tname: 'ngxTableSortIcon',\n\tstandalone: true,\n})\nexport class NgxTableSortIconPipe implements PipeTransform {\n\t/**\n\t * Returns a icon based on the provided sort direction\n\t *\n\t * @param direction - The provided sort direction\n\t */\n\tpublic transform(direction: null | NgxTableSortDirection): string {\n\t\tif (!direction) {\n\t\t\treturn '&equiv;';\n\t\t}\n\n\t\treturn direction === NgxTableSortDirection.ASCENDING ? '&uArr;' : '&dArr;';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableSortTemplateAbstractComponent.html":{"url":"directives/NgxTableSortTemplateAbstractComponent.html","title":"directive - NgxTableSortTemplateAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableSortTemplateAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/table/sort-template.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component provided for the NgxTableComponent, allowing to user to set a default sort template for all tables\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                direction\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                direction\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        direction\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/sort-template.component.ts:14\n                            \n                        \n                \n                    \n                        The current sort direction the component has to visualize\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/sort-template.component.ts:14\n                        \n                    \n\n            \n                \n                    The current sort direction the component has to visualize\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input, InputSignal} from '@angular/core';\n\nimport { NgxTableSortDirection } from '../../enums';\n\n/**\n * An abstract component provided for the NgxTableComponent, allowing to user to set a default sort template for all tables\n *\n */\n@Directive()\nexport abstract class NgxTableSortTemplateAbstractComponent {\n\t/**\n\t * The current sort direction the component has to visualize\n\t */\n\tpublic direction: InputSignal = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTooltipAbstractComponent.html":{"url":"directives/NgxTooltipAbstractComponent.html","title":"directive - NgxTooltipAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTooltipAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract for the NgxTooltipDirective\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Private\n                                    Readonly\n                                ngxTooltipService\n                            \n                            \n                                    Public\n                                    Readonly\n                                position\n                            \n                            \n                                    Public\n                                    Readonly\n                                positionClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                text\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                removeOnMouseOut\n                            \n                            \n                                    \n                                showOnMouseEnter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                position\n                            \n                            \n                                positionClass\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                mouseenter\n                            \n                            \n                                mouseleave\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:55\n                            \n                        \n                \n                    \n                        The id of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        position\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:60\n                            \n                        \n                \n                    \n                        The current position of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        positionClass\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:47\n                            \n                        \n                \n                    \n                        The position class of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        text\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:65\n                            \n                        \n                \n                    \n                        The text of the tooltip\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            mouseenter\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:22\n                \n            \n\n\n            \n                \n                    Set tooltip as active\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseleave\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:33\n                \n            \n\n\n            \n                \n                    Set the tooltip as inactive\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeOnMouseOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOnMouseOut()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseleave')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:33\n                        \n                    \n\n\n            \n                \n                        Set the tooltip as inactive\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        showOnMouseEnter\n                        \n                    \n                \n            \n            \n                \n                        \n                    showOnMouseEnter()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseenter')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:22\n                        \n                    \n\n\n            \n                \n                        Set tooltip as active\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:55\n                        \n                    \n\n            \n                \n                    The id of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        ngxTooltipService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTooltipService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        position\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:60\n                        \n                    \n\n            \n                \n                    The current position of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        positionClass\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:47\n                        \n                    \n\n            \n                \n                    The position class of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        text\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:65\n                        \n                    \n\n            \n                \n                    The text of the tooltip\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener, inject, input } from '@angular/core';\n\nimport { NgxTooltipService } from '../../services';\nimport { NgxTooltipPosition, NgxTooltipPositionClass } from '../../types';\n\n/**\n * An abstract for the NgxTooltipDirective\n */\n@Directive({\n\thost: {\n\t\tid: 'id()',\n    class: 'positionClass()',\n    'attr.role': 'tooltip'\n\t},\n})\nexport abstract class NgxTooltipAbstractComponent {\n\tprivate readonly ngxTooltipService = inject(NgxTooltipService);\n\n\t/**\n\t * Set tooltip as active\n\t */\n\t@HostListener('mouseenter') showOnMouseEnter() {\n\t\tthis.ngxTooltipService.setToolTipEvent({\n\t\t\tid: this.id(),\n\t\t\tsource: 'tooltip',\n\t\t\tactive: true,\n\t\t});\n\t}\n\n\t/**\n\t * Set the tooltip as inactive\n\t */\n\t@HostListener('mouseleave') removeOnMouseOut() {\n\t\tthis.ngxTooltipService.setToolTipEvent({\n\t\t\tid: this.id(),\n\t\t\tsource: 'tooltip',\n\t\t\tactive: false,\n\t\t});\n\t}\n\n\t/**\n\t * The position class of the tooltip\n\t */\n\t/**\n\t * The position class of the tooltip\n\t */\n\tpublic readonly positionClass = input();\n\n\t/**\n\t * The id of the tooltip\n\t */\n\t/**\n\t * The id of the tooltip\n\t */\n\tpublic readonly id = input.required();\n\n\t/**\n\t * The current position of the tooltip\n\t */\n\tpublic readonly position = input.required();\n\n\t/**\n\t * The text of the tooltip\n\t */\n\tpublic readonly text = input.required();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipActiveElementEvent.html":{"url":"interfaces/NgxTooltipActiveElementEvent.html","title":"interface - NgxTooltipActiveElementEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipActiveElementEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxTooltipBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            elementRef\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementRef:     ElementRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ElementRef\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxTooltipPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTooltipPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipActiveTooltipEvent.html":{"url":"interfaces/NgxTooltipActiveTooltipEvent.html","title":"interface - NgxTooltipActiveTooltipEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipActiveTooltipEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxTooltipBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipBaseEvent.html":{"url":"interfaces/NgxTooltipBaseEvent.html","title":"interface - NgxTooltipBaseEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipBaseEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:     \"tooltip\" | \"element\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"tooltip\" | \"element\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipConfiguration.html":{"url":"interfaces/NgxTooltipConfiguration.html","title":"interface - NgxTooltipConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultPosition\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultPosition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultPosition:         NgxTooltipPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTooltipPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTooltipDirective.html":{"url":"directives/NgxTooltipDirective.html","title":"directive - NgxTooltipDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTooltipDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that adds a ARIA compliant tooltip to a component\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTooltip]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltip\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipComponent\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipDisabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipId\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipPosition\n                            \n                            \n                                    Private\n                                    Readonly\n                                tooltipService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onEscape\n                            \n                            \n                                    \n                                removeOnBlur\n                            \n                            \n                                    \n                                removeOnMouseOut\n                            \n                            \n                                    Private\n                                removeTooltip\n                            \n                            \n                                    \n                                showOnFocus\n                            \n                            \n                                    \n                                showOnMouseEnter\n                            \n                            \n                                    Private\n                                showTooltip\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTooltip\n                            \n                            \n                                ngxTooltipDisabled\n                            \n                            \n                                ngxTooltipPosition\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                document:keydown.escape\n                            \n                            \n                                focus\n                            \n                            \n                                mouseenter\n                            \n                            \n                                mouseleave\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTooltip\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:72\n                            \n                        \n                \n                    \n                        The text of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTooltipDisabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:88\n                            \n                        \n                \n                    \n                        Prevent the tooltip from being shown, by default this is false.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTooltipPosition\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:83\n                            \n                        \n                \n                    \n                        An optional position we can pass to tooltip, by default this is 'above'.\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:50\n                \n            \n\n\n            \n                \n                    Remove the tooltip on blur\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            document:keydown.escape\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:57\n                \n            \n\n\n            \n                \n                    Remove the tooltip on escape pressed\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:36\n                \n            \n\n\n            \n                \n                    Show the tooltip on focus\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseenter\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:29\n                \n            \n\n\n            \n                \n                    Show the tooltip on hover\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseleave\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:43\n                \n            \n\n\n            \n                \n                    Remove the tooltip on leaving hover\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:57\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeOnBlur\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOnBlur()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:50\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip on blur\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeOnMouseOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOnMouseOut()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseleave')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:43\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip on leaving hover\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        removeTooltip\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeTooltip()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:114\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        showOnFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    showOnFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:36\n                        \n                    \n\n\n            \n                \n                        Show the tooltip on focus\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        showOnMouseEnter\n                        \n                    \n                \n            \n            \n                \n                        \n                    showOnMouseEnter()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseenter')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:29\n                        \n                    \n\n\n            \n                \n                        Show the tooltip on hover\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showTooltip\n                        \n                    \n                \n            \n            \n                \n                        \n                    showTooltip()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:93\n                        \n                    \n\n\n            \n                \n                        Show the tooltip if it is not visible yet\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltip\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:72\n                        \n                    \n\n            \n                \n                    The text of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipComponent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input>()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:77\n                        \n                    \n\n            \n                \n                    An optional component we can pass to replace the default configured component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:88\n                        \n                    \n\n            \n                \n                    Prevent the tooltip from being shown, by default this is false.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(uuid())\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:67\n                        \n                    \n\n            \n                \n                    The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipPosition\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:83\n                        \n                    \n\n            \n                \n                    An optional position we can pass to tooltip, by default this is 'above'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tooltipService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTooltipService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, Type, inject, input } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxTooltipAbstractComponent } from '../../abstracts';\nimport { NgxTooltipService } from '../../services';\nimport { NgxTooltipPosition } from '../../types';\n\n/**\n * A directive that adds a ARIA compliant tooltip to a component\n *\n * @export\n * @class NgxTooltipDirective\n */\n@Directive({\n\tselector: '[ngxTooltip]',\n\tstandalone: true,\n\thost: {\n\t\t'[attr.aria-describedby]': 'ngxTooltipId()',\n\t\ttabIndex: '0',\n\t},\n})\nexport class NgxTooltipDirective {\n\tprivate readonly tooltipService = inject(NgxTooltipService);\n\tprivate readonly elementRef = inject(ElementRef);\n\n\t/**\n\t * Show the tooltip on hover\n\t */\n\t@HostListener('mouseenter') showOnMouseEnter() {\n\t\tthis.showTooltip();\n\t}\n\n\t/**\n\t * Show the tooltip on focus\n\t */\n\t@HostListener('focus') showOnFocus() {\n\t\tthis.showTooltip();\n\t}\n\n\t/**\n\t * Remove the tooltip on leaving hover\n\t */\n\t@HostListener('mouseleave') removeOnMouseOut() {\n\t\tthis.removeTooltip();\n\t}\n\n\t/**\n\t * Remove the tooltip on blur\n\t */\n\t@HostListener('blur') removeOnBlur() {\n\t\tthis.removeTooltip();\n\t}\n\n\t/**\n\t * Remove the tooltip on escape pressed\n\t */\n\t@HostListener('document:keydown.escape') onEscape() {\n\t\tthis.tooltipService.removeToolTip();\n\t}\n\n\t/**\n\t * The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.\n\t */\n\t/**\n\t * The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.\n\t */\n\tpublic readonly ngxTooltipId = input(uuid());\n\n\t/**\n\t * The text of the tooltip\n\t */\n\tpublic readonly ngxTooltip = input.required();\n\n\t/**\n\t * An optional component we can pass to replace the default configured component\n\t */\n\tpublic readonly ngxTooltipComponent = input>();\n\n\t/**\n\t * An optional position we can pass to tooltip, by default this is 'above'.\n\t */\n\t// Iben: The default is set in the NgxTooltipService\n\tpublic readonly ngxTooltipPosition = input();\n\n\t/**\n\t * Prevent the tooltip from being shown, by default this is false.\n\t */\n\tpublic readonly ngxTooltipDisabled = input(false);\n\n\t/**\n\t * Show the tooltip if it is not visible yet\n\t */\n\tprivate showTooltip(): void {\n\t\t// Iben: Early exit when the tooltip is disabled\n\t\tif (this.ngxTooltipDisabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Show the tooltip\n\t\tthis.tooltipService.setToolTipEvent({\n\t\t\ttext: this.ngxTooltip(),\n\t\t\tposition: this.ngxTooltipPosition(),\n\t\t\tcomponent: this.ngxTooltipComponent(),\n\t\t\telementRef: this.elementRef,\n\t\t\tid: this.ngxTooltipId(),\n\t\t\tsource: 'element',\n\t\t\tactive: true,\n\t\t});\n\t}\n\n\t/**\n\t * Remove the tooltip\n\t */\n\tprivate removeTooltip(): void {\n\t\t// Iben: Early exit when the tooltip is disabled\n\t\tif (this.ngxTooltipDisabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Emit a remove event\n\t\tthis.tooltipService.setToolTipEvent({\n\t\t\tid: this.ngxTooltipId(),\n\t\t\tsource: 'element',\n\t\t\tactive: false,\n\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipInactiveEvent.html":{"url":"interfaces/NgxTooltipInactiveEvent.html","title":"interface - NgxTooltipInactiveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipInactiveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxTooltipBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipItem.html":{"url":"interfaces/NgxTooltipItem.html","title":"interface - NgxTooltipItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            elementRef\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementRef:     ElementRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ElementRef\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxTooltipPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTooltipPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxTooltipService.html":{"url":"injectables/NgxTooltipService.html","title":"injectable - NgxTooltipService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxTooltipService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeTooltip\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                overlayPositionBuilder\n                            \n                            \n                                    Private\n                                overlayRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                overlayService\n                            \n                            \n                                    Private\n                                    Readonly\n                                positionRecord\n                            \n                            \n                                    Private\n                                    Readonly\n                                tooltipEventsSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                removeToolTip\n                            \n                            \n                                    Public\n                                setToolTipEvent\n                            \n                            \n                                    Public\n                                showToolTip\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:54\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:197\n                        \n                    \n\n\n            \n                \n                        Emit the destroy event\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeToolTip\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeToolTip()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:169\n                        \n                    \n\n\n            \n                \n                        Removes the tooltip.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setToolTipEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    setToolTipEvent(event: NgxTooltipEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:184\n                        \n                    \n\n\n            \n                \n                        Dispatches the tooltip event to the subject\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            NgxTooltipEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA tooltip event\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showToolTip\n                        \n                    \n                \n            \n            \n                \n                        \n                    showToolTip(tooltip: NgxTooltipItem)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Show a tooltip\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tooltip\n                                            \n                                                            NgxTooltipItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration of the tooltip\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        activeTooltip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTooltipConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:39\n                        \n                    \n\n            \n                \n                    A subject to hold the destroy event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        overlayPositionBuilder\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(OverlayPositionBuilder)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overlayRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OverlayRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:44\n                        \n                    \n\n            \n                \n                    The overlayRef used to attach the tooltip too\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        overlayService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Overlay)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        positionRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {\n\t\tbelow: { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n\t\tabove: { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n\t\tleft: { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center' },\n\t\tright: { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n\t}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:49\n                        \n                    \n\n            \n                \n                    The position record for the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tooltipEventsSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(undefined)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:33\n                        \n                    \n\n            \n                \n                    A subject to hold the tooltip events\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n\tConnectedPosition,\n\tOverlay,\n\tOverlayPositionBuilder,\n\tOverlayRef,\n} from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Injectable, OnDestroy, inject } from '@angular/core';\nimport { BehaviorSubject, pairwise, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxTooltipConfigurationToken } from '../../tokens';\nimport {\n\tNgxTooltipConfiguration,\n\tNgxTooltipEvent,\n\tNgxTooltipItem,\n\tNgxTooltipPosition,\n} from '../../types';\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxTooltipService implements OnDestroy {\n\tprivate readonly configuration = inject(NgxTooltipConfigurationToken);\n\tprivate readonly overlayService = inject(Overlay);\n\tprivate readonly overlayPositionBuilder = inject(OverlayPositionBuilder);\n\n\t// Iben: The id of the active tooltip\n\tprivate activeTooltip: string = undefined;\n\n\t/**\n\t * A subject to hold the tooltip events\n\t */\n\tprivate readonly tooltipEventsSubject: BehaviorSubject =\n\t\tnew BehaviorSubject(undefined);\n\n\t/**\n\t * A subject to hold the destroy event\n\t */\n\tprivate readonly onDestroySubject: Subject = new Subject();\n\n\t/**\n\t * The overlayRef used to attach the tooltip too\n\t */\n\tprivate overlayRef: OverlayRef;\n\n\t/**\n\t * The position record for the tooltip\n\t */\n\tprivate readonly positionRecord: Record = {\n\t\tbelow: { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n\t\tabove: { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n\t\tleft: { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center' },\n\t\tright: { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n\t};\n\n\tconstructor() {\n\t\t// Iben: Listen to the tooltip events and handle accordingly\n\t\tthis.tooltipEventsSubject\n\t\t\t.pipe(\n\t\t\t\tpairwise(),\n\t\t\t\ttap(([previous, next]) => {\n\t\t\t\t\t// Iben: When we enter an element, we show the tooltip\n\t\t\t\t\tif (next.active && next.source === 'element') {\n\t\t\t\t\t\t// Iben: Check if we have a previous element, and if so, if we have to remove it\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tprevious &&\n\t\t\t\t\t\t\tthis.overlayRef?.hasAttached() &&\n\t\t\t\t\t\t\tthis.activeTooltip !== next.id\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.removeToolTip();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Iben: Add the new tooltip\n\t\t\t\t\t\tconst { component, text, position, elementRef, id } = next;\n\n\t\t\t\t\t\tthis.showToolTip({\n\t\t\t\t\t\t\tcomponent: component,\n\t\t\t\t\t\t\ttext: text,\n\t\t\t\t\t\t\tposition: position,\n\t\t\t\t\t\t\telementRef: elementRef,\n\t\t\t\t\t\t\tid: id,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: We do a check on previous here so we can continue safely in the upcoming checks\n\t\t\t\t\tif (!previous) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: If we're entering a new element, we early exit\n\t\t\t\t\tif (previous.id !== next.id) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: If the sources are the same, we check if we need to remove the tooltip\n\t\t\t\t\t// In this case we either leave the tooltip or leave the element\n\t\t\t\t\tif (previous.source === next.source) {\n\t\t\t\t\t\tif (!next.active) {\n\t\t\t\t\t\t\tthis.removeToolTip();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: If both actives are false (element => tooltip => outside or tooltip => element => outside), we remove the tooltip\n\t\t\t\t\tif (!next.active && !previous.active) {\n\t\t\t\t\t\tthis.removeToolTip();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Show a tooltip\n\t *\n\t * @param tooltip - The configuration of the tooltip\n\t */\n\tpublic showToolTip(tooltip: NgxTooltipItem): void {\n\t\t// Iben: If no tooltip was provided or if we already have a tooltip attached, we early exit\n\t\tif (!tooltip || this.overlayRef?.hasAttached()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Get the configuration of the tooltip\n\t\tconst { text, component, position, elementRef, id } = tooltip;\n\n\t\t// Iben: Set the active tooltip\n\t\tthis.activeTooltip = id;\n\n\t\t// Iben: Get the tooltip position. If no position was provided by the tooltip, we use the configured default, if none is configured we use 'above'\n\t\tconst tooltipPosition = position || this.configuration.defaultPosition || 'above';\n\n\t\t// Iben: If the previous overlayRef still exists, we remove it\n\t\tif (!this.overlayRef) {\n\t\t\tthis.overlayRef = this.overlayService.create({\n\t\t\t\t// Iben: Set the scroll strategy to reposition so that whenever the user scrolls, the tooltip is still near the element\n\t\t\t\tscrollStrategy: this.overlayService.scrollStrategies.reposition(),\n\t\t\t});\n\t\t}\n\n\t\t// Iben: Create the position of the overlay\n\t\tconst positionStrategy = this.overlayPositionBuilder\n\t\t\t.flexibleConnectedTo(elementRef)\n\t\t\t.withPositions([this.positionRecord[tooltipPosition]]);\n\n\t\t// Iben: Update the position of the current overlayRef\n\t\tthis.overlayRef.updatePositionStrategy(positionStrategy);\n\n\t\t// Iben: Create a new component portal\n\t\tconst tooltipPortal = new ComponentPortal(component || this.configuration.component);\n\n\t\t// Iben: Attach the tooltipPortal to the overlayRef\n    const tooltipRef = this.overlayRef.attach( tooltipPortal );\n\n\t\t// Iben: Pass the data to the component\n\t\ttooltipRef.setInput('text', text);\n\t\ttooltipRef.setInput('position', tooltipPosition);\n\t\ttooltipRef.setInput('positionClass', `ngx-tooltip-position-${tooltipPosition}`);\n\t\ttooltipRef.setInput('id', id);\n\t}\n\n\t/**\n\t * Removes the tooltip.\n\t */\n\tpublic removeToolTip(): void {\n\t\tif (this.activeTooltip) {\n\t\t\t// Iben: Unset the active tooltip\n\t\t\tthis.activeTooltip = undefined;\n\n\t\t\t// Iben: Remove the active tooltip from view\n\t\t\tthis.overlayRef.detach();\n\t\t}\n\t}\n\n\t/**\n\t * Dispatches the tooltip event to the subject\n\t *\n\t * @param event - A tooltip event\n\t */\n\tpublic setToolTipEvent(event: NgxTooltipEvent): void {\n\t\t// Iben: We add a delay so that the user can navigate between the tooltip and the element\n\t\tsetTimeout(\n\t\t\t() => {\n\t\t\t\tthis.tooltipEventsSubject.next(event);\n\t\t\t},\n\t\t\tevent.active ? 0 : 100\n\t\t);\n\t}\n\n\t/**\n\t * Emit the destroy event\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.onDestroySubject.next();\n\t\tthis.onDestroySubject.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourBackdropClipEvent.html":{"url":"interfaces/NgxTourBackdropClipEvent.html","title":"interface - NgxTourBackdropClipEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourBackdropClipEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            backdrop\n                                        \n                                \n                                \n                                        \n                                            cutoutMargin\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            item\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backdrop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backdrop:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cutoutMargin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cutoutMargin:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        item:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxTourStepComponent } from '../abstracts';\nimport { NgxTourItemDirective } from '../directives';\n\nexport type NgxTourDirection = 'next' | 'back';\n\nexport type NgxTourInteraction = NgxTourDirection | 'close';\n\nexport type NgxTourStepPosition = 'above' | 'below' | 'right' | 'left';\n\nexport type NgxTourRegistrationEvent = {\n\ttourItem: string;\n\telement?: NgxTourItemDirective;\n\ttype: 'register' | 'unregister';\n};\n\nexport interface NgxTourRouteOptions {\n\troute: string[];\n\textras: NavigationExtras;\n}\nexport interface NgxTourBackdropClipEvent {\n\tbackdrop: HTMLElement;\n\tcutoutMargin: number;\n\titem?: HTMLElement;\n}\n\nexport type NgxTourAction = (step: NgxTourStep, index: number) => void | Observable;\n\nexport interface NgxTourStep {\n\t/**\n\t * The title we wish to display on the step.\n\t */\n\ttitle: string;\n\n\t/**\n\t * The content we wish to display on the step.\n\t */\n\tcontent: string;\n\n\t/**\n\t * Optional corresponding id of the element we wish to highlight. This is the string we pass to the `tourItem` directive.\n\t */\n\ttourItem?: string;\n\n\t/**\n\t * Optional position where we wish to render the tour step.\n\t *\n\t * By default, this is `below`.\n\t */\n\tposition?: NgxTourStepPosition;\n\n\t/**\n\t * Optional extra data we wish to provide to the step\n\t */\n\tdata?: DataType;\n\n\t/**\n\t * An optional amount of time we want to wait before showing the next step.\n\t *\n\t * By default this is 100 ms.\n\t */\n\tdelay?: number;\n\n\t/**\n\t * An optional function that will be run right before a step becomes visible.\n\t */\n\tbeforeVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run right when a step becomes visible.\n\t */\n\tonVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run when a step is no longer visible\n\t */\n\tafterVisible?: NgxTourAction;\n\n\t/**\n\t * An optional component to replace the default provided component within the tour step configuration.\n\t */\n\tcomponent?: Type;\n\n\t/**\n\t * Whether we want to disable the backdrop\n\t */\n\tdisableBackDrop?: boolean;\n\n\t/**\n\t * An optional padding we can set for the cutout around an element. By default, this is set to 5px.\n\t * This will add some additional whitespace **within** the cutout.\n\t *\n\t * This is not the same as the `offset`, which is the whitespace **around** the highlighted element.\n\t */\n\tcutoutMargin?: number;\n\n\t/**\n\t * An optional class we can attach to the step\n\t */\n\tstepClass?: string;\n\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t */\n\toffset?: NgxTourStepOffset;\n}\n\nexport type NgxTourStepOffset = {\n\ttop?: number;\n\tbottom?: number;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTourItemDirective.html":{"url":"directives/NgxTourItemDirective.html","title":"directive - NgxTourItemDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTourItemDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to mark elements in the DOM to be highlighted during a tour\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [tourItem]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Readonly\n                                elementRef\n                            \n                            \n                                    \n                                    Public\n                                isActive\n                            \n                            \n                                    Public\n                                    Readonly\n                                tourItem\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                setActive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                tourItem\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.ngx-tour-item-active\n                            \n                        \n                    \n                \n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    elementId\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        tourItem\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:26\n                            \n                        \n                \n                    \n                        The id of the item that corresponds with the step\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class.ngx-tour-item-active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:21\n                        \n                    \n\n            \n                \n                    A class added to the currently active item\n\n                \n            \n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    setActive(isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:33\n                        \n                    \n\n\n            \n                \n                        Mark an element as active or inactive\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether or not the element should be active\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class.ngx-tour-item-active')\n                        \n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:21\n                        \n                    \n\n            \n                \n                    A class added to the currently active item\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        tourItem\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:26\n                        \n                    \n\n            \n                \n                    The id of the item that corresponds with the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        elementId\n                    \n                \n\n                \n                    \n                        getelementId()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:44\n                                \n                            \n                    \n                        \n                                Returns the id of the element. Uses for the aria-details on the tour-item component\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Directive, ElementRef, HostBinding, OnDestroy, inject, input } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxTourService } from '../../services';\n\n/**\n * A directive to mark elements in the DOM to be highlighted during a tour\n */\n@Directive({\n\tselector: '[tourItem]',\n  standalone: true,\n})\nexport class NgxTourItemDirective implements AfterViewInit, OnDestroy {\n\treadonly elementRef = inject>(ElementRef);\n\tprivate readonly tourService = inject(NgxTourService);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * A class added to the currently active item\n\t */\n\t@HostBinding('class.ngx-tour-item-active') public isActive: boolean = false;\n\n\t/**\n\t * The id of the item that corresponds with the step\n\t */\n\tpublic readonly tourItem = input();\n\n\t/**\n\t * Mark an element as active or inactive\n\t *\n\t * @param isActive - Whether or not the element should be active\n\t */\n\tpublic setActive(isActive: boolean): void {\n\t\t// Iben: Mark the current item as active or inactive\n\t\tthis.isActive = isActive;\n\n\t\t// Iben: Detect the changes on the component\n\t\tthis.cdRef.detectChanges();\n\t}\n\n\t/**\n\t * Returns the id of the element. Uses for the `aria-details` on the tour-item component\n\t */\n\tpublic get elementId(): string {\n\t\treturn this.elementRef.nativeElement.getAttribute('id');\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Register the element when rendered\n\t\tthis.tourService.registerElement(this);\n\n\t\t// Iben: Check if the element has an id, if not, give it a new id for accessibility\n\t\tif (!this.elementRef.nativeElement.getAttribute('id')) {\n\t\t\tthis.elementRef.nativeElement.setAttribute('id', uuid());\n\t\t}\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Unregister the element when the element gets destroyed\n\t\tthis.tourService.unregisterElement(this.tourItem());\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourRouteOptions.html":{"url":"interfaces/NgxTourRouteOptions.html","title":"interface - NgxTourRouteOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourRouteOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            extras\n                                        \n                                \n                                \n                                        \n                                            route\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        extras\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extras:     NavigationExtras\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     NavigationExtras\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        route\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        route:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxTourStepComponent } from '../abstracts';\nimport { NgxTourItemDirective } from '../directives';\n\nexport type NgxTourDirection = 'next' | 'back';\n\nexport type NgxTourInteraction = NgxTourDirection | 'close';\n\nexport type NgxTourStepPosition = 'above' | 'below' | 'right' | 'left';\n\nexport type NgxTourRegistrationEvent = {\n\ttourItem: string;\n\telement?: NgxTourItemDirective;\n\ttype: 'register' | 'unregister';\n};\n\nexport interface NgxTourRouteOptions {\n\troute: string[];\n\textras: NavigationExtras;\n}\nexport interface NgxTourBackdropClipEvent {\n\tbackdrop: HTMLElement;\n\tcutoutMargin: number;\n\titem?: HTMLElement;\n}\n\nexport type NgxTourAction = (step: NgxTourStep, index: number) => void | Observable;\n\nexport interface NgxTourStep {\n\t/**\n\t * The title we wish to display on the step.\n\t */\n\ttitle: string;\n\n\t/**\n\t * The content we wish to display on the step.\n\t */\n\tcontent: string;\n\n\t/**\n\t * Optional corresponding id of the element we wish to highlight. This is the string we pass to the `tourItem` directive.\n\t */\n\ttourItem?: string;\n\n\t/**\n\t * Optional position where we wish to render the tour step.\n\t *\n\t * By default, this is `below`.\n\t */\n\tposition?: NgxTourStepPosition;\n\n\t/**\n\t * Optional extra data we wish to provide to the step\n\t */\n\tdata?: DataType;\n\n\t/**\n\t * An optional amount of time we want to wait before showing the next step.\n\t *\n\t * By default this is 100 ms.\n\t */\n\tdelay?: number;\n\n\t/**\n\t * An optional function that will be run right before a step becomes visible.\n\t */\n\tbeforeVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run right when a step becomes visible.\n\t */\n\tonVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run when a step is no longer visible\n\t */\n\tafterVisible?: NgxTourAction;\n\n\t/**\n\t * An optional component to replace the default provided component within the tour step configuration.\n\t */\n\tcomponent?: Type;\n\n\t/**\n\t * Whether we want to disable the backdrop\n\t */\n\tdisableBackDrop?: boolean;\n\n\t/**\n\t * An optional padding we can set for the cutout around an element. By default, this is set to 5px.\n\t * This will add some additional whitespace **within** the cutout.\n\t *\n\t * This is not the same as the `offset`, which is the whitespace **around** the highlighted element.\n\t */\n\tcutoutMargin?: number;\n\n\t/**\n\t * An optional class we can attach to the step\n\t */\n\tstepClass?: string;\n\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t */\n\toffset?: NgxTourStepOffset;\n}\n\nexport type NgxTourStepOffset = {\n\ttop?: number;\n\tbottom?: number;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTourShowWhenDirective.html":{"url":"directives/NgxTourShowWhenDirective.html","title":"directive - NgxTourShowWhenDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTourShowWhenDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                \nA directive that will render a part of the template based on the condition and the currently active tour\n\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTourShowWhen]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Public\n                                ngxTourShowWhen\n                            \n                            \n                                    Public\n                                ngxTourShowWhenElse\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTourShowWhen\n                            \n                            \n                                ngxTourShowWhenElse\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:40\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTourShowWhen\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:63\n                            \n                        \n                \n                    \n                        Under which condition the item should be shown whilst the tour is active\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTourShowWhenElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:68\n                            \n                        \n                \n                    \n                        The else template in case the condition is not matched\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:123\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:32\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxTourShowWhen\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:63\n                        \n                    \n\n            \n                \n                    Under which condition the item should be shown whilst the tour is active\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxTourShowWhenElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:68\n                        \n                    \n\n            \n                \n                    The else template in case the condition is not matched\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:37\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { combineLatest, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil, tap, withLatestFrom } from 'rxjs/operators';\n\nimport { NgxTourService } from '../../services';\n\n/**\n *  * A directive that will render a part of the template based on the condition and the currently active tour\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n@Directive({\n\tselector: '[ngxTourShowWhen]',\n})\nexport class NgxTourShowWhenDirective implements OnDestroy {\n\tprivate readonly tourService = inject(NgxTourService);\n\tprivate viewContainer = inject(ViewContainerRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\tconstructor() {\n\t\tconst templateRef = inject>(TemplateRef);\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tif (this.ngxTourShowWhen()) {\n\t\t\t\tthis.updateView();\n\t\t\t}\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxTourShowWhenElse();\n\t\t\tthis.elseViewRef = null;\n\t\t\tthis.updateView();\n\t\t});\n\t}\n\n\t/**\n\t * Under which condition the item should be shown whilst the tour is active\n\t */\n\tpublic ngxTourShowWhen: InputSignal =\n\t\tinput();\n\t/**\n\t * The else template in case the condition is not matched\n\t */\n\tpublic ngxTourShowWhenElse: InputSignal> = input();\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.tourService.currentIndex$\n\t\t\t.pipe(\n\t\t\t\tdistinctUntilChanged(),\n        withLatestFrom( this.tourService.currentTour$ ),\n\t\t\t\ttap(([index, tour]) => {\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tif (\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'whenInactive' && index === undefined) ||\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'whenActive' && index !== undefined) ||\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'hasPrevious' && Boolean(tour?.[index - 1])) ||\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'hasNext' && Boolean(tour?.[index + 1]))\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.thenViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.elseViewRef = null;\n\t\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourStep.html":{"url":"interfaces/NgxTourStep.html","title":"interface - NgxTourStep","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourStep\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            afterVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            beforeVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cutoutMargin\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            delay\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableBackDrop\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            offset\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stepClass\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tourItem\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        afterVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        afterVisible:         NgxTourAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourAction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional function that will be run when a step is no longer visible\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        beforeVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        beforeVisible:         NgxTourAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourAction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional function that will be run right before a step becomes visible.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional component to replace the default provided component within the tour step configuration.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The content we wish to display on the step.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cutoutMargin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cutoutMargin:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional padding we can set for the cutout around an element. By default, this is set to 5px.\nThis will add some additional whitespace within the cutout.\nThis is not the same as the offset, which is the whitespace around the highlighted element.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional extra data we wish to provide to the step\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delay:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional amount of time we want to wait before showing the next step.\nBy default this is 100 ms.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableBackDrop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableBackDrop:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether we want to disable the backdrop\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         NgxTourStepOffset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourStepOffset\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Allow the highlighted element to have additional whitespace around the cutout on the y-axis.\nThis is useful when the highlighted element is under a header or a footer.\nEven though it is possible to provide both a top and bottom offset, only one will be taken into\naccount. If the vertical center of the cutout is closer to the top, the top offset will be used. If\nthe vertical center of the cutout is closer to the bottom, the bottom offset will be used.\nNegative values are allowed. The step(card) will always be displayed within the viewport, even if\nthe offset makes the cutout go out of the viewport.\nThis is not the same as the cutoutMargin, which is the whitespace within the highlighted element.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onVisible:         NgxTourAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourAction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional function that will be run right when a step becomes visible.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxTourStepPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourStepPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional position where we wish to render the tour step.\nBy default, this is below.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stepClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stepClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional class we can attach to the step\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The title we wish to display on the step.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tourItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tourItem:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional corresponding id of the element we wish to highlight. This is the string we pass to the tourItem directive.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxTourStepComponent } from '../abstracts';\nimport { NgxTourItemDirective } from '../directives';\n\nexport type NgxTourDirection = 'next' | 'back';\n\nexport type NgxTourInteraction = NgxTourDirection | 'close';\n\nexport type NgxTourStepPosition = 'above' | 'below' | 'right' | 'left';\n\nexport type NgxTourRegistrationEvent = {\n\ttourItem: string;\n\telement?: NgxTourItemDirective;\n\ttype: 'register' | 'unregister';\n};\n\nexport interface NgxTourRouteOptions {\n\troute: string[];\n\textras: NavigationExtras;\n}\nexport interface NgxTourBackdropClipEvent {\n\tbackdrop: HTMLElement;\n\tcutoutMargin: number;\n\titem?: HTMLElement;\n}\n\nexport type NgxTourAction = (step: NgxTourStep, index: number) => void | Observable;\n\nexport interface NgxTourStep {\n\t/**\n\t * The title we wish to display on the step.\n\t */\n\ttitle: string;\n\n\t/**\n\t * The content we wish to display on the step.\n\t */\n\tcontent: string;\n\n\t/**\n\t * Optional corresponding id of the element we wish to highlight. This is the string we pass to the `tourItem` directive.\n\t */\n\ttourItem?: string;\n\n\t/**\n\t * Optional position where we wish to render the tour step.\n\t *\n\t * By default, this is `below`.\n\t */\n\tposition?: NgxTourStepPosition;\n\n\t/**\n\t * Optional extra data we wish to provide to the step\n\t */\n\tdata?: DataType;\n\n\t/**\n\t * An optional amount of time we want to wait before showing the next step.\n\t *\n\t * By default this is 100 ms.\n\t */\n\tdelay?: number;\n\n\t/**\n\t * An optional function that will be run right before a step becomes visible.\n\t */\n\tbeforeVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run right when a step becomes visible.\n\t */\n\tonVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run when a step is no longer visible\n\t */\n\tafterVisible?: NgxTourAction;\n\n\t/**\n\t * An optional component to replace the default provided component within the tour step configuration.\n\t */\n\tcomponent?: Type;\n\n\t/**\n\t * Whether we want to disable the backdrop\n\t */\n\tdisableBackDrop?: boolean;\n\n\t/**\n\t * An optional padding we can set for the cutout around an element. By default, this is set to 5px.\n\t * This will add some additional whitespace **within** the cutout.\n\t *\n\t * This is not the same as the `offset`, which is the whitespace **around** the highlighted element.\n\t */\n\tcutoutMargin?: number;\n\n\t/**\n\t * An optional class we can attach to the step\n\t */\n\tstepClass?: string;\n\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t */\n\toffset?: NgxTourStepOffset;\n}\n\nexport type NgxTourStepOffset = {\n\ttop?: number;\n\tbottom?: number;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTourStepComponent.html":{"url":"directives/NgxTourStepComponent.html","title":"directive - NgxTourStepComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTourStepComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class that defines the minimum properties needed for the step component to be rendered\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        AfterViewInit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                amountOfSteps\n                            \n                            \n                                    Public\n                                    Readonly\n                                content\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentStep\n                            \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                elementId\n                            \n                            \n                                    Public\n                                handleInteraction\n                            \n                            \n                                    Public\n                                    Readonly\n                                position\n                            \n                            \n                                    \n                                    Protected\n                                rootClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                stepClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                titleElement\n                            \n                            \n                                    Public\n                                titleId\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    \n                                    Public\n                                onEscape\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                amountOfSteps\n                            \n                            \n                                content\n                            \n                            \n                                currentStep\n                            \n                            \n                                data\n                            \n                            \n                                elementId\n                            \n                            \n                                stepClass\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown.escape\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        amountOfSteps\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:83\n                            \n                        \n                \n                    \n                        The total amount of steps\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:73\n                            \n                        \n                \n                    \n                        The content of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        currentStep\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:78\n                            \n                        \n                \n                    \n                        The index of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:88\n                            \n                        \n                \n                    \n                        Optional data we wish to use in a step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        elementId\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:53\n                            \n                        \n                \n                    \n                        The id of the element that the tour-step describes\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        stepClass\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:93\n                            \n                        \n                \n                    \n                        A custom step class we can set\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:68\n                            \n                        \n                \n                    \n                        The title of the step\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:45\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            document:keydown.escape\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:38\n                \n            \n\n\n            \n                \n                    Close the tour on escape pressed\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:112\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:105\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:38\n                        \n                    \n\n\n            \n                \n                        Close the tour on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        amountOfSteps\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:83\n                        \n                    \n\n            \n                \n                    The total amount of steps\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        content\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:73\n                        \n                    \n\n            \n                \n                    The content of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentStep\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:78\n                        \n                    \n\n            \n                \n                    The index of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:88\n                        \n                    \n\n            \n                \n                    Optional data we wish to use in a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementId\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:53\n                        \n                    \n\n            \n                \n                    The id of the element that the tour-step describes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleInteraction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:98\n                        \n                    \n\n            \n                \n                    Emits the possible interactions with a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:63\n                        \n                    \n\n            \n                \n                    The position of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Protected\n                        rootClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class')\n                        \n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:45\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stepClass\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:93\n                        \n                    \n\n            \n                \n                    A custom step class we can set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:68\n                        \n                    \n\n            \n                \n                    The title of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        titleElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild>('stepTitle')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:58\n                        \n                    \n\n            \n                \n                    The element of the tour-step that is seen as the title\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        titleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal('')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:103\n                        \n                    \n\n            \n                \n                    The aria-labelledby id of the title element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n  signal,\n  WritableSignal,\n  inject,\n  input,\n  OutputEmitterRef,\n  output,\n  viewChild\n} from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxTourService } from '../../services';\nimport { NgxTourInteraction, NgxTourStepPosition } from '../../types';\n\n/**\n * An abstract class that defines the minimum properties needed for the step component to be rendered\n */\n@Directive({\n\thost: {\n\t\trole: 'dialog',\n\t\t'[attr.aria-modal]': 'true',\n    '[attr.aria-labelledby]': 'titleId()',\n    '[attr.aria-details]': 'elementId()'\n\t},\n})\nexport abstract class NgxTourStepComponent implements OnInit, AfterViewInit {\n\tprivate readonly tourService = inject(NgxTourService);\n\n\t/**\n\t * Close the tour on escape pressed\n\t */\n\t@HostListener('document:keydown.escape') public onEscape() {\n\t\tthis.tourService.closeTour().subscribe();\n\t}\n\n\t/**\n\t * The ngx-tour-step class of the component\n\t */\n\t@HostBinding('class') protected rootClass: string;\n\n\t/**\n\t * The id of the element that the tour-step describes\n\t */\n\t/**\n\t * The id of the element that the tour-step describes\n\t */\n\tpublic readonly elementId = input.required();\n\n\t/**\n\t * The element of the tour-step that is seen as the title\n\t */\n\tpublic readonly titleElement = viewChild>('stepTitle');\n\n\t/**\n\t * The position of the step\n\t */\n\tpublic readonly position = input.required();\n\n\t/**\n\t * The title of the step\n\t */\n\tpublic readonly title = input.required();\n\n\t/**\n\t * The content of the step\n\t */\n\tpublic readonly content = input.required();\n\n\t/**\n\t * The index of the step\n\t */\n\tpublic readonly currentStep = input.required();\n\n\t/**\n\t * The total amount of steps\n\t */\n\tpublic readonly amountOfSteps = input.required();\n\n\t/**\n\t * Optional data we wish to use in a step\n\t */\n\tpublic readonly data = input();\n\n\t/**\n\t * A custom step class we can set\n\t */\n\tpublic readonly stepClass = input();\n\n\t/**\n\t * Emits the possible interactions with a step\n\t */\n\tpublic handleInteraction: OutputEmitterRef = output();\n\n\t/**\n\t * The aria-labelledby id of the title element\n\t */\n\tpublic titleId: WritableSignal = signal('');\n\n\tpublic ngOnInit(): void {\n\t\t// Iben: We set the correct host class. As this step is rendered and not changed afterwards, we do not have to adjust this in the onChanges\n\t\tconst position = this.position();\n\t\tconst positionClass = position ? `ngx-tour-step-position-${position}` : '';\n\t\tthis.rootClass = `ngx-tour-step ${positionClass} ${this.stepClass() || ''}`;\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: If no title element was found, we throw an error\n\t\tconst titleElement = this.titleElement();\n  if (!titleElement) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxTourService: The tour step component does not have an element marked with `stepTitle`. Because of that, the necessary accessibility attributes could not be set. Please add the `stepTitle` tag to the element that represents the title of the step.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Connect the aria-labbledby tag to the title element\n\t\tlet id = titleElement.nativeElement.getAttribute('id');\n\n\t\t// Iben: If the title element does not have an id, we generate one\n\t\tif (!id) {\n\t\t\tid = uuid();\n\t\t\ttitleElement.nativeElement.setAttribute('id', id);\n\t\t}\n\n\t\t// Iben: To prevent issues with changeDetection, we use a signal here to update the id\n\t\tthis.titleId.set(id);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourTokenConfiguration.html":{"url":"interfaces/NgxTourTokenConfiguration.html","title":"interface - NgxTourTokenConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourTokenConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.token.type.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration object to be passed as token to the tour provider\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            offset\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The component to be used as the tour step.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         NgxTourStepOffset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourStepOffset\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Allow the highlighted element to have additional whitespace around the cutout on the y-axis.\nThis is useful when the highlighted element is under a header or a footer.\nEven though it is possible to provide both a top and bottom offset, only one will be taken into\naccount. If the vertical center of the cutout is closer to the top, the top offset will be used. If\nthe vertical center of the cutout is closer to the bottom, the bottom offset will be used.\nNegative values are allowed. The step(card) will always be displayed within the viewport, even if\nthe offset makes the cutout go out of the viewport.\nThis is not the same as the cutoutMargin, which is the whitespace within the highlighted element.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxTourStepComponent } from '../abstracts';\n\nimport { NgxTourStepOffset } from './tour.types';\n\n/**\n * The token type for the tour provider\n */\nexport type NgxTourTokenType = Type | NgxTourTokenConfiguration;\n\n/**\n * The configuration object to be passed as token to the tour provider\n */\nexport interface NgxTourTokenConfiguration {\n\t/**\n\t * The component to be used as the tour step.\n\t */\n\tcomponent: Type;\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t *\n\t * @inheritdoc NgxTourStep.offset\n\t */\n\toffset: NgxTourStepOffset;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTreeGridCellDirective.html":{"url":"directives/NgxTreeGridCellDirective.html","title":"directive - NgxTreeGridCellDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTreeGridCellDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A cell directive to handle navigation according to the WCAG treegrid pattern\nSee https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n\n            \n\n            \n                Extends\n            \n            \n                            NgxHasFocusDirective\n            \n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTreeGridCell]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGridCell\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGridCellRow\n                            \n                            \n                                    Private\n                                    Readonly\n                                parent\n                            \n                            \n                                    Private\n                                row\n                            \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                findFocusableElement\n                            \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    \n                                moveDown\n                            \n                            \n                                    \n                                moveLeft\n                            \n                            \n                                    \n                                moveRight\n                            \n                            \n                                    \n                                moveToBottomControlEnd\n                            \n                            \n                                    \n                                moveToBottomEnd\n                            \n                            \n                                    Private\n                                moveToCell\n                            \n                            \n                                    \n                                moveToFirstCellOfGrid\n                            \n                            \n                                    \n                                moveToFirstColumnOfGrid\n                            \n                            \n                                    \n                                moveToFirstOfRow\n                            \n                            \n                                    \n                                moveToLastCellOfGrid\n                            \n                            \n                                    \n                                moveUp\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                isFocussedOn\n                            \n                            \n                                    \n                                removeFocus\n                            \n                            \n                                    \n                                setFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTreeGridCell\n                            \n                            \n                                ngxTreeGridCellRow\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                keydown.ArrowDown\n                            \n                            \n                                keydown.ArrowLeft\n                            \n                            \n                                keydown.ArrowRight\n                            \n                            \n                                keydown.ArrowUp\n                            \n                            \n                                keydown.control.End\n                            \n                            \n                                keydown.control.Home\n                            \n                            \n                                keydown.End\n                            \n                            \n                                keydown.Home\n                            \n                            \n                                keydown.PageDown\n                            \n                            \n                                keydown.PageUp\n                            \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTreeGridCell\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:116\n                            \n                        \n                \n                    \n                        The index of the cell in the row\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTreeGridCellRow\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:121\n                            \n                        \n                \n                    \n                        The index of the row\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowDown\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:67\n                \n            \n\n\n            \n                \n                    Set focus on the cell below\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowLeft\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:37\n                \n            \n\n\n            \n                \n                    Set focus on the previous cell to the left\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowRight\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:53\n                \n            \n\n\n            \n                \n                    Set focus on the next cell to the right\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowUp\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:60\n                \n            \n\n\n            \n                \n                    Set focus on the cell above\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.control.End\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:109\n                \n            \n\n\n            \n                \n                    Set focus on the last cell of the same column of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.control.Home\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:88\n                \n            \n\n\n            \n                \n                    Set focus on the first cell of the same column of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.End\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:102\n                \n            \n\n\n            \n                \n                    Set focus on the last cell of the row\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.Home\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:81\n                \n            \n\n\n            \n                \n                    Set focus on the first cell of the row\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.PageDown\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:95\n                \n            \n\n\n            \n                \n                    Set focus on the last cell of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.PageUp\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:74\n                \n            \n\n\n            \n                \n                    Set focus on the first cell of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDirective:25\n\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDirective:18\n\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        findFocusableElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    findFocusableElement()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:152\n                        \n                    \n\n\n            \n                \n                        Searches for a focusable element in the cell\n\n\n                        \n                            Returns :     HTMLElement | undefined\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:126\n                        \n                    \n\n\n            \n                \n                        Sets focus on the cell or on the first focusable item in the cell\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveDown\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveDown()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowDown')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:67\n                        \n                    \n\n\n            \n                \n                        Set focus on the cell below\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveLeft\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveLeft(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowLeft', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:37\n                        \n                    \n\n\n            \n                \n                        Set focus on the previous cell to the left\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveRight\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveRight()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowRight')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:53\n                        \n                    \n\n\n            \n                \n                        Set focus on the next cell to the right\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToBottomControlEnd\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToBottomControlEnd()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.control.End')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:109\n                        \n                    \n\n\n            \n                \n                        Set focus on the last cell of the same column of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToBottomEnd\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToBottomEnd()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.End')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:102\n                        \n                    \n\n\n            \n                \n                        Set focus on the last cell of the row\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        moveToCell\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToCell(cell: NgxTreeGridCellTarget, row: NgxTreeGridRowTarget)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:143\n                        \n                    \n\n\n            \n                \n                        Moves focus to a provided cell in a provided row\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cell\n                                            \n                                                            NgxTreeGridCellTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cell we wish to put focus on\n\n\n                                            \n                                        \n                                        \n                                                row\n                                            \n                                                            NgxTreeGridRowTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe row in which the cell is\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToFirstCellOfGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToFirstCellOfGrid()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.PageUp')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:74\n                        \n                    \n\n\n            \n                \n                        Set focus on the first cell of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToFirstColumnOfGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToFirstColumnOfGrid()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.control.Home')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:88\n                        \n                    \n\n\n            \n                \n                        Set focus on the first cell of the same column of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToFirstOfRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToFirstOfRow()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.Home')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:81\n                        \n                    \n\n\n            \n                \n                        Set focus on the first cell of the row\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToLastCellOfGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToLastCellOfGrid()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.PageDown')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:95\n                        \n                    \n\n\n            \n                \n                        Set focus on the last cell of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveUp()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowUp')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:60\n                        \n                    \n\n\n            \n                \n                        Set focus on the cell above\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:174\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:34\n\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isFocussedOn\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFocussedOn()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:43\n\n                        \n                    \n\n\n            \n                \n                        Returns when the item has been focussed on\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:25\n\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:18\n\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGridCell\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:116\n                        \n                    \n\n            \n                \n                    The index of the cell in the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGridCellRow\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:121\n                        \n                    \n\n            \n                \n                    The index of the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTreeGridDirective\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxTreeGridDirective, {\n\t\toptional: true,\n\t})!\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        row\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTreeGridRowDirective\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:32\n                        \n                    \n\n            \n                \n                    The parent row of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxHasFocusDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxHasFocusDirective:13\n\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, AfterViewInit, inject, input } from '@angular/core';\n\nimport { NgxTreeGridCellTarget, NgxTreeGridRowTarget } from '../../types';\nimport { NgxHasFocusDirective } from '../has-focus-action';\n\nimport { NgxTreeGridRowDirective } from './tree-grid-row.directive';\nimport { NgxTreeGridDirective } from './tree-grid.directive';\n\n/**\n * A cell directive to handle navigation according to the WCAG treegrid pattern\n *\n * See https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n */\n@Directive({\n\tselector: '[ngxTreeGridCell]',\n\tstandalone: true,\n\thost: {\n\t\t// Iben: Marks the cell as focusable, but only by setting its focus programmatically, not by the tab key\n\t\t'[attr.tabIndex]': '-1',\n\t},\n})\nexport class NgxTreeGridCellDirective extends NgxHasFocusDirective implements AfterViewInit {\n\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\tprivate readonly parent: NgxTreeGridDirective = inject(NgxTreeGridDirective, {\n\t\toptional: true,\n\t})!;\n\tprivate readonly elementRef = inject(ElementRef);\n\n\t/**\n\t * The parent row of the cell\n\t */\n\tprivate row: NgxTreeGridRowDirective;\n\n\t/**\n\t * Set focus on the previous cell to the left\n\t */\n\t@HostListener('keydown.ArrowLeft', ['$event']) moveLeft(event: Event): void {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\t// Iben: Stop the event from bubbling so that the row does not open when navigating through the row (see arrowLeft in the NgxTreeGridRowDirective )\n\t\t\tconst ngxTreeGridCell = this.ngxTreeGridCell();\n   if (ngxTreeGridCell === 0) {\n\t\t\t\tevent.stopPropagation();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.moveToCell(ngxTreeGridCell - 1, 'current');\n\t\t});\n\t}\n\n\t/**\n\t * Set focus on the next cell to the right\n\t */\n\t@HostListener('keydown.ArrowRight') moveRight(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell() + 1, 'current');\n\t}\n\n\t/**\n\t * Set focus on the cell above\n\t */\n\t@HostListener('keydown.ArrowUp') moveUp(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'above');\n\t}\n\n\t/**\n\t * Set focus on the cell below\n\t */\n\t@HostListener('keydown.ArrowDown') moveDown(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'below');\n\t}\n\n\t/**\n\t * Set focus on the first cell of the grid\n\t */\n\t@HostListener('keydown.PageUp') moveToFirstCellOfGrid(): void {\n\t\tthis.moveToCell('first', 'first');\n\t}\n\n\t/**\n\t * Set focus on the first cell of the row\n\t */\n\t@HostListener('keydown.Home') moveToFirstOfRow(): void {\n\t\tthis.moveToCell('first', 'current');\n\t}\n\n\t/**\n\t * Set focus on the first cell of the same column of the grid\n\t */\n\t@HostListener('keydown.control.Home') moveToFirstColumnOfGrid(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'first');\n\t}\n\n\t/**\n\t * Set focus on the last cell of the grid\n\t */\n\t@HostListener('keydown.PageDown') moveToLastCellOfGrid(): void {\n\t\tthis.moveToCell('last', 'last');\n\t}\n\n\t/**\n\t * Set focus on the last cell of the row\n\t */\n\t@HostListener('keydown.End') moveToBottomEnd(): void {\n\t\tthis.moveToCell('last', 'current');\n\t}\n\n\t/**\n\t * Set focus on the last cell of the same column of the grid\n\t */\n\t@HostListener('keydown.control.End') moveToBottomControlEnd(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'last');\n\t}\n\n\t/**\n\t * The index of the cell in the row\n\t */\n\tpublic readonly ngxTreeGridCell = input.required();\n\n\t/**\n\t * The index of the row\n\t */\n\tpublic readonly ngxTreeGridCellRow = input.required();\n\n\t/**\n\t * Sets focus on the cell or on the first focusable item in the cell\n\t */\n\tpublic focus(): void {\n\t\t// Iben: Check if any of the child elements are focusable\n\t\tconst focusableElement = this.findFocusableElement();\n\n\t\t// Iben: If no element was focusable, focus on the current element\n\t\tif (!focusableElement) {\n\t\t\tthis.elementRef.nativeElement.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Moves focus to a provided cell in a provided row\n\t *\n\t * @private\n\t * @param cell - The cell we wish to put focus on\n\t * @param row - The row in which the cell is\n\t */\n\tprivate moveToCell(cell: NgxTreeGridCellTarget, row: NgxTreeGridRowTarget): void {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tthis.row.getCell(cell, row)?.focus();\n\t\t});\n\t}\n\n\t/**\n\t * Searches for a focusable element in the cell\n\t */\n\tprivate findFocusableElement(): HTMLElement | undefined {\n\t\tlet result: HTMLElement;\n\n\t\t// Iben: Loop over each first-level element of the children\n\t\tfor (const element of [...this.elementRef.nativeElement.children]) {\n\t\t\tif (!result) {\n\t\t\t\t// Iben: Check if we can focus on the element\n        element.focus();\n\n\t\t\t\t// Iben: If the current active element is the same as the element we focussed, on, we break\n\t\t\t\tif (element === document?.activeElement) {\n\t\t\t\t\tresult = element;\n\t\t\t\t\tthis.hasFocus = true;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: We register the cell and the row through the parent, as the td elements are not rendered within the row initially.\n\t\tconst ngxTreeGridCellRow = this.ngxTreeGridCellRow();\n  this.parent?.registerCell(ngxTreeGridCellRow, this);\n\t\tthis.row = this.parent.getRow(ngxTreeGridCellRow);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTreeGridDirective.html":{"url":"directives/NgxTreeGridDirective.html","title":"directive - NgxTreeGridDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTreeGridDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An overarching directive to handle navigation according to the WCAG treegrid pattern\nSee https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTreeGrid]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGrid\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGridExpandable\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    Private\n                                rows\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getFirstRow\n                            \n                            \n                                    Public\n                                getLastRow\n                            \n                            \n                                    Public\n                                getRow\n                            \n                            \n                                    Public\n                                moveTo\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                    Public\n                                registerCell\n                            \n                            \n                                    Public\n                                registerRow\n                            \n                            \n                                    Public\n                                removeRow\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTreeGrid\n                            \n                            \n                                ngxTreeGridExpandable\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                attr.role\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTreeGrid\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:26\n                            \n                        \n                \n                    \n                        Whether the current item is a treegrid\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTreeGridExpandable\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:31\n                            \n                        \n                \n                    \n                        Whether the treegrid has expandableRows\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        attr.role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"table\" | \"treegrid\"\n\n                    \n                \n                \n                    \n                        Default value : 'table'\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getFirstRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFirstRow()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:69\n                        \n                    \n\n\n            \n                \n                        Returns the first row of the grid\n\n\n                        \n                            Returns :         NgxTreeGridRowDirective\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getLastRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLastRow()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:76\n                        \n                    \n\n\n            \n                \n                        Returns the last row of the grid\n\n\n                        \n                            Returns :         NgxTreeGridRowDirective\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRow(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:56\n                        \n                    \n\n\n            \n                \n                        Returns a row from the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the row\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxTreeGridRowDirective\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        moveTo\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveTo(direction: \"top\" | \"bottom\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:85\n                        \n                    \n\n\n            \n                \n                        Moves the row focus to either the top or the bottom row of the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                        \"top\" | \"bottom\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether we want to go to the top or the bottom of the grid\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:98\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerCell\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerCell(index: number, cell: NgxTreeGridCellDirective)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:94\n                        \n                    \n\n\n            \n                \n                        Registers a a cell to a row of the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                cell\n                                            \n                                                            NgxTreeGridCellDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided cell\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerRow(row: NgxTreeGridRowDirective)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:38\n                        \n                    \n\n\n            \n                \n                        Registers a row to the rows array\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                row\n                                            \n                                                            NgxTreeGridRowDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided row\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeRow(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:47\n                        \n                    \n\n\n            \n                \n                        Removes a registered row from the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the provided row\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGrid\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:26\n                        \n                    \n\n            \n                \n                    Whether the current item is a treegrid\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGridExpandable\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:31\n                        \n                    \n\n            \n                \n                    Whether the treegrid has expandableRows\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"table\" | \"treegrid\"\n\n                    \n                \n                \n                    \n                        Default value : 'table'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.role')\n                        \n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        rows\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTreeGridRowDirective[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:19\n                        \n                    \n\n            \n                \n                    An array of all rows in the treegrid\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostBinding, OnChanges, input } from '@angular/core';\n\nimport { NgxTreeGridRowDirective } from './tree-grid-row.directive';\nimport { NgxTreeGridCellDirective } from './tree-grid.cell.directive';\n\n/**\n * An overarching directive to handle navigation according to the WCAG treegrid pattern\n *\n * See https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n */\n@Directive({\n\tselector: '[ngxTreeGrid]',\n\tstandalone: true,\n})\nexport class NgxTreeGridDirective implements OnChanges {\n\t/**\n\t * An array of all rows in the treegrid\n\t */\n\tprivate rows: NgxTreeGridRowDirective[] = [];\n\n\t@HostBinding('attr.role') role: 'table' | 'treegrid' = 'table';\n\n\t/**\n\t * Whether the current item is a treegrid\n\t */\n\tpublic readonly ngxTreeGrid = input.required();\n\n\t/**\n\t * Whether the treegrid has expandableRows\n\t */\n\tpublic readonly ngxTreeGridExpandable = input.required();\n\n\t/**\n\t * Registers a row to the rows array\n\t *\n\t * @param row - The provided row\n\t */\n\tpublic registerRow(row: NgxTreeGridRowDirective): void {\n\t\tthis.rows.push(row);\n\t}\n\n\t/**\n\t * Removes a registered row from the grid\n\t *\n\t * @param index - The index of the provided row\n\t */\n\tpublic removeRow(index: number): void {\n\t\tthis.rows = this.rows.slice(0, index).concat(this.rows.slice(index + 1));\n\t}\n\n\t/**\n\t * Returns a row from the grid\n\t *\n\t * @param index - The index of the row\n\t */\n\tpublic getRow(index: number): NgxTreeGridRowDirective {\n\t\t// Iben: Early exit if the row is not found\n\t\tif (!this.ngxTreeGrid()) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Iben: Return the row\n\t\treturn this.rows[index];\n\t}\n\n\t/**\n\t * Returns the first row of the grid\n\t */\n\tpublic getFirstRow(): NgxTreeGridRowDirective {\n\t\treturn this.getRow(0);\n\t}\n\n\t/**\n\t * Returns the last row of the grid\n\t */\n\tpublic getLastRow(): NgxTreeGridRowDirective {\n\t\treturn this.getRow(this.rows.length - 1);\n\t}\n\n\t/**\n\t * Moves the row focus to either the top or the bottom row of the grid\n\t *\n\t * @param direction - Whether we want to go to the top or the bottom of the grid\n\t */\n\tpublic moveTo(direction: 'top' | 'bottom') {\n\t\tthis.rows[direction === 'top' ? 0 : this.rows.length - 1]?.focus();\n\t}\n\n\t/**\n\t * Registers a a cell to a row of the grid\n\t *\n\t * @param cell - The provided cell\n\t */\n\tpublic registerCell(index: number, cell: NgxTreeGridCellDirective) {\n\t\tthis.getRow(index)?.registerCell(cell);\n\t}\n\n\tngOnChanges() {\n\t\t// Iben: Set the role based on the tree grid\n\t\tthis.role = this.ngxTreeGrid() ? 'treegrid' : 'table';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxValidators.html":{"url":"classes/NgxValidators.html","title":"class - NgxValidators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxValidators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/validators/validators.ts\n        \n\n\n            \n                Description\n            \n            \n                Exported Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                allOrNothingRequired\n                            \n                            \n                                    Static\n                                atLeastOneRequired\n                            \n                            \n                                    Static\n                                chronologicalDates\n                            \n                            \n                                    Static\n                                dateRangeValidator\n                            \n                            \n                                    Static\n                                decimalsAfterComma\n                            \n                            \n                                    Static\n                                dependedRequired\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        allOrNothingRequired\n                        \n                    \n                \n            \n            \n                \n                        \n                    allOrNothingRequired(control: FormGroup)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:27\n                        \n                    \n\n\n            \n                \n                        A validator to check if all or none of the values of a form group are filled in.\nParticularly useful in situations where a form group field within itself is optional,\nbut all fields are required in case it does get filled in\nReturns an allOrNothingRequiredError error on the provided FormGroup and a required error on the individual controls\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                        FormGroup\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA form group control\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        atLeastOneRequired\n                        \n                    \n                \n            \n            \n                \n                        \n                    atLeastOneRequired(options?: AtLeastOneRequiredValidatorOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:40\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    KeyType\n                            \n                        \n                    \n\n            \n                \n                        A validator to check if at least one of the provided controls of the form group are filled in\nReturns an atLeastOneRequiredError error on the provided FormGroup and a required error on the individual controls\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            AtLeastOneRequiredValidatorOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional object with configuration options, see below params for more info\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        chronologicalDates\n                        \n                    \n                \n            \n            \n                \n                        \n                    chronologicalDates(startControlKey: string, endControlKey: string, format: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:83\n                        \n                    \n\n\n            \n                \n                        A FormGroup validator to check whether a start and end date are chronologically correct\nReturns an incorrectChronologicalDates error on the provided FormGroup and a incorrectChronologicalDate on the endControl\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                startControlKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe key of the control containing the start date value\n\n\n                                            \n                                        \n                                        \n                                                endControlKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe key of the control containing the end date value\n\n\n                                            \n                                        \n                                        \n                                                format\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'yyyy-MM-dd'\n                                            \n\n                                            \n                                                    \nOptional format of the dates provided by the controls, by default yyyy-MM-dd\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        dateRangeValidator\n                        \n                    \n                \n            \n            \n                \n                        \n                    dateRangeValidator(min: string, max: string, format: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:100\n                        \n                    \n\n\n            \n                \n                        Form control validator which validates if a date is between a provided range\nReturns an invalidRange error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                min\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                max\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                format\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'yyyy-MM-dd'\n                                            \n\n                                            \n                                                    \nOptional format used for all 3 dates, by default yyyy-MM-dd\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        decimalsAfterComma\n                        \n                    \n                \n            \n            \n                \n                        \n                    decimalsAfterComma(max: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:70\n                        \n                    \n\n\n            \n                \n                        Validates whether the inputted value has exceeded the maximum amount of decimals after the comma\nReturns an invalidDecimalsAfterComma error on the provided control\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                max\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe maximum number of decimals after the comma\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        dependedRequired\n                        \n                    \n                \n            \n            \n                \n                        \n                    dependedRequired(controls: KeyType[], dependedControlKey: KeyType, matchFunction?: (data?: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:55\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    KeyType\n                            \n                        \n                    \n\n            \n                \n                        FormGroup validator which checks if an array of controls in the control are filled in if the depended control is filled in\nReturns a hasDependedRequiredError error on the provided FormGroup and a required error on the individual controls\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                controls\n                                            \n                                                        KeyType[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn array of controls.\n\n\n                                            \n                                        \n                                        \n                                                dependedControlKey\n                                            \n                                                        KeyType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA control within the group which the other controls depend on.\n\n\n                                            \n                                        \n                                        \n                                                matchFunction\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional function the dependedControl should check\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nimport { allOrNothingRequiredValidator } from './all-or-nothing-required/all-or-nothing-required.validator';\nimport {\n\tAtLeastOneRequiredValidatorOptions,\n\tatLeastOneRequiredValidator,\n} from './at-least-one-required/at-least-one-required.validator';\nimport { chronologicalDatesValidator } from './chronological-dates/chronological-dates.validator';\nimport { dateRangeValidator } from './date-range/date-range.validator';\nimport { decimalsAfterCommaValidator } from './decimals-after-comma/decimals-after-comma.validator';\nimport { dependedRequiredValidator } from './depended-required/depended-required.validator';\n\n/**\n * Exported Class\n */\n\nexport class NgxValidators {\n\t/**\n\t * A validator to check if all or none of the values of a form group are filled in.\n\t * Particularly useful in situations where a form group field within itself is optional,\n\t * but all fields are required in case it does get filled in\n\t *\n\t * Returns an `allOrNothingRequiredError` error on the provided FormGroup and a `required` error on the individual controls\n\t *\n\t * @param control - A form group control\n\t */\n\tstatic allOrNothingRequired(control: FormGroup): ValidationErrors | null {\n\t\treturn allOrNothingRequiredValidator(control);\n\t}\n\n\t/**\n\t * A validator to check if at least one of the provided controls of the form group are filled in\n\t *\n\t * Returns an `atLeastOneRequiredError` error on the provided FormGroup and a `required` error on the individual controls\n\t *\n\t * @param options - An optional object with configuration options, see below params for more info\n\t * @param controlNames - Optional list of controls, if not provided the validator is applied to all controls of the group\n\t * @param conditionalFunction - Optional function the form value needs to return true to for the required to be se\n\t */\n\tstatic atLeastOneRequired(\n\t\toptions?: AtLeastOneRequiredValidatorOptions\n\t): ValidatorFn {\n\t\treturn atLeastOneRequiredValidator(options);\n\t}\n\n\t/**\n\t * FormGroup validator which checks if an array of controls in the control are filled in if the depended control is filled in\n\t *\n\t * Returns a `hasDependedRequiredError` error on the provided FormGroup and a `required` error on the individual controls\n\t *\n\t * @param controls - An array of controls.\n\t * @param dependedControlKey - A control within the group which the other controls depend on.\n\t * @param matchFunction - Optional function the dependedControl should check\n\t */\n\tstatic dependedRequired(\n\t\tcontrols: KeyType[],\n\t\tdependedControlKey: KeyType,\n\t\tmatchFunction?: (data: any) => boolean\n\t): ValidatorFn {\n\t\treturn dependedRequiredValidator(controls, dependedControlKey, matchFunction);\n\t}\n\n\t/**\n\t * Validates whether the inputted value has exceeded the maximum amount of decimals after the comma\n\t *\n\t * Returns an `invalidDecimalsAfterComma` error on the provided control\n\t *\n\t * @param max - The maximum number of decimals after the comma\n\t */\n\tstatic decimalsAfterComma(max: number): ValidatorFn {\n\t\treturn decimalsAfterCommaValidator(max);\n\t}\n\n\t/**\n\t * A FormGroup validator to check whether a start and end date are chronologically correct\n\t *\n\t * Returns an `incorrectChronologicalDates` error on the provided FormGroup and a `incorrectChronologicalDate` on the endControl\n\t *\n\t * @param startControlKey - The key of the control containing the start date value\n\t * @param endControlKey - The key of the control containing the end date value\n\t * @param format - Optional format of the dates provided by the controls, by default yyyy-MM-dd\n\t */\n\tstatic chronologicalDates(\n\t\tstartControlKey: string,\n\t\tendControlKey: string,\n\t\tformat = 'yyyy-MM-dd'\n\t): ValidatorFn {\n\t\treturn chronologicalDatesValidator(startControlKey, endControlKey, format);\n\t}\n\n\t/**\n\t * Form control validator which validates if a date is between a provided range\n\t *\n\t * Returns an `invalidRange` error\n\t *\n\t * @param minDate - Minimum valid date\n\t * @param maxDate - Maximum valid date\n\t * @param format - Optional format used for all 3 dates, by default yyyy-MM-dd\n\t */\n\tstatic dateRangeValidator(min: string, max: string, format = 'yyyy-MM-dd'): ValidatorFn {\n\t\treturn dateRangeValidator(min, max, format);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxWindowService.html":{"url":"injectables/NgxWindowService.html","title":"injectable - NgxWindowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxWindowService\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/core/src/lib/services/window/window.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service used to access the document and window in a SSR safe way\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                currentScrollPosition\n                            \n                            \n                                    Public\n                                currentScrollPosition$\n                            \n                            \n                                    Private\n                                currentScrollPositionSubject$\n                            \n                            \n                                    Private\n                                    Readonly\n                                document\n                            \n                            \n                                    Private\n                                    Readonly\n                                platformId\n                            \n                            \n                                    Public\n                                scrollingUp$\n                            \n                            \n                                    Private\n                                scrollingUpSubject$\n                            \n                            \n                                    Public\n                                width$\n                            \n                            \n                                    Private\n                                widthSubject$\n                            \n                            \n                                    Public\n                                window\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleContentScroll\n                            \n                            \n                                    Public\n                                hasDocument\n                            \n                            \n                                    Public\n                                isBrowser\n                            \n                            \n                                    Public\n                                runInBrowser\n                            \n                            \n                                    Public\n                                scrollTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:61\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleContentScroll\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleContentScroll()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasDocument()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Returns whether there is a document present\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isBrowser\n                        \n                    \n                \n            \n            \n                \n                        \n                    isBrowser()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Returns whether the current platform is a browser\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        runInBrowser\n                        \n                    \n                \n            \n            \n                \n                        \n                    runInBrowser(action: (data: literal type) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:115\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ReturnType\n                            \n                        \n                    \n\n            \n                \n                        Run a provided function only when we're in the browser and not in a server side rendered application\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFunction we want to run in the browser\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ReturnType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        scrollTo\n                        \n                    \n                \n            \n            \n                \n                        \n                    scrollTo(offset: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Scrolls to the provided position of the page\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                offset\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    0\n                                            \n\n                                            \n                                                    \nOffset to which we want to scroll, scrolls to top when no offset is provided\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentScrollPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:56\n                        \n                    \n\n            \n                \n                    Current scroll position after the scroll has ended\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentScrollPosition$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentScrollPositionSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:50\n                        \n                    \n\n            \n                \n                    Observable of the current scroll position after the scroll has ended\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentScrollPositionSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(0)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:35\n                        \n                    \n\n            \n                \n                    Subject to hold the current scroll position\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Document\n\n                    \n                \n                \n                    \n                        Default value : inject(DOCUMENT)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:15\n                        \n                    \n\n            \n                \n                    Instance of the document if exists\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        platformId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(PLATFORM_ID)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:20\n                        \n                    \n\n            \n                \n                    Instance of the platform detector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        scrollingUp$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.scrollingUpSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:45\n                        \n                    \n\n            \n                \n                    Observable to track when the scroll has ended\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scrollingUpSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(true)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:30\n                        \n                    \n\n            \n                \n                    Subject to hold the scroll up event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        width$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.widthSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:40\n                        \n                    \n\n            \n                \n                    Observable to get the window-width, defaults to 1200 when no window is defined\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        widthSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(1200)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:25\n                        \n                    \n\n            \n                \n                    Subject to hold the window-width, defaults to 1200 when no window is defined\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        window\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Window\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:61\n                        \n                    \n\n            \n                \n                    The platforms Window object\n\n                \n            \n\n        \n    \n\n\n    \n\n    \n        NgxNgxWindowService\nThis service uses the DOCUMENT injection-token to provide several methods to access both document and window and related information.\nIt is convenient for using the document or window without breaking SSR.\nProperties\nwidth$\nThe window-service exposes a width$ observable to get the window-width. It defaults to 1200 when no window is defined.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public windowWidth$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.windowWidth$ = this.windowService.width$;\n    }\n}scrollingUp$\nThe window-service exposes a scrollingUp$ observable to know when the scroll has ended.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public scrollingUp$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.scrollingUp$ = this.windowService.scrollingUp$;\n    }\n}currentScrollPosition\nThe window-service exposes a currentScrollPosition property that contains the currentScrollPosition after handleContentScroll has been called.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public currentScrollPosition: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.currentScrollPosition = this.windowService.currentScrollPosition;\n    }\n}window\nThe window-service exposes the window property which is a link to the Window object.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public window$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.window = this.windowService.window;\n    }\n}document\nThe window-service also exposes the document property which is a link to the Document object.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public document$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.document = this.windowService.document;\n    }\n}Methods\nscrollTo\nA scrollTo method is provided to scroll to a position on the page. When there is no window, it will do nothing.\nThe offset is set to 0 by default so triggering the method without a value will scroll to the top of the page.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public somethingHappened(): void {\n        this.windowService.scrollTo(500);\n    }\n}hasDocument\nThe hasDocument-method is provided to check if there is a document.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public aCoolMethod(): void {\n        if (this.windowService.hasDocument()) {\n            // do something that depends on the document.\n        }\n    }\n}isBrowser\nThe isBrowser-method is provided to check if the current platform is a browser.\nIt uses the isPlatformBrowser method with the PLATFORM_ID injection-token internally.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public aCoolMethod(): void {\n        if (this.windowService.isBrowser()) {\n            // do something that depends on the browser.\n        }\n    }\n}runInBrowser\nThe runInBrowser-method is provided to run a specific callback only when in the browser.\nThe callback has access to the window and the document elements provided in its parameters.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public aCoolMethod(): void {\n        this.windowService.runInBrowser(({ browserWindow, browserDocument }) => {\n            // Do something with the browser window or document\n        });\n    }\n}\n    \n\n    \n        import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * A service used to access the document and window in a SSR safe way\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxWindowService {\n\t/**\n\t * Instance of the document if exists\n\t */\n\tprivate readonly document: Document = inject(DOCUMENT);\n\n\t/**\n\t * Instance of the platform detector\n\t */\n\tprivate readonly platformId = inject(PLATFORM_ID);\n\n\t/**\n\t * Subject to hold the window-width, defaults to 1200 when no window is defined\n\t */\n\tprivate widthSubject$: BehaviorSubject = new BehaviorSubject(1200);\n\n\t/**\n\t * Subject to hold the scroll up event\n\t */\n\tprivate scrollingUpSubject$: BehaviorSubject = new BehaviorSubject(true);\n\n\t/**\n\t * Subject to hold the current scroll position\n\t */\n\tprivate currentScrollPositionSubject$: BehaviorSubject = new BehaviorSubject(0);\n\n\t/**\n\t * Observable to get the window-width, defaults to 1200 when no window is defined\n\t */\n\tpublic width$: Observable = this.widthSubject$.asObservable();\n\n\t/**\n\t * Observable to track when the scroll has ended\n\t */\n\tpublic scrollingUp$: Observable = this.scrollingUpSubject$.asObservable();\n\n\t/**\n\t * Observable of the current scroll position after the scroll has ended\n\t */\n\tpublic currentScrollPosition$: Observable =\n\t\tthis.currentScrollPositionSubject$.asObservable();\n\n\t/**\n\t * Current scroll position after the scroll has ended\n\t */\n\tpublic currentScrollPosition: number = 0;\n\n\t/**\n\t * The platforms Window object\n\t */\n\tpublic window: Window;\n\n\tconstructor() {\n\t\t// Iben: Handle the initial setup of the service\n\t\tif (this.isBrowser() && this.hasDocument()) {\n\t\t\t// Iben: Set the window using the default view\n\t\t\tthis.window = this.document.defaultView as Window;\n\n\t\t\t// Iben: Listen to the scroll event of the document\n\t\t\tthis.document.addEventListener('scroll', this.handleContentScroll.bind(this));\n\n\t\t\t// Iben: Set the current window width\n\t\t\tthis.widthSubject$.next(this.window.innerWidth);\n\n\t\t\t// Iben: Listen to the resize event and update the window width\n\t\t\tthis.window.addEventListener('resize', () => {\n\t\t\t\tif (this.window.innerWidth && this.widthSubject$.getValue()) {\n\t\t\t\t\tthis.widthSubject$.next(this.window.innerWidth);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Scrolls to the provided position of the page\n\t *\n\t * @param offset - Offset to which we want to scroll, scrolls to top when no offset is provided\n\t */\n\tpublic scrollTo(offset: number = 0): void {\n\t\tif (!this.window) {\n\t\t\treturn;\n\t\t}\n\t\tthis.window.scrollTo(0, offset);\n\t}\n\n\t/**\n\t * Returns whether there is a document present\n\t */\n\tpublic hasDocument(): boolean {\n\t\treturn !!this.document;\n\t}\n\n\t/**\n\t * Returns whether the current platform is a browser\n\t */\n\tpublic isBrowser(): boolean {\n\t\treturn isPlatformBrowser(this.platformId);\n\t}\n\n\t/**\n\t * Run a provided function only when we're in the browser and not in a server side rendered application\n\t *\n\t * @param action - Function we want to run in the browser\n\t */\n\tpublic runInBrowser(\n\t\taction: (data: { browserWindow: Window; browserDocument: Document }) => ReturnType\n\t): ReturnType {\n\t\tif (this.isBrowser()) {\n\t\t\treturn action({\n\t\t\t\tbrowserWindow: this.window,\n\t\t\t\tbrowserDocument: this.document,\n\t\t\t});\n\t\t}\n\n\t\tconsole.warn('Browser depended function has not run.');\n\n\t\treturn undefined as ReturnType;\n\t}\n\n\t/**\n\t *\n\t *\n\t * @private\n\t * @memberof NgxWindowService\n\t */\n\tprivate handleContentScroll(): void {\n\t\t// Iben: Update the scrollUp subject\n\t\tif (window.scrollY > this.currentScrollPosition) {\n\t\t\tthis.scrollingUpSubject$.next(false);\n\t\t} else {\n\t\t\tthis.scrollingUpSubject$.next(true);\n\t\t}\n\n\t\t// Iben: Update the current scroll position\n\t\tthis.currentScrollPosition = window.scrollY \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpecStoreAssets.html":{"url":"interfaces/SpecStoreAssets.html","title":"interface - SpecStoreAssets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpecStoreAssets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-assets.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            StoreFlowAssets\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            channel\n                                        \n                                \n                                \n                                        \n                                            darkMode\n                                        \n                                \n                                \n                                        \n                                            subscriberCount\n                                        \n                                \n                                \n                                        \n                                            videos\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        channel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        channel:         BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        darkMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        darkMode:     BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscriberCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subscriberCount:     BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        videos\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        videos:         EntityStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseStoreAssets, EntityStoreAssets, StoreFlowAssets } from '../interfaces';\nimport { createBaseStoreAssets, createEntityAdapterStoreAssets, createStoreAssets } from '../utils';\n\nexport type DataType = { id: string; url: string };\n\ninterface SpecStoreAssets extends StoreFlowAssets {\n\tchannel: BaseStoreAssets;\n\tvideos: EntityStoreAssets;\n\tsubscriberCount: BaseStoreAssets;\n\tdarkMode: BaseStoreAssets;\n}\n\nexport const StoreSlice = 'YouTube';\n\nexport const { actions, reducers, selectors } = createStoreAssets(StoreSlice, [\n\t{\n\t\tsubSlice: 'channel',\n\t\tgenerator: createBaseStoreAssets,\n\t},\n\t{\n\t\tsubSlice: 'videos',\n\t\tgenerator: createEntityAdapterStoreAssets,\n\t},\n\t{\n\t\tsubSlice: 'subscriberCount',\n\t\tgenerator: createBaseStoreAssets,\n\t\tinitialValue: 0,\n\t},\n\t{\n\t\tsubSlice: 'darkMode',\n\t\tgenerator: createBaseStoreAssets,\n\t\tinitialValue: false,\n\t},\n]);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpecStoreService.html":{"url":"injectables/SpecStoreService.html","title":"injectable - SpecStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SpecStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStoreService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                channel$\n                            \n                            \n                                    Public\n                                    Readonly\n                                channelError$\n                            \n                            \n                                    Public\n                                    Readonly\n                                channelErrorMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                channelLoading$\n                            \n                            \n                                    Public\n                                    Readonly\n                                darkMode$\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpClient\n                            \n                            \n                                    Public\n                                    Readonly\n                                subscriberCount$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videos$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videosError$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videosErrorMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videosLoading$\n                            \n                            \n                                    Private\n                                stateWrapper\n                            \n                            \n                                    Protected\n                                    Readonly\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clearChannel\n                            \n                            \n                                    Public\n                                clearVideos\n                            \n                            \n                                    Public\n                                fetchChannel\n                            \n                            \n                                    Public\n                                fetchVideos\n                            \n                            \n                                    Public\n                                getChannel\n                            \n                            \n                                    Public\n                                getVideos\n                            \n                            \n                                    Public\n                                selectErrorFromStore\n                            \n                            \n                                    Public\n                                selectErrorMessageFromStore\n                            \n                            \n                                    Public\n                                selectFromStore\n                            \n                            \n                                    Public\n                                selectLoadingFromStore\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearVideos()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:65\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchVideos()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVideos(actionType: \"set\" | \"add\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                actionType\n                                            \n                                                        \"set\" | \"add\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'set'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:60\n\n                        \n                    \n\n\n            \n                \n                        Select the error state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorMessageFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorMessageFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:69\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ErrorMessage\n                            \n                        \n                    \n\n            \n                \n                        Select the error message state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:42\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    StoreItem\n                            \n                        \n                    \n\n            \n                \n                        Select the data of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectLoadingFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectLoadingFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:51\n\n                        \n                    \n\n\n            \n                \n                        Select the loading state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channel$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channelError$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channelErrorMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorMessageFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channelLoading$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectLoadingFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        darkMode$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(selectors.darkMode)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient\n\n                    \n                \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        subscriberCount$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(\n\t\tselectors.subscriberCount\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videos$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(\n\t\tselectors.videos\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videosError$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorFromStore(selectors.videos)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videosErrorMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorMessageFromStore(\n\t\tselectors.videos\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videosLoading$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectLoadingFromStore(\n\t\tselectors.videos\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StoreState\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:13\n\n                        \n                    \n\n            \n                \n                    A wrapper object for the store state selectors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:15\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { NgxStoreService } from '../abstracts';\nimport { dispatchDataToStore } from '../utils';\n\nimport { DataType, actions, selectors } from './store-assets';\n\n@Injectable()\nexport class SpecStoreService extends NgxStoreService {\n\tpublic readonly channel$: Observable = this.selectFromStore(\n\t\tselectors.channel\n\t);\n\tpublic readonly channelLoading$: Observable = this.selectLoadingFromStore(\n\t\tselectors.channel\n\t);\n\tpublic readonly channelError$: Observable = this.selectErrorFromStore(\n\t\tselectors.channel\n\t);\n\tpublic readonly channelErrorMessage$: Observable = this.selectErrorMessageFromStore(\n\t\tselectors.channel\n\t);\n\n\tpublic readonly videos$: Observable = this.selectFromStore(\n\t\tselectors.videos\n\t);\n\tpublic readonly videosLoading$: Observable = this.selectLoadingFromStore(\n\t\tselectors.videos\n\t);\n\tpublic readonly videosError$: Observable = this.selectErrorFromStore(selectors.videos);\n\tpublic readonly videosErrorMessage$: Observable = this.selectErrorMessageFromStore(\n\t\tselectors.videos\n\t);\n\tpublic readonly subscriberCount$: Observable = this.selectFromStore(\n\t\tselectors.subscriberCount\n\t);\n\tpublic readonly darkMode$: Observable = this.selectFromStore(selectors.darkMode);\n\n\tprivate readonly httpClient: HttpClient = inject(HttpClient);\n\n\tpublic getChannel(): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.channel,\n\t\t\tthis.httpClient.get('test'),\n\t\t\tthis.store\n\t\t).pipe(switchMap(() => this.channel$));\n\t}\n\n\tpublic clearChannel(): void {\n\t\tthis.store.dispatch(actions.channel.clear());\n\t}\n\n\tpublic getVideos(actionType: 'set' | 'add' = 'set'): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.videos,\n\t\t\tthis.httpClient.get('test'),\n\t\t\tthis.store,\n\t\t\tactionType\n\t\t).pipe(switchMap(() => this.videos$));\n\t}\n\n\tpublic clearVideos(): void {\n\t\tthis.store.dispatch(actions.videos.clear());\n\t}\n\n\tpublic fetchChannel() {\n\t\tthis.store.dispatch(actions.channel.effects.set({ payload: false }));\n\t}\n\n\tpublic fetchVideos() {\n\t\tthis.store.dispatch(actions.videos.effects.set({ payload: 'test' }));\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StoreAssetsOptions.html":{"url":"interfaces/StoreAssetsOptions.html","title":"interface - StoreAssetsOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StoreAssetsOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-generator.ts\n        \n\n\n            \n                Description\n            \n            \n                These objects will be used as a blueprint for our store slices\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            generator\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            initialValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            selectId\n                                        \n                                \n                                \n                                        \n                                            subSlice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        generator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        generator:      | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | \n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        initialValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialValue:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectId:     IdSelector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IdSelector\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subSlice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subSlice:     SliceKey\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SliceKey\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\nimport { ActionReducer, Action } from '@ngrx/store';\n\nimport { BaseStoreAssets } from './base-store';\nimport { EntityStoreAssets } from './entity-store-assets';\nimport {\n\tBaseStoreAssetsGeneratorOptions,\n\tEntityStoreAssetsGeneratorOptions,\n} from './store-assets-generator-options';\n\n/**\n * These objects will be used as a blueprint for our store slices\n *\n * @template SliceKey - The keys of our store\n */\nexport interface StoreAssetsOptions {\n\tsubSlice: SliceKey;\n\tgenerator:\n\t\t| ((options: EntityStoreAssetsGeneratorOptions) => EntityStoreAssets)\n\t\t| ((options: BaseStoreAssetsGeneratorOptions) => BaseStoreAssets);\n\n\tselectId?: IdSelector;\n\tinitialValue?: any;\n}\n\n// Iben: The base type for our flow assets which we'll pass to the create generator\nexport type StoreFlowAssets = Record | BaseStoreAssets>;\n\n// Iben: Type to extract the selectors from the provided ResultType, so that we know if we have a BaseStoreSelector or an EntityStoreSelector, this way\n// we get correct typing in our services\nexport type NgxStoreSelectors = {\n\t[Key in keyof ResultType]: ResultType[Key]['selectors'];\n};\n\n// Iben: Type to extract the actions from the provided ResultType, so that we know if we have a BaseStoreAction or an EntityStoreAction, this way\n// we get correct typing in our services\ntype NgxStoreActions = {\n\t[Key in keyof ResultType]: ResultType[Key]['actions'];\n};\n\n/**\n * The typing of the store of all sub slices\n *\n * @template ResultType - The typing we wish to see for our actions, reducers and selectors\n */\nexport interface NgxStore {\n\tselectors: NgxStoreSelectors;\n\tactions: NgxStoreActions;\n\treducers: ActionReducer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StoreEffects.html":{"url":"injectables/StoreEffects.html","title":"injectable - StoreEffects","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StoreEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/effects.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                actions$\n                            \n                            \n                                    Private\n                                    Readonly\n                                effectsService\n                            \n                            \n                                    Public\n                                fetchChannel$\n                            \n                            \n                                    Public\n                                fetchVideos$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        actions$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Actions\n\n                    \n                \n                \n                    \n                        Default value : inject(Actions)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        effectsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EffectsService\n\n                    \n                \n                \n                    \n                        Default value : inject(EffectsService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchChannel$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(\n\t\t\t\tactions.channel,\n\t\t\t\t'set',\n\t\t\t\tthis.effectsService.fetchChannel\n\t\t\t)\n\t\t);\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchVideos$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(actions.videos, 'set', this.effectsService.fetchVideos)\n\t\t);\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:24\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { Actions, createEffect } from '@ngrx/effects';\n\nimport { handleEffect } from '../operators';\n\nimport { EffectsService } from './effects.service';\nimport { DataType, actions } from './store-assets';\n\n@Injectable()\nexport class StoreEffects {\n\tprivate readonly actions$: Actions = inject(Actions);\n\tprivate readonly effectsService: EffectsService = inject(EffectsService);\n\n\tpublic fetchChannel$ = createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(\n\t\t\t\tactions.channel,\n\t\t\t\t'set',\n\t\t\t\tthis.effectsService.fetchChannel\n\t\t\t)\n\t\t);\n\t});\n\n\tpublic fetchVideos$ = createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(actions.videos, 'set', this.effectsService.fetchVideos)\n\t\t);\n\t});\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StoreState.html":{"url":"interfaces/StoreState.html","title":"interface - StoreState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StoreState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-state.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            StoreFlowAssets\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            isCompleted\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         EntityStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isCompleted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isCompleted:     BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of, throwError, switchMap } from 'rxjs';\n\nimport { NgxStoreService } from '../abstracts';\nimport { BaseStoreAssets, EntityStoreAssets, StoreFlowAssets } from '../interfaces';\nimport {\n\tcreateBaseStoreAssets,\n\tcreateEntityAdapterStoreAssets,\n\tcreateStoreAssets,\n\tdispatchDataToStore,\n} from '../utils';\n\ninterface StoreState extends StoreFlowAssets {\n\tdata: EntityStoreAssets;\n\tisCompleted: BaseStoreAssets;\n}\n\nexport const { actions, reducers, selectors } = createStoreAssets('state', [\n\t{\n\t\tsubSlice: 'data',\n\t\tgenerator: createEntityAdapterStoreAssets,\n\t\tselectId: (item) => item,\n\t},\n\t{\n\t\tsubSlice: 'isCompleted',\n\t\tgenerator: createBaseStoreAssets,\n\t},\n]);\n\n@Injectable()\nexport class StoreStateService extends NgxStoreService {\n\tconstructor() {\n\t\tsuper(selectors);\n\t}\n\n\tsetWithError(): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.data,\n\t\t\tthrowError(() => new Error('This is an error')),\n\t\t\tthis.store\n\t\t).pipe(switchMap(() => throwError(() => new Error('This is an error'))));\n\t}\n\n\tsetData(payload: string[]): Observable {\n\t\treturn dispatchDataToStore(actions.data, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.data$)\n\t\t);\n\t}\n\n\tsetCompleted(payload: boolean): Observable {\n\t\treturn dispatchDataToStore(actions.isCompleted, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.isCompleted$)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StoreStateService.html":{"url":"injectables/StoreStateService.html","title":"injectable - StoreStateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StoreStateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-state.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStoreService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stateWrapper\n                            \n                            \n                                    Protected\n                                    Readonly\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setCompleted\n                            \n                            \n                                setData\n                            \n                            \n                                setWithError\n                            \n                            \n                                    Public\n                                selectErrorFromStore\n                            \n                            \n                                    Public\n                                selectErrorMessageFromStore\n                            \n                            \n                                    Public\n                                selectFromStore\n                            \n                            \n                                    Public\n                                selectLoadingFromStore\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:31\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setCompleted\n                        \n                    \n                \n            \n            \n                \nsetCompleted(payload: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setData\n                        \n                    \n                \n            \n            \n                \nsetData(payload: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setWithError\n                        \n                    \n                \n            \n            \n                \nsetWithError()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:60\n\n                        \n                    \n\n\n            \n                \n                        Select the error state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorMessageFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorMessageFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:69\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ErrorMessage\n                            \n                        \n                    \n\n            \n                \n                        Select the error message state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:42\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    StoreItem\n                            \n                        \n                    \n\n            \n                \n                        Select the data of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectLoadingFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectLoadingFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:51\n\n                        \n                    \n\n\n            \n                \n                        Select the loading state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StoreState\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:13\n\n                        \n                    \n\n            \n                \n                    A wrapper object for the store state selectors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:15\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of, throwError, switchMap } from 'rxjs';\n\nimport { NgxStoreService } from '../abstracts';\nimport { BaseStoreAssets, EntityStoreAssets, StoreFlowAssets } from '../interfaces';\nimport {\n\tcreateBaseStoreAssets,\n\tcreateEntityAdapterStoreAssets,\n\tcreateStoreAssets,\n\tdispatchDataToStore,\n} from '../utils';\n\ninterface StoreState extends StoreFlowAssets {\n\tdata: EntityStoreAssets;\n\tisCompleted: BaseStoreAssets;\n}\n\nexport const { actions, reducers, selectors } = createStoreAssets('state', [\n\t{\n\t\tsubSlice: 'data',\n\t\tgenerator: createEntityAdapterStoreAssets,\n\t\tselectId: (item) => item,\n\t},\n\t{\n\t\tsubSlice: 'isCompleted',\n\t\tgenerator: createBaseStoreAssets,\n\t},\n]);\n\n@Injectable()\nexport class StoreStateService extends NgxStoreService {\n\tconstructor() {\n\t\tsuper(selectors);\n\t}\n\n\tsetWithError(): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.data,\n\t\t\tthrowError(() => new Error('This is an error')),\n\t\t\tthis.store\n\t\t).pipe(switchMap(() => throwError(() => new Error('This is an error'))));\n\t}\n\n\tsetData(payload: string[]): Observable {\n\t\treturn dispatchDataToStore(actions.data, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.data$)\n\t\t);\n\t}\n\n\tsetCompleted(payload: boolean): Observable {\n\t\treturn dispatchDataToStore(actions.isCompleted, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.isCompleted$)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TableCellTemplate.html":{"url":"interfaces/TableCellTemplate.html","title":"interface - TableCellTemplate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TableCellTemplate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/components/table/ngx-table.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cellClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cellTemplate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footerTemplate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headerTemplate\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cellClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cellClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cellTemplate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cellTemplate:     TemplateRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footerTemplate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footerTemplate:     TemplateRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headerTemplate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headerTemplate:     TemplateRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CdkTableModule } from '@angular/cdk/table';\nimport { NgTemplateOutlet, NgClass, NgComponentOutlet } from '@angular/common';\nimport {\n\tAfterContentChecked,\n\tChangeDetectionStrategy,\n\tChangeDetectorRef,\n\tComponent,\n\tHostBinding,\n\tInject,\n\tOnDestroy,\n\tOnInit,\n\tTemplateRef,\n\tWritableSignal,\n\tinject,\n\tsignal,\n\tinput,\n\tOutputEmitterRef,\n\toutput,\n\tcontentChildren,\n\tcontentChild,\n\teffect,\n\tInputSignal,\n} from '@angular/core';\nimport {\n\tControlValueAccessor,\n\tFormControl,\n\tFormRecord,\n\tNG_VALUE_ACCESSOR,\n\tReactiveFormsModule,\n} from '@angular/forms';\nimport { isEmpty } from 'lodash';\nimport { Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\nimport { NgxTreeGrid } from '../../directives';\nimport {\n\tNgxAriaSortPipe,\n\tNgxTableHasObserversPipe,\n\tNgxTableShowHeaderPipe,\n\tNgxTableSortIconPipe,\n} from '../../pipes';\nimport {\n\tHideHeaderRowOption,\n\tNgxTableConfiguration,\n\tNgxTableConfigurationToken,\n\tShowDetailRowOption,\n} from '../../tokens';\nimport { NgxTableCypressDataTags, NgxTableSortEvent } from '../../types';\nimport {\n\tgenerateNgxTableForm,\n\thandleNgxTableHeaderValueChanges,\n\thandleNgxTableValueChanges,\n\tresetNgxTableForm,\n\twriteNgxTableValue,\n} from '../../utils';\nimport { NgxAbstractTableCellDirective } from '../cell';\n\ninterface TableCellTemplate {\n\theaderTemplate?: TemplateRef;\n\tcellTemplate?: TemplateRef;\n\tfooterTemplate?: TemplateRef;\n\tcellClass?: string;\n}\n\n@Component({\n\tselector: 'ngx-table',\n\ttemplateUrl: './ngx-table.component.html',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tstyleUrls: ['./ngx-table.component.scss'],\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tmulti: true,\n\t\t\tuseExisting: NgxTableComponent,\n\t\t},\n\t],\n\timports: [\n\t\tCdkTableModule,\n\t\tNgTemplateOutlet,\n\t\tNgClass,\n\t\tReactiveFormsModule,\n\t\tNgxTableHasObserversPipe,\n\t\tNgxTableSortIconPipe,\n\t\tNgxTableShowHeaderPipe,\n\t\tNgxAriaSortPipe,\n\t\tNgxTreeGrid,\n\t\tNgComponentOutlet,\n\t],\n\thost: {\n\t\t'class.ngx-table-loading': 'loading()',\n\t},\n})\nexport class NgxTableComponent\n\timplements AfterContentChecked, ControlValueAccessor, OnInit, OnDestroy\n{\n\tprivate cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\t@Inject(NgxTableConfigurationToken)\n\tpublic readonly ngxTableConfiguration: NgxTableConfiguration = inject(\n\t\tNgxTableConfigurationToken,\n\t\t{ optional: true }\n\t);\n\t/**\n\t * Default class that will be put on the ngx-table component\n\t */\n\t@HostBinding('class') public readonly componentClass =\n\t\tthis.ngxTableConfiguration?.ngxTableClass || '';\n\n\t/**\n\t * A subject to handle the observables when the component gets destroyed\n\t */\n\tprivate readonly destroyed$ = new Subject();\n\t/**\n\t * onTouch function for the control value accessor\n\t */\n\tprivate onTouch: Function = () => {};\n\t/**\n\t * onChanged function for the control value accessor\n\t */\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tprivate onChanged: Function = (_: any) => {};\n\n\t/**\n\t * Whether or not the form was generated\n\t */\n\tprivate formGenerated: WritableSignal = signal(false);\n\n\t/**\n\t * The loading state of our table\n\t */\n\tpublic loading = input(false);\n\n\t/**\n\t * An optional set of data we pass if the loading state is shown\n\t */\n\tpublic loadingData = input();\n\n\t/**\n\t * An optional set of data we pass if the empty state is shown\n\t */\n\tpublic emptyData = input();\n\n\t/**\n\t * The current sorting event\n\t */\n\tpublic currentSortingEvent: WritableSignal = signal(undefined);\n\n\t/**\n\t * Keeps a record with the column and it's templates\n\t */\n\tpublic tableCellTemplateRecord: WritableSignal> = signal({});\n\t/**\n\t * Keeps a record of which columns are sortable\n\t */\n\tpublic sortableTableCellRecord: WritableSignal> =\n\t\tsignal({});\n\t/**\n\t * Keeps a record of which cells have a cypress tag\n\t */\n\tpublic tableCypressRecord: WritableSignal> = signal({});\n\t/**\n\t * Keeps a record of which cells are editable\n\t */\n\tpublic editableTableCellRecord: WritableSignal> =\n\t\tsignal({});\n\n\t/**\n\t * A set with all the open rows\n\t */\n\t// Iben: Sets are not supported in signals as signals are no longer mutable, hence why we keep them as is\n\tpublic openRows: Set = new Set();\n\n\t/**\n\t * A FormGroup that adds a control for each row\n\t */\n\tpublic readonly rowsFormGroup = new FormRecord>({});\n\n\t/**\n\t * A control for the select all option in the header of the table\n\t */\n\tpublic readonly headerControl = new FormControl();\n\n\t/**\n\t * A control for when we use a radio button\n\t */\n\tpublic readonly radioControl = new FormControl();\n\n\t/**\n\t * A list of all defined columns\n\t */\n\tpublic definedColumns: WritableSignal = signal([]);\n\n\t/**\n\t * Whether or not there was a footer template set somewhere in one of the cells\n\t */\n\tpublic hasFooterTemplates: WritableSignal = signal(false);\n\n\t/**\n\t * Whether or not there was a row selected\n\t */\n\tpublic selectedRow: WritableSignal = signal(undefined);\n\n\t/**\n\t * An array of table columns\n\t */\n\tpublic tableColumns: WritableSignal = signal([]);\n\n\t/**\n\t * The currently focussed row\n\t */\n\tpublic focussedRow: string;\n\n\t/**\n\t * The currently focussed cell\n\t */\n\tpublic focussedCell: string;\n\n\t/**\n\t * A QueryList of all the table cell templates\n\t */\n\tpublic readonly tableCellTemplates = contentChildren(NgxAbstractTableCellDirective);\n\n\t/**\n\t * A template to provide a detail row\n\t */\n\tpublic readonly detailRowTemplate = contentChild>('detailRowTmpl');\n\n\t/**\n\t * A template to provide an empty view\n\t */\n\tpublic readonly emptyTemplate = contentChild>('emptyTmpl');\n\n\t/**\n\t * A template to provide a loading view\n\t */\n\tpublic readonly loadingTemplate = contentChild>('loadingTmpl');\n\n\t/**\n\t * A template to provide a checkbox template\n\t */\n\n\tpublic checkboxTemplate = contentChild>('checkboxTmpl');\n\n\t/**\n\t * A template to provide a radio button template\n\t */\n\n\tpublic radioTemplate = contentChild>('radioTmpl');\n\n\t/**\n\t * A template to provide a sort template\n\t */\n\n\tpublic sortTemplate = contentChild>('sortTmpl');\n\n\t/**\n\t * A template to provide a open state template\n\t */\n\tpublic readonly openRowStateTemplate = contentChild>('openRowStateTmpl');\n\n\t/**\n\t * A list of all column names we want to represent in the table\n\t */\n\tpublic readonly columns = input([]);\n\n\t/**\n\t * An optional list of all columns we wish to attribute to row actions, which are sorted to the end of the row by default\n\t */\n\tpublic readonly actions = input([]);\n\n\t/**\n\t * The data we wish to render in the table\n\t */\n\tpublic readonly data = input([]);\n\n\t/**\n\t * An optional property that defines whether multiple rows can be open at once.\n\t * By default, this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly allowMultipleOpenRows = input(\n\t\tthis.ngxTableConfiguration?.allowMultipleRowsOpen || false\n\t);\n\n\t/**\n\t * Whether or not rows in the table are selectable\n\t */\n\tpublic readonly selectable = input(false);\n\n\t/**\n\t * In case the rows are selectable, we can pass a key we want to use as return value instead of the index of the row\n\t */\n\tpublic readonly selectableKey = input();\n\n\t/**\n\t * In case the rows are selectable, we pass whether we want a radio button or a checkbox. By default, this is a checkbox\n\t */\n\tpublic readonly selectableType = input('checkbox');\n\n\t/**\n\t * In case the rows are selectable, we can determine whether we want to reset the form based on new data. Setting this to false will add new controls to the FormGroup; but will not remove the earlier controls from the form.\n\t * This is a useful feature for when the data is being filtered or new data is added through a load more mechanic\n\t *\n\t * By default, this is true. This default cannot be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly resetFormOnNewData = input(true);\n\n\t/**\n\t * SETTER\n\t *\n\t * The current sorting event.\n\t */\n\tpublic currentSorting: InputSignal = input();\n\n\t/**\n\t * An optional property to define whether we want to add a class to the currently opened row.\n\t * By default this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly showSelectedOpenRow = input(\n\t\tthis.ngxTableConfiguration?.showSelectedOpenRow || false\n\t);\n\n\t/**\n\t * An optional class to add to the rows of the table\n\t */\n\tpublic readonly rowClass = input();\n\n\t/**\n\t * An optional key that can be used in the data in order to highlight a row. If this property is present and true, the highlight class will be provided.\n\t * By default, this key is ngx-highlight. The default can be overwritten in the NgxTableConfiguration\n\t */\n\tpublic readonly highlightKey = input(\n\t\tthis.ngxTableConfiguration?.highlightKey || 'ngx-highlight'\n\t);\n\n\t/**\n\t * An optional property to define whether we want to show a visual indicator of the open and closed state of a detail row.\n\t * By default this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly showOpenRowState = input(\n\t\tthis.ngxTableConfiguration?.showOpenRowState || false\n\t);\n\n\t/**\n\t * An optional property to define the default open state of the detail row.\n\t * By default this is 'on-click'. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly showDetailRow = input(\n\t\tthis.ngxTableConfiguration?.showDetailRow || 'on-click'\n\t);\n\n\t/**\n\t * An optional property to define whether we want to emit the row when there's only one item in the table and the showDetailRow is set to `on-single-item`\n\t * By default this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly emitValueOnSingleItem = input(\n\t\tthis.ngxTableConfiguration?.showDetailRow === 'on-single-item' &&\n\t\t\tthis.ngxTableConfiguration?.emitValueOnSingleItem\n\t);\n\n\t/**\n\t * An optional key to open a row by default upon rendering.\n\t */\n\tpublic defaultRowOpen: InputSignal = input();\n\n\t/**\n\t * An optional property to define whether we want the header to be hidden in certain cases.\n\t * By default this is never. The default can be overwritten in the NgxTableConfiguration\n\t */\n\tpublic readonly hideHeaderWhen = input(\n\t\tthis.ngxTableConfiguration?.hideHeaderWhen || 'never'\n\t);\n\n\t/**\n\t * Returns the data of the row that was clicked\n\t */\n\tpublic rowClicked: OutputEmitterRef = output();\n\n\tconstructor() {\n\t\teffect(() => {\n\t\t\tthis.currentSortingEvent.set(this.currentSorting());\n\t\t\tthis.handleCurrentSort(this.currentSorting());\n\t\t});\n\n\t\teffect(() => {\n\t\t\tconst openedIndex = this.defaultRowOpen();\n\t\t\t// Wouter: The function findIndex is most likely to be used. It returns\n\t\t\t// -1 if the index was not found.\n\t\t\tif (openedIndex  {\n\t\t\t\tthis.handleRowClicked(this.data()[openedIndex], openedIndex);\n\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t});\n\t\t});\n\n\t\t// Iben: Setup the form when the data or selectable state changes\n\t\teffect(() => {\n\t\t\tif (this.data() && this.selectable()) {\n\t\t\t\t// Iben: If no form was generated, first generate the form we need\n\t\t\t\tif (!this.formGenerated()) {\n\t\t\t\t\tgenerateNgxTableForm(this.rowsFormGroup, this.data(), this.selectableKey());\n\n\t\t\t\t\tthis.formGenerated.set(true);\n\t\t\t\t} else {\n\t\t\t\t\t// Iben: If a form was generated, reset it as required\n\t\t\t\t\tresetNgxTableForm(\n\t\t\t\t\t\tthis.rowsFormGroup,\n\t\t\t\t\t\tthis.data(),\n\t\t\t\t\t\tthis.selectableKey(),\n\t\t\t\t\t\tthis.resetFormOnNewData()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\teffect(() => {\n\t\t\tif (this.data()) {\n\t\t\t\t// Wouter: Deselect any row that was selected to prevent faulty class toggle.\n\t\t\t\tthis.selectedRow.set(undefined);\n\t\t\t}\n\t\t});\n\n\t\teffect(() => {\n\t\t\t// Iben: Add the selectableColumn if the rows are selectable and add an open row state when needed\n\t\t\tif (this.selectable() || this.columns() || this.showOpenRowState()) {\n\t\t\t\tthis.handleRowColumns();\n\t\t\t}\n\t\t});\n\n\t\t// Iben: If there's only one item in the data and we open the detail row by default, we emit the row clicked value\n\t\teffect(() => {\n\t\t\tif (\n\t\t\t\tthis.emitValueOnSingleItem() &&\n\t\t\t\tthis.data()?.length === 1 &&\n\t\t\t\tthis.showDetailRow() === 'on-single-item'\n\t\t\t) {\n\t\t\t\tthis.handleRowClicked(this.data()[0], 0);\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Reset the open rows if the amount of items are no longer the same\n\t\teffect(() => {\n\t\t\t// Wouter: If all detail rows should be shown by default, we add all indices to the open rows\n\t\t\tif (this.showDetailRow() === 'always') {\n\t\t\t\tthis.openRows = new Set(this.data().map((_, index) => index));\n\t\t\t} else if (\n\t\t\t\t// Wouter: If the detail row should be shown on single item and there is only one item, we add the first index to the open rows\n\t\t\t\tthis.showDetailRow() === 'on-single-item' &&\n\t\t\t\tthis.data().length === 1\n\t\t\t) {\n\t\t\t\tthis.openRows = new Set([0]);\n\t\t\t} else {\n\t\t\t\t// Iben: If no detail row should be shown due to global config, we reset the open rows\n\t\t\t\tthis.openRows = new Set();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * WriteValue method for the value accessor\n\t *\n\t * @param value - The value patched to the control\n\t */\n\tpublic writeValue(value: string[] | unknown): void {\n\t\t// Iben: In case we're using radio buttons, we set the radio control and early exit\n\t\tif (this.selectableType() === 'radio') {\n\t\t\tthis.radioControl.patchValue(value, { emitEvent: false });\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Reset the form\n\t\tthis.rowsFormGroup.reset({}, { emitEvent: false });\n\n\t\t// Iben: Early exit if the value is empty or not an array\n\t\tif (!Array.isArray(value) || value.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Patch the value to the form\n\t\tthis.rowsFormGroup.patchValue(writeNgxTableValue(value, this.selectableKey()), {\n\t\t\temitEvent: false,\n\t\t});\n\n\t\t// Wouter: Some rows are not selected, so uncheck the header checkbox\n\t\tif (\n\t\t\tObject.values(this.rowsFormGroup.controls).some(\n\t\t\t\t(control: FormControl) => !control?.value\n\t\t\t)\n\t\t) {\n\t\t\tthis.headerControl.patchValue(false, { emitEvent: false });\n\t\t\treturn;\n\t\t}\n\n\t\t// Wouter: Set the header checkbox to `checked`, because all rows are selected\n\t\tthis.headerControl.patchValue(true, { emitEvent: false });\n\t}\n\n\t/**\n\t * Register the onChange function\n\t */\n\tpublic registerOnChange(fn: any): void {\n\t\tthis.onChanged = fn;\n\t}\n\n\t/**\n\t * Register the onTouched function\n\t */\n\tpublic registerOnTouched(fn: any): void {\n\t\tthis.onTouch = fn;\n\t}\n\n\t/**\n\t * Handle the disabled state of the form\n\t *\n\t * @param  isDisabled - Whether or not the form is disabled\n\t */\n\tpublic setDisabledState?(isDisabled: boolean): void {\n\t\tif (isDisabled) {\n\t\t\tthis.rowsFormGroup.disable({ emitEvent: false });\n\t\t\tthis.headerControl.disable({ emitEvent: false });\n\t\t\tthis.radioControl.disable({ emitEvent: false });\n\t\t} else {\n\t\t\tthis.rowsFormGroup.enable({ emitEvent: false });\n\t\t\tthis.headerControl.enable({ emitEvent: false });\n\t\t\tthis.radioControl.enable({ emitEvent: false });\n\t\t}\n\t}\n\n\t/**\n\t * Handle a click on a row\n\t *\n\t * @param row - The data of the row that was clicked\n\t * @param index - The index of the row that was clicked\n\t */\n\tpublic handleRowClicked(row: any, index: number) {\n\t\t// Iben: Emit a row click event\n\t\tthis.rowClicked.emit(row);\n\n\t\t// Iben: Handle the selected open row if needed\n\t\tif (this.showSelectedOpenRow()) {\n\t\t\tif (this.selectedRow() === index) {\n\t\t\t\t// Benoit: If you close the selected row, unselect that row\n\t\t\t\tthis.selectedRow.set(undefined);\n\t\t\t} else {\n\t\t\t\tthis.selectedRow.set(index);\n\t\t\t}\n\t\t}\n\t\tthis.handleRowState(index, !this.openRows.has(index) ? 'open' : 'close');\n\t}\n\n\t/**\n\t * Handle the expanded state of a row\n\t *\n\t * @param index - The index of the row\n\t * @param action - Whether the row needs to be opened or closed\n\t */\n\tpublic handleRowState(index: number, action: 'open' | 'close'): void {\n\t\t// Iben: If there's no detail row we early exit\n\t\tif (!this.detailRowTemplate()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Wouter: When the detail row should be shown due to global config, we add the index to the open rows\n\t\tif (\n\t\t\tthis.showDetailRow() === 'always' ||\n\t\t\t(this.showDetailRow() === 'on-single-item' && this.data.length === 1)\n\t\t) {\n\t\t\tthis.openRows.add(index);\n\t\t\t// Iben: Depending on whether we allow multiple rows to be open at the same time, we toggle the open rows accordingly\n\t\t}\n\t\t// Iben: Depending on whether we allow multiple rows to be open at the same time, we toggle the open rows accordingly\n\t\telse if (this.allowMultipleOpenRows()) {\n\t\t\taction === 'open' ? this.openRows.add(index) : this.openRows.delete(index);\n\t\t} else {\n\t\t\tthis.openRows = action === 'open' ? new Set([index]) : new Set();\n\t\t}\n\t}\n\n\t/**\n\t * Assigns the templates of each cell to the correct columns\n\t */\n\tprivate handleTableCellTemplates(): void {\n\t\t// Iben: Reset the provided records\n\t\tthis.tableCellTemplateRecord.set({});\n\t\tthis.sortableTableCellRecord.set({});\n\t\tthis.tableCypressRecord.set({});\n\t\tthis.editableTableCellRecord.set({});\n\n\t\t// Iben: Loop over all provided table cell templates\n\t\tArray.from(this.tableCellTemplates()).forEach((tableCellTemplate) => {\n\t\t\t// Iben: Early exit in case for some reason the template is undefined\n\t\t\tif (!tableCellTemplate) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Iben: Add the template to the template record for easy access in the table template\n\t\t\tconst {\n\t\t\t\tcolumn: columnInput,\n\t\t\t\theaderTemplate,\n\t\t\t\tcellTemplate,\n\t\t\t\tfooterTemplate,\n\t\t\t\tsortable: sortableInput,\n\t\t\t\tcellClass,\n\t\t\t\tcypressDataTags: cypressDataTagsInput,\n\t\t\t\teditable: editableInput,\n\t\t\t} = tableCellTemplate;\n\t\t\tconst column = columnInput();\n\t\t\tconst sortable = sortableInput();\n\t\t\tconst cypressDataTags = cypressDataTagsInput();\n\t\t\tconst editable = editableInput();\n\n\t\t\tthis.tableCellTemplateRecord.update((value) => {\n\t\t\t\treturn {\n\t\t\t\t\t...value,\n\t\t\t\t\t[column]: {\n\t\t\t\t\t\theaderTemplate,\n\t\t\t\t\t\tcellTemplate,\n\t\t\t\t\t\tfooterTemplate,\n\t\t\t\t\t\tcellClass,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// Iben: If the column is sortable, we add it to the sortable record\n\t\t\tif (sortable) {\n\t\t\t\tthis.sortableTableCellRecord.update((value) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\t[column]: tableCellTemplate,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Iben: If the column has cypress tags, we add them to the record\n\t\t\tif (cypressDataTags) {\n\t\t\t\tthis.tableCypressRecord.update((value) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\t[column]: cypressDataTags,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Iben: If the cell is editable, we add it to the record\n\t\t\tif (editable) {\n\t\t\t\tthis.editableTableCellRecord.update((value) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\t[column]: tableCellTemplate,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Check if at least one template has a footer template, so that we know whether or not we have to render the footer row\n\t\tthis.hasFooterTemplates.set(\n\t\t\tArray.from(this.tableCellTemplates()).some((cellTemplate) =>\n\t\t\t\tBoolean(cellTemplate.footerTemplate)\n\t\t\t)\n\t\t);\n\n\t\t// Iben:\n\t\tthis.handleCurrentSort(this.currentSortingEvent());\n\n\t\t// Iben: Detect changes to update the view\n\t\tthis.cdRef.detectChanges();\n\t}\n\n\t/**\n\t * Respond to a click on the sort of a column\n\t *\n\t * @param column - The column we clicked on\n\t */\n\tpublic handleSort(column: string): void {\n\t\t// Iben: If the column is not sortable we early exit\n\t\tif (!this.sortableTableCellRecord()[column]) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Loop over the sortable columns and reset all columns that don't match with the clicked column\n\t\tObject.entries(this.sortableTableCellRecord()).forEach(([cellName, cell]) => {\n\t\t\tif (cellName === column) {\n\t\t\t\tthis.sortableTableCellRecord()[column].handleSort();\n\t\t\t} else {\n\t\t\t\tcell.resetSortDirection();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic selectRow(index: number): void {\n\t\tconst selectableKey = this.selectableKey();\n\t\tthis.rowsFormGroup\n\t\t\t.get(selectableKey ? `${this.data()[index][selectableKey]}` : `${index}`)\n\t\t\t.patchValue(true);\n\t}\n\n\t/**\n\t * Handle the changes in sort events\n\t *\n\t * @param event - The new sorting event\n\t */\n\tprivate handleCurrentSort(event: NgxTableSortEvent): void {\n\t\t// Iben: Early exit if the sortable cell record is empty or if the cell already has the sortDirection of the event\n\t\tif (\n\t\t\tisEmpty(\n\t\t\t\tthis.sortableTableCellRecord() ||\n\t\t\t\t\t(event &&\n\t\t\t\t\t\tthis.sortableTableCellRecord()[event.column].sortDirection ===\n\t\t\t\t\t\t\tevent.direction)\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: We reset all the sort directions by default, so all of them are unsorted.\n\t\tObject.values(this.sortableTableCellRecord()).forEach((cell) => cell.resetSortDirection());\n\n\t\t// Iben: If there's no sort event passed, we early exit\n\t\tif (!event) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: In case there was a sorting provided and we set the sorting to the provided column and direction\n\t\tthis.sortableTableCellRecord()[event.column].setSortDirection(event.direction);\n\t}\n\n\t/**\n\t * Setup the columns array\n\t */\n\tprivate handleRowColumns(): void {\n\t\t// Iben: Make sure that the select option, the open row state and the defined actions are correctly placed\n\t\tconst columns = this.columns();\n\t\tconst actions = this.actions();\n\t\tthis.definedColumns.set([\n\t\t\t...(this.selectable() ? ['ngxTableSelectColumn'] : []),\n\t\t\t...(columns || []),\n\t\t\t...(actions || []),\n\t\t\t...(this.showOpenRowState() && this.detailRowTemplate()\n\t\t\t\t? ['ngxOpenRowStateColumn']\n\t\t\t\t: []),\n\t\t]);\n\n\t\t// Iben: Set the actual table columns\n\t\tthis.tableColumns.set([...(columns || []), ...(actions || [])]);\n\t}\n\n\t// Lifecycle methods\n\t// ==============================\n\tpublic ngAfterContentChecked(): void {\n\t\t// Iben: Run with content check so that we can dynamically add templates/columns\n\t\tthis.handleRowColumns();\n\t\tthis.handleTableCellTemplates();\n\t}\n\n\tpublic ngOnInit() {\n\t\t// Iben: Subscribe to the form to handle the selectable behavior\n\t\tthis.rowsFormGroup.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: If not all items are selected, we uncheck the headerControl without emitting a value to prevent an infinite loop in the next subscription\n\t\t\t\t\tthis.headerControl.setValue(\n\t\t\t\t\t\tObject.values(value).every((selected) => selected),\n\t\t\t\t\t\t{ emitEvent: false }\n\t\t\t\t\t);\n\n\t\t\t\t\t// Iben: Emit the current selection and mark the form as touched\\\n\t\t\t\t\tthis.onChanged(handleNgxTableValueChanges(value));\n\t\t\t\t\tthis.onTouch();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Listen to the radio control and update the value accordingly\n\t\tthis.radioControl.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\tthis.onChanged(value);\n\t\t\t\t\tthis.onTouch();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Subscribe to the headerControl to handle multiSelect behaviour\n\t\tthis.headerControl.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((selected) => {\n\t\t\t\t\t// Iben: Select all items when this control is selected, if not, unselect them all\n\t\t\t\t\tif (selected) {\n\t\t\t\t\t\tthis.rowsFormGroup.patchValue(\n\t\t\t\t\t\t\thandleNgxTableHeaderValueChanges(this.rowsFormGroup)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.rowsFormGroup.reset();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\tpublic ngOnDestroy() {\n\t\tthis.destroyed$.next(null);\n\t\tthis.destroyed$.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestDisplayContentComponent.html":{"url":"components/TestDisplayContentComponent.html","title":"component - TestDisplayContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestDisplayContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-data\n            \n\n\n            \n                imports\n                \n                                NgxDisplayContentDirective\n                \n            \n\n\n\n            \n                template\n                Content\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                conditions\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                conditions\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        conditions\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:41\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        conditions\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Content'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestDisplayContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestErrorComponent.html":{"url":"components/TestErrorComponent.html","title":"component - TestErrorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestErrorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-error\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Error\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:11\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:11\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Error'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestErrorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestErrorDataComponent.html":{"url":"components/TestErrorDataComponent.html","title":"component - TestErrorDataComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestErrorDataComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-data-error\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Error {{data()}}\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:11\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:11\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Error {{data()}}'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestErrorDataComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestLoadingComponent.html":{"url":"components/TestLoadingComponent.html","title":"component - TestLoadingComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestLoadingComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-loading\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Loading\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:11\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:11\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Loading'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestLoadingComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestOfflineComponent.html":{"url":"components/TestOfflineComponent.html","title":"component - TestOfflineComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestOfflineComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-offline\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Offline\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:11\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:11\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Offline'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestOfflineComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestOverrideDisplayContentComponent.html":{"url":"components/TestOverrideDisplayContentComponent.html","title":"component - TestOverrideDisplayContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestOverrideDisplayContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-override-data\n            \n\n\n            \n                imports\n                \n                                NgxDisplayContentDirective\n                            CommonModule\n                \n            \n\n\n\n            \n                template\n                \n\tContent\n\n\nCustom loading\n\t\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                conditions\n                            \n                            \n                                    Readonly\n                                errorData\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                conditions\n                            \n                            \n                                errorData\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        conditions\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:62\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        errorData\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:63\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        conditions\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        errorData\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\tContentCustom loading\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestOverrideDisplayContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/TransformPipe.html":{"url":"pipes/TransformPipe.html","title":"pipe - TransformPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  TransformPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe to pass a transformer function to. By using this setup, we can use functions without causing rerender issues\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        transform\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: any, transformer: Function)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts:17\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TransformerType\n                            \n                        \n                    \n\n            \n                \n                        Transforms a value based on a provided transform function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided value we wish to transform\n\n\n                                            \n                                        \n                                        \n                                                transformer\n                                            \n                                                            Function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA provided transform function\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     TransformerType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        TransformPipe\nThe TransformPipe will transform a given value with the provided transform-function.\nHow to use\nExample :\n  {{ value | transform: toUpperCase }}\nWith a given value 'my text', will result in the following:\nExample :MY TEXT\n    \n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * A pipe to pass a transformer function to. By using this setup, we can use functions without causing rerender issues\n */\n@Pipe({\n\tname: 'transform',\n\tstandalone: true,\n})\nexport class TransformPipe implements PipeTransform {\n\t/**\n\t * Transforms a value based on a provided transform function\n\t *\n\t * @param value - The provided value we wish to transform\n\t * @param transformer - A provided transform function\n\t */\n\tpublic transform(value: any, transformer: Function): TransformerType {\n\t\t// Iben: If no transformer is passed, we return the original value\n\t\tif (!transformer) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: Transform the value and return\n\t\treturn transformer(value);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TranslationLoaderActionEntity.html":{"url":"interfaces/TranslationLoaderActionEntity.html","title":"interface - TranslationLoaderActionEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TranslationLoaderActionEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TranslationLoaderActionEntity {\n\tid: string;\n\tstate: keyof typeof TranslationLoaderActionStateEnum;\n}\n\nenum TranslationLoaderActionStateEnum {\n\tLOADING = 'LOADING',\n\tLOADED = 'LOADED',\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/cdk : 20.1.2\n        \n            @angular/common : 20.1.2\n        \n            @angular/compiler : 20.1.2\n        \n            @angular/core : 20.1.2\n        \n            @angular/forms : 20.1.2\n        \n            @angular/platform-browser : 20.1.2\n        \n            @angular/platform-browser-dynamic : 20.1.2\n        \n            @angular/router : 20.1.2\n        \n            @ibenvandeveire/ngx-core : 20.1.0\n        \n            @ibenvandeveire/types-authentication : ^1.0.0\n        \n            @ngrx/effects : ^19.2.1\n        \n            @ngrx/entity : ^19.2.1\n        \n            @ngrx/signals : ^19.2.1\n        \n            @ngrx/store : ^19.2.1\n        \n            @ngx-translate/core : ^16.0.4\n        \n            date-fns : ^4.1.0\n        \n            deepmerge-ts : ^7.1.5\n        \n            dot-prop : ^9.0.0\n        \n            lodash : ^4.17.21\n        \n            markerjs-live : ^1.2.1\n        \n            markerjs2 : ^2.32.4\n        \n            obj-clean : ^3.0.1\n        \n            rxjs : ~7.8.0\n        \n            uuid : ^11.1.0\n        \n            vanilla-cookieconsent : ^3.1.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NgxTableSortDirection   (libs/.../sort-direction.enum.ts)\n                        \n                        \n                            TranslationLoaderActionStateEnum   (libs/.../i18n-loading.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/angular/layout/src/lib/enums/sort-direction.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NgxTableSortDirection\n                    \n                \n                        \n                            \n                                 ASCENDING\n                            \n                        \n                        \n                            \n                                Value : ASCENDING\n                            \n                        \n                        \n                            \n                                 DESCENDING\n                            \n                        \n                        \n                            \n                                Value : DESCENDING\n                            \n                        \n            \n        \n\n    libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.types.ts\n    \n        \n            \n                \n                    \n                        \n                        TranslationLoaderActionStateEnum\n                    \n                \n                        \n                            \n                                 LOADING\n                            \n                        \n                        \n                            \n                                Value : LOADING\n                            \n                        \n                        \n                            \n                                 LOADED\n                            \n                        \n                        \n                            \n                                Value : LOADED\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            authentication   (libs/.../authentication.ts)\n                        \n                        \n                            core   (libs/.../core.ts)\n                        \n                        \n                            FallBackTranslationLoader   (libs/.../i18n.module.ts)\n                        \n                        \n                            NgxAuthenticatedHttpInterceptor   (libs/.../authentication.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/javascript/types/authentication/src/lib/authentication.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        authentication\n                        \n                    \n                \n            \n            \n                \nauthentication()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    libs/javascript/core/src/lib/core.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        core\n                        \n                    \n                \n            \n            \n                \ncore()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    libs/angular/i18n/src/lib/i18n.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FallBackTranslationLoader\n                        \n                    \n                \n            \n            \n                \nFallBackTranslationLoader(http: HttpBackend)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                http\n                                            \n                                                        HttpBackend\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    libs/angular/authentication/src/lib/interceptors/authentication/authentication.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NgxAuthenticatedHttpInterceptor\n                        \n                    \n                \n            \n            \n                \nNgxAuthenticatedHttpInterceptor(request: HttpRequest, next: HttpHandlerFn)\n                \n            \n\n\n\n\n            \n                \n                        An interceptor that will handle any request that needs to be authenticated\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        HttpRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided request\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        HttpHandlerFn\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe HttpHandler\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n@ibenvandeveire open-source\n@ibenvandeveire open source is a mono-repo providing several of Angular and non-Angular based packages created and maintained by Iben Van de Veire.\nInstallation\nTo setup this project, clone the repo and run npm i to install the dependencies.\nDocumentation\nYou can find the documentation for all of the packages on the Wiki.\nFor more in depth documentation relating to individual components of each package, please consult the Compodoc Documentation\nPackages\n\nutils (@ibenvandeveire/ngx-utils) :\n\nThis Angular package provides several independent utilities to facilitate common use-cases for users and developers.\n\n\nforms (@ibenvandeveire/ngx-forms):\n\nThis Angular package provides multiple utilities for complex form use-cases.\n\n\nstore (@ibenvandeveire/ngx-store):\n\nThis Angular package provides several utils and abstractions to improve the Redux workflow\n\n\ni18n (@ibenvandeveire/ngx-i18n):\n\nThis Angular package provides a lazy-loaded modular approach to translations.\n\n\ncookies (@ibenvandeveire/ngx-cookies):\n\nThis Angular package provides a quick and easy wrapper for CookieConsent V3.\n\n\nlayout (@ibenvandeveire/ngx-layout):\n\nThis Angular package is a collection of Angular components related to layout.\n\n\ntour (@ibenvandeveire/ngx-inform):\n\nThis Angular package provides the tools to build a guided walkthrough of one or more pages, tooltips, modals etc.\n\n\ncore (@ibenvandeveire/ngx-core):\n\nThis Angular package provides the core functionalities for the other packages.\n\n\nrxjs-utils (@ibenvandeveire/rxjs-utils):\n\nThis package provides the common use-cases for RXJS based projects.\n\n\n\nYou can find detailed explanations in their respective README’s.\nContributions\nIn order to contribute to this repository you must:\n\nStart a new branch from main named either fix/PACKAGE/FEATURE-NAME or feat/PACKAGE/FEATURE-NAME.\nCommit all code regarding the fix or feature to this branch, but do not include a version bump. Your commit message should start with either fix(PACKAGE) or feat(PACKAGE) for a fix or feature respectively.\nOpen a PR and add the correct package label, an enhancement or bug tag, the project and milestone.\n\nContributors\n\nBenoît Dossoine\nDenis Valcke\nIben Van de Veire\nWouter Heirstrate\nAbdurrahman Ekinci\nIan Emsens\nFemke Reunes\n\nLicense\nMIT License\nCopyright (c) 2023 Studio Hyperdrive\nCopyright (c) 2025 Iben Van de Veire\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 Studio Hyperdrive\nCopyright (c) 2025 Iben Van de Veire\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxI18nModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    17 Components\n                \n            \n        \n        \n            \n                \n                    \n                    37 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    74 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArraySignal   (libs/.../signals.ts)\n                        \n                        \n                            BaseStoreEffectsInterface   (libs/.../effects.ts)\n                        \n                        \n                            BasicEntityAdapterActions   (libs/.../entity-adapter-reducers.ts)\n                        \n                        \n                            BooleanRecord   (libs/.../observable.types.ts)\n                        \n                        \n                            BooleanSignal   (libs/.../signals.ts)\n                        \n                        \n                            ControlPaths   (libs/.../form-accessor-control-keys.ts)\n                        \n                        \n                            CypressLeafObject   (libs/.../cypress-tags.token.ts)\n                        \n                        \n                            CypressObject   (libs/.../cypress-tags.token.ts)\n                        \n                        \n                            DataType   (libs/.../store-assets.ts)\n                        \n                        \n                            DateRangeErrorCodes   (libs/.../date-range.validator.ts)\n                        \n                        \n                            EffectActions   (libs/.../effects.ts)\n                        \n                        \n                            EntityStoreEffectsInterface   (libs/.../effects.ts)\n                        \n                        \n                            extractStoreAssetType   (libs/.../store-state.ts)\n                        \n                        \n                            FormAccessorControlsEntity   (libs/.../form-accessor-control-keys.ts)\n                        \n                        \n                            HideHeaderRowOption   (libs/.../ngx-table-config.token.ts)\n                        \n                        \n                            HideHeaderRowOptions   (libs/.../ngx-table-config.token.ts)\n                        \n                        \n                            Join   (libs/.../form-accessor-control-keys.ts)\n                        \n                        \n                            Join   (libs/.../cypress.types.ts)\n                        \n                        \n                            KeyValuePair   (libs/.../merge.util.ts)\n                        \n                        \n                            NgxAccessibleDragAndDropFromToMessage   (libs/.../drag-and-drop.types.ts)\n                        \n                        \n                            NgxAccessibleDragAndDropMessage   (libs/.../drag-and-drop.types.ts)\n                        \n                        \n                            NgxAccessibleDragAndDropMoveType   (libs/.../drag-and-drop.types.ts)\n                        \n                        \n                            NgxAccordionOpenBehavior   (libs/.../accordion.types.ts)\n                        \n                        \n                            NgxAuthenticatedRoutes   (libs/.../authenticated-route.types.ts)\n                        \n                        \n                            NgxAuthenticationResponseFeature   (libs/.../authentication.types.ts)\n                        \n                        \n                            NgxAuthenticationStatus   (libs/.../authentication-status.types.ts)\n                        \n                        \n                            NgxConfigurableLayoutGrid   (libs/.../configurable-layout.ts)\n                        \n                        \n                            NgxConfigurableLayoutItemSizeOption   (libs/.../configurable-layout.ts)\n                        \n                        \n                            NgxConfigurableLayoutType   (libs/.../configurable-layout.ts)\n                        \n                        \n                            NgxCookieCategories   (libs/.../cookie-configuration.ts)\n                        \n                        \n                            NgxDisplayContentAriaLive   (libs/.../display-content.types.ts)\n                        \n                        \n                            NgxDisplayContentComponentConfiguration   (libs/.../display-content.types.ts)\n                        \n                        \n                            NgxDisplayContentConditions   (libs/.../display-content.types.ts)\n                        \n                        \n                            NgxDisplayContentOverrideConfiguration   (libs/.../display-content.types.ts)\n                        \n                        \n                            NgxDisplayContentRecord   (libs/.../display-content.types.ts)\n                        \n                        \n                            NgxDisplayContentStatus   (libs/.../display-content.types.ts)\n                        \n                        \n                            NgxFormsErrorShowSettings   (libs/.../errors.interface.ts)\n                        \n                        \n                            NgxFormsErrorShowWhenSettings   (libs/.../errors.interface.ts)\n                        \n                        \n                            NgxImageMarker   (libs/.../image-marker.types.ts)\n                        \n                        \n                            NgxImageMarkerItem   (libs/.../image-marker.types.ts)\n                        \n                        \n                            NgxImageMarkerState   (libs/.../image-marker.types.ts)\n                        \n                        \n                            NgxModalActionType   (libs/.../modal.types.ts)\n                        \n                        \n                            NgxModalConfiguration   (libs/.../modal.types.ts)\n                        \n                        \n                            NgxModalLabelAriaOptions   (libs/.../modal.types.ts)\n                        \n                        \n                            NgxModalOptions   (libs/.../modal.types.ts)\n                        \n                        \n                            NgxModalRole   (libs/.../modal.types.ts)\n                        \n                        \n                            NgxReplaceElementsConfiguration   (libs/.../replace-elements.types.ts)\n                        \n                        \n                            NgxReplaceElementsSelector   (libs/.../replace-elements.types.ts)\n                        \n                        \n                            NgxStorageEvent   (libs/.../storage.types.ts)\n                        \n                        \n                            NgxStorageRecord   (libs/.../storage.types.ts)\n                        \n                        \n                            NgxStorageType   (libs/.../storage.types.ts)\n                        \n                        \n                            NgxStoreActions   (libs/.../store-generator.ts)\n                        \n                        \n                            NgxStoreSelectors   (libs/.../store-generator.ts)\n                        \n                        \n                            NgxTableCypressDataTags   (libs/.../show-header-requirements.ts)\n                        \n                        \n                            NgxTooltipEvent   (libs/.../tooltip.types.ts)\n                        \n                        \n                            NgxTooltipPosition   (libs/.../tooltip.types.ts)\n                        \n                        \n                            NgxTooltipPositionClass   (libs/.../tooltip.types.ts)\n                        \n                        \n                            NgxTourAction   (libs/.../tour.types.ts)\n                        \n                        \n                            NgxTourDirection   (libs/.../tour.types.ts)\n                        \n                        \n                            NgxTourInteraction   (libs/.../tour.types.ts)\n                        \n                        \n                            NgxTourRegistrationEvent   (libs/.../tour.types.ts)\n                        \n                        \n                            NgxTourStepOffset   (libs/.../tour.types.ts)\n                        \n                        \n                            NgxTourStepPosition   (libs/.../tour.types.ts)\n                        \n                        \n                            NgxTourTokenType   (libs/.../tour.token.type.ts)\n                        \n                        \n                            NgxTreeGridCellTarget   (libs/.../tree-grid.types.ts)\n                        \n                        \n                            NgxTreeGridRowTarget   (libs/.../tree-grid.types.ts)\n                        \n                        \n                            NumberSignal   (libs/.../signals.ts)\n                        \n                        \n                            ObservableArray   (libs/.../observable.types.ts)\n                        \n                        \n                            ObservableBlob   (libs/.../observable.types.ts)\n                        \n                        \n                            ObservableBoolean   (libs/.../observable.types.ts)\n                        \n                        \n                            ObservableBooleanRecord   (libs/.../observable.types.ts)\n                        \n                        \n                            ObservableNumber   (libs/.../observable.types.ts)\n                        \n                        \n                            ObservableRecord   (libs/.../observable.types.ts)\n                        \n                        \n                            ObservableString   (libs/.../observable.types.ts)\n                        \n                        \n                            ObservableStringRecord   (libs/.../observable.types.ts)\n                        \n                        \n                            Paths   (libs/.../cypress.types.ts)\n                        \n                        \n                            Prev   (libs/.../cypress.types.ts)\n                        \n                        \n                            Previous   (libs/.../form-accessor-control-keys.ts)\n                        \n                        \n                            RequireAtLeastOne   (libs/.../internal-helpers.ts)\n                        \n                        \n                            RequireAtLeastOne   (libs/.../require-at-least-one.ts)\n                        \n                        \n                            ShowDetailRowOption   (libs/.../ngx-table-config.token.ts)\n                        \n                        \n                            StoreActions   (libs/.../store.ts)\n                        \n                        \n                            StoreFlowAssets   (libs/.../store-generator.ts)\n                        \n                        \n                            StoreSelectors   (libs/.../store.ts)\n                        \n                        \n                            StoreState   (libs/.../store-state.ts)\n                        \n                        \n                            StoreStateData   (libs/.../store-state.ts)\n                        \n                        \n                            StoreStateError   (libs/.../store-state.ts)\n                        \n                        \n                            StoreStateErrorMessage   (libs/.../store-state.ts)\n                        \n                        \n                            StoreStateLoading   (libs/.../store-state.ts)\n                        \n                        \n                            StringifiedQueryParamsType   (libs/.../query-param-form-sync.component.abstract.ts)\n                        \n                        \n                            StringSignal   (libs/.../signals.ts)\n                        \n                        \n                            WritableArraySignal   (libs/.../signals.ts)\n                        \n                        \n                            WritableBooleanSignal   (libs/.../signals.ts)\n                        \n                        \n                            WritableNumberSignal   (libs/.../signals.ts)\n                        \n                        \n                            WritableStringSignal   (libs/.../signals.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/angular/utils/src/lib/types/signals.ts\n    \n    \n        \n            \n                \n                    \n                    ArraySignal\n                \n            \n            \n                \n                            Signal\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BooleanSignal\n                \n            \n            \n                \n                        Signal\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NumberSignal\n                \n            \n            \n                \n                        Signal\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StringSignal\n                \n            \n            \n                \n                        Signal\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WritableArraySignal\n                \n            \n            \n                \n                            WritableSignal\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WritableBooleanSignal\n                \n            \n            \n                \n                        WritableSignal\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WritableNumberSignal\n                \n            \n            \n                \n                        WritableSignal\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WritableStringSignal\n                \n            \n            \n                \n                        WritableSignal\n\n                \n            \n        \n    \n    libs/angular/store/src/lib/rxjs/interfaces/effects.ts\n    \n    \n        \n            \n                \n                    \n                    BaseStoreEffectsInterface\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EffectActions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntityStoreEffectsInterface\n                \n            \n            \n                \n                        RequireAtLeastOne\n\n                \n            \n        \n    \n    libs/angular/store/src/lib/rxjs/interfaces/entity-adapter-reducers.ts\n    \n    \n        \n            \n                \n                    \n                    BasicEntityAdapterActions\n                \n            \n            \n                \n                            Partial\n\n                \n            \n        \n    \n    libs/javascript/rxjs/src/lib/types/observable/observable.types.ts\n    \n    \n        \n            \n                \n                    \n                    BooleanRecord\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableArray\n                \n            \n            \n                \n                        Observable\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableBlob\n                \n            \n            \n                \n                        Observable\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableBoolean\n                \n            \n            \n                \n                        Observable\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableBooleanRecord\n                \n            \n            \n                \n                            Observable\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableNumber\n                \n            \n            \n                \n                        Observable\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableRecord\n                \n            \n            \n                \n                            Observable>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableString\n                \n            \n            \n                \n                        Observable\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableStringRecord\n                \n            \n            \n                \n                        Observable>\n\n                \n            \n        \n    \n    libs/angular/forms/src/lib/interfaces/form-accessor-control-keys.ts\n    \n    \n        \n            \n                \n                    \n                    ControlPaths\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FormAccessorControlsEntity\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Join\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Previous\n                \n            \n            \n                \n                        [never, \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", ...[]]\n\n                \n            \n        \n    \n    libs/angular/utils/src/lib/tokens/cypress-tags.token.ts\n    \n    \n        \n            \n                \n                    \n                    CypressLeafObject\n                \n            \n            \n                \n                        Record | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CypressObject\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n    libs/angular/store/src/lib/rxjs/spec/store-assets.ts\n    \n    \n        \n            \n                \n                    \n                    DataType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    libs/angular/forms/src/lib/validators/date-range/date-range.validator.ts\n    \n    \n        \n            \n                \n                    \n                    DateRangeErrorCodes\n                \n            \n            \n                \n                        \"invalidMaxDate\" | \"invalidMinDate\" | \"dateAfterMaxDate\" | \"dateBeforeMinDate\"\n\n                \n            \n        \n    \n    libs/angular/store/src/lib/rxjs/interfaces/store-state.ts\n    \n    \n        \n            \n                \n                    \n                    extractStoreAssetType\n                \n            \n            \n                \n                    A type to extract the original generic DataType from a BaseStoreAssets or EntityStoreAssets\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoreState\n                \n            \n            \n                \n                    A type to map a StoreFlowAssets to a StoreState object\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoreStateData\n                \n            \n            \n                \n                    A type to map a StoreFlowAsset key to it's corresponding Observable\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoreStateError\n                \n            \n            \n                \n                    A type to map a StoreFlowAsset key to it's corresponding error Observable\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoreStateErrorMessage\n                \n            \n            \n                \n                    A type to map a StoreFlowAsset key to it's corresponding error message Observable\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoreStateLoading\n                \n            \n            \n                \n                    A type to map a StoreFlowAsset key to it's corresponding loading Observable\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/tokens/ngx-table-config.token.ts\n    \n    \n        \n            \n                \n                    \n                    HideHeaderRowOption\n                \n            \n            \n                \n                        \"never\" |  | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HideHeaderRowOptions\n                \n            \n            \n                \n                        \"when-loading\" | \"when-empty\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ShowDetailRowOption\n                \n            \n            \n                \n                        \"always\" | \"on-click\" | \"on-single-item\"\n\n                \n            \n        \n    \n    libs/angular/utils/src/lib/types/cypress.types.ts\n    \n    \n        \n            \n                \n                    \n                    Join\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Paths\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Prev\n                \n            \n            \n                \n                        [never, \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", ...[]]\n\n                \n            \n        \n    \n    libs/javascript/utils/src/lib/object/merge/merge.util.ts\n    \n    \n        \n            \n                \n                    \n                    KeyValuePair\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxAccessibleDragAndDropFromToMessage\n                \n            \n            \n                \n                        template literal type | template literal type | template literal type | template literal type | template literal type | template literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxAccessibleDragAndDropMessage\n                \n            \n            \n                \n                            NgxAccessibleDragAndDropBaseMessage | NgxAccessibleDragAndDropBaseMessage\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxAccessibleDragAndDropMoveType\n                \n            \n            \n                \n                        \"reordered\" | \"moved\"\n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/accordion.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxAccordionOpenBehavior\n                \n            \n            \n                \n                        \"first\" | \"all\" | number | number[]\n\n                \n            \n        \n    \n    libs/angular/authentication/src/lib/types/authenticated-route.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxAuthenticatedRoutes\n                \n            \n            \n                \n                            NgxAuthenticatedRoute[]\n\n                \n            \n        \n    \n    libs/angular/authentication/src/lib/types/authentication.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxAuthenticationResponseFeature\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    libs/angular/authentication/src/lib/types/authentication-status.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxAuthenticationStatus\n                \n            \n            \n                \n                        \"unset\" | \"signed-in\" | \"signed-out\"\n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/configurable-layout.ts\n    \n    \n        \n            \n                \n                    \n                    NgxConfigurableLayoutGrid\n                \n            \n            \n                \n                            NgxConfigurableLayoutItemEntity[][]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxConfigurableLayoutItemSizeOption\n                \n            \n            \n                \n                        \"fit-content\" | \"fill\" | \"equal\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxConfigurableLayoutType\n                \n            \n            \n                \n                        \"static\" | \"editable\"\n\n                \n            \n        \n    \n    libs/angular/cookies/src/lib/types/cookie-configuration.ts\n    \n    \n        \n            \n                \n                    \n                    NgxCookieCategories\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/display-content.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxDisplayContentAriaLive\n                \n            \n            \n                \n                        \"polite\" | \"assertive\" | \"off\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxDisplayContentComponentConfiguration\n                \n            \n            \n                \n                            NgxDisplayContentRecord>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxDisplayContentConditions\n                \n            \n            \n                \n                            NgxDisplayContentRecord\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxDisplayContentOverrideConfiguration\n                \n            \n            \n                \n                            NgxDisplayContentRecord\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxDisplayContentRecord\n                \n            \n            \n                \n                        Partial>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxDisplayContentStatus\n                \n            \n            \n                \n                        \"loading\" | \"error\" | \"offline\"\n\n                \n            \n        \n    \n    libs/angular/forms/src/lib/interfaces/errors.interface.ts\n    \n    \n        \n            \n                \n                    \n                    NgxFormsErrorShowSettings\n                \n            \n            \n                \n                        \"all\" | number\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxFormsErrorShowWhenSettings\n                \n            \n            \n                \n                        \"touched\" | \"dirty\"\n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/image-marker.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxImageMarker\n                \n            \n            \n                \n                    An Angular wrapper for markerjs views\n\n                \n            \n            \n                \n                            NgxImageMarkerEdit | NgxImageMarkerView\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxImageMarkerItem\n                \n            \n            \n                \n                    A marker on the marker view\n\n                \n            \n            \n                \n                        MarkerBase\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxImageMarkerState\n                \n            \n            \n                \n                    The state of the marker view\n\n                \n            \n            \n                \n                        MarkerAreaState\n\n                \n            \n        \n    \n    libs/angular/inform/src/lib/types/modal.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxModalActionType\n                \n            \n            \n                \n                    The type of action that should be emitted by the modal.\n\n                \n            \n            \n                \n                        StringType | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxModalConfiguration\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxModalLabelAriaOptions\n                \n            \n            \n                \n                        NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxModalOptions\n                \n            \n            \n                \n                         | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxModalRole\n                \n            \n            \n                \n                        \"dialog\" | \"alertdialog\"\n\n                \n            \n        \n    \n    libs/angular/utils/src/lib/types/replace-elements.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxReplaceElementsConfiguration\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxReplaceElementsSelector\n                \n            \n            \n                \n                         `${string}{{id}}${string}`\n\n                \n            \n        \n    \n    libs/angular/utils/src/lib/types/storage.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxStorageEvent\n                \n            \n            \n                \n                        NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxStorageRecord\n                \n            \n            \n                \n                        Record>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxStorageType\n                \n            \n            \n                \n                        \"local\" | \"session\"\n\n                \n            \n        \n    \n    libs/angular/store/src/lib/rxjs/interfaces/store-generator.ts\n    \n    \n        \n            \n                \n                    \n                    NgxStoreActions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxStoreSelectors\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoreFlowAssets\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/show-header-requirements.ts\n    \n    \n        \n            \n                \n                    \n                    NgxTableCypressDataTags\n                \n            \n            \n                \n                            RequireAtLeastOne\n\n                \n            \n        \n    \n    libs/angular/inform/src/lib/types/tooltip.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxTooltipEvent\n                \n            \n            \n                \n                        NgxTooltipInactiveEvent | NgxTooltipActiveElementEvent | NgxTooltipActiveTooltipEvent\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTooltipPosition\n                \n            \n            \n                \n                        \"above\" | \"below\" | \"left\" | \"right\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTooltipPositionClass\n                \n            \n            \n                \n                             `ngx-tooltip-position-${NgxTooltipPosition}`\n\n                \n            \n        \n    \n    libs/angular/inform/src/lib/types/tour.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxTourAction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTourDirection\n                \n            \n            \n                \n                        \"next\" | \"back\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTourInteraction\n                \n            \n            \n                \n                            NgxTourDirection | \"close\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTourRegistrationEvent\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTourStepOffset\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTourStepPosition\n                \n            \n            \n                \n                        \"above\" | \"below\" | \"right\" | \"left\"\n\n                \n            \n        \n    \n    libs/angular/inform/src/lib/types/tour.token.type.ts\n    \n    \n        \n            \n                \n                    \n                    NgxTourTokenType\n                \n            \n            \n                \n                    The token type for the tour provider\n\n                \n            \n            \n                \n                            Type | NgxTourTokenConfiguration\n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/tree-grid.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxTreeGridCellTarget\n                \n            \n            \n                \n                        number | \"first\" | \"last\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTreeGridRowTarget\n                \n            \n            \n                \n                        \"current\" | \"above\" | \"below\" | \"first\" | \"last\"\n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/internal-helpers.ts\n    \n    \n        \n            \n                \n                    \n                    RequireAtLeastOne\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    libs/angular/store/src/lib/rxjs/interfaces/require-at-least-one.ts\n    \n    \n        \n            \n                \n                    \n                    RequireAtLeastOne\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    libs/angular/store/src/lib/rxjs/interfaces/store.ts\n    \n    \n        \n            \n                \n                    \n                    StoreActions\n                \n            \n            \n                \n                            BaseStoreActions | EntityStoreActions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoreSelectors\n                \n            \n            \n                \n                            BaseStoreSelectors | EntityStoreSelectors\n\n                \n            \n        \n    \n    libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts\n    \n    \n        \n            \n                \n                    \n                    StringifiedQueryParamsType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
