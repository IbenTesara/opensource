var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AtLeastOneRequiredValidatorOptions.html",[0,0.104,1,3.966]],["body/interfaces/AtLeastOneRequiredValidatorOptions.html",[0,0.118,1,6.634,2,0.863,3,0.082,4,0.056,5,0.063,6,5.496,7,3.497,8,4.909,9,5.496,10,0.147,11,0.222,12,0.82,13,8.731,14,7.656,15,2.774,16,0.222,17,0.006,18,6.236,19,0.237,20,6.211,21,3.259,22,6.211,23,4.233,24,5.496,25,5.496,26,2.74,27,0.082,28,1.472,29,1.169,30,6.448,31,4.002,32,0.849,33,6.448,34,1.549,35,4.164,36,1.997,37,2.207,38,2.672,39,2.812,40,4.002,41,2.548,42,2.78,43,4.909,44,2.143,45,4.909,46,7.202,47,1.67,48,3.353,49,2.009,50,3.374,51,5.457,52,5.496,53,5.496,54,2.888,55,2.436,56,5.496,57,2.383,58,5.496,59,5.496,60,5.496,61,1.708,62,5.496,63,5.496,64,4.628,65,5.496,66,2.49,67,4.522,68,2.32,69,7.22,70,4.601,71,5.496,72,3.49,73,2.774,74,2.153,75,3.646,76,3.111,77,8.063,78,5.496,79,5.496,80,5.496,81,1.859,82,5.94,83,3.272,84,4.909,85,5.496,86,5.258,87,5.496,88,0.004,89,0.004]],["title/classes/BaseFormAccessor.html",[90,0.442,91,3.713]],["body/classes/BaseFormAccessor.html",[3,0.087,4,0.078,5,0.087,17,0.005,27,0.087,74,2.986,88,0.005,89,0.005,90,0.81,91,6.809,92,4.857,93,7.622,94,6.807,95,7.622,96,1.035,97,3.617,98,4.12,99,4.375,100,6.271,101,4.68,102,3.8,103,6.807,104,6.807,105,4.52,106,2.148,107,5.551,108,7.622,109,1.294]],["title/interfaces/BaseStore.html",[0,0.104,110,3.51]],["body/interfaces/BaseStore.html",[0,0.194,2,0.99,3,0.072,4,0.064,5,0.072,10,0.169,11,0.243,16,0.277,17,0.006,19,0.253,27,0.103,28,1.838,29,1.573,68,3.042,88,0.005,89,0.005,98,3.408,110,5.742,111,4.856,112,4.856,113,5.534,114,3.311,115,5.534,116,7.148,117,4.856,118,3.739,119,6.28,120,4.183,121,6.156,122,3.147,123,4.841,124,3.314,125,4.592,126,5.231,127,3.619,128,2.734,129,5.467,130,3.509,131,3.314,132,5.467,133,3.619,134,3.871,135,2.291,136,2.519,137,1.277,138,5.346,139,2.622,140,4.183,141,4.183,142,4.183,143,4.183]],["title/interfaces/BaseStoreActions.html",[0,0.104,129,3.342]],["body/interfaces/BaseStoreActions.html",[0,0.193,2,0.975,3,0.071,4,0.063,5,0.071,10,0.166,11,0.24,12,0.701,16,0.295,17,0.006,19,0.251,27,0.102,28,1.266,29,1.452,68,3.03,88,0.005,89,0.005,98,3.356,110,4.521,111,4.782,112,4.782,113,3.812,114,3.296,115,4.794,116,6.58,117,4.782,118,3.682,119,6.65,120,4.119,121,6.128,122,3.135,123,4.794,124,3.263,125,4.521,126,6.128,127,3.564,128,2.692,129,5.923,130,3.456,131,3.263,132,5.414,133,3.564,134,3.812,135,2.256,136,2.48,137,1.496,138,5.316,139,3.728,140,4.119,141,4.119,142,4.119,143,4.119,144,3.995]],["title/interfaces/BaseStoreAssets.html",[0,0.104,127,2.767]],["body/interfaces/BaseStoreAssets.html",[0,0.195,2,1,3,0.073,4,0.065,5,0.073,10,0.17,11,0.244,16,0.266,17,0.006,19,0.254,27,0.103,28,1.299,29,1.465,68,2.777,88,0.005,89,0.005,98,3.442,110,4.638,111,4.905,112,4.905,113,3.91,114,2.831,115,4.871,116,6.657,117,4.905,118,3.777,119,6.295,120,4.225,121,6.174,122,3.155,123,5.554,124,3.347,125,4.638,126,5.263,127,4.554,128,3.923,129,6.272,130,5.035,131,4.754,132,6.272,133,3.656,134,3.91,135,2.314,136,2.544,137,1.285,138,5.365,139,2.648,140,4.225,141,4.225,142,4.225,143,4.225]],["title/interfaces/BaseStoreAssetsGeneratorOptions.html",[0,0.104,145,3.51]],["body/interfaces/BaseStoreAssetsGeneratorOptions.html",[0,0.186,2,1.147,3,0.083,4,0.074,5,0.083,10,0.196,11,0.265,12,0.775,16,0.265,17,0.006,19,0.215,27,0.098,88,0.005,89,0.005,115,5.82,145,6.282,146,5.323,147,4.849,148,3.95,149,6.528,150,8.637,151,5.735,152,1.374,153,6.644,154,4.849,155,5.323,156,4.488]],["title/interfaces/BaseStoreSelectors.html",[0,0.104,132,3.342]],["body/interfaces/BaseStoreSelectors.html",[0,0.194,2,0.99,3,0.072,4,0.064,5,0.072,10,0.169,11,0.243,16,0.277,17,0.006,19,0.253,27,0.103,28,1.286,29,1.46,68,2.765,88,0.005,89,0.005,98,4.872,110,4.592,111,4.856,112,4.856,113,3.871,114,2.813,115,4.841,116,6.626,117,4.856,118,3.739,119,6.28,120,4.183,121,6.638,122,3.147,123,4.841,124,3.314,125,4.592,126,5.231,127,3.619,128,2.734,129,5.467,130,3.509,131,3.314,132,5.965,133,3.619,134,3.871,135,2.291,136,2.519,137,1.277,138,5.346,139,2.622,140,4.183,141,5.98,142,5.98,143,5.98]],["title/interfaces/BasicEntityAdapterReducerActions.html",[0,0.104,157,3.966]],["body/interfaces/BasicEntityAdapterReducerActions.html",[0,0.182,2,1.109,3,0.081,4,0.072,5,0.081,10,0.189,11,0.26,16,0.299,17,0.006,19,0.208,27,0.096,29,1.369,49,1.555,68,2.27,88,0.005,89,0.005,113,4.338,114,2.521,124,3.713,128,3.064,135,3.406,137,1.518,154,4.687,157,6.955,158,4.899,159,4.899,160,5.813,161,6.219,162,3.899,163,7.55,164,4.687,165,6.31,166,6.31,167,5.813,168,5.813,169,5.442,170,4.899,171,1.757,172,6.31,173,4.502]],["title/interfaces/BasicEntityState.html",[0,0.104,170,3.342]],["body/interfaces/BasicEntityState.html",[0,0.183,2,1.125,3,0.082,4,0.073,5,0.082,10,0.192,11,0.262,16,0.296,17,0.006,19,0.211,27,0.097,29,1.381,49,1.577,68,2.303,88,0.005,89,0.005,113,4.401,114,2.557,124,3.767,128,3.109,135,2.604,137,1.161,144,4.362,154,4.755,157,5.898,158,4.97,159,4.97,160,5.898,161,4.755,162,2.981,163,8.129,164,4.755,165,6.402,166,6.402,167,5.898,168,5.898,169,5.521,170,5.912,171,2.12,172,8.413,173,4.568]],["title/pipes/BtwPipe.html",[174,1.449,175,4.305]],["body/pipes/BtwPipe.html",[3,0.07,4,0.063,5,0.07,10,0.208,12,0.553,16,0.19,17,0.006,19,0.181,27,0.07,32,1.541,34,1.735,42,1.792,44,2.058,47,1.608,49,1.709,66,2.79,88,0.005,89,0.005,90,0.564,96,0.836,152,1.414,174,2.336,175,7.982,176,3.15,177,3.651,178,6.157,179,1.708,180,1.294,181,8.937,182,2.583,183,1.129,184,1.339,185,4.198,186,5.153,187,0.756,188,6.157,189,7.768,190,3.132,191,4.082,192,6.711,193,1.462,194,2.771,195,6.198,196,1.146,197,6.157,198,6.157,199,6.157,200,3.651,201,6.157,202,6.157,203,2.321,204,4.198,205,0.52,206,1.882,207,5.066,208,6.157,209,3.651,210,6.157,211,4.269,212,7.768,213,6.157,214,6.157,215,5.066,216,6.157,217,6.157,218,5.066,219,5.066,220,6.157,221,6.157,222,7.768,223,4.742,224,6.157,225,5.499]],["title/interfaces/ComponentTypeWrapper.html",[0,0.104,226,4.305]],["body/interfaces/ComponentTypeWrapper.html",[0,0.2,2,0.994,3,0.072,4,0.064,5,0.072,7,3.429,17,0.006,19,0.254,21,3.755,27,0.072,34,1.785,42,1.843,44,1.458,47,1.637,49,1.897,61,1.968,70,4.035,88,0.005,89,0.005,90,0.79,91,6.089,96,0.86,100,5.21,109,1.649,203,2.981,205,0.535,226,7.699,227,6.332,228,6.332,229,6.332,230,7.906,231,5.758,232,7.906,233,4.4,234,4.854,235,7.061,236,5.481,237,3.582,238,3.504,239,7.061,240,5.481,241,7.156,242,9.027,243,7.906,244,7.061,245,1.729,246,5.655,247,4.611,248,6.332,249,4.39,250,3.888,251,7.061,252,6.332,253,6.639,254,7.699,255,3.513,256,6.278,257,7.061,258,6.332]],["title/injectables/EffectsService.html",[259,1.426,260,3.966]],["body/injectables/EffectsService.html",[3,0.078,4,0.07,5,0.078,10,0.183,12,0.744,16,0.255,17,0.006,19,0.273,27,0.078,29,1.445,44,2.054,88,0.005,89,0.005,90,0.626,147,4.536,152,1.293,180,1.26,183,1.519,184,1.664,187,1.018,193,1.968,196,1.543,205,0.578,259,2.452,260,6.82,261,2.965,262,6.837,263,6.82,264,6.82,265,8.288,266,6.837,267,8.288,268,2.81,269,8.288,270,6.837,271,2.023,272,1.649,273,2.354,274,3.03,275,6.837,276,6.837,277,6.837,278,6.837,279,6.837,280,6.837,281,6.837]],["title/interfaces/EntityStoreActions.html",[0,0.104,282,3.51]],["body/interfaces/EntityStoreActions.html",[0,0.177,2,0.9,3,0.065,4,0.058,5,0.065,10,0.153,11,0.229,12,0.667,16,0.299,17,0.006,19,0.242,27,0.094,29,1.203,68,2.798,88,0.004,89,0.004,114,3.106,115,5.536,119,6.763,120,3.806,121,5.982,122,3.287,123,4.559,124,3.015,126,5.982,128,2.488,130,4.132,131,3.015,135,3.276,137,1.46,138,5.759,139,3.62,140,3.806,141,3.806,142,3.806,143,3.806,144,3.798,158,3.977,159,3.977,161,5.982,162,3.75,170,3.977,274,2.542,282,5.995,283,4.178,284,4.418,285,4.178,286,3.402,287,5.407,288,4.72,289,4.72,290,4.72,291,4.72]],["title/interfaces/EntityStoreAssets.html",[0,0.104,286,2.859]],["body/interfaces/EntityStoreAssets.html",[0,0.181,2,0.943,3,0.069,4,0.061,5,0.069,10,0.161,11,0.235,16,0.259,17,0.006,19,0.248,27,0.096,29,1.239,68,1.93,88,0.004,89,0.004,114,2.143,115,5.616,119,6.568,120,3.985,121,6.068,122,3.331,123,5.438,124,3.157,126,5.074,128,3.841,130,5.091,131,4.655,135,2.779,137,1.239,138,5.803,139,2.498,140,3.985,141,3.985,142,3.985,143,3.985,158,4.165,159,4.165,161,5.074,162,3.18,170,4.165,274,2.662,282,6.45,283,4.375,284,4.627,285,4.375,286,4.536,287,6.45,288,4.943,289,4.943,290,4.943,291,4.943]],["title/interfaces/EntityStoreAssetsGeneratorOptions.html",[0,0.104,155,3.51]],["body/interfaces/EntityStoreAssetsGeneratorOptions.html",[0,0.184,2,1.131,3,0.082,4,0.073,5,0.082,10,0.193,11,0.263,12,0.847,16,0.281,17,0.006,19,0.212,27,0.098,88,0.005,89,0.005,115,5.792,145,5.245,146,5.245,147,4.778,148,3.893,149,6.433,150,8.604,151,5.713,152,1.367,153,7.266,154,4.778,155,6.227,156,5.792]],["title/interfaces/EntityStoreSelectors.html",[0,0.104,287,3.51]],["body/interfaces/EntityStoreSelectors.html",[0,0.181,2,0.939,3,0.068,4,0.061,5,0.068,10,0.16,11,0.235,16,0.272,17,0.006,19,0.247,27,0.096,29,1.236,68,1.923,88,0.004,89,0.004,114,2.135,115,5.609,119,6.565,120,3.969,121,6.595,122,3.305,123,4.684,124,3.144,126,5.061,128,2.595,130,4.246,131,3.144,135,2.771,137,1.236,138,5.799,139,2.488,140,3.969,141,5.867,142,5.867,143,5.867,158,4.148,159,4.148,161,5.061,162,3.172,170,4.148,274,2.652,282,5.555,283,4.357,284,4.608,285,4.357,286,3.548,287,6.116,288,7.277,289,4.923,290,4.923,291,4.923]],["title/directives/FocusClickDirective.html",[292,0.757,293,2.288]],["body/directives/FocusClickDirective.html",[3,0.06,4,0.053,5,0.06,10,0.14,11,0.215,12,0.47,15,2.687,16,0.215,17,0.006,19,0.154,27,0.06,32,1.216,47,1.63,66,3.568,76,2.86,81,2.366,88,0.004,89,0.004,90,0.48,135,2.541,137,0.848,177,3.106,179,1.453,180,0.796,182,2.325,183,1.282,184,1.673,187,1.129,193,1.244,196,1.302,200,3.106,203,1.975,205,0.443,292,1.466,293,4.155,294,1.302,295,9.342,296,9.342,297,5.237,298,2.103,299,8.754,300,1.601,301,6.07,302,6.993,303,8.401,304,2.286,305,3.892,306,5.958,307,6.993,308,1.243,309,6.993,310,3.814,311,3.483,312,6.993,313,6.993,314,6.993,315,3.4,316,6.993,317,1.564,318,6.993,319,4.519,320,4.382,321,5.237,322,7.032,323,5.223,324,3.084,325,6.119,326,7.873,327,7.873,328,4.519,329,7.504,330,3.65,331,6.246,332,4.255,333,3.578,334,3.797,335,2.271,336,5.237,337,5.237,338,3.216,339,5.754,340,3.106,341,1.655,342,4.678,343,3.4,344,5.237,345,3.106,346,3.814,347,2.486,348,5.237,349,3.006,350,2.134,351,2.915,352,4.309,353,6.993,354,6.246,355,5.237,356,5.237,357,3.814,358,3.474,359,5.237,360,5.237]],["title/directives/FormAccessorContainer.html",[292,0.757,361,2.288]],["body/directives/FormAccessorContainer.html",[2,0.618,3,0.045,4,0.04,5,0.045,10,0.105,11,0.176,12,0.667,15,1.514,16,0.228,17,0.006,19,0.242,21,2.336,26,1.964,27,0.045,32,1.312,34,2.394,35,4.739,42,1.147,49,1.261,57,3.42,61,1.782,66,1.785,73,1.514,83,1.785,88,0.003,89,0.003,90,0.361,91,4.416,94,3.519,96,1.008,99,5.526,100,4.717,101,2.419,103,3.519,106,2.453,109,1.55,122,2.894,180,1.129,183,1.051,184,1.592,187,1.043,193,1.762,196,1.468,203,2.798,205,0.333,206,1.752,250,2.419,251,3.519,272,0.95,292,0.9,294,0.98,300,1.463,304,2.845,308,1.089,317,1.7,335,1.709,347,3.906,350,3.024,361,2.721,362,8.703,363,7.838,364,8.703,365,3.94,366,2.995,367,3.653,368,3.834,369,1.788,370,5.733,371,5.733,372,5.733,373,3.289,374,6.758,375,5.733,376,3.94,377,4.306,378,6.758,379,1.557,380,5.405,381,5.733,382,6.971,383,5.146,384,5.716,385,6.771,386,8.703,387,4.922,388,5.733,389,7.417,390,7.417,391,3.94,392,2.797,393,7.421,394,5.733,395,4.922,396,5.733,397,3.94,398,3.94,399,3.803,400,3.94,401,3.94,402,3.803,403,5.733,404,4.416,405,5.733,406,5.733,407,3.94,408,2.787,409,5.733,410,5.733,411,5.12,412,2.548,413,3.94,414,3.94,415,3.94,416,5.733,417,3.94,418,5.733,419,6.758,420,3.94,421,7.421,422,3.94,423,3.94,424,2.336,425,2.511,426,3.099,427,3.94,428,2.614,429,3.94,430,3.94,431,2.071,432,2.129,433,3.94,434,3.94]],["title/interfaces/FormStateOptionsEntity.html",[0,0.104,390,3.966]],["body/interfaces/FormStateOptionsEntity.html",[0,0.161,2,1.176,3,0.085,4,0.076,5,0.085,10,0.201,11,0.269,12,0.858,16,0.269,17,0.006,27,0.085,29,1.597,88,0.005,89,0.005,390,7.202,392,2.408,435,6.693,436,7.493,437,8.535,438,9.555]],["title/pipes/HasObserversPipe.html",[174,1.449,439,4.305]],["body/pipes/HasObserversPipe.html",[3,0.077,4,0.069,5,0.077,12,0.606,16,0.208,17,0.006,19,0.198,27,0.094,29,1.331,44,1.893,47,1.836,66,3.056,73,2.591,88,0.005,89,0.005,90,0.753,109,1.395,136,2.694,174,2.471,176,3.45,177,4,179,1.871,180,1.348,182,2.733,183,1.236,184,1.528,185,3.645,187,0.828,193,1.602,196,1.255,200,5.258,203,2.543,204,4.443,205,0.57,206,2.061,298,2.028,320,4.935,439,8.243,440,8.219,441,7.341,442,6.024,443,9.228,444,7.341,445,8.7,446,6.744,447,6.744,448,8.219,449,4.676,450,6.744,451,6.744,452,6.744,453,4.474,454,6.024,455,6.744]],["title/pipes/IbanPipe.html",[174,1.449,456,4.305]],["body/pipes/IbanPipe.html",[3,0.076,4,0.068,5,0.076,12,0.598,15,2.56,16,0.205,17,0.006,19,0.196,27,0.076,32,1.363,44,1.879,47,1.689,88,0.005,89,0.005,90,0.61,152,1.332,174,2.453,176,3.409,177,3.952,179,1.849,180,1.341,182,2.713,183,1.221,184,1.406,185,3.602,186,5.413,187,0.818,190,2.335,192,5.942,193,1.582,196,1.24,200,4.839,203,2.512,204,4.41,205,0.563,206,2.037,223,5.133,308,0.92,456,8.209,457,6.663,458,9.19,459,6.663,460,6.663,461,6.663,462,6.663,463,6.663,464,6.663,465,6.663,466,6.663,467,3.952,468,6.663,469,9.19,470,6.663,471,7.287,472,5.952,473,6.663,474,7.287,475,6.663,476,2.61,477,6.663]],["title/components/MockTourHolderComponent.html",[109,0.818,478,2.344]],["body/components/MockTourHolderComponent.html",[3,0.054,4,0.048,5,0.054,10,0.127,11,0.202,17,0.006,19,0.238,27,0.054,28,1.727,32,1.158,47,1.356,49,1.047,61,2.036,88,0.004,89,0.004,90,0.436,106,1.341,109,1.272,179,1.319,180,1.513,182,2.178,183,1.201,184,1.509,187,0.991,196,0.885,205,0.402,272,1.147,292,0.747,293,2.257,294,1.183,298,3.097,300,1.648,308,1.034,317,0.885,361,2.257,369,2.316,478,3.926,479,2.566,480,1.793,481,1.828,482,7.563,483,4.756,484,4.471,485,3.451,486,6.693,487,7.493,488,5.457,489,8.074,490,4.756,491,6.551,492,5.39,493,6.551,494,5.851,495,4.756,496,6.551,497,5.851,498,4.756,499,4.771,500,4.756,501,1.341,502,2.433,503,6.551,504,4.248,505,3.663,506,2.313,507,4.336,508,4.756,509,1.503,510,4.756,511,3.298,512,1.609,513,2.313,514,2.313,515,3.109,516,1.58,517,4.025,518,2.371,519,2.371,520,2.313,521,2.063,522,2.371,523,2.313,524,3.019,525,2.371,526,2.313,527,2.371,528,3.266,529,2.371,530,3.185,531,3.266,532,2.313,533,2.108,534,2.313,535,3.428,536,2.371,537,4.025,538,2.313,539,2.257,540,2.313,541,2.205,542,2.371,543,2.257,544,2.257,545,2.371,546,2.313,547,2.313,548,2.155,549,2.371,550,2.313,551,2.371,552,2.313,553,3.266,554,2.313,555,2.313,556,2.371,557,2.313,558,2.371,559,2.313,560,2.257,561,2.371,562,2.371,563,2.371,564,2.108,565,1.609,566,2.205,567,2.205,568,2.371,569,2.257,570,2.371,571,2.371,572,2.371,573,2.205,574,2.257,575,2.371,576,2.108,577,2.205,578,2.371,579,2.371,580,2.155,581,2.257,582,2.371,583,2.257,584,2.371,585,2.257,586,2.371,587,2.205,588,2.205,589,2.257,590,2.371,591,2.257,592,2.371,593,1.793,594,2.257,595,2.205,596,2.257,597,2.205,598,2.205,599,2.205,600,1.938,601,2.205,602,2.371,603,2.108,604,2.371,605,2.257,606,2.371,607,2.063,608,2.205,609,2.371,610,2.205,611,2.371,612,2.257,613,2.371,614,2.371]],["title/components/MockTourStepComponent.html",[109,0.818,520,2.344]],["body/components/MockTourStepComponent.html",[3,0.042,4,0.038,5,0.042,10,0.175,11,0.169,12,0.494,16,0.222,17,0.006,19,0.162,27,0.042,28,1.746,32,1.19,47,1.727,49,0.818,55,1.648,72,3.139,88,0.003,89,0.003,90,0.764,106,1.048,109,1.453,137,0.89,152,0.797,171,1.367,179,1.032,180,1.472,182,1.827,183,1.007,184,1.702,187,1.204,194,1.961,196,1.217,203,2.072,205,0.314,245,1.016,271,1.934,292,0.584,293,1.765,294,0.925,298,3.065,300,1.714,304,1.796,305,3.059,308,1.063,315,2.672,317,1.217,319,2.135,320,2.07,357,4.002,361,1.765,367,2.97,369,1.454,478,1.808,479,2.153,480,1.402,481,1.429,482,3.322,484,3.84,485,3.72,488,4.002,499,2.709,507,3.827,509,1.175,511,5.937,512,2.728,514,1.808,515,2.608,516,1.944,517,3.599,518,1.854,519,1.854,520,3.511,521,4.197,522,1.854,523,1.808,524,2.94,525,1.854,526,1.808,527,1.854,528,2.74,529,1.854,530,2.672,531,2.74,532,1.808,533,1.648,534,1.808,535,3.065,536,1.854,537,3.599,538,1.808,539,1.765,540,1.808,541,1.724,542,1.854,543,1.765,544,1.765,545,1.854,546,1.808,547,1.808,548,1.685,549,1.854,550,1.808,551,1.854,552,1.808,553,2.74,554,1.808,555,1.808,556,1.854,557,1.808,558,1.854,559,1.808,560,1.765,561,1.854,562,1.854,563,1.854,564,1.648,565,1.258,566,1.724,567,1.724,568,1.854,569,1.765,570,1.854,571,1.854,572,1.854,573,1.724,574,1.765,575,1.854,576,1.648,577,1.724,578,1.854,579,1.854,580,1.685,581,1.765,582,1.854,583,1.765,584,1.854,585,1.765,586,1.854,587,1.724,588,1.724,589,1.765,590,1.854,591,1.765,592,1.854,593,1.402,594,1.765,595,1.724,596,1.765,597,1.724,598,1.724,599,1.724,600,1.516,601,1.724,602,1.854,603,1.648,604,1.854,605,1.765,606,1.854,607,4.292,608,1.724,609,1.854,610,1.724,611,1.854,612,1.765,613,1.854,614,1.854,615,3.719,616,6.448,617,6.448,618,5.006,619,4.908,620,3.259,621,4.908,622,5.258,623,4.908,624,4.908,625,3.876,626,4.532,627,5.034,628,4.233,629,5.034,630,5.457,631,5.496,632,4.908,633,2.97,634,4.908,635,5.496,636,5.496,637,5.496,638,5.496,639,3.059,640,5.496,641,2.672,642,5.496,643,5.496,644,5.496,645,2.153,646,4.233,647,3.719,648,3.719,649,2.865,650,3.719,651,2.01,652,2.579,653,3.322,654,1.955,655,3.719,656,3.06,657,3.322,658,3.719,659,3.322,660,2.709,661,2.135,662,3.719,663,1.765,664,2.01,665,3.719]],["title/directives/NgxAbstractTableCellDirective.html",[292,0.757,564,2.136]],["body/directives/NgxAbstractTableCellDirective.html",[3,0.047,4,0.042,5,0.047,10,0.11,11,0.182,12,0.622,16,0.265,17,0.006,19,0.204,27,0.047,32,1.29,34,1.159,38,3.366,47,1.433,48,3.578,49,1.666,54,2.16,72,1.675,81,2.911,88,0.003,89,0.003,90,0.634,96,0.558,106,1.666,137,1.493,152,0.857,179,1.14,180,1.151,182,1.966,183,1.084,184,1.744,187,1.183,193,0.976,196,1.288,205,0.347,231,2.994,234,2.524,237,3.137,292,0.928,294,1.022,298,1.777,300,1.655,304,1.932,306,3.63,308,1.238,311,2.47,317,1.554,319,3.974,320,3.853,333,3.542,341,1.868,345,3.506,346,4.305,349,2.36,379,1.388,512,2.342,524,1.868,535,3.653,564,2.62,565,2,651,3.195,654,2.16,666,4.111,667,5.652,668,5.041,669,5.041,670,6.28,671,5.84,672,5.406,673,5.041,674,4.8,675,5.321,676,6.781,677,5.84,678,5.83,679,5.83,680,4.553,681,5.911,682,5.041,683,5.911,684,3.853,685,4.411,686,4.8,687,5.332,688,5.332,689,5.332,690,5.332,691,3.137,692,5.911,693,2.014,694,5.911,695,4.111,696,3.767,697,5.483,698,4.111,699,4.553,700,4.223,701,3.393,702,4.553,703,5.321,704,4.111,705,2.874,706,2.712,707,4.111,708,4.402,709,4.111,710,4.111,711,4.305,712,4.111,713,4.111,714,4.111,715,1.777,716,3.671,717,3.671,718,2.994,719,2.994,720,1.321,721,5.911,722,6.183,723,2.619,724,4.111,725,4.111,726,8.019,727,4.111,728,4.111,729,4.111,730,4.111]],["title/directives/NgxAccessibleAbstractDragAndDropItemDirective.html",[292,0.757,566,2.235]],["body/directives/NgxAccessibleAbstractDragAndDropItemDirective.html",[3,0.061,4,0.055,5,0.061,10,0.144,11,0.219,12,0.794,15,2.071,16,0.262,17,0.006,19,0.21,27,0.061,29,0.873,32,1.101,81,1.823,88,0.004,89,0.004,90,0.732,96,0.968,122,2.655,137,1.154,171,1.772,180,0.82,183,1.307,184,1.698,187,1.197,193,1.28,196,1.724,205,0.455,239,6.366,271,2.108,292,1.119,294,1.34,300,1.267,305,3.967,308,0.984,315,3.466,317,1.771,325,3.925,330,4.097,367,3.852,379,0.988,385,5.864,476,2.792,501,1.519,516,1.719,565,3.219,566,3.304,588,4.545,630,5.347,661,4.584,693,1.3,715,1.62,731,6.571,732,6.151,733,6.151,734,4.813,735,5.864,736,7.127,737,7.127,738,7.127,739,7.986,740,3.94,741,6.613,742,7.59,743,5.191,744,7.133,745,7.133,746,6.151,747,5.816,748,5.191,749,7.127,750,6.545,751,7.127,752,5.389,753,2.778,754,5.892,755,4.376,756,5.389,757,3.925,758,5.389,759,5.389,760,5.389,761,3.925,762,3.925,763,5.389,764,5.191,765,7.127,766,5.389,767,5.389,768,5.389]],["title/classes/NgxAccessibleDragAndDropAbstractService.html",[90,0.442,769,3.966]],["body/classes/NgxAccessibleDragAndDropAbstractService.html",[3,0.043,4,0.038,5,0.043,10,0.101,11,0.171,12,0.652,16,0.274,17,0.006,19,0.246,26,1.875,27,0.043,28,1.13,32,0.581,34,1.854,41,2.568,42,2.252,44,1.864,48,2.304,49,2.034,68,1.78,73,2.129,88,0.003,89,0.003,90,0.344,92,2.396,96,1.305,99,3.18,106,2.282,137,1.253,152,1.326,162,2.304,174,1.666,177,3.286,180,0.843,183,1.016,184,1.511,187,0.994,193,1.316,196,1.507,205,0.318,238,1.666,249,5.032,268,2.594,271,2.395,272,0.907,300,1.169,308,1.068,311,1.342,334,3.148,345,3.286,350,2.258,369,1.921,377,3.53,379,1.418,426,3.923,453,4.364,467,4.589,479,2.17,501,1.06,516,1.866,565,2.456,641,3.936,663,1.785,705,2.694,715,2.182,720,1.208,731,6.887,732,6.447,733,7.047,753,2.15,755,2.309,769,6.367,770,3.76,771,2.637,772,4.625,773,7.528,774,3.923,775,5.54,776,5.54,777,6.578,778,6.578,779,5.54,780,5.54,781,5.067,782,6.578,783,2.5,784,3.76,785,5.59,786,3.841,787,2.912,788,6.578,789,5.54,790,3.76,791,3.587,792,6.911,793,5.54,794,3.122,795,3.76,796,4.267,797,5.54,798,4.267,799,2.309,800,4.558,801,5.54,802,5.286,803,3.76,804,4.355,805,2.896,806,3.76,807,5.54,808,5.37,809,3.76,810,3.76,811,3.76,812,2.396,813,3.661,814,3.365,815,1.704,816,2.494,817,4.192,818,5.54,819,2.738,820,3.76,821,3.122,822,3.122,823,6.911,824,3.776,825,4.039,826,3.084,827,5.54,828,2.738,829,2.896,830,3.76,831,5.553,832,3.76,833,2.309,834,3.76,835,2.896,836,2.896,837,3.76,838,6.578,839,6.578,840,6.578,841,2.738,842,3.76,843,5.54,844,5.54,845,3.76,846,5.54,847,2.738,848,3.76,849,3.76,850,3.76,851,3.76,852,3.76,853,3.76,854,3.148,855,3.76,856,2.309,857,3.76,858,3.76,859,2.738,860,3.76,861,3.76,862,2.032,863,3.094,864,3.76,865,3.76]],["title/interfaces/NgxAccessibleDragAndDropBaseMessage.html",[0,0.104,866,3.51]],["body/interfaces/NgxAccessibleDragAndDropBaseMessage.html",[0,0.192,2,1.072,3,0.078,4,0.069,5,0.078,10,0.183,11,0.255,16,0.305,17,0.006,18,6.491,27,0.106,28,1.89,88,0.005,89,0.005,96,0.927,152,1.292,190,3.248,273,3.069,753,2.231,755,4.192,802,4.972,819,4.972,835,5.258,836,5.258,841,6.031,847,6.031,856,4.192,866,6.749,867,5.258,868,5.258,869,6.865,870,5.617,871,5.617,872,5.617,873,5.617,874,5.617,875,5.617,876,7.334,877,5.258,878,5.258,879,5.617,880,5.617,881,5.617,882,5.617]],["title/directives/NgxAccessibleDragAndDropContainerDirective.html",[292,0.757,567,2.235]],["body/directives/NgxAccessibleDragAndDropContainerDirective.html",[3,0.073,4,0.065,5,0.073,10,0.254,11,0.245,12,0.714,17,0.006,19,0.188,27,0.073,32,1.229,47,1.647,57,3.45,88,0.005,89,0.005,90,0.586,96,0.869,106,2.242,179,1.774,182,2.645,184,1.637,187,0.977,205,0.54,292,1.491,294,1.59,298,2.392,300,1.689,308,1.098,311,2.838,341,2.021,567,3.688,654,4.181,732,6.669,733,7.42,773,7.454,774,4.3,785,6.127,856,4.884,883,7.734,884,6.395,885,7.105,886,7.105,887,6.545,888,7.105,889,9.059,890,7.105,891,4.767,892,7.454,893,7.955,894,6.395,895,6.545,896,7.955,897,6.395]],["title/directives/NgxAccessibleDragAndDropHostDirective.html",[292,0.757,569,2.288]],["body/directives/NgxAccessibleDragAndDropHostDirective.html",[3,0.053,4,0.047,5,0.053,10,0.243,11,0.197,12,0.752,16,0.245,17,0.006,19,0.217,27,0.053,32,1.294,34,1.807,44,1.061,47,1.649,49,1.014,50,5.14,57,2.78,75,4.252,88,0.004,89,0.004,90,0.422,96,1.25,135,1.674,152,1.068,179,1.278,180,1.121,182,2.131,183,1.175,184,1.709,187,1.131,190,2.583,193,1.75,196,1.613,205,0.389,206,1.959,245,1.258,271,2.356,292,1.361,294,1.146,298,1.927,300,1.69,308,1.156,317,1.613,334,2.78,341,1.456,369,1.95,379,1.175,408,3.873,501,1.299,513,2.241,566,3.693,567,3.416,569,3.042,625,4.724,684,2.565,706,2.511,732,7.182,733,7.708,740,3.693,742,5.724,753,2.833,769,3.792,773,7.974,774,3.464,783,1.866,856,4.891,883,8.328,885,5.724,886,5.724,887,5.274,888,5.724,890,5.724,892,5.274,895,5.274,898,4.608,899,4.525,900,7.966,901,8.372,902,7.369,903,6.409,904,6.409,905,6.409,906,4.608,907,6.409,908,4.608,909,3.801,910,3.279,911,4.608,912,6.409,913,4.608,914,6.409,915,6.409,916,4.608,917,6.409,918,4.608,919,6.409,920,5.274,921,6.409,922,4.608,923,5.274,924,4.608,925,4.608,926,4.116,927,4.608,928,4.608,929,4.608,930,4.608,931,4.608,932,4.608,933,4.608,934,4.608]],["title/interfaces/NgxAccessibleDragAndDropMessageRecord.html",[0,0.104,819,3.51]],["body/interfaces/NgxAccessibleDragAndDropMessageRecord.html",[0,0.185,2,0.99,3,0.072,4,0.064,5,0.072,10,0.169,11,0.243,16,0.312,17,0.006,18,4.592,27,0.103,28,1.286,88,0.005,89,0.005,96,1.224,144,4.843,152,1.419,190,3.159,273,2.171,509,2.991,753,2.946,755,5.534,802,4.592,819,5.742,835,6.943,836,6.943,841,6.758,847,6.758,856,5.534,866,6.265,867,4.856,868,4.856,869,7.397,870,5.188,871,5.188,872,5.188,873,5.188,874,5.188,875,5.188,876,7.079,877,4.856,878,4.856,879,5.188,880,5.188,881,5.188,882,5.188]],["title/interfaces/NgxAccessibleDragAndDropMoveEvent.html",[0,0.104,878,3.713]],["body/interfaces/NgxAccessibleDragAndDropMoveEvent.html",[0,0.19,2,1.049,3,0.076,4,0.068,5,0.076,10,0.179,11,0.252,16,0.302,17,0.006,18,4.868,27,0.105,28,1.363,88,0.005,89,0.005,96,0.908,152,1.28,190,3.519,273,2.301,753,2.185,755,4.104,802,4.868,819,4.868,835,5.148,836,5.148,841,5.953,847,5.953,856,4.104,866,6.431,867,5.148,868,5.148,869,6.802,870,5.499,871,5.499,872,5.499,873,5.499,874,5.499,875,5.499,876,7.266,877,5.148,878,6.296,879,7.57,880,7.57,881,7.57,882,7.57]],["title/components/NgxAccordionComponent.html",[109,0.818,523,2.344]],["body/components/NgxAccordionComponent.html",[3,0.037,4,0.033,5,0.037,10,0.231,11,0.154,12,0.545,16,0.254,17,0.006,19,0.2,27,0.037,28,1.022,32,0.938,34,1.913,42,1.976,44,1.154,49,1.816,50,5.295,57,2.173,61,2.109,66,2.27,74,1.288,75,4.503,88,0.003,89,0.003,90,0.459,96,0.922,109,1.03,152,0.88,179,0.912,180,1.466,183,0.918,184,1.616,187,1.059,193,1.441,196,1.263,203,1.24,205,0.278,206,1.531,236,2.28,271,2.368,272,0.793,292,0.516,293,1.561,294,0.818,298,3.046,304,1.638,308,0.838,311,2.422,317,1.49,330,2.323,334,2.173,341,1.583,361,1.561,366,2.69,368,3.3,369,2.037,373,3.008,392,1.61,408,2.436,412,3.393,426,1.777,476,1.288,478,1.599,479,1.963,480,1.24,481,1.263,484,2.498,485,2.042,507,3.654,509,1.583,514,1.599,515,2.378,516,1.208,517,3.384,518,1.639,519,1.639,520,1.599,521,1.426,522,1.639,523,3.3,524,2.899,525,1.639,526,4.193,527,4.768,528,2.498,529,1.639,530,2.436,531,2.498,532,1.599,533,1.457,534,1.599,535,2.882,536,1.639,537,3.384,538,1.599,539,1.561,540,1.599,541,1.524,542,1.639,543,1.561,544,1.561,545,1.639,546,1.599,547,1.599,548,1.49,549,1.639,550,1.599,551,1.639,552,1.599,553,2.498,554,1.599,555,1.599,556,1.639,557,1.599,558,1.639,559,1.599,560,1.561,561,1.639,562,1.639,563,1.639,564,1.457,565,1.112,566,1.524,567,1.524,568,1.639,569,1.561,570,1.639,571,1.639,572,1.639,573,1.524,574,1.561,575,1.639,576,1.457,577,1.524,578,1.639,579,1.639,580,1.49,581,1.561,582,1.639,583,1.561,584,1.639,585,1.561,586,1.639,587,1.524,588,1.524,589,1.561,590,1.639,591,1.561,592,1.639,593,1.24,594,1.561,595,1.524,596,1.561,597,1.524,598,1.524,599,1.524,600,1.34,601,1.524,602,1.639,603,1.457,604,1.639,605,1.561,606,1.639,607,1.426,608,1.524,609,1.639,610,1.524,611,1.639,612,1.561,613,1.639,614,1.639,700,3.657,715,1.506,720,1.057,753,3.045,792,2.937,814,1.682,815,2.27,821,1.561,822,1.561,829,2.533,856,4.168,935,3.288,936,4.122,937,3.649,938,2.789,939,3.859,940,4.475,941,3.324,942,3.859,943,5.421,944,6.07,945,5.633,946,5.01,947,5.01,948,3.324,949,2.425,950,6.07,951,3.669,952,5.01,953,3.868,954,5.585,955,4.456,956,5.321,957,3.288,958,3.859,959,5.421,960,3.288,961,5.01,962,3.288,963,2.971,964,5.01,965,3.288,966,3.859,967,3.288,968,4.168,969,3.288,970,4.122,971,3.288,972,2.533,973,3.193,974,2.937,975,3.288,976,3.288,977,1.728,978,3.288,979,3.288,980,3.859,981,2.395,982,2.181,983,3.288,984,3.288,985,3.288,986,3.288,987,3.288,988,3.288,989,3.288,990,3.288,991,3.288,992,3.288,993,4.475,994,1.112,995,3.288,996,3.288,997,3.288,998,2.563,999,2.28,1000,3.649,1001,5.01,1002,3.288,1003,3.288,1004,1.777,1005,3.288,1006,2.937,1007,3.288,1008,3.288]],["title/components/NgxAccordionItemComponent.html",[109,0.818,526,2.344]],["body/components/NgxAccordionItemComponent.html",[3,0.029,4,0.025,5,0.029,7,3.129,10,0.067,11,0.124,12,0.576,15,0.961,16,0.251,17,0.006,19,0.172,27,0.029,28,0.824,29,1.111,32,1.283,34,1.139,36,1.468,39,2.602,42,0.728,44,1.171,49,1.588,81,1.367,88,0.002,89,0.002,90,0.37,96,0.691,109,0.863,122,2.497,137,0.946,152,0.586,162,1.04,179,0.694,180,1.424,183,0.741,184,1.676,187,1.155,193,1.522,196,1.516,205,0.211,206,1.235,231,1.822,271,1.896,292,0.393,293,1.187,294,0.622,298,2.995,300,1.672,301,5.648,304,1.321,305,2.25,306,1.536,308,1.182,310,2.943,311,3.212,315,2.839,317,1.648,330,4.323,334,1.753,340,1.483,341,0.79,345,2.397,346,1.822,354,2.234,361,1.187,366,2.254,368,1.965,369,2.294,373,2.588,379,0.741,392,2.414,402,3.374,426,1.352,449,2.802,453,4.983,476,1.583,478,1.216,479,1.583,480,0.943,481,0.961,484,2.015,485,1.647,501,0.705,507,3.254,509,2.026,512,1.367,514,1.216,515,2.772,516,1.653,517,2.911,518,1.247,519,1.247,520,1.216,521,1.085,522,1.247,523,2.839,524,2.739,525,1.247,526,2.839,527,4.827,528,2.015,529,1.247,530,1.965,531,2.015,532,1.216,533,1.109,534,1.216,535,2.479,536,1.247,537,2.911,538,1.216,539,1.187,540,1.216,541,1.16,542,1.247,543,1.187,544,1.187,545,1.247,546,1.216,547,1.216,548,1.133,549,1.247,550,1.216,551,1.247,552,1.216,553,2.015,554,1.216,555,1.216,556,1.247,557,1.216,558,1.247,559,1.216,560,1.187,561,1.247,562,1.247,563,1.247,564,1.109,565,0.846,566,1.16,567,1.16,568,1.247,569,1.187,570,1.247,571,1.247,572,1.247,573,1.16,574,1.187,575,1.247,576,1.109,577,1.16,578,1.247,579,1.247,580,1.133,581,1.187,582,1.247,583,1.187,584,1.247,585,1.187,586,1.247,587,1.16,588,1.16,589,1.187,590,1.247,591,1.187,592,1.247,593,0.943,594,1.187,595,1.16,596,1.187,597,1.16,598,1.16,599,1.16,600,1.019,601,1.16,602,1.247,603,1.109,604,1.247,605,1.187,606,1.247,607,1.085,608,1.16,609,1.247,610,1.16,611,1.247,612,1.187,613,1.247,614,1.247,625,3.463,626,4.049,660,4.668,661,1.436,674,3.526,693,1.871,705,1.216,708,1.28,715,2.258,740,1.16,741,4.668,743,2.943,747,2.943,753,3.195,754,2.802,757,2.943,816,1.659,817,3.721,821,1.187,822,1.187,899,3.122,936,3.325,937,2.943,938,2.25,939,3.113,940,3.61,941,2.681,942,3.113,945,3.936,953,1.594,954,2.058,955,3.25,956,4.253,958,6.395,963,2.397,972,1.927,1009,9.439,1010,2.234,1011,3.704,1012,2.25,1013,4.542,1014,3.61,1015,3.61,1016,4.041,1017,3.016,1018,5.085,1019,5.84,1020,5.216,1021,4.542,1022,5.085,1023,4.041,1024,4.041,1025,4.253,1026,5.84,1027,4.041,1028,3.61,1029,3.61,1030,4.542,1031,4.542,1032,4.041,1033,2.501,1034,4.041,1035,2.501,1036,4.041,1037,2.535,1038,4.041,1039,4.041,1040,4.041,1041,3.61,1042,4.041,1043,3.61,1044,3.61,1045,2.501,1046,5.84,1047,2.501,1048,4.542,1049,3.61,1050,2.501,1051,3.016,1052,5.274,1053,2.501,1054,2.501,1055,4.041,1056,2.501,1057,4.041,1058,2.501,1059,4.041,1060,3.61,1061,3.016,1062,2.397,1063,2.501,1064,4.041,1065,2.501,1066,4.041,1067,2.501,1068,5.216,1069,2.501,1070,4.041,1071,2.501,1072,1.965,1073,2.501,1074,2.501,1075,4.041,1076,2.501,1077,4.542,1078,3.61,1079,2.501,1080,4.041,1081,2.501,1082,1.352,1083,1.734,1084,1.822,1085,2.501,1086,5.216,1087,5.085,1088,5.085,1089,5.84,1090,2.501,1091,2.501,1092,2.058,1093,1.392,1094,1.594,1095,2.501,1096,2.501,1097,2.501,1098,2.234,1099,2.501,1100,2.501,1101,1.483,1102,1.594,1103,1.352,1104,4.041,1105,2.234,1106,2.501,1107,2.501,1108,2.501,1109,1.659,1110,1.927]],["title/pipes/NgxAriaSortPipe.html",[174,1.449,1111,3.966]],["body/pipes/NgxAriaSortPipe.html",[3,0.078,4,0.069,5,0.078,12,0.611,16,0.274,17,0.006,19,0.262,27,0.078,32,1.277,42,1.981,44,1.904,47,1.711,88,0.005,89,0.005,90,0.624,144,4.229,174,2.485,176,3.482,179,1.888,180,1.354,182,2.748,183,1.248,185,3.679,186,5.483,187,0.836,193,1.616,196,1.267,204,4.467,205,0.575,206,2.08,479,2.666,564,3.663,667,5.279,719,6.019,720,2.187,1111,6.801,1112,8.265,1113,8.265,1114,6.806,1115,8.265,1116,6.806,1117,5.465,1118,7.95,1119,7.95,1120,6.079,1121,6.806,1122,6.806]],["title/injectables/NgxAuthenticatedHttpClient.html",[259,1.426,1123,3.713]],["body/injectables/NgxAuthenticatedHttpClient.html",[3,0.032,4,0.029,5,0.032,10,0.076,11,0.137,12,0.869,16,0.268,17,0.006,19,0.213,22,6.05,23,2.181,27,0.032,29,1.481,32,1.171,34,2.703,40,7.197,42,0.824,44,1.809,47,1.957,49,0.623,54,1.488,88,0.003,89,0.003,90,0.259,96,1.067,101,3.391,118,1.68,137,1.39,152,1.381,161,4.523,174,0.852,180,1.153,183,0.818,184,1.576,187,1.016,193,2.037,194,3.262,196,1.411,205,0.239,259,1.32,261,1.228,268,2.575,272,0.683,273,2.348,300,0.982,308,1.271,324,3.361,369,2.139,379,1.573,501,0.798,693,2.069,720,0.91,772,2.844,796,3.437,799,5.344,813,1.576,949,2.206,1123,3.437,1124,8.438,1125,7.705,1126,8.438,1127,2.832,1128,4.463,1129,2.345,1130,5.275,1131,2.412,1132,3.672,1133,4.463,1134,5.846,1135,4.463,1136,3.986,1137,4.544,1138,5.523,1139,4.463,1140,5.61,1141,6.09,1142,4.966,1143,4.463,1144,2.832,1145,9.647,1146,9.647,1147,9.673,1148,2.832,1149,8.579,1150,6.236,1151,7.535,1152,6.796,1153,8.165,1154,6.608,1155,6.608,1156,2.832,1157,2.832,1158,4.463,1159,4.463,1160,2.832,1161,2.832,1162,4.463,1163,2.832,1164,2.832,1165,7.665,1166,2.832,1167,2.832,1168,2.832,1169,2.832,1170,2.832,1171,3.986,1172,2.832,1173,4.463,1174,2.832,1175,1.377,1176,2.181,1177,1.531,1178,1.029,1179,5.523,1180,2.832,1181,2.832,1182,2.832,1183,7.243,1184,2.832,1185,7.243,1186,5.523,1187,2.832,1188,2.832,1189,5.523,1190,2.832,1191,2.53,1192,2.33,1193,2.832,1194,2.832,1195,2.832,1196,2.832,1197,2.832,1198,2.832,1199,5.523,1200,2.832,1201,2.832]],["title/interfaces/NgxAuthenticatedHttpClientConfiguration.html",[0,0.104,1176,3.713]],["body/interfaces/NgxAuthenticatedHttpClientConfiguration.html",[0,0.169,2,0.98,3,0.071,4,0.064,5,0.071,10,0.167,11,0.241,12,0.889,15,3.628,16,0.285,17,0.006,19,0.252,27,0.089,37,2.395,88,0.005,89,0.005,101,4.811,106,2.414,118,3.703,137,1.011,148,4.235,152,0.905,205,0.528,245,1.705,255,2.544,338,4.811,379,1.57,408,3.81,431,4.118,771,2.268,938,3.475,1123,7.127,1130,5.707,1134,5.199,1137,7.39,1150,6.415,1151,6.036,1152,5.433,1155,6.918,1176,6.597,1202,5.137,1203,5.576,1204,8.022,1205,8.433,1206,4.362,1207,4.235,1208,4.118,1209,8.022,1210,7.047,1211,4.647,1212,4.547,1213,5.576,1214,5.137,1215,4.329,1216,5.576]],["title/interfaces/NgxAuthenticatedRoute.html",[0,0.104,1217,3.966]],["body/interfaces/NgxAuthenticatedRoute.html",[0,0.188,2,1.02,3,0.074,4,0.066,5,0.074,7,2.818,10,0.174,11,0.268,12,0.722,16,0.28,17,0.006,19,0.191,27,0.092,28,1.858,29,1.413,47,1.664,76,2.361,88,0.005,89,0.005,96,0.882,106,2.265,144,4.11,152,1.165,171,1.998,173,4.141,308,1.109,324,2.545,358,4.311,379,1.473,693,2.103,1134,4.311,1211,4.765,1217,7.176,1218,5.804,1219,5.804,1220,8.034,1221,3.641,1222,6.61,1223,5.786,1224,4.141,1225,6.61,1226,8.034,1227,4.506,1228,6.61,1229,5.347,1230,6.61,1231,8.034,1232,4.733,1233,6.61,1234,5.347,1235,6.498,1236,5.804,1237,6.498,1238,7.176,1239,5.804,1240,3.854,1241,5.804,1242,5.804,1243,4.733,1244,5.804]],["title/classes/NgxAuthenticationAbstractService.html",[90,0.442,1211,2.859]],["body/classes/NgxAuthenticationAbstractService.html",[3,0.03,4,0.027,5,0.03,10,0.071,11,0.13,12,0.758,16,0.276,17,0.006,19,0.156,27,0.03,28,1.69,29,1.14,32,1.142,34,2.287,42,1.233,44,2.044,47,1.589,49,1.856,55,3.402,61,2.385,64,3.037,72,3.681,88,0.002,89,0.002,90,0.243,92,1.691,96,1.075,99,2.433,106,1.703,137,0.979,179,2.05,180,1.167,183,0.97,184,1.614,187,1.109,193,1.823,195,1.932,196,1.716,203,1.598,233,2.359,268,2.804,272,0.64,274,3.275,294,1.054,300,1.562,308,1.144,317,1.311,324,3.843,367,4.56,369,2.232,379,0.777,392,2.711,408,2.061,412,2.655,432,4.149,476,1.039,479,1.66,502,4.049,509,1.909,565,2.677,693,2.14,705,2.061,720,0.853,771,1.54,772,1.691,799,2.602,812,1.691,813,3.919,815,1.92,828,4.4,938,2.359,966,3.264,994,0.898,1048,3.785,1060,5.396,1134,5.943,1154,5.423,1155,3.264,1191,8.067,1192,2.183,1211,2.513,1212,6.578,1225,7.432,1229,5.434,1230,6.511,1234,5.434,1239,3.785,1245,2.653,1246,2.227,1247,4.238,1248,5.291,1249,5.291,1250,5.291,1251,5.291,1252,5.396,1253,6.042,1254,6.604,1255,4.971,1256,4.971,1257,5.291,1258,4.238,1259,5.291,1260,4.238,1261,5.291,1262,4.238,1263,5.532,1264,3.264,1265,2.653,1266,4.238,1267,2.653,1268,3.785,1269,2.653,1270,3.175,1271,1.878,1272,3.785,1273,6.042,1274,5.912,1275,6.042,1276,4.654,1277,3.264,1278,2.653,1279,3.785,1280,5.396,1281,2.653,1282,2.653,1283,2.653,1284,3.487,1285,2.653,1286,6.601,1287,2.653,1288,5.291,1289,2.653,1290,2.653,1291,5.291,1292,2.653,1293,2.653,1294,2.86,1295,3.487,1296,4.238,1297,7.675,1298,2.653,1299,6.042,1300,6.042,1301,6.604,1302,8.875,1303,2.653,1304,2.653,1305,4.238,1306,8.566,1307,2.653,1308,3.797,1309,5.291,1310,2.653,1311,2.653,1312,4.238,1313,7.39,1314,2.653,1315,2.653,1316,2.653,1317,2.653,1318,2.653,1319,2.653,1320,4.238,1321,2.37,1322,1.84,1323,2.044,1324,2.37,1325,4.238,1326,2.653,1327,2.653,1328,2.653,1329,5.291,1330,2.653,1331,2.653,1332,2.653,1333,4.238,1334,2.653,1335,2.653,1336,2.653,1337,2.653,1338,2.653,1339,4.238,1340,2.653,1341,2.653,1342,2.653,1343,2.37,1344,1.932,1345,2.183,1346,1.932,1347,2.653,1348,4.238,1349,2.653,1350,2.653,1351,2.653,1352,2.653,1353,2.653,1354,2.653,1355,2.653,1356,4.238,1357,2.653,1358,2.653,1359,2.653,1360,1.523,1361,2.183,1362,2.653]],["title/interfaces/NgxAuthenticationConfiguration.html",[0,0.104,1214,3.966]],["body/interfaces/NgxAuthenticationConfiguration.html",[0,0.172,2,1.01,3,0.073,4,0.065,5,0.073,10,0.172,11,0.246,12,0.854,15,2.472,16,0.293,17,0.006,19,0.256,27,0.091,37,2.775,88,0.005,89,0.005,96,0.874,101,3.949,106,2.447,118,3.815,137,1.293,148,3.477,152,0.932,205,0.544,245,1.757,255,3.253,338,3.949,379,1.591,408,3.128,431,3.381,771,3.298,938,4.444,1123,6.992,1130,4.685,1134,4.267,1137,5.293,1150,6.019,1151,4.955,1152,4.46,1155,6.149,1176,6.992,1202,5.293,1203,5.745,1204,5.745,1205,7.131,1206,3.58,1207,3.477,1208,3.381,1209,7.131,1210,7.143,1211,5.149,1212,5.814,1213,7.131,1214,6.569,1215,5.535,1216,8.108]],["title/injectables/NgxBroadcastChannelService.html",[259,1.426,1363,4.305]],["body/injectables/NgxBroadcastChannelService.html",[3,0.044,4,0.039,5,0.044,10,0.103,11,0.174,12,0.703,16,0.272,17,0.006,19,0.197,27,0.044,32,0.873,34,2.304,41,2.621,42,1.125,44,1.945,49,0.85,61,2.077,64,3.836,86,2.814,88,0.003,89,0.003,90,0.354,96,1.11,98,3.055,102,2.818,138,3.352,152,1.334,161,2.564,180,1.453,183,1.036,184,1.627,187,1.037,193,2.056,196,1.572,205,0.327,209,4.361,246,5.049,259,1.672,261,1.676,268,2.792,272,0.932,300,1.188,308,0.78,310,4.117,311,3.089,317,1.521,335,2.451,350,3.657,369,2.163,454,6.568,501,1.089,706,2.214,755,5.585,771,2.054,783,2.141,785,5.148,787,2.971,804,4.343,824,4.221,938,3.146,949,2.258,1131,3.975,1141,3.452,1151,4.354,1153,5.049,1177,2.089,1178,1.404,1206,2.151,1246,2.031,1279,6.568,1363,5.049,1364,8.657,1365,8.657,1366,3.864,1367,5.652,1368,9.602,1369,7.97,1370,5.049,1371,5.652,1372,3.964,1373,8.174,1374,8.174,1375,8.174,1376,8.443,1377,8.443,1378,5.652,1379,3.864,1380,5.049,1381,5.152,1382,9.2,1383,8.975,1384,5.652,1385,6.683,1386,3.864,1387,5.049,1388,5.652,1389,8.174,1390,3.864,1391,5.652,1392,4.117,1393,3.864,1394,3.864,1395,7.825,1396,5.652,1397,7.354,1398,3.864,1399,3.864,1400,5.652,1401,3.864,1402,4.354,1403,5.652,1404,3.471,1405,3.864,1406,2.151,1407,2.031,1408,5.049,1409,3.864,1410,1.792,1411,2.977,1412,6.568,1413,3.864,1414,8.657,1415,3.864,1416,7.354,1417,3.864,1418,3.864,1419,4.867,1420,2.977,1421,3.864,1422,5.652,1423,3.864]],["title/components/NgxConfigurableLayoutItemComponent.html",[109,0.818,532,2.344]],["body/components/NgxConfigurableLayoutItemComponent.html",[3,0.05,4,0.044,5,0.05,10,0.117,11,0.19,12,0.643,17,0.006,19,0.129,27,0.05,28,1.26,32,0.676,47,1.483,50,3.793,51,3.937,72,1.782,74,2.42,76,3.351,84,5.518,88,0.004,89,0.004,90,0.401,96,0.594,97,3.695,106,2.019,109,1.487,179,1.213,180,1.5,182,2.054,184,1.568,187,1.008,205,0.37,292,0.686,293,2.076,294,1.087,298,3.087,300,1.618,304,2.019,308,0.604,341,2.46,361,2.076,379,1.562,383,4.284,449,4.284,478,2.126,479,2.42,480,1.649,481,1.68,484,3.08,485,2.518,507,4.045,509,2.693,514,2.126,515,2.932,516,1.49,517,3.881,518,2.18,519,2.18,520,2.126,521,1.897,522,2.18,523,2.126,524,3.021,525,2.18,526,2.126,527,2.18,528,3.08,529,2.18,530,4.144,531,3.08,532,3.785,533,4.432,534,2.126,535,3.305,536,2.18,537,3.881,538,2.126,539,2.076,540,2.126,541,2.027,542,2.18,543,2.076,544,2.076,545,2.18,546,2.126,547,2.126,548,1.982,549,2.18,550,2.126,551,2.18,552,2.126,553,3.08,554,2.126,555,2.126,556,2.18,557,2.126,558,2.18,559,2.126,560,2.076,561,2.18,562,2.18,563,2.18,564,1.938,565,1.479,566,2.027,567,2.027,568,2.18,569,2.076,570,2.18,571,2.18,572,2.18,573,2.027,574,2.076,575,2.18,576,1.938,577,2.027,578,2.18,579,2.18,580,1.982,581,2.076,582,2.18,583,2.076,584,2.18,585,2.076,586,2.18,587,2.027,588,2.027,589,2.076,590,2.18,591,2.076,592,2.18,593,1.649,594,2.076,595,2.027,596,2.076,597,2.027,598,2.027,599,2.027,600,1.782,601,2.027,602,2.18,603,1.938,604,2.18,605,2.076,606,2.18,607,1.897,608,2.027,609,2.18,610,2.027,611,2.18,612,2.076,613,2.18,614,2.18,654,2.298,708,2.237,753,3.015,764,5.217,856,4.78,891,4.578,1010,3.906,1014,5.518,1083,3.032,1424,8.523,1425,8.523,1426,6.178,1427,3.695,1428,4.759,1429,4.759,1430,6.178,1431,6.178,1432,5.894,1433,7.164,1434,6.178,1435,4.373,1436,3.339]],["title/interfaces/NgxConfigurableLayoutItemDropEvent.html",[0,0.104,1437,3.966]],["body/interfaces/NgxConfigurableLayoutItemDropEvent.html",[0,0.178,2,1.067,3,0.077,4,0.069,5,0.077,10,0.182,11,0.254,16,0.303,17,0.006,27,0.108,29,1.536,76,2.469,88,0.005,89,0.005,152,0.985,190,3.117,301,4.712,512,2.299,516,2.231,672,4.173,697,5.669,1437,6.794,1438,5.592,1439,5.592,1440,8.264,1441,8.264,1442,7.613,1443,8.264,1444,7.613,1445,6.905,1446,7.945,1447,5.234,1448,5.234,1449,5.234,1450,5.234,1451,5.592,1452,4.331,1453,5.592]],["title/interfaces/NgxConfigurableLayoutItemEntity.html",[0,0.104,1445,3.51]],["body/interfaces/NgxConfigurableLayoutItemEntity.html",[0,0.18,2,1.093,3,0.079,4,0.071,5,0.079,10,0.186,11,0.258,12,0.753,16,0.298,17,0.006,27,0.109,29,1.588,76,3.39,88,0.005,89,0.005,152,1.303,190,2.441,301,6.469,512,2.357,516,1.68,672,4.277,697,4.439,1437,5.732,1438,5.732,1439,5.732,1440,6.222,1441,6.222,1442,5.732,1443,6.222,1444,6.897,1445,6.795,1446,6.222,1447,5.365,1448,5.365,1449,5.365,1450,5.365,1451,5.732,1452,4.439,1453,7.677]],["title/pipes/NgxConfigurableLayoutItemSizePipe.html",[174,1.449,1454,4.305]],["body/pipes/NgxConfigurableLayoutItemSizePipe.html",[3,0.064,4,0.075,5,0.064,12,0.506,16,0.251,17,0.006,19,0.216,27,0.064,28,1.149,29,0.913,32,0.871,34,2.301,42,1.64,44,2.117,47,1.856,48,3.052,49,1.796,50,5.011,51,5.965,55,3.252,74,2.207,88,0.004,89,0.004,90,0.516,96,0.765,106,2.301,109,1.246,144,3.755,174,2.207,176,2.883,179,1.563,180,1.241,182,2.44,183,1.033,185,3.967,187,0.692,193,1.338,196,1.519,203,2.125,204,3.967,205,0.476,206,1.722,218,4.636,237,2.553,308,1.013,379,1.033,474,5.033,509,2.319,512,2.925,524,2.319,530,3.568,533,3.832,633,3.967,693,1.359,706,2.207,720,1.811,783,2.136,831,3.738,953,3.591,1271,2.497,1429,4.34,1442,7.563,1445,5.345,1447,6.66,1448,5.653,1449,5.653,1450,5.653,1454,6.555,1455,7.339,1456,7.339,1457,5.635,1458,7.339,1459,5.635,1460,9.752,1461,5.635,1462,7.339,1463,7.563,1464,2.553,1465,4.636,1466,3.907,1467,7.339,1468,5.635,1469,7.722,1470,5.635,1471,5.033,1472,5.635,1473,3.46,1474,5.635,1475,5.635,1476,5.635,1477,5.635,1478,5.635,1479,5.635,1480,5.635,1481,5.635,1482,5.635]],["title/interfaces/NgxCookie.html",[0,0.104,1483,3.342]],["body/interfaces/NgxCookie.html",[0,0.196,2,0.93,3,0.068,4,0.06,5,0.068,10,0.159,11,0.233,12,0.888,16,0.292,17,0.006,19,0.174,27,0.106,29,1.554,76,2.154,88,0.004,89,0.004,152,1.465,171,1.474,180,1.34,190,3.192,308,0.818,783,1.725,1117,5.133,1178,2.154,1308,2.627,1410,2.748,1483,5.797,1484,4.11,1485,3.932,1486,6.418,1487,6.418,1488,5.847,1489,6.418,1490,6.418,1491,6.089,1492,6.089,1493,3.777,1494,5.522,1495,6.089,1496,4.278,1497,3.932,1498,3.777,1499,3.932,1500,3.932,1501,4.317,1502,3.932,1503,4.317,1504,3.402,1505,4.317,1506,4.317,1507,4.317,1508,3.932,1509,3.204,1510,5.522,1511,4.317,1512,4.317,1513,4.317,1514,4.317,1515,4.317,1516,4.317,1517,4.832,1518,5.03,1519,3.932,1520,4.317,1521,4.317]],["title/interfaces/NgxCookieChangedEvent.html",[0,0.104,1519,3.198]],["body/interfaces/NgxCookieChangedEvent.html",[0,0.2,2,0.991,3,0.072,4,0.064,5,0.072,10,0.169,11,0.243,16,0.286,17,0.006,19,0.186,27,0.108,29,1.534,76,2.294,88,0.005,89,0.005,144,4.037,152,1.46,171,1.962,180,0.96,190,3.017,308,0.872,783,1.838,1117,3.877,1178,2.294,1308,2.798,1410,2.927,1483,5.472,1484,4.378,1485,4.189,1486,4.598,1487,4.598,1488,4.189,1489,4.598,1490,4.598,1491,4.598,1492,4.598,1493,4.024,1494,5.747,1495,6.27,1496,4.404,1497,4.189,1498,4.024,1499,4.189,1500,4.189,1501,4.598,1502,4.189,1503,4.598,1504,3.624,1505,4.598,1506,4.598,1507,4.598,1508,4.189,1509,3.413,1510,5.747,1511,4.598,1512,4.598,1513,4.598,1514,4.598,1515,4.598,1516,4.598,1517,5.029,1518,5.711,1519,5.235,1520,6.568,1521,6.568]],["title/interfaces/NgxCookieConfiguration.html",[0,0.104,1508,3.198]],["body/interfaces/NgxCookieConfiguration.html",[0,0.193,2,0.892,3,0.065,4,0.058,5,0.065,10,0.152,11,0.227,12,0.906,16,0.301,17,0.006,19,0.167,27,0.105,29,1.618,76,2.066,88,0.004,89,0.004,152,1.443,171,1.414,180,0.865,190,3.151,308,0.785,783,1.655,1117,3.491,1178,3.152,1308,3.633,1410,2.636,1483,6.015,1484,3.942,1485,3.772,1486,4.14,1487,4.14,1488,3.772,1489,4.14,1490,4.14,1491,4.14,1492,4.14,1493,3.623,1494,5.376,1495,6.926,1496,4.194,1497,3.772,1498,3.623,1499,3.772,1500,3.772,1501,4.14,1502,3.772,1503,4.14,1504,3.263,1505,4.14,1506,4.14,1507,4.14,1508,4.897,1509,4.689,1510,6.711,1511,6.318,1512,6.318,1513,6.318,1514,6.318,1515,6.318,1516,6.318,1517,5.73,1518,4.897,1519,3.772,1520,4.14,1521,4.14]],["title/interfaces/NgxCookieEvent.html",[0,0.104,1518,3.198]],["body/interfaces/NgxCookieEvent.html",[0,0.201,2,1.007,3,0.073,4,0.065,5,0.073,10,0.172,11,0.245,16,0.245,17,0.006,19,0.189,27,0.108,29,1.54,76,2.33,88,0.005,89,0.005,152,1.453,171,1.595,180,0.975,190,3.038,308,0.885,783,1.867,1117,3.938,1178,2.33,1308,2.843,1410,2.974,1483,5.525,1484,4.447,1485,4.255,1486,4.671,1487,4.671,1488,4.255,1489,4.671,1490,4.671,1491,4.671,1492,4.671,1493,4.087,1494,6.605,1495,6.314,1496,4.436,1497,4.255,1498,4.087,1499,4.255,1500,4.255,1501,4.671,1502,4.255,1503,4.671,1504,3.682,1505,4.671,1506,4.671,1507,4.671,1508,4.255,1509,3.467,1510,5.804,1511,4.671,1512,4.671,1513,4.671,1514,4.671,1515,4.671,1516,4.671,1517,5.943,1518,5.752,1519,4.255,1520,4.671,1521,4.671]],["title/interfaces/NgxCookieLanguageConfiguration.html",[0,0.104,1500,3.198]],["body/interfaces/NgxCookieLanguageConfiguration.html",[0,0.198,2,0.958,3,0.07,4,0.062,5,0.07,10,0.163,11,0.238,12,0.8,16,0.294,17,0.006,19,0.18,27,0.107,29,1.521,76,2.218,88,0.005,89,0.005,144,3.953,152,1.469,171,1.518,180,0.929,190,2.971,308,1.23,783,1.777,1117,3.749,1178,2.218,1308,2.706,1410,3.93,1483,5.358,1484,4.234,1485,4.051,1486,4.447,1487,4.447,1488,4.051,1489,4.447,1490,4.447,1491,4.447,1492,4.447,1493,3.891,1494,5.628,1495,6.174,1496,4.337,1497,4.051,1498,3.891,1499,4.051,1500,5.126,1501,6.489,1502,5.624,1503,6.489,1504,5.115,1505,4.447,1506,4.447,1507,4.447,1508,4.051,1509,3.3,1510,5.628,1511,4.447,1512,4.447,1513,4.447,1514,4.447,1515,4.447,1516,4.447,1517,4.924,1518,5.126,1519,4.051,1520,4.447,1521,4.447]],["title/injectables/NgxCookieService.html",[259,1.426,1522,3.966]],["body/injectables/NgxCookieService.html",[3,0.028,4,0.025,5,0.028,7,1.051,10,0.065,11,0.121,12,0.725,16,0.281,17,0.006,19,0.186,27,0.028,32,1.345,34,2.359,37,2.345,41,1.826,42,2.233,44,2.005,49,2.021,54,3.743,57,1.709,61,2.451,66,1.098,68,0.779,72,0.988,73,2.423,81,1.333,88,0.002,89,0.002,90,0.222,96,1.071,137,1.356,152,1.357,162,2.07,174,1.185,180,1.467,183,0.722,184,1.688,187,1.115,193,1.916,194,2.045,196,1.468,205,0.205,206,1.204,209,1.437,233,2.193,249,2.732,259,1.165,261,1.051,268,2.647,272,0.584,273,1.974,300,1.698,308,1.114,311,3.216,317,1.532,324,2.246,335,1.709,338,2.419,369,2.348,377,1.544,379,1.156,412,3.557,476,2.647,486,2.165,501,0.683,502,3.227,651,2.69,693,1.63,705,1.916,715,0.729,720,0.779,771,2.932,787,2.071,799,1.488,800,1.994,808,4.725,813,3.191,821,1.87,822,1.87,824,1.391,953,2.511,955,2.193,968,4.842,994,1.333,1177,1.31,1178,0.881,1206,1.349,1208,3.9,1246,1.274,1274,3.034,1322,3.451,1372,2.952,1381,2.261,1404,2.419,1406,2.77,1407,1.274,1410,1.124,1464,1.785,1493,5.854,1497,1.608,1498,4.538,1499,3.803,1500,3.803,1508,3.803,1509,2.129,1517,6.175,1518,1.608,1519,1.608,1522,3.242,1523,2.424,1524,3.94,1525,3.242,1526,6.758,1527,4.977,1528,4.977,1529,4.977,1530,4.977,1531,4.977,1532,4.977,1533,4.977,1534,6.306,1535,4.977,1536,3.94,1537,3.94,1538,3.94,1539,3.94,1540,3.94,1541,3.94,1542,3.94,1543,3.94,1544,4.977,1545,5.732,1546,3.94,1547,2.424,1548,5.732,1549,6.892,1550,8.069,1551,3.94,1552,2.424,1553,3.94,1554,2.424,1555,3.94,1556,2.424,1557,3.94,1558,2.424,1559,4.717,1560,5.56,1561,3.94,1562,2.424,1563,2.77,1564,3.94,1565,2.424,1566,3.94,1567,4.717,1568,2.424,1569,2.424,1570,2.424,1571,3.242,1572,3.94,1573,3.94,1574,4.717,1575,2.424,1576,2.933,1577,3.94,1578,2.424,1579,5.205,1580,2.424,1581,3.94,1582,2.424,1583,4.717,1584,3.94,1585,3.94,1586,7.421,1587,2.424,1588,3.94,1589,3.94,1590,2.424,1591,3.519,1592,5.732,1593,3.242,1594,2.869,1595,2.424,1596,6.306,1597,3.94,1598,2.424,1599,3.519,1600,3.94,1601,2.424,1602,6.306,1603,3.94,1604,2.424,1605,2.481,1606,2.732,1607,2.424,1608,2.424,1609,3.034,1610,1.994,1611,1.31,1612,1.994,1613,2.165,1614,2.165,1615,1.994,1616,1.608,1617,2.424,1618,1.608,1619,2.424,1620,2.424,1621,4.858,1622,2.424,1623,2.424,1624,2.424,1625,2.424,1626,4.446,1627,2.424,1628,2.424,1629,4.977,1630,2.424,1631,2.424,1632,4.977,1633,2.424,1634,2.424,1635,2.424,1636,3.94,1637,3.94,1638,2.424,1639,2.424,1640,2.424,1641,2.424,1642,2.424,1643,3.94,1644,2.424,1645,2.424,1646,2.424,1647,2.165,1648,2.424,1649,5.732,1650,3.94,1651,2.424,1652,2.424,1653,3.242,1654,3.242,1655,3.94,1656,3.94,1657,2.424]],["title/interfaces/NgxCookieValue.html",[0,0.104,1567,3.966]],["body/interfaces/NgxCookieValue.html",[0,0.163,2,1.186,3,0.086,4,0.077,5,0.086,10,0.202,11,0.271,16,0.271,17,0.006,27,0.086,32,1.48,88,0.005,89,0.005,152,1.349,180,1.457,273,3.203,1567,7.237,1658,7.557,1659,7.557]],["title/directives/NgxCookiesFallBackComponent.html",[292,0.757,573,2.235]],["body/directives/NgxCookiesFallBackComponent.html",[3,0.08,4,0.071,5,0.08,10,0.188,11,0.259,17,0.006,19,0.248,27,0.08,32,1.083,72,3.429,88,0.005,89,0.005,90,0.642,96,0.952,106,2.372,109,1.428,187,0.861,205,0.592,211,5.833,292,1.321,294,1.743,300,1.603,308,0.968,341,2.849,512,3.163,565,3.05,573,3.901,720,2.253,1464,3.813,1549,7.562,1560,6.923,1660,8.413,1661,8.413,1662,7.01,1663,7.515,1664,4.83,1665,7.515,1666,7.01,1667,5.399]],["title/components/NgxCurrencyTableCellComponent.html",[109,0.818,534,2.344]],["body/components/NgxCurrencyTableCellComponent.html",[3,0.038,4,0.034,5,0.038,10,0.09,11,0.157,12,0.302,16,0.248,17,0.006,19,0.181,27,0.038,28,1.041,32,1.362,38,2.481,47,1.275,48,2.562,72,1.372,81,2.936,88,0.003,89,0.003,90,0.564,96,0.457,109,1.045,137,1.113,152,0.74,171,1.269,179,0.934,180,1.47,183,0.935,184,1.704,187,1.156,192,3.716,193,0.8,196,1.146,205,0.285,237,2.312,250,3.133,255,2.079,256,3.716,292,0.529,293,1.598,294,0.837,298,3.05,300,1.568,304,1.668,306,2.068,308,1.272,311,1.202,315,2.995,317,1.146,319,1.933,320,1.874,333,2.61,341,1.064,345,1.997,361,1.598,379,1.26,478,1.637,479,1.999,480,1.27,481,1.294,484,2.544,485,2.079,507,3.688,509,2.627,512,1.726,514,1.637,515,2.422,516,1.23,517,3.426,518,1.679,519,1.679,520,1.637,521,1.46,522,1.679,523,1.637,524,2.935,525,1.679,526,1.637,527,1.679,528,2.544,529,1.679,530,2.481,531,2.544,532,1.637,533,1.492,534,3.778,535,3.684,536,4.63,537,3.426,538,1.637,539,1.598,540,1.637,541,1.561,542,1.679,543,1.598,544,1.598,545,1.679,546,1.637,547,1.637,548,1.526,549,1.679,550,1.637,551,1.679,552,1.637,553,2.544,554,1.637,555,1.637,556,1.679,557,1.637,558,1.679,559,1.637,560,3.504,561,1.679,562,1.679,563,1.679,564,4.268,565,1.139,566,1.561,567,1.561,568,1.679,569,1.598,570,1.679,571,1.679,572,1.679,573,1.561,574,1.598,575,1.679,576,1.492,577,1.561,578,1.679,579,1.679,580,1.526,581,1.598,582,1.679,583,1.598,584,1.679,585,1.598,586,1.679,587,1.561,588,1.561,589,1.598,590,1.679,591,1.598,592,1.679,593,1.27,594,1.598,595,1.561,596,1.598,597,1.561,598,1.561,599,1.561,600,1.372,601,1.561,602,1.679,603,1.492,604,1.679,605,1.598,606,1.679,607,1.46,608,1.561,609,1.679,610,1.561,611,1.679,612,1.598,613,1.679,614,1.679,630,5.205,633,2.758,651,1.82,667,5.612,668,4.486,669,4.486,670,5.647,671,5.004,672,4.771,673,4.486,674,4.271,675,3.925,676,6.054,677,4.486,678,4.744,679,4.744,680,3.93,682,3.716,684,2.84,685,3.251,686,3.537,687,3.93,688,3.93,689,3.93,690,3.93,691,2.312,693,1.657,696,2.146,697,3.251,699,2.594,700,3.272,701,1.933,702,2.594,703,3.925,705,1.637,706,1.319,708,4.129,715,1.013,753,2.013,994,2.629,1012,2.84,1072,2.481,1082,1.82,1083,4.271,1084,2.453,1452,4.951,1668,5.102,1669,3.008,1670,6.159,1671,4.198,1672,4.198,1673,4.198,1674,4.198,1675,2.771,1676,2.771,1677,2.771,1678,3.368,1679,4.198,1680,4.198,1681,4.557,1682,3.368,1683,4.198,1684,5.102,1685,3.368,1686,5.102,1687,3.368,1688,5.102,1689,4.198,1690,3.368,1691,2.758,1692,4.198,1693,3.368,1694,2.771,1695,2.771,1696,2.771,1697,3.368]],["title/directives/NgxCypressTagDirective.html",[292,0.757,574,2.288]],["body/directives/NgxCypressTagDirective.html",[3,0.075,4,0.067,5,0.075,10,0.177,11,0.25,16,0.27,17,0.006,19,0.239,27,0.075,32,1.02,44,1.869,47,1.819,72,2.691,88,0.005,89,0.005,90,0.605,179,1.832,182,2.698,184,1.65,187,1.079,205,0.558,292,1.274,294,1.642,298,2.44,304,2.652,308,0.912,334,2.864,341,2.087,574,3.851,654,3.471,661,5.042,684,5.398,686,6.09,705,4.271,951,4.952,1698,9.162,1699,9.162,1700,6.604,1701,9.699,1702,8.114,1703,8.784,1704,8.114,1705,6.604,1706,5.087,1707,6.604,1708,6.604]],["title/components/NgxDateTableCellComponent.html",[109,0.818,538,2.344]],["body/components/NgxDateTableCellComponent.html",[3,0.033,4,0.029,5,0.033,10,0.077,11,0.138,12,0.257,16,0.234,17,0.006,19,0.185,27,0.033,28,0.918,32,1.329,36,2.02,38,2.188,47,1.151,48,2.312,64,2.583,72,1.166,76,2.643,81,2.808,83,3.297,88,0.003,89,0.003,90,0.509,96,0.389,109,0.944,137,1.021,152,0.652,171,1.119,179,0.794,180,1.439,183,0.825,184,1.705,187,1.157,192,6.162,193,0.679,196,1.035,205,0.242,237,2.039,250,2.762,255,3.212,256,3.276,292,0.449,293,1.358,294,0.712,298,3.021,300,1.649,304,1.471,306,1.757,308,1.244,311,1.021,315,2.703,317,1.035,319,1.642,320,1.593,333,2.302,341,1.757,345,1.697,361,1.358,379,1.155,478,1.391,479,1.762,480,1.079,481,1.099,484,2.243,485,1.833,507,3.453,509,2.491,512,1.522,514,1.391,515,2.135,516,1.085,517,3.142,518,1.426,519,1.426,520,1.391,521,1.241,522,1.426,523,1.391,524,2.848,525,1.426,526,1.391,527,1.426,528,2.243,529,1.426,530,2.188,531,2.243,532,1.391,533,1.268,534,1.391,535,3.524,536,1.426,537,3.142,538,3.537,539,4.51,540,1.391,541,1.326,542,1.426,543,1.358,544,1.358,545,1.426,546,1.391,547,1.391,548,1.297,549,1.426,550,1.391,551,1.426,552,1.391,553,2.243,554,1.391,555,1.391,556,1.426,557,1.391,558,1.426,559,1.391,560,3.252,561,1.426,562,1.426,563,1.426,564,4.176,565,0.968,566,1.326,567,1.326,568,1.426,569,1.358,570,1.426,571,1.426,572,1.426,573,1.326,574,1.358,575,1.426,576,1.268,577,1.326,578,1.426,579,1.426,580,1.297,581,1.358,582,1.426,583,1.358,584,1.426,585,1.358,586,1.426,587,1.326,588,1.326,589,1.358,590,1.426,591,1.358,592,1.426,593,1.079,594,1.358,595,1.326,596,1.358,597,1.326,598,1.326,599,1.326,600,1.166,601,1.326,602,1.426,603,1.268,604,1.426,605,1.358,606,1.426,607,1.241,608,1.326,609,1.426,610,1.326,611,1.426,612,1.358,613,1.426,614,1.426,630,5.059,651,1.547,667,5.469,668,4.049,669,4.049,670,5.379,671,4.59,672,4.467,673,4.049,674,3.855,675,3.543,676,5.741,677,4.049,678,4.282,679,4.282,680,3.465,682,3.276,684,2.504,685,2.867,686,3.119,687,3.465,688,3.465,689,3.465,690,3.465,691,2.039,693,1.52,696,1.823,697,2.867,699,2.204,700,3.037,701,1.642,702,2.204,703,3.543,705,1.391,706,1.121,708,3.893,715,0.86,753,2.378,825,4.467,891,2.302,994,2.461,1012,2.504,1072,2.188,1082,1.547,1083,3.855,1084,2.084,1452,4.636,1473,4.467,1669,2.556,1671,3.702,1672,3.702,1673,3.702,1674,3.702,1675,2.354,1676,2.354,1677,2.354,1679,3.702,1680,3.702,1681,4.018,1683,3.702,1689,3.702,1691,2.432,1692,3.702,1694,2.354,1695,2.354,1696,2.354,1709,7.61,1710,5.56,1711,4.574,1712,8.461,1713,4.966,1714,7.275,1715,8.109,1716,7.883,1717,5.56,1718,4.499,1719,5.986,1720,4.499,1721,2.861,1722,2.861,1723,4.499,1724,2.861,1725,2.668,1726,4.499,1727,2.861,1728,4.499,1729,2.861,1730,4.499,1731,2.861,1732,2.861,1733,2.861]],["title/directives/NgxDisplayContentComponent.html",[292,0.757,576,2.136]],["body/directives/NgxDisplayContentComponent.html",[3,0.078,4,0.07,5,0.078,10,0.184,11,0.256,12,0.803,17,0.006,19,0.202,27,0.078,28,2.047,88,0.005,89,0.005,90,0.819,96,0.933,136,3.57,164,5.929,187,1.021,203,3.134,205,0.58,255,3.642,292,1.305,294,1.708,300,1.589,304,2.717,341,3.005,479,3.501,565,3.024,576,3.684,577,3.853,641,4.041,1664,5.13,1734,8.937,1735,7.982,1736,6.869,1737,7.423,1738,8.311,1739,8.311]],["title/interfaces/NgxDisplayContentConfiguration.html",[0,0.104,1740,3.966]],["body/interfaces/NgxDisplayContentConfiguration.html",[0,0.147,2,1.072,3,0.078,4,0.069,5,0.078,10,0.183,11,0.255,12,0.832,16,0.307,17,0.006,19,0.244,27,0.11,28,1.392,29,1.563,68,2.194,88,0.005,89,0.005,114,2.436,169,5.258,205,0.577,245,1.864,479,3.63,576,3.026,708,3.493,1740,6.813,1741,6.098,1742,6.098,1743,9.267,1744,9.267,1745,8.277,1746,5.617,1747,4.049,1748,5.617,1749,5.617,1750,5.617,1751,8.277,1752,4.192,1753,5.617]],["title/directives/NgxDisplayContentDirective.html",[292,0.757,577,2.235]],["body/directives/NgxDisplayContentDirective.html",[3,0.029,4,0.026,5,0.029,10,0.068,11,0.126,12,0.62,16,0.271,17,0.006,19,0.203,27,0.029,28,0.834,29,0.832,32,1.43,34,1.82,37,2.548,42,1.495,44,1.796,47,1.064,49,2.102,57,1.774,61,2.007,68,1.893,72,1.034,73,0.975,74,2.53,83,1.15,88,0.002,89,0.002,90,0.233,96,0.877,102,2.039,109,1.52,114,2.463,135,0.922,137,1.296,139,1.056,162,3.141,174,1.23,179,0.704,180,0.896,182,1.36,183,0.75,184,1.437,187,1.137,191,1.334,193,1.399,194,2.101,196,1.351,203,1.937,205,0.214,206,1.25,234,1.558,236,1.76,237,2.328,245,0.693,254,3.653,255,1.667,272,0.612,292,0.642,294,0.631,298,1.23,300,1.675,304,1.337,308,1.236,317,1.599,328,2.348,332,1.372,341,1.292,358,1.684,366,2.276,368,1.989,369,2.602,373,2.61,379,1.528,392,1.314,402,2.713,412,3.194,426,2.776,431,1.334,453,4.285,479,1.602,492,2.089,501,1.448,506,1.234,509,2.748,512,1.738,513,1.989,516,1.42,560,3.799,576,1.125,577,2.994,625,3.493,641,2.497,654,1.334,663,3.799,684,3.842,693,0.986,696,2.606,705,2.864,706,2.53,708,3.013,715,1.942,720,0.816,723,3.273,740,2.731,753,2.548,791,3.793,794,1.205,815,2.669,821,3.065,822,3.065,824,1.457,825,1.558,856,1.558,863,3.365,891,3.013,899,3.154,920,2.089,949,2.052,951,3.924,953,1.618,973,3.273,1017,3.046,1051,2.426,1061,1.505,1062,2.426,1093,1.413,1094,1.618,1117,1.558,1175,1.234,1206,2.276,1215,3.561,1221,1.15,1240,5.353,1268,2.267,1274,3.15,1276,6.005,1294,1.372,1344,1.849,1370,3.653,1611,3.731,1618,2.713,1621,1.955,1653,4.226,1664,2.948,1719,2.089,1735,8.308,1740,2.089,1746,4.846,1747,3.83,1748,2.089,1749,5.314,1750,5.973,1752,4.238,1753,4.226,1754,6.171,1755,2.538,1756,3.365,1757,7.259,1758,5.136,1759,6.458,1760,3.956,1761,5.136,1762,5.136,1763,5.136,1764,3.408,1765,5.89,1766,5.136,1767,4.09,1768,4.09,1769,4.09,1770,4.09,1771,4.09,1772,6.484,1773,4.09,1774,2.538,1775,2.538,1776,2.538,1777,3.965,1778,2.538,1779,2.538,1780,4.09,1781,3.865,1782,4.09,1783,2.538,1784,6.458,1785,4.226,1786,4.09,1787,2.538,1788,4.09,1789,2.538,1790,3.741,1791,2.538,1792,2.538,1793,4.537,1794,5.136,1795,2.538,1796,4.09,1797,4.09,1798,2.979,1799,2.538,1800,2.538,1801,2.606,1802,4.09,1803,2.538,1804,2.538,1805,2.979,1806,2.538,1807,2.538,1808,2.713,1809,3.365,1810,2.713,1811,2.538,1812,1.205,1813,1.265,1814,2.089,1815,4.588,1816,2.538,1817,2.538,1818,2.538,1819,2.538,1820,3.408,1821,5.89,1822,2.538,1823,2.538,1824,2.538,1825,2.538,1826,2.538,1827,1.684,1828,2.538,1829,1.849,1830,2.538,1831,1.684,1832,2.538,1833,2.538,1834,2.538,1835,2.538,1836,2.538,1837,2.538,1838,2.538,1839,2.089,1840,2.538,1841,2.538,1842,2.538,1843,4.09,1844,2.538,1845,2.538,1846,2.538,1847,2.267,1848,1.684,1849,2.267,1850,2.089,1851,2.089,1852,2.089,1853,2.538,1854,2.538,1855,2.538,1856,2.089,1857,2.538,1858,2.538,1859,2.538,1860,2.538,1861,2.538,1862,2.538,1863,4.09,1864,4.09,1865,2.538,1866,2.538,1867,2.538,1868,2.538,1869,5.136,1870,2.089,1871,5.89,1872,2.538,1873,1.618,1874,1.505,1875,2.538]],["title/directives/NgxFormsErrorAbstractComponent.html",[292,0.757,580,2.184]],["body/directives/NgxFormsErrorAbstractComponent.html",[3,0.075,4,0.067,5,0.075,10,0.176,11,0.25,17,0.006,19,0.239,21,3.911,27,0.075,28,1.917,32,1.253,36,3.189,47,1.365,51,5.166,68,3.116,70,5.594,72,2.687,86,6.393,88,0.005,89,0.005,90,0.604,184,1.701,187,1.125,205,0.557,292,1.273,294,1.64,300,1.754,304,2.65,308,1.119,341,2.084,379,1.609,432,4.95,580,3.674,654,4.941,785,6.244,1427,4.346,1876,6.594,1877,7.84,1878,8.107,1879,6.594,1880,6.594,1881,5.426]],["title/interfaces/NgxFormsErrorConfigurationOptions.html",[0,0.104,1882,3.966]],["body/interfaces/NgxFormsErrorConfigurationOptions.html",[0,0.131,2,0.953,3,0.069,4,0.062,5,0.069,7,3.34,10,0.163,11,0.237,12,0.842,16,0.302,17,0.006,19,0.227,27,0.096,37,2.354,68,3.15,76,2.798,86,7.139,88,0.005,89,0.005,90,0.706,96,0.825,106,2.171,109,1.636,190,2.128,194,3.173,205,0.513,245,1.658,255,3.138,292,1.209,308,1.063,379,1.412,387,6.158,395,6.158,404,5.931,524,2.81,580,2.752,633,4.162,684,4.286,783,2.671,804,3.57,833,4.728,1208,4.047,1464,4.442,1618,5.899,1781,4.123,1808,5.109,1882,6.336,1883,5.424,1884,9.376,1885,5.931,1886,6.878,1887,4.567,1888,7.942,1889,7.942]],["title/directives/NgxFormsErrorsDirective.html",[292,0.757,581,2.288]],["body/directives/NgxFormsErrorsDirective.html",[2,0.427,3,0.031,4,0.028,5,0.031,10,0.073,11,0.133,12,0.734,16,0.277,17,0.006,19,0.22,21,1.614,26,1.357,27,0.031,28,1.801,29,1.153,32,1.312,34,1.517,36,0.989,42,1.784,44,1.719,47,1.604,48,2.238,49,2.068,51,1.734,55,1.206,57,1.875,61,2.32,68,2.975,70,5.825,73,2.067,83,1.959,86,6.185,88,0.003,89,0.003,90,0.396,96,0.731,107,4.464,109,1.562,135,2.43,137,0.993,144,1.392,151,1.614,152,1.032,162,1.132,174,0.818,179,0.755,180,0.818,182,1.438,183,0.793,184,1.375,187,1.143,193,1.278,194,2.54,196,1.389,203,2.029,205,0.23,206,1.322,233,2.407,238,1.206,245,0.743,268,1.592,272,0.656,292,1.05,294,0.677,298,1.3,300,1.721,308,1.172,317,1.325,328,2.482,333,2.212,341,2.521,366,3.308,369,2.644,373,2.716,379,1.65,389,6.373,395,4.464,399,3.57,404,2.096,412,2.029,426,1.471,453,1.805,476,1.066,479,1.066,480,1.63,501,1.728,509,2.359,513,1.323,516,1.613,524,0.86,580,2.438,581,2.052,625,3.635,641,2.98,684,2.407,693,1.717,706,2.789,708,3.963,715,1.3,740,3.301,815,1.959,821,2.909,822,2.909,826,1.515,892,3.558,895,3.558,899,3.304,920,2.239,949,2.448,994,2.074,998,1.392,1000,1.982,1017,3.191,1021,4.806,1051,3.191,1061,3.191,1062,2.564,1077,4.806,1078,3.862,1093,3.411,1094,1.734,1109,2.869,1175,1.323,1208,1.43,1276,2.096,1294,2.908,1322,2.998,1346,1.982,1436,3.313,1464,2.777,1574,3.558,1606,1.887,1610,2.239,1618,4.437,1719,2.239,1760,4.144,1764,3.57,1772,5.474,1781,1.262,1798,3.149,1801,2.756,1809,1.262,1810,2.869,1812,2.554,1813,1.357,1831,1.805,1848,1.805,1849,2.431,1856,5.858,1877,5.973,1881,5.502,1882,4.427,1886,5.474,1890,2.721,1891,6.129,1892,3.334,1893,5.38,1894,5.38,1895,7.12,1896,5.38,1897,4.324,1898,4.324,1899,4.324,1900,4.324,1901,4.324,1902,2.721,1903,4.324,1904,2.721,1905,6.687,1906,7.464,1907,4.324,1908,2.721,1909,2.721,1910,2.721,1911,2.721,1912,2.721,1913,2.721,1914,3.918,1915,5.38,1916,2.721,1917,2.721,1918,2.721,1919,2.721,1920,4.324,1921,2.721,1922,5.38,1923,4.324,1924,2.721,1925,2.721,1926,2.721,1927,2.721,1928,2.721,1929,3.862,1930,2.721,1931,2.721,1932,2.721,1933,2.431,1934,2.431,1935,1.982,1936,2.721,1937,2.239,1938,2.721,1939,2.721,1940,2.721,1941,3.862,1942,2.721,1943,4.324,1944,4.324,1945,5.38,1946,2.721,1947,2.721,1948,2.721,1949,2.721,1950,2.721,1951,2.721,1952,2.721,1953,2.721,1954,2.721,1955,4.324,1956,2.721,1957,2.721,1958,2.721,1959,5.38,1960,3.862,1961,5.474,1962,1.982,1963,2.431,1964,2.721,1965,2.721,1966,5.38,1967,2.721,1968,2.721,1969,2.721,1970,7.12,1971,2.721,1972,4.324,1973,2.721,1974,2.721,1975,2.721,1976,2.431,1977,2.721,1978,2.721,1979,2.721,1980,2.721,1981,2.721,1982,5.38,1983,2.721,1984,4.324,1985,3.862,1986,6.687,1987,1.805,1988,2.721,1989,2.721,1990,2.721]],["title/interfaces/NgxHasCookieConfiguration.html",[0,0.104,1667,3.713]],["body/interfaces/NgxHasCookieConfiguration.html",[0,0.162,2,1.18,3,0.086,4,0.076,5,0.086,10,0.201,11,0.27,12,0.788,16,0.27,17,0.006,27,0.086,88,0.005,89,0.005,152,1.43,506,4.651,1485,4.988,1493,6.096,1517,4.791,1667,6.755,1991,7.519]],["title/directives/NgxHasCookieDirective.html",[292,0.757,583,2.288]],["body/directives/NgxHasCookieDirective.html",[3,0.038,4,0.034,5,0.038,10,0.088,11,0.154,12,0.45,16,0.285,17,0.006,19,0.236,27,0.038,32,1.374,42,0.958,44,1.684,47,1.514,48,3.433,49,2.036,55,3.011,61,1.559,72,1.342,73,2.809,74,1.965,75,3.328,83,2.273,88,0.003,89,0.003,90,0.302,96,0.447,109,1.436,133,1.89,137,1.184,139,1.369,162,1.369,174,0.99,179,0.914,182,1.668,183,0.919,184,1.458,187,1.158,191,2.636,194,1.79,196,1.361,205,0.278,206,1.533,233,1.833,238,1.459,245,0.899,272,0.794,292,1.296,294,0.819,298,1.508,300,1.581,304,1.639,308,1.168,317,1.606,324,1.965,332,1.78,335,2.175,338,2.022,341,1.92,366,2.693,368,3.555,369,2.646,373,3.011,379,1.412,392,1.952,399,2.185,402,3.328,408,3.555,412,2.561,424,1.953,431,2.636,467,1.953,501,1.713,506,2.954,509,2.673,513,1.601,573,1.527,583,2.381,641,1.601,654,1.731,691,2.273,693,1.21,706,2.38,708,4.414,711,2.398,715,2.043,720,1.058,753,1.986,771,1.196,813,1.833,815,1.492,821,1.563,822,1.563,949,2.427,951,4.163,973,3.872,994,1.114,1017,3.603,1061,3.603,1062,2.975,1093,1.833,1094,2.098,1175,1.601,1322,4.212,1493,3.196,1517,4.909,1522,6.338,1549,6.515,1560,6.016,1664,3.488,1667,4.68,1706,2.536,1764,4.031,1781,4.216,1801,2.098,1809,3.149,1810,3.328,1812,2.884,1813,1.642,1820,2.185,1831,2.185,1848,2.185,1856,6.338,1887,1.953,1914,4.425,1929,4.48,1937,2.709,1960,2.941,1961,5.426,1962,2.398,1963,2.941,1992,9.48,1993,9.48,1994,3.293,1995,5.016,1996,3.478,1997,5.016,1998,5.016,1999,8.458,2000,4.425,2001,6.075,2002,4.947,2003,5.313,2004,6.793,2005,6.793,2006,4.947,2007,5.016,2008,5.016,2009,3.293,2010,3.488,2011,3.293,2012,3.293,2013,5.016,2014,5.016,2015,3.293,2016,3.293,2017,4.127,2018,3.293,2019,6.075,2020,3.293,2021,3.293,2022,3.293,2023,3.293,2024,3.293,2025,5.016,2026,3.293,2027,3.293,2028,3.293,2029,3.653,2030,3.293,2031,3.293,2032,3.293,2033,2.536,2034,2.709,2035,3.653,2036,3.293,2037,5.016,2038,2.709,2039,3.653,2040,5.016,2041,3.328,2042,2.398,2043,3.328,2044,1.78,2045,3.293,2046,3.293,2047,3.293,2048,2.185,2049,3.293,2050,3.293,2051,3.293,2052,3.293,2053,3.293,2054,3.293,2055,3.293,2056,2.022,2057,2.098,2058,3.293,2059,3.293,2060,5.016,2061,3.293]],["title/directives/NgxHasFeatureDirective.html",[292,0.757,585,2.288]],["body/directives/NgxHasFeatureDirective.html",[3,0.037,4,0.033,5,0.037,10,0.087,11,0.153,16,0.284,17,0.006,19,0.214,26,1.622,27,0.037,29,1.178,32,1.351,38,2.417,42,1.447,47,1.781,48,3.915,49,1.81,55,2.992,61,1.545,72,2.026,73,2.318,74,1.947,83,2.733,88,0.003,89,0.003,90,0.298,96,0.442,133,1.868,139,1.353,174,0.979,179,0.903,183,0.911,184,1.578,187,1.182,191,2.613,196,1.123,205,0.275,206,1.519,238,1.442,245,0.889,272,0.785,292,1.204,294,0.809,298,1.495,300,1.363,304,1.625,308,1.284,317,1.427,332,1.759,338,1.998,341,2.298,366,2.673,368,3.536,369,2.633,373,2.992,379,1.577,392,1.938,402,3.298,408,3.536,412,2.546,424,1.93,501,1.7,509,2.664,513,1.582,585,2.359,693,2.139,706,2.849,708,4.4,711,2.37,715,2.03,753,1.971,815,1.475,938,2.767,949,2.409,951,4.853,973,3.844,1017,3.577,1061,3.577,1062,2.948,1093,1.811,1094,2.074,1175,1.582,1211,1.93,1225,6.767,1227,6.291,1228,5.555,1229,4.963,1255,4.09,1615,7.387,1764,4.001,1781,3.372,1805,3.62,1809,3.372,1810,3.298,1812,2.863,1813,1.622,1820,2.159,1831,4.001,1848,2.159,1914,3.62,1935,3.62,1937,2.678,2000,4.393,2002,4.393,2003,5.292,2006,4.917,2010,3.462,2017,4.09,2029,3.62,2035,4.393,2039,2.37,2041,3.298,2042,2.37,2043,3.298,2044,1.759,2056,1.998,2057,2.074,2062,8.626,2063,8.626,2064,3.254,2065,2.948,2066,6.03,2067,2.543,2068,3.829,2069,7.124,2070,5.297,2071,4.646,2072,7.273,2073,7.273,2074,7.273,2075,6.031,2076,4.646,2077,6.031,2078,4.971,2079,4.971,2080,4.971,2081,3.254,2082,3.254,2083,3.254,2084,4.393,2085,3.254,2086,3.254,2087,3.254,2088,3.254,2089,5.602,2090,3.254,2091,3.254,2092,3.254,2093,3.254,2094,3.254,2095,3.254,2096,3.254,2097,3.254,2098,2.507,2099,2.907,2100,2.907,2101,2.678,2102,4.971,2103,3.254,2104,4.971,2105,3.254,2106,3.254,2107,3.254,2108,4.646,2109,3.254,2110,5.201,2111,2.907,2112,3.254,2113,3.254,2114,4.44,2115,3.829,2116,3.829]],["title/pipes/NgxHasFeaturePipe.html",[174,1.449,2117,4.305]],["body/pipes/NgxHasFeaturePipe.html",[3,0.05,4,0.045,5,0.05,11,0.135,12,0.557,16,0.253,17,0.006,19,0.242,26,2.191,27,0.05,29,1.264,32,1.408,34,1.748,38,3.014,42,1.279,44,1.012,48,2.987,49,1.971,55,1.948,57,1.906,61,2.232,73,1.689,81,1.487,83,1.991,88,0.004,89,0.004,90,0.403,96,0.975,109,1.052,139,1.828,162,1.828,174,2.739,176,2.248,179,1.219,180,1.186,183,0.806,184,1.345,185,2.375,187,1.119,193,1.472,196,1.668,203,1.657,204,3.351,205,0.371,206,1.343,238,1.948,245,1.2,268,2.899,272,1.06,300,1.387,308,0.856,317,1.589,366,2.748,368,4.266,369,2.532,373,3.183,379,1.67,392,1.992,399,2.915,408,3.014,412,3.308,424,2.606,501,1.239,513,3.014,685,3.951,693,2.059,696,3.951,715,2.16,723,3.951,815,1.991,909,2.606,938,4.342,941,4.113,949,1.755,968,3.806,1017,5.063,1061,4.879,1062,3.677,1101,3.677,1109,2.915,1154,3.385,1175,2.137,1211,2.606,1227,6.402,1228,7.024,1255,7.024,1381,4.478,1813,2.191,1914,4.515,2003,6.043,2010,3.559,2041,4.113,2043,4.113,2056,2.698,2057,2.8,2063,8.247,2066,5.537,2069,5.537,2070,4.515,2084,3.201,2098,3.385,2117,5.537,2118,8.247,2119,4.395,2120,4.395,2121,4.395,2122,5.537,2123,4.395,2124,6.769,2125,6.199,2126,4.395,2127,5.537,2128,5.537,2129,4.395,2130,4.395,2131,4.395,2132,3.351,2133,5.101,2134,5.101,2135,6.968,2136,5.537,2137,4.395,2138,4.395,2139,3.925,2140,3.925,2141,5.537,2142,5.537,2143,3.258,2144,5.537,2145,3.616,2146,3.616,2147,2.137,2148,4.395,2149,6.199,2150,3.925,2151,3.385,2152,3.925,2153,3.925,2154,2.915]],["title/directives/NgxHasFocusDirective.html",[292,0.757,587,2.235]],["body/directives/NgxHasFocusDirective.html",[3,0.063,4,0.056,5,0.063,10,0.148,11,0.223,12,0.497,15,2.127,16,0.223,17,0.006,19,0.163,27,0.063,29,1.391,32,0.855,34,1.561,44,1.275,47,1.502,57,3.146,81,2.738,88,0.004,89,0.004,90,0.507,96,0.985,101,5.273,106,2.045,122,3.1,128,3.146,137,1.311,180,0.842,182,1.841,183,1.33,184,1.577,187,1.145,193,1.315,196,1.703,205,0.468,292,1.348,294,1.377,305,4.038,308,0.764,315,3.528,317,1.703,325,5.284,330,4.475,340,3.284,367,4.374,379,1.33,476,3.17,516,2.071,565,2.738,587,3.364,693,1.75,715,2.182,741,6.965,743,5.284,746,6.615,747,6.254,748,5.284,750,7.046,753,2.371,754,6.557,757,5.284,761,5.284,762,5.284,1110,6.615,2155,9.456,2156,9.456,2157,4.945,2158,7.67,2159,7.255,2160,7.255,2161,5.537,2162,5.537,2163,5.537]],["title/directives/NgxHasFocusDragAndDropAbstractDirective.html",[292,0.757,588,2.235]],["body/directives/NgxHasFocusDragAndDropAbstractDirective.html",[3,0.058,4,0.052,5,0.058,10,0.136,11,0.211,12,0.779,15,1.957,16,0.239,17,0.006,19,0.15,27,0.058,29,1.112,32,1.061,34,1.436,47,1.421,49,1.121,57,3.367,81,2.626,88,0.004,89,0.004,90,0.467,96,0.932,101,5.101,106,1.935,122,3.036,128,2.977,133,2.924,137,1.257,180,0.775,182,1.694,183,1.258,184,1.726,187,1.168,193,1.21,196,1.663,205,0.43,292,1.304,294,1.267,300,1.38,305,3.82,308,0.948,315,3.337,317,1.81,325,4.999,330,4.142,340,3.021,367,4.196,379,1.258,476,3.041,501,2.188,516,2.003,565,2.626,588,3.182,693,1.655,715,2.064,731,7.892,740,4.304,741,6.851,743,4.999,744,7.42,745,7.42,746,6.399,747,6.05,748,4.999,750,6.881,754,6.194,757,4.999,761,4.999,762,4.999,959,4.549,1110,5.98,1308,2.257,1887,3.021,2033,3.923,2034,4.191,2157,4.549,2164,9.591,2165,6.864,2166,6.864,2167,5.093,2168,5.093,2169,5.093,2170,5.093,2171,5.093,2172,5.093,2173,3.923,2174,4.549,2175,6.864,2176,6.864,2177,4.549]],["title/directives/NgxHasPermissionDirective.html",[292,0.757,589,2.288]],["body/directives/NgxHasPermissionDirective.html",[3,0.038,4,0.034,5,0.038,10,0.09,11,0.157,16,0.286,17,0.006,19,0.217,26,1.675,27,0.038,29,1.195,32,1.34,38,2.477,42,1.483,47,1.796,48,3.934,49,1.828,55,3.042,61,1.583,72,2.076,73,2.364,74,1.995,83,2.787,88,0.003,89,0.003,90,0.308,96,0.456,133,1.929,139,1.397,174,1.01,179,0.932,183,0.934,184,1.588,187,1.182,191,2.677,196,1.145,205,0.284,206,1.557,238,1.489,245,0.918,272,0.81,292,1.219,294,0.836,298,1.531,300,1.38,304,1.665,308,1.282,317,1.445,332,1.816,338,2.063,341,2.331,366,2.726,368,3.587,369,2.64,373,3.042,379,0.934,392,1.977,402,3.379,408,3.587,412,2.588,424,1.993,501,1.734,509,2.549,513,1.634,589,2.417,693,2.154,706,2.889,708,4.126,711,2.447,715,2.064,753,2.011,815,1.523,949,2.457,951,4.885,973,3.92,1017,3.648,1061,1.993,1062,3.021,1093,1.87,1094,2.141,1175,1.634,1211,1.993,1230,6.835,1232,6.65,1233,5.647,1234,5.061,1256,5.061,1615,7.437,1764,4.081,1781,3.42,1805,2.447,1809,3.42,1810,3.379,1812,1.595,1813,1.675,1820,2.229,1831,4.081,1848,2.229,1935,3.709,2000,4.48,2002,4.48,2003,5.351,2006,4.999,2010,3.531,2017,4.191,2029,3.709,2035,4.48,2039,2.447,2041,3.379,2042,2.447,2043,3.379,2044,1.816,2056,2.063,2057,2.141,2062,8.63,2065,3.021,2067,2.606,2068,3.923,2070,4.48,2071,4.738,2076,4.738,2084,4.48,2089,5.682,2098,2.588,2099,3.001,2100,3.001,2101,2.765,2108,4.738,2110,5.287,2111,3.001,2114,4.549,2115,3.923,2116,3.923,2178,8.63,2179,3.36,2180,5.093,2181,7.203,2182,7.376,2183,7.376,2184,7.376,2185,6.151,2186,6.151,2187,5.093,2188,5.093,2189,5.093,2190,3.36,2191,3.36,2192,3.36,2193,3.36,2194,3.36,2195,3.36,2196,3.36,2197,3.36,2198,3.36,2199,4.549,2200,3.36,2201,3.36,2202,3.36,2203,3.36,2204,3.36,2205,5.093,2206,3.36,2207,5.093,2208,3.36,2209,3.36,2210,3.36,2211,3.36,2212,3.36,2213,3.36]],["title/pipes/NgxHasPermissionPipe.html",[174,1.449,2214,4.305]],["body/pipes/NgxHasPermissionPipe.html",[3,0.05,4,0.045,5,0.05,11,0.135,12,0.556,16,0.253,17,0.006,19,0.242,26,2.187,27,0.05,29,1.263,32,1.407,34,1.745,38,3.01,42,1.277,44,1.01,48,2.984,49,1.97,55,1.944,57,1.902,61,2.23,73,1.685,81,1.484,83,1.987,88,0.004,89,0.004,90,0.402,96,0.974,109,1.051,139,1.824,162,1.824,174,2.738,176,2.244,179,1.217,180,1.185,183,0.804,184,1.344,185,2.371,187,1.118,193,1.47,196,1.667,203,1.654,204,3.346,205,0.371,206,1.341,238,1.944,245,1.198,268,2.899,272,1.058,300,1.386,308,0.855,317,1.588,366,2.744,368,4.264,369,2.531,373,3.18,379,1.669,392,1.989,399,2.91,408,3.01,412,3.306,424,2.601,501,1.236,513,3.01,685,3.945,693,2.057,696,3.945,715,2.157,723,3.945,815,1.987,909,2.601,938,4.339,941,4.107,949,1.752,968,3.801,1017,5.06,1061,4.875,1062,3.672,1101,3.672,1109,2.91,1154,3.378,1175,2.133,1211,2.601,1232,6.722,1233,7.02,1256,7.02,1381,4.475,1813,2.187,1914,4.509,2003,6.041,2010,3.554,2041,4.107,2043,4.107,2056,2.693,2057,2.795,2070,4.509,2084,3.194,2098,3.378,2118,8.243,2122,5.529,2124,6.764,2127,5.529,2128,5.529,2132,3.346,2133,5.094,2134,5.094,2135,6.962,2136,5.529,2139,3.917,2140,3.917,2141,5.529,2142,5.529,2143,3.254,2144,5.529,2145,3.609,2146,3.609,2147,2.133,2150,3.917,2151,3.378,2152,3.917,2153,3.917,2154,2.91,2178,8.243,2181,5.529,2199,5.529,2214,5.529,2215,4.386,2216,4.386,2217,4.386,2218,4.386,2219,6.191,2220,4.386,2221,4.386,2222,4.386,2223,4.386,2224,4.386,2225,4.386,2226,4.386,2227,4.386,2228,6.191]],["title/classes/NgxI18nAbstractService.html",[90,0.442,2229,3.966]],["body/classes/NgxI18nAbstractService.html",[3,0.084,4,0.075,5,0.084,10,0.198,17,0.006,27,0.084,44,1.998,88,0.005,89,0.005,90,0.676,92,4.704,96,1.002,99,4.98,106,2.081,184,1.272,187,0.906,196,1.374,350,3.535,565,3.117,715,2.771,771,2.682,781,7.097,805,5.686,808,6.432,825,4.532,2229,7.138,2230,8.676,2231,7.381,2232,7.381]],["title/interfaces/NgxI18nConfiguration.html",[0,0.104,2233,3.51]],["body/interfaces/NgxI18nConfiguration.html",[0,0.124,2,0.904,3,0.066,4,0.059,5,0.094,10,0.154,11,0.229,12,0.83,16,0.278,17,0.006,27,0.066,32,1.15,34,2.098,37,1.76,88,0.004,89,0.004,96,0.782,102,2.871,152,1.445,180,1.132,200,4.414,203,2.806,236,5.161,237,3.951,255,3.033,308,1.276,333,3.808,379,1.364,408,4.239,641,3.619,808,6.134,825,4.57,998,3.808,1150,5.161,1221,3.951,1360,4.273,1410,3.451,1496,4.814,1504,4.273,1594,5.421,2124,6.124,2233,5.421,2234,5.759,2235,5.759,2236,7.173,2237,9.717,2238,8.718,2239,7.173,2240,7.787,2241,6.124,2242,6.648,2243,6.648,2244,8.258,2245,7.443,2246,6.124,2247,4.57,2248,7.443,2249,6.349,2250,7.443,2251,6.648,2252,7.173,2253,7.443,2254,7.443,2255,6.648,2256,7.443,2257,7.443,2258,5.421]],["title/components/NgxI18nEmptyComponent.html",[109,0.818,540,2.344]],["body/components/NgxI18nEmptyComponent.html",[3,0.061,4,0.054,5,0.061,17,0.006,19,0.157,27,0.061,28,1.441,47,1.463,55,3.131,64,4.853,88,0.004,89,0.004,90,0.487,96,0.722,106,1.992,109,1.493,179,1.475,180,1.529,182,2.349,205,0.449,292,0.835,293,2.524,294,1.323,298,3.11,361,2.524,478,2.586,479,2.768,480,2.005,481,2.044,484,3.522,485,2.879,507,4.293,509,1.681,514,2.586,515,3.353,516,1.704,517,4.214,518,2.651,519,2.651,520,2.586,521,2.307,522,2.651,523,2.586,524,3.107,525,2.651,526,2.586,527,2.651,528,3.522,529,2.651,530,3.435,531,3.522,532,2.586,533,2.357,534,2.586,535,3.589,536,2.651,537,4.214,538,2.586,539,2.524,540,4.11,541,3.678,542,2.651,543,2.524,544,2.524,545,2.651,546,2.586,547,2.586,548,2.41,549,2.651,550,2.586,551,2.651,552,2.586,553,3.522,554,2.586,555,2.586,556,2.651,557,2.586,558,2.651,559,2.586,560,2.524,561,2.651,562,2.651,563,2.651,564,2.357,565,1.799,566,2.466,567,2.466,568,2.651,569,2.524,570,2.651,571,2.651,572,2.651,573,2.466,574,2.524,575,2.651,576,2.357,577,2.466,578,2.651,579,2.651,580,2.41,581,2.524,582,2.651,583,2.524,584,2.651,585,2.524,586,2.651,587,2.466,588,2.466,589,2.524,590,2.651,591,2.524,592,2.651,593,2.005,594,2.524,595,2.466,596,2.524,597,2.466,598,2.466,599,2.466,600,2.167,601,2.466,602,2.651,603,2.357,604,2.651,605,2.524,606,2.651,607,2.307,608,2.466,609,2.651,610,2.466,611,2.651,612,2.524,613,2.651,614,2.651,2259,5.318,2260,5.318,2261,7.065,2262,5.813,2263,7.065]],["title/injectables/NgxI18nLoadingService.html",[259,1.426,2264,3.713]],["body/injectables/NgxI18nLoadingService.html",[3,0.044,4,0.039,5,0.044,10,0.104,11,0.174,12,0.601,16,0.241,17,0.006,19,0.217,27,0.044,32,1.264,34,2.075,41,2.626,44,1.995,47,1.173,49,1.944,61,2.543,66,2.566,73,1.489,88,0.003,89,0.003,90,0.355,96,1,114,3.457,122,2.72,128,3.757,135,2.846,137,1.269,152,1.135,180,1.018,183,1.038,184,1.676,187,1.118,193,1.59,196,1.458,205,0.327,259,1.675,261,1.68,268,2.811,272,0.934,274,2.966,300,1.678,308,1.129,317,1.246,333,1.982,347,1.839,369,2.436,392,2.629,408,2.754,412,3.085,431,2.036,432,3.618,472,5.058,476,2.218,502,3.424,513,2.754,541,1.796,693,1.366,771,2.058,783,2.614,813,2.157,831,2.57,909,3.359,968,3.477,1102,3.609,1177,2.094,1178,1.408,1221,2.566,1361,4.66,1496,4.008,1504,5.636,1605,4.079,1611,3.061,1793,4.362,1987,4.441,2010,2.224,2246,4.66,2249,5.362,2264,4.362,2265,7.574,2266,7.574,2267,3.874,2268,6.107,2269,6.693,2270,6.693,2271,6.693,2272,6.693,2273,6.693,2274,6.693,2275,5.663,2276,5.663,2277,6.576,2278,5.663,2279,7.363,2280,5.663,2281,3.874,2282,4.362,2283,5.663,2284,6.732,2285,3.874,2286,5.058,2287,3.874,2288,5.058,2289,5.663,2290,3.874,2291,5.663,2292,6.732,2293,3.874,2294,5.663,2295,3.874,2296,5.663,2297,3.874,2298,5.058,2299,3.874,2300,5.663,2301,5.663,2302,5.663,2303,5.663,2304,5.663,2305,5.663,2306,5.663,2307,5.663,2308,5.663,2309,5.663,2310,3.874,2311,3.874,2312,3.874,2313,3.874,2314,5.058,2315,2.686,2316,3.874,2317,2.686,2318,3.461,2319,3.874,2320,3.874,2321,5.663,2322,6.693,2323,2.036,2324,3.874,2325,3.874,2326,3.461,2327,3.461,2328,3.188,2329,3.874,2330,3.874]],["title/modules/NgxI18nModule.html",[2331,3.966,2332,3.713]],["body/modules/NgxI18nModule.html",[3,0.065,4,0.058,5,0.065,12,0.661,15,3.142,16,0.226,17,0.006,19,0.28,27,0.065,34,1.594,42,2.38,44,1.994,47,1.523,49,1.619,61,1.758,83,2.563,88,0.004,89,0.004,90,0.518,118,3.354,180,1.119,183,1.037,184,1.268,187,0.903,193,1.747,196,1.369,205,0.478,250,5.65,255,3.332,308,0.781,317,1.369,379,1.037,501,2.074,506,2.75,524,1.787,799,4.517,1012,3.148,1125,7.386,1452,5.518,1496,2.894,1664,3.247,1892,4.475,2233,6.306,2258,6.701,2332,6.669,2333,4.357,2334,5.052,2335,7.357,2336,5.656,2337,7.901,2338,5.656,2339,9.369,2340,8.976,2341,7.357,2342,5.656,2343,5.656,2344,8.659,2345,7.303,2346,8.176,2347,4.357,2348,4.654,2349,6.728,2350,6.053,2351,5.656,2352,6.298,2353,6.053,2354,5.656,2355,5.052,2356,5.052,2357,5.656,2358,5.656,2359,5.052,2360,5.656,2361,7.357,2362,6.571,2363,7.357,2364,5.656,2365,5.656,2366,5.656,2367,5.656]],["title/classes/NgxI18nMultiTranslationHttpLoader.html",[90,0.442,2349,3.966]],["body/classes/NgxI18nMultiTranslationHttpLoader.html",[3,0.05,4,0.044,5,0.07,10,0.117,11,0.19,12,0.554,16,0.24,17,0.006,19,0.268,27,0.05,32,0.954,34,1.74,36,2.601,37,1.887,38,2.124,42,2.265,44,2.017,49,2.052,61,1.358,68,1.984,83,1.98,88,0.004,89,0.004,90,0.4,92,2.784,96,0.838,106,1.74,114,2.555,118,2.591,134,2.682,135,2.243,152,1.235,180,0.939,183,1.132,184,1.234,187,0.956,193,1.466,195,3.182,196,0.813,205,0.369,206,1.887,233,2.432,268,2.118,272,1.053,274,3.776,300,1.59,308,0.852,323,4.096,358,2.898,369,2.367,379,1.312,384,3.365,426,2.361,431,2.296,501,2.018,506,2.124,524,1.381,723,2.784,771,2.982,808,4.096,812,2.784,813,3.436,815,1.98,824,2.508,825,3.791,909,2.591,949,2.466,1004,2.361,1130,3.182,1136,3.902,1150,3.029,1175,2.124,1192,3.595,1208,3.245,1238,3.902,1271,1.936,1308,1.936,1381,3.544,1410,2.025,1419,3.182,1488,5.162,1496,4.856,1504,5.449,1593,3.595,1594,4.496,1605,3.569,1612,5.891,1790,4.496,1874,3.661,1892,3.569,1941,3.902,1987,2.898,2233,5.214,2242,5.514,2243,3.902,2246,3.595,2249,5.667,2251,3.902,2258,4.496,2262,3.595,2264,5.515,2268,4.75,2282,3.365,2288,5.514,2292,3.595,2315,3.029,2326,3.902,2327,3.902,2332,4.755,2337,7.011,2345,6.395,2347,3.365,2348,3.595,2349,5.08,2353,5.891,2368,8.209,2369,8.209,2370,4.369,2371,4.496,2372,6.174,2373,7.16,2374,5.514,2375,4.369,2376,7.16,2377,6.174,2378,5.514,2379,4.369,2380,6.174,2381,4.369,2382,5.514,2383,6.174,2384,5.514,2385,3.902,2386,4.369,2387,4.369,2388,4.369,2389,4.369,2390,4.369,2391,4.369,2392,8.209,2393,4.369,2394,4.369,2395,4.369,2396,4.369,2397,4.369,2398,3.902,2399,6.174,2400,4.369,2401,4.369,2402,4.369,2403,3.365,2404,3.902,2405,4.369,2406,4.369,2407,3.902,2408,3.365,2409,4.369,2410,4.369,2411,4.369,2412,4.369,2413,4.369,2414,4.369,2415,4.369,2416,3.595,2417,4.369,2418,4.369,2419,4.369,2420,4.369,2421,3.902,2422,4.369,2423,4.369,2424,4.369,2425,3.902,2426,2.784,2427,4.369,2428,4.369,2429,4.369,2430,4.369]],["title/injectables/NgxI18nRootService.html",[259,1.426,2431,3.966]],["body/injectables/NgxI18nRootService.html",[3,0.037,4,0.051,5,0.037,7,2.163,10,0.087,11,0.154,12,0.543,16,0.269,17,0.006,19,0.214,27,0.037,31,3.632,32,1.187,34,2.054,37,2.227,42,0.951,44,1.84,47,1.033,49,1.977,61,2.483,66,2.26,73,1.917,88,0.003,89,0.003,90,0.299,96,0.919,99,2.863,106,1.908,133,1.876,137,1.517,152,1.358,162,1.359,180,0.92,183,0.914,184,1.647,187,1.115,193,1.436,196,1.487,203,2.551,205,0.276,233,2.776,234,3.713,259,1.475,261,1.418,268,2.363,272,0.788,300,1.665,308,1.276,317,1.43,323,3.309,332,2.696,369,2.425,379,0.914,408,3.735,412,2.748,425,2.083,428,2.169,467,1.939,492,4.104,501,0.921,502,4.318,506,1.589,541,2.312,651,2.696,705,3.29,715,2.756,771,1.812,781,5.916,805,2.518,808,6.752,812,2.083,821,2.367,822,2.367,823,5.402,833,2.007,949,2.416,968,4.155,994,1.687,1102,2.083,1175,1.589,1177,1.767,1178,2.197,1221,3.902,1223,3.309,1242,2.919,1246,3.179,1271,3.983,1381,4.409,1402,3.842,1404,3.062,1406,4.056,1407,3.179,1410,2.312,1419,2.381,1496,2.552,1579,3.842,1605,1.63,1611,1.767,1777,3.713,1873,2.083,1887,3.587,1892,1.63,1987,3.309,2033,2.518,2034,2.689,2065,3.587,2233,4.405,2236,4.976,2239,4.976,2240,5.402,2241,7.541,2282,5.212,2317,2.266,2348,2.689,2353,2.689,2356,4.455,2382,4.455,2416,2.689,2426,3.178,2431,4.104,2432,9.165,2433,8.186,2434,3.269,2435,4.104,2436,6.048,2437,6.048,2438,6.048,2439,4.988,2440,6.767,2441,4.988,2442,4.988,2443,4.988,2444,4.988,2445,3.269,2446,6.767,2447,3.269,2448,3.459,2449,5.095,2450,4.988,2451,3.269,2452,4.988,2453,3.269,2454,6.048,2455,4.988,2456,4.988,2457,3.269,2458,4.104,2459,3.269,2460,3.269,2461,4.988,2462,3.269,2463,3.269,2464,3.269,2465,3.269,2466,3.269,2467,3.269,2468,2.919,2469,3.269,2470,3.269,2471,6.767,2472,3.269,2473,3.269,2474,3.269,2475,3.269,2476,3.269,2477,7.287,2478,3.269,2479,3.632,2480,2.919,2481,4.988,2482,3.269,2483,3.269,2484,3.269,2485,3.269,2486,3.269,2487,3.269,2488,3.269,2489,3.269,2490,3.269,2491,2.919]],["title/injectables/NgxI18nService.html",[259,1.426,2352,3.713]],["body/injectables/NgxI18nService.html",[3,0.049,4,0.043,5,0.049,10,0.114,11,0.187,12,0.781,16,0.26,17,0.006,19,0.239,27,0.049,32,1.09,34,2.381,40,7.083,44,2.002,49,0.936,76,3.434,88,0.004,89,0.004,90,0.39,96,1.104,99,3.479,137,1.439,152,1.415,180,1.17,183,1.111,184,1.661,187,1.126,193,1.93,196,1.81,205,0.36,206,1.301,207,3.502,245,1.162,259,1.793,261,1.846,268,2.571,272,1.026,300,1.502,308,1.166,317,0.792,343,2.069,369,2.236,379,1.701,501,1.2,524,2.23,706,3.481,715,2.312,771,2.953,781,5.436,799,3.721,805,3.278,808,6.478,1178,2.202,1221,4.156,1227,4.202,1271,2.686,1381,4.415,1387,5.413,1419,4.414,1496,4.546,1504,5.19,1605,3.021,1793,4.668,2048,4.021,2229,4.986,2236,5.807,2239,5.807,2241,4.986,2268,4.021,2277,3.801,2347,3.278,2352,4.668,2371,4.414,2374,5.413,2431,5.807,2433,3.801,2492,4.256,2493,6.06,2494,6.06,2495,7.058,2496,7.058,2497,8.885,2498,7.058,2499,6.06,2500,6.06,2501,4.256,2502,6.06,2503,4.256,2504,4.256,2505,4.256,2506,6.06,2507,4.256,2508,6.06,2509,4.256,2510,6.06,2511,4.256,2512,6.06,2513,4.256,2514,6.06,2515,4.256,2516,4.256,2517,4.256,2518,4.256,2519,4.256,2520,4.256,2521,4.256,2522,4.256,2523,4.256,2524,4.256,2525,6.06,2526,6.06,2527,4.256,2528,4.256,2529,4.256,2530,4.256,2531,4.256]],["title/injectables/NgxI18nTranslationLoaderResolver.html",[259,1.426,2350,3.966]],["body/injectables/NgxI18nTranslationLoaderResolver.html",[3,0.065,4,0.058,5,0.065,10,0.153,11,0.228,16,0.228,17,0.006,19,0.256,27,0.065,32,1.143,42,1.661,44,1.314,47,1.532,49,1.981,55,2.529,88,0.004,89,0.004,90,0.523,96,0.775,114,2.036,137,0.924,183,1.356,184,1.415,187,1.008,196,1.062,205,0.482,253,4.396,259,2.189,261,2.475,268,2.429,271,2.57,272,1.376,300,1.64,308,1.022,369,2.441,392,2.378,501,1.609,506,2.775,693,1.784,771,2.689,772,4.716,813,4.571,816,3.786,817,5.233,825,3.504,949,2.956,1142,5.389,1178,2.689,1223,4.909,1381,4.987,1392,5.389,1504,5.39,1594,5.389,1611,4,2258,5.389,2264,6.934,2268,6.229,2282,4.396,2286,6.609,2331,6.089,2333,5.7,2350,7.149,2352,6.934,2378,6.609,2532,5.707,2533,5.7,2534,7.4,2535,6.089,2536,7.4,2537,8.688,2538,7.334,2539,7.334,2540,6.609,2541,8.212,2542,8.212,2543,8.688,2544,5.707,2545,5.707,2546,7.4,2547,5.707,2548,6.609,2549,7.4,2550,5.707,2551,5.707]],["title/interfaces/NgxImageMarkerBase.html",[0,0.104,2552,3.342]],["body/interfaces/NgxImageMarkerBase.html",[0,0.194,2,0.898,3,0.065,4,0.058,5,0.065,10,0.153,11,0.228,12,0.666,15,2.848,16,0.277,17,0.006,19,0.242,27,0.107,29,1.201,37,1.749,81,2.508,88,0.004,89,0.004,137,1.201,171,1.843,190,2.598,194,2.041,268,2.432,272,1.38,300,1.017,308,1.201,317,1.065,392,2.382,645,3.407,693,1.983,715,2.229,720,2.642,783,2.157,791,2.653,826,4.126,998,2.927,1129,3.007,1464,2.593,1509,5.147,1809,4.559,2044,3.093,2143,3.007,2552,6.03,2553,3.967,2554,3.967,2555,6.233,2556,6.03,2557,5.398,2558,4.551,2559,4.917,2560,3.796,2561,6.068,2562,4.917,2563,3.646,2564,3.007,2565,4.917,2566,3.796,2567,3.284,2568,3.967,2569,4.167,2570,5.34,2571,3.967,2572,4.167,2573,4.167,2574,3.967,2575,5.139,2576,4.167,2577,4.917,2578,4.723,2579,4.917,2580,4.723,2581,3.646]],["title/components/NgxImageMarkerComponent.html",[109,0.818,543,2.288]],["body/components/NgxImageMarkerComponent.html",[3,0.03,4,0.027,5,0.03,10,0.07,11,0.13,12,0.709,16,0.255,17,0.006,19,0.194,27,0.03,28,1.342,32,1.183,37,2.011,42,1.532,44,0.606,47,1.585,49,1.819,55,1.167,61,1.636,72,1.716,73,1.012,88,0.002,89,0.002,90,0.386,96,0.817,109,1.117,133,1.511,174,1.266,179,0.73,180,1.408,183,0.772,184,1.649,187,1.163,193,0.625,194,2.816,196,1.12,205,0.222,206,1.287,234,1.617,238,2.333,272,0.635,292,0.413,293,1.25,294,0.655,298,3.005,300,1.737,304,1.377,308,1.142,317,1.371,319,4.229,320,2.93,334,1.827,341,2.217,361,1.25,366,2.333,369,2.387,373,2.666,379,1.103,392,2.255,399,3.492,411,2.352,412,2.886,478,1.28,479,1.65,480,0.993,481,1.012,484,2.1,485,1.716,501,0.742,506,1.28,507,3.33,509,1.331,513,2.048,514,1.28,515,1.999,516,1.451,517,2.999,518,1.313,519,1.313,520,1.28,521,1.142,522,1.313,523,1.28,524,2.771,525,1.313,526,1.28,527,1.313,528,2.1,529,1.313,530,2.048,531,2.1,532,1.28,533,1.167,534,1.28,535,2.554,536,1.313,537,2.999,538,1.28,539,1.25,540,1.28,541,1.221,542,1.313,543,2.855,544,4.37,545,1.313,546,1.28,547,1.28,548,1.193,549,1.313,550,1.28,551,1.313,552,1.28,553,2.1,554,1.28,555,1.28,556,1.313,557,1.28,558,1.313,559,1.28,560,1.25,561,1.313,562,1.313,563,1.313,564,1.167,565,0.891,566,1.221,567,1.221,568,1.313,569,1.25,570,1.313,571,1.313,572,1.313,573,1.221,574,1.25,575,1.313,576,1.167,577,1.221,578,1.313,579,1.313,580,1.193,581,1.25,582,1.313,583,1.25,584,1.313,585,1.25,586,1.313,587,1.221,588,1.221,589,1.25,590,1.313,591,1.25,592,1.313,593,0.993,594,1.25,595,1.221,596,1.25,597,1.221,598,1.221,599,1.221,600,1.073,601,1.221,602,1.313,603,1.167,604,1.313,605,1.25,606,1.313,607,1.142,608,1.221,609,1.313,610,1.221,611,1.313,612,1.25,613,1.313,614,1.313,625,3.567,633,2.276,645,1.65,651,3.793,654,2.213,663,2.498,693,1.269,706,2.356,715,1.809,720,1.933,723,1.678,740,3.253,772,1.678,783,1.532,815,1.193,821,1.25,822,1.25,899,3.232,937,3.834,941,2.794,942,3.244,972,2.028,994,1.781,1015,3.762,1051,1.561,1083,1.825,1093,2.344,1129,2.213,1152,3.65,1246,1.384,1308,2.333,1372,3.122,1402,3.244,1404,2.586,1406,2.93,1407,1.384,1410,1.221,1411,2.028,1427,2.498,1509,3.251,1605,2.1,1611,1.423,1777,1.617,1781,3.659,1798,3.067,1809,3.753,1813,1.313,1820,3.492,1827,1.747,1887,1.561,2044,2.276,2151,3.244,2174,2.352,2555,4.364,2558,4.523,2561,5.7,2562,1.747,2563,1.678,2565,1.747,2567,3.022,2568,1.825,2571,1.825,2574,4.865,2575,1.825,2577,4.655,2579,1.747,2581,3.354,2582,9.503,2583,8.488,2584,2.633,2585,3.762,2586,4.331,2587,4.212,2588,6.579,2589,5.264,2590,7.654,2591,6.579,2592,5.264,2593,5.264,2594,6.579,2595,5.264,2596,6.579,2597,6.579,2598,7.017,2599,6.015,2600,3.762,2601,4.212,2602,4.212,2603,4.212,2604,4.331,2605,4.212,2606,4.212,2607,5.264,2608,4.212,2609,4.701,2610,4.212,2611,4.212,2612,4.331,2613,4.212,2614,2.633,2615,3.465,2616,2.633,2617,4.212,2618,2.633,2619,2.633,2620,2.633,2621,3.244,2622,2.633,2623,4.212,2624,2.633,2625,4.331,2626,4.212,2627,2.633,2628,2.633,2629,2.633,2630,2.633,2631,4.212,2632,2.633,2633,2.166,2634,2.352,2635,2.352,2636,2.352,2637,2.352,2638,4.212,2639,6.579,2640,2.633,2641,4.212,2642,2.633,2643,2.633,2644,2.633,2645,2.633,2646,2.633,2647,2.633,2648,2.633,2649,4.212,2650,2.028,2651,4.212,2652,2.633,2653,2.633,2654,2.633,2655,2.633,2656,2.633,2657,2.352,2658,2.633,2659,2.633,2660,2.633,2661,2.633,2662,4.212,2663,2.633,2664,4.212,2665,2.633]],["title/interfaces/NgxImageMarkerConfiguration.html",[0,0.104,2566,3.198]],["body/interfaces/NgxImageMarkerConfiguration.html",[0,0.188,2,0.817,3,0.059,4,0.053,5,0.059,10,0.139,11,0.214,12,0.871,16,0.296,17,0.006,19,0.231,27,0.105,29,1.456,37,2.129,81,2.836,88,0.004,89,0.004,96,0.707,137,1.358,144,3.564,171,1.732,190,2.441,194,1.858,268,2.322,272,1.256,300,1.238,308,1.288,317,0.969,392,2.523,645,2.039,693,2.168,715,2.36,720,2.808,783,2.285,791,2.414,826,3.877,998,3.564,1129,2.736,1464,2.359,1509,5.043,1809,4.567,2044,2.814,2143,2.736,2552,5.443,2553,3.61,2554,3.61,2555,6.091,2556,5.811,2557,5.073,2558,4.277,2559,4.621,2560,3.454,2561,6.179,2562,5.561,2563,3.318,2564,2.736,2565,5.561,2566,4.621,2567,3.999,2568,5.811,2569,5.073,2570,5.729,2571,5.811,2572,5.073,2573,6.104,2574,5.811,2575,5.443,2576,5.073,2577,5.965,2578,4.439,2579,4.621,2580,4.439,2581,3.318]],["title/interfaces/NgxImageMarkerEdit.html",[0,0.104,2580,3.072]],["body/interfaces/NgxImageMarkerEdit.html",[0,0.194,2,0.905,3,0.066,4,0.059,5,0.066,10,0.154,11,0.229,12,0.669,16,0.268,17,0.006,19,0.243,27,0.107,29,1.207,37,1.763,81,2.52,88,0.004,89,0.004,137,1.207,171,2.052,190,2.611,194,2.057,268,2.672,272,1.39,300,1.025,308,1.204,317,1.073,392,2.394,645,2.259,693,1.99,715,2.24,720,2.652,783,2.168,791,2.673,826,4.146,998,2.95,1129,3.03,1464,2.613,1509,5.155,1809,4.506,2044,3.117,2143,3.03,2552,6.048,2553,3.998,2554,3.998,2555,5.991,2556,6.048,2557,5.425,2558,4.574,2559,4.942,2560,3.825,2561,6.078,2562,4.942,2563,3.674,2564,3.03,2565,4.942,2566,3.825,2567,3.31,2568,3.998,2569,4.199,2570,5.355,2571,3.998,2572,4.199,2573,4.199,2574,3.998,2575,5.165,2576,4.199,2577,4.942,2578,4.747,2579,5.991,2580,5.259,2581,3.674]],["title/injectables/NgxImageMarkerService.html",[259,1.426,2625,3.966]],["body/injectables/NgxImageMarkerService.html",[3,0.033,4,0.029,5,0.033,10,0.076,11,0.138,12,0.615,16,0.224,17,0.006,19,0.224,27,0.033,32,0.972,34,2.383,37,2.851,42,2.213,44,1.948,49,2.141,50,1.752,54,2.36,55,1.99,61,2.363,74,1.118,88,0.003,89,0.003,90,0.411,96,0.987,102,3.623,133,1.638,135,1.631,137,1.312,152,1.053,162,1.867,180,1.041,183,0.823,184,0.957,187,0.967,193,1.625,194,3.067,196,1.353,205,0.241,206,0.872,223,2.198,238,3.591,240,1.979,259,1.328,261,1.238,268,2.397,271,2.15,272,0.688,300,1.474,308,0.62,311,1.98,317,0.836,332,2.427,333,1.46,339,5.178,366,1.99,369,2.422,373,2.789,379,0.823,392,0.917,412,2.58,476,2.465,501,0.804,507,1.355,516,2.172,524,2.402,543,2.131,544,4.679,641,1.388,645,2.681,672,4.202,706,1.118,720,2.023,723,1.819,735,2.348,753,1.468,771,1.631,783,2.292,791,2.573,794,4.345,816,1.893,817,3.537,828,2.078,831,4.821,910,2.297,994,2.129,998,2.297,1051,3.733,1093,3.503,1129,2.36,1177,1.543,1178,2.017,1246,1.5,1271,1.99,1284,2.348,1344,3.27,1360,1.638,1372,3.292,1392,2.078,1404,2.757,1406,1.588,1407,1.5,1410,1.323,1427,2.131,1464,2.035,1466,1.979,1509,3,1574,4.567,1605,1.423,1611,1.543,1616,1.893,1621,4.275,1654,2.348,1781,3.369,1809,4.347,1813,2.238,1827,2.979,1829,2.078,1874,2.663,1887,2.663,2101,2.348,2143,3.308,2555,3.682,2558,3.408,2559,1.893,2560,3.682,2561,6.301,2563,1.819,2566,5.502,2578,4.011,2579,4.821,2580,4.011,2581,3.537,2583,7.236,2585,4.01,2609,8.284,2612,4.567,2615,5.178,2625,3.694,2666,8.102,2667,2.854,2668,4.49,2669,5.55,2670,5.55,2671,4.49,2672,4.49,2673,5.55,2674,2.854,2675,8.102,2676,9.008,2677,2.854,2678,7.267,2679,2.854,2680,2.854,2681,4.49,2682,6.294,2683,2.854,2684,4.49,2685,4.49,2686,7.267,2687,2.854,2688,2.854,2689,2.854,2690,2.854,2691,2.854,2692,2.854,2693,2.854,2694,2.854,2695,2.854,2696,2.854,2697,2.854,2698,2.854,2699,2.854,2700,2.854,2701,4.49,2702,4.49,2703,2.854,2704,5.55,2705,6.294,2706,4.49,2707,4.49,2708,2.854,2709,4.49,2710,2.854,2711,2.854,2712,2.854,2713,2.854,2714,2.854,2715,2.198,2716,2.854,2717,2.854,2718,4.49,2719,2.854,2720,2.854,2721,2.854,2722,2.549,2723,2.348,2724,2.854,2725,2.854,2726,2.854,2727,2.854,2728,2.854,2729,2.854,2730,2.549,2731,2.854,2732,2.854,2733,2.854,2734,2.854,2735,5.55,2736,2.854,2737,5.55,2738,2.854,2739,2.854,2740,2.854,2741,2.854,2742,2.854,2743,1.893,2744,2.854,2745,2.854,2746,2.854,2747,2.854,2748,2.36,2749,4.49,2750,4.01,2751,4.49,2752,2.854,2753,2.348,2754,2.854,2755,2.854,2756,2.854,2757,2.854]],["title/interfaces/NgxImageMarkerTypes.html",[0,0.104,2565,3.198]],["body/interfaces/NgxImageMarkerTypes.html",[0,0.193,2,0.891,3,0.065,4,0.058,5,0.065,10,0.152,11,0.227,12,0.662,16,0.277,17,0.006,19,0.241,27,0.107,29,1.195,37,1.736,81,2.495,88,0.004,89,0.004,96,0.771,137,1.195,171,1.834,190,2.585,194,2.631,268,2.423,272,1.369,300,1.009,308,1.197,317,1.057,392,2.37,645,2.224,693,1.975,715,2.218,720,2.787,783,2.384,791,2.632,826,4.105,998,2.905,1129,2.984,1464,3.342,1509,4.979,1809,4.597,2044,3.069,2143,2.984,2552,5.68,2553,3.937,2554,3.937,2555,6.375,2556,6.012,2557,5.371,2558,4.528,2559,4.893,2560,3.767,2561,6.124,2562,4.893,2563,3.618,2564,3.876,2565,5.434,2566,3.767,2567,3.259,2568,3.937,2569,4.135,2570,5.324,2571,3.937,2572,4.135,2573,4.135,2574,3.937,2575,5.114,2576,4.135,2577,4.893,2578,4.7,2579,4.893,2580,4.7,2581,3.618]],["title/interfaces/NgxImageMarkerView.html",[0,0.104,2578,3.072]],["body/interfaces/NgxImageMarkerView.html",[0,0.194,2,0.905,3,0.066,4,0.059,5,0.066,10,0.154,11,0.229,12,0.669,16,0.268,17,0.006,19,0.243,27,0.107,29,1.207,37,1.763,81,2.52,88,0.004,89,0.004,137,1.207,171,2.052,190,2.611,194,2.057,268,2.672,272,1.39,300,1.025,308,1.204,317,1.073,392,2.394,645,2.259,693,1.99,715,2.24,720,2.652,783,2.168,791,2.673,826,4.146,998,2.95,1129,3.03,1464,2.613,1509,5.155,1809,4.506,2044,3.117,2143,3.03,2552,6.048,2553,3.998,2554,3.998,2555,5.991,2556,6.048,2557,5.425,2558,4.574,2559,4.942,2560,3.825,2561,6.078,2562,4.942,2563,3.674,2564,3.03,2565,4.942,2566,3.825,2567,3.31,2568,3.998,2569,4.199,2570,5.355,2571,3.998,2572,4.199,2573,4.199,2574,3.998,2575,5.165,2576,4.199,2577,4.942,2578,5.259,2579,5.991,2580,4.747,2581,3.674]],["title/directives/NgxIsAuthenticatedDirective.html",[292,0.757,591,2.288]],["body/directives/NgxIsAuthenticatedDirective.html",[3,0.046,4,0.041,5,0.046,10,0.108,11,0.179,16,0.279,17,0.006,19,0.234,27,0.046,29,0.943,32,1.321,38,2.831,42,1.172,47,1.206,48,4.033,49,1.649,55,2.581,61,1.809,73,1.547,82,5.629,83,3.1,88,0.003,89,0.003,90,0.369,96,0.547,174,1.21,179,1.117,183,1.067,184,1.538,187,1.174,191,2.115,196,1.273,205,0.34,206,1.78,238,1.784,245,1.099,272,0.971,292,1.301,294,1.001,298,1.751,300,1.216,304,1.903,308,1.18,317,1.543,324,3.349,338,2.471,341,2.162,366,3.032,368,3.867,369,2.642,373,3.322,392,2.198,412,2.826,424,2.387,501,1.928,509,2.513,513,1.957,591,2.763,693,2.062,706,3.116,708,4.374,715,2.057,815,1.824,949,2.733,951,4.621,973,4.359,1134,5.672,1175,1.957,1211,2.387,1236,6.11,1252,5.2,1756,5.629,1764,4.538,1781,3.475,1805,2.931,1809,1.866,1810,3.863,1812,1.91,1813,2.007,1831,3.863,1935,4.24,2000,4.982,2002,4.982,2003,5.672,2006,5.459,2010,3.927,2029,4.24,2035,4.982,2039,4.24,2041,3.863,2042,2.931,2043,3.863,2044,2.176,2056,2.471,2057,2.565,2065,3.453,2067,2.979,2068,4.485,2070,4.982,2071,5.269,2076,5.269,2084,4.982,2089,6.126,2108,5.269,2110,5.774,2115,5.269,2116,4.485,2315,2.791,2758,9.608,2759,9.608,2760,4.025,2761,8.549,2762,7.953,2763,5.822,2764,5.822,2765,5.822,2766,4.025,2767,4.025,2768,4.025,2769,4.025,2770,4.025,2771,4.025,2772,4.025,2773,4.025,2774,4.025,2775,4.025,2776,6.841,2777,4.025,2778,4.025,2779,4.025,2780,4.025]],["title/injectables/NgxMediaQueryService.html",[259,1.426,2781,4.305]],["body/injectables/NgxMediaQueryService.html",[3,0.041,4,0.037,5,0.041,10,0.097,11,0.166,12,0.485,16,0.246,17,0.006,19,0.19,27,0.041,29,0.876,32,1.387,34,1.524,36,1.321,42,2.221,44,1.245,61,2.749,68,2.295,74,2.798,88,0.003,89,0.003,90,0.333,96,0.876,102,2.695,106,1.524,134,5.736,139,1.513,152,1.106,180,0.822,183,0.991,184,1.498,187,1.086,193,1.284,196,1.329,205,0.307,206,1.112,233,3.975,234,3.319,238,2.396,259,1.599,261,1.577,268,2.258,271,2.922,272,0.877,300,1.661,308,1.054,317,1.421,328,2.088,349,4.1,350,3.11,366,2.396,368,2.628,369,2.472,373,3.165,377,4.551,383,3.748,408,3.473,412,2.038,425,2.318,428,2.413,431,1.912,432,2.922,476,2.527,501,1.025,651,3.86,771,3.394,772,2.318,786,2.522,812,3.445,813,5.325,955,2.024,963,4.743,970,7.386,1093,4.452,1101,2.157,1177,1.966,1178,1.321,1246,1.912,1372,3.826,1404,3.319,1406,2.024,1407,1.912,1411,4.164,1579,6.379,1583,2.993,1621,6.379,1654,2.993,1827,3.586,1934,3.249,2146,5.876,2252,8.235,2403,4.164,2421,4.828,2479,4.698,2533,2.802,2650,2.802,2753,2.993,2781,6.816,2782,8.692,2783,3.637,2784,9.831,2785,9.342,2786,4.828,2787,2.922,2788,5.405,2789,5.405,2790,7.141,2791,6.451,2792,6.451,2793,6.451,2794,6.451,2795,6.451,2796,5.405,2797,3.637,2798,5.405,2799,5.405,2800,4.828,2801,3.637,2802,3.937,2803,5.405,2804,3.637,2805,5.405,2806,3.637,2807,7.632,2808,3.637,2809,3.637,2810,3.637,2811,3.637,2812,3.637,2813,3.249,2814,3.637,2815,3.637,2816,3.637,2817,3.637,2818,3.637,2819,3.637,2820,3.637,2821,3.637,2822,3.637,2823,5.405,2824,5.405,2825,3.637,2826,5.405,2827,5.405,2828,3.637,2829,3.637,2830,3.637,2831,3.637,2832,3.637,2833,3.637,2834,3.637,2835,3.637,2836,3.637,2837,3.637,2838,3.637,2839,3.637,2840,3.637,2841,3.637,2842,3.637,2843,3.637,2844,3.637,2845,3.637,2846,3.637,2847,3.637,2848,3.637]],["title/interfaces/NgxMobileLayout.html",[0,0.104,2849,3.51]],["body/interfaces/NgxMobileLayout.html",[0,0.164,2,0.939,3,0.068,4,0.061,5,0.068,10,0.16,11,0.235,12,0.896,16,0.299,17,0.006,19,0.176,27,0.096,37,2.567,48,2.488,88,0.004,89,0.004,96,0.813,144,3.903,190,2.097,194,3.53,205,0.506,247,7.239,308,0.826,533,3.919,633,3.234,1072,4.718,1208,3.144,1294,3.234,1464,2.711,1691,5.048,1781,4.563,2065,4.98,2147,3.709,2787,3.234,2849,5.555,2850,4.923,2851,4.923,2852,6.116,2853,7.311,2854,4.778,2855,3.969,2856,4.608,2857,3.903,2858,4.608,2859,4.357,2860,5.344,2861,5.344,2862,5.344,2863,5.344]],["title/components/NgxMobileLayoutComponent.html",[109,0.818,546,2.344]],["body/components/NgxMobileLayoutComponent.html",[3,0.047,4,0.042,5,0.047,7,1.781,10,0.11,11,0.182,16,0.213,17,0.006,19,0.253,27,0.047,28,1.205,32,1.069,49,0.904,88,0.003,89,0.003,90,0.634,96,0.558,106,1.665,109,1.361,179,1.139,180,1.489,183,1.083,184,1.439,187,0.929,196,0.764,205,0.347,206,1.806,272,0.99,292,0.645,293,1.949,294,1.021,298,3.079,300,1.23,308,0.955,317,1.1,332,3.193,333,3.871,361,1.949,369,1.831,379,0.753,392,1.898,449,4.096,478,1.997,479,2.314,480,1.548,481,1.578,484,2.945,485,2.407,501,1.158,506,1.997,507,3.962,509,1.298,514,1.997,515,2.804,516,1.825,517,3.772,518,2.047,519,2.047,520,1.997,521,1.781,522,2.047,523,1.997,524,3.059,525,2.047,526,1.997,527,2.047,528,2.945,529,2.047,530,2.872,531,2.945,532,1.997,533,4.223,534,1.997,535,3.213,536,2.047,537,3.772,538,1.997,539,1.949,540,1.997,541,1.904,542,2.047,543,1.949,544,1.949,545,2.047,546,3.679,547,4.479,548,1.861,549,2.047,550,1.997,551,2.047,552,1.997,553,2.945,554,1.997,555,1.997,556,2.047,557,1.997,558,2.047,559,1.997,560,1.949,561,2.047,562,2.047,563,2.047,564,1.82,565,1.389,566,1.904,567,1.904,568,2.047,569,1.949,570,2.047,571,2.047,572,2.047,573,1.904,574,1.949,575,2.047,576,1.82,577,1.904,578,2.047,579,2.047,580,1.861,581,1.949,582,2.047,583,1.949,584,2.047,585,1.949,586,2.047,587,1.904,588,1.904,589,1.949,590,2.047,591,1.949,592,2.047,593,1.548,594,1.949,595,1.904,596,1.949,597,1.904,598,1.904,599,1.904,600,1.674,601,1.904,602,2.047,603,1.82,604,2.047,605,1.949,606,2.047,607,1.781,608,1.904,609,2.047,610,1.904,611,2.047,612,1.949,613,2.047,614,2.047,626,5.246,661,4.602,705,1.997,720,1.32,813,2.286,953,2.617,955,3.288,1011,5.039,1012,3.288,1082,2.22,1224,2.617,1308,2.618,1381,3.391,1605,2.945,1777,2.522,1781,2.739,2849,2.991,2852,5.838,2853,6.43,2864,8.016,2865,7.16,2866,4.107,2867,6.18,2868,6.919,2869,5.907,2870,6.919,2871,6.919,2872,4.107,2873,6.919,2874,5.907,2875,5.907,2876,4.107,2877,5.276,2878,5.907,2879,4.107,2880,3.919,2881,5.907,2882,4.107,2883,3.668,2884,3.668,2885,4.107,2886,5.907,2887,5.907,2888,5.907,2889,5.907,2890,5.907,2891,5.907,2892,5.907]],["title/interfaces/NgxMobileLayoutConfiguration.html",[0,0.104,2858,3.713]],["body/interfaces/NgxMobileLayoutConfiguration.html",[0,0.167,2,0.966,3,0.07,4,0.063,5,0.07,10,0.165,11,0.239,12,0.882,16,0.284,17,0.006,19,0.181,27,0.097,37,2.601,48,2.56,88,0.005,89,0.005,96,0.836,190,2.982,194,3.48,205,0.52,247,6.957,308,1.072,533,4.234,633,4.198,1072,4.48,1208,4.082,1294,4.198,1464,3.52,1691,4.198,1781,4.429,2065,5.047,2147,3.777,2787,4.198,2849,4.484,2850,5.066,2851,5.066,2852,6.198,2853,6.884,2854,3.974,2855,4.085,2856,4.742,2857,3.974,2858,5.983,2859,6.198,2860,6.938,2861,6.938,2862,6.938,2863,7.982]],["title/injectables/NgxMobileLayoutService.html",[259,1.426,2852,3.51]],["body/injectables/NgxMobileLayoutService.html",[3,0.038,4,0.034,5,0.038,7,2.198,10,0.089,11,0.156,12,0.723,16,0.266,17,0.006,19,0.216,22,4.718,23,2.571,27,0.038,32,1.243,34,1.928,42,1.475,44,1.783,47,1.268,48,2.107,49,1.986,61,2.406,74,1.307,88,0.003,89,0.003,90,0.306,96,0.929,109,1.532,135,1.213,137,1.445,180,0.932,183,0.929,184,1.62,187,1.095,193,1.455,194,2.44,196,1.498,203,1.911,205,0.282,211,2.314,236,2.314,237,1.512,247,6.497,259,1.499,261,1.447,268,2.603,272,0.805,300,1.696,308,1.259,317,1.273,323,4.538,328,1.916,333,3.763,335,2.198,369,2.487,379,1.655,412,3.317,467,1.979,476,1.985,501,1.727,502,4.117,515,2.405,516,0.805,533,4.385,547,2.464,645,1.985,691,1.512,693,1.999,701,1.916,705,2.464,706,1.985,715,2.211,720,1.072,753,1.091,812,2.127,814,1.707,815,2.296,825,2.049,828,2.431,829,2.571,909,1.979,945,4.2,955,2.82,980,2.571,981,2.431,994,2.488,1004,1.804,1072,1.623,1101,1.979,1102,4.359,1175,1.623,1177,1.804,1178,1.213,1208,1.754,1221,3.1,1264,3.903,1402,5.964,1605,2.526,1647,2.981,1653,4.169,1664,5.051,1691,1.804,1777,5.213,1781,2.349,1808,2.214,2065,1.979,2147,1.623,2314,5.471,2849,6.037,2852,4.981,2853,7.316,2854,1.707,2856,2.571,2857,1.707,2858,4.718,2865,8.062,2877,5.471,2893,9.026,2894,3.337,2895,5.067,2896,4.169,2897,5.067,2898,5.067,2899,5.067,2900,6.84,2901,6.125,2902,6.125,2903,6.125,2904,6.125,2905,6.125,2906,6.84,2907,6.125,2908,5.067,2909,5.067,2910,6.84,2911,3.337,2912,5.067,2913,3.337,2914,5.067,2915,3.337,2916,5.067,2917,3.337,2918,3.337,2919,6.125,2920,3.337,2921,5.067,2922,3.337,2923,3.337,2924,5.067,2925,3.337,2926,3.337,2927,5.067,2928,3.337,2929,3.337,2930,3.337,2931,2.571,2932,3.337,2933,3.337,2934,3.337,2935,5.067,2936,3.337,2937,6.84,2938,3.337,2939,3.337,2940,6.125,2941,3.337,2942,3.337,2943,3.337,2944,3.337,2945,3.337,2946,3.337,2947,3.337,2948,3.337,2949,3.337,2950,3.337,2951,3.337,2952,3.337,2953,5.067,2954,3.337,2955,3.337,2956,2.431,2957,2.127,2958,2.314,2959,2.746,2960,2.571,2961,2.981,2962,2.981,2963,3.337,2964,3.337,2965,3.337,2966,3.337,2967,3.337,2968,3.337,2969,3.337]],["title/directives/NgxModalAbstractComponent.html",[292,0.757,593,1.817]],["body/directives/NgxModalAbstractComponent.html",[3,0.053,4,0.048,5,0.053,10,0.125,11,0.199,12,0.83,16,0.199,17,0.006,19,0.219,27,0.053,28,1.856,32,1.301,42,2.334,49,1.635,68,1.504,73,1.799,88,0.004,89,0.004,90,0.429,96,0.636,122,2.8,135,1.701,136,3.567,137,1.049,183,1.188,184,1.712,187,1.179,196,1.206,205,0.396,206,1.98,249,3.246,271,2.198,292,1.017,294,1.164,300,1.727,304,2.118,305,3.606,308,1.107,315,2.276,317,1.383,319,4.833,320,4.848,340,2.776,341,2.534,347,3.806,349,4.603,357,5.412,358,3.106,369,2.305,377,2.983,426,3.502,453,4.298,476,2.911,501,1.319,516,2.1,565,2.192,593,2.802,625,4.756,627,6.177,629,4.991,645,2.911,646,5.723,649,4.991,663,4.32,664,4.335,720,1.504,740,3.718,786,3.246,824,2.687,833,2.874,862,4.335,899,4.562,923,5.331,1000,3.409,1004,2.53,1246,2.46,1372,4.407,1404,3.978,1406,2.605,1407,2.46,1410,2.17,1576,4.834,1616,3.106,2065,2.776,2143,2.46,2657,4.181,2715,4.991,2748,3.405,2956,3.409,2957,2.983,2958,3.246,2960,3.606,2970,4.681,2971,5.331,2972,8.253,2973,8.253,2974,6.479,2975,6.479,2976,6.479,2977,6.479,2978,4.681,2979,4.681,2980,8.019,2981,5.787,2982,4.681,2983,4.681,2984,4.681,2985,2.53,2986,4.681,2987,4.181,2988,3.852,2989,4.991,2990,2.687,2991,4.681,2992,4.681,2993,4.681,2994,4.681,2995,3.852]],["title/interfaces/NgxModalAriaLabelBaseOptions.html",[0,0.104,2996,2.767]],["body/interfaces/NgxModalAriaLabelBaseOptions.html",[0,0.193,2,0.607,3,0.044,4,0.039,5,0.044,10,0.103,11,0.174,12,0.661,16,0.296,17,0.006,19,0.217,27,0.089,28,1.722,29,1.268,32,0.874,35,1.881,36,2.429,37,2.044,41,1.793,74,1.515,88,0.003,89,0.003,90,0.354,97,1.836,106,1.09,109,1.622,122,1.286,136,2.259,137,1.192,152,1.368,171,1.83,180,1.017,187,0.475,205,0.327,245,1.056,271,1.978,273,1.947,311,1.38,317,0.72,324,3.066,330,2.622,334,1.677,335,2.453,343,1.881,347,3.492,350,1.576,351,2.153,379,1.435,480,1.458,481,1.486,512,1.309,516,1.972,593,1.458,639,3.722,645,2.216,663,1.836,664,2.091,691,1.753,693,1.888,700,3.261,771,1.405,774,3.976,783,1.126,787,2.033,791,1.793,794,1.836,804,2.622,814,2.894,854,2.453,862,2.091,891,4.593,977,4.642,994,2.648,1103,2.091,1131,2.091,1178,2.055,1207,3.057,1221,1.753,1270,3.514,1271,1.714,1427,3.174,1436,3.057,1576,4.992,1812,3.492,1892,3.334,2067,1.979,2132,2.091,2323,2.973,2448,1.836,2748,2.033,2787,2.091,2854,1.979,2985,2.091,2990,3.247,2996,4.223,2997,2.22,2998,4.849,2999,3.966,3000,3.455,3001,3.354,3002,3.354,3003,2.294,3004,3.354,3005,2.22,3006,4.493,3007,3.838,3008,4.973,3009,3.722,3010,2.153,3011,3.247,3012,2.294,3013,3.354,3014,3.354,3015,3.148,3016,3.148,3017,3.838,3018,2.294,3019,4.493,3020,2.22,3021,2.091,3022,2.22,3023,3.838,3024,2.22,3025,2.294,3026,2.22,3027,3.838,3028,2.294,3029,3.247,3030,3.966,3031,2.294,3032,2.22,3033,2.294,3034,2.294,3035,2.294,3036,2.294,3037,2.294,3038,2.294,3039,2.294,3040,2.294,3041,2.294,3042,2.22,3043,2.22,3044,2.22,3045,2.22,3046,3.354,3047,3.354,3048,4.363,3049,3.354,3050,3.976,3051,4.363,3052,4.363,3053,3.354,3054,3.354,3055,3.354,3056,3.354,3057,3.247,3058,3.148,3059,2.091,3060,2.153,3061,3.838,3062,2.22,3063,2.294,3064,2.22,3065,2.294,3066,2.294,3067,2.294,3068,2.22,3069,3.247,3070,3.247,3071,2.153]],["title/interfaces/NgxModalAriaLabelOptions.html",[0,0.104,3015,2.683]],["body/interfaces/NgxModalAriaLabelOptions.html",[0,0.194,2,0.618,3,0.045,4,0.04,5,0.045,10,0.105,11,0.176,12,0.515,16,0.296,17,0.006,19,0.218,27,0.09,28,1.732,29,1.277,32,0.886,35,1.916,36,2.083,37,2.066,41,1.826,74,1.543,88,0.003,89,0.003,90,0.361,97,1.87,106,1.111,109,1.626,122,1.31,136,2.29,137,1.202,152,1.351,171,1.961,180,0.872,187,0.484,205,0.333,245,1.076,271,1.696,273,1.974,311,1.406,317,0.733,324,3.089,330,2.658,334,1.709,335,1.709,343,1.916,347,3.207,350,1.605,351,2.193,379,1.446,480,1.485,481,1.514,512,1.333,516,1.79,593,1.485,639,3.191,645,2.246,663,1.87,664,2.129,691,1.785,693,1.902,700,3.289,771,1.431,774,3.653,783,1.147,787,2.071,791,1.826,794,1.87,804,2.658,814,2.933,854,1.709,862,2.129,891,4.453,977,4.664,994,2.874,1103,2.129,1131,2.129,1178,2.083,1207,3.099,1221,1.785,1270,3.552,1271,1.746,1427,3.207,1436,2.129,1576,4.968,1812,3.522,1892,3.369,2067,2.016,2132,2.129,2323,3.013,2448,1.87,2748,2.071,2787,2.129,2854,2.016,2985,2.129,2990,2.262,2996,4.26,2997,2.262,2998,4.881,2999,3.4,3001,2.336,3002,2.336,3003,2.336,3004,3.4,3005,2.262,3006,4.527,3007,3.879,3008,4.992,3009,3.761,3010,2.193,3011,3.291,3012,2.336,3013,3.4,3014,3.4,3015,3.761,3016,3.191,3017,3.879,3018,2.336,3019,4.527,3020,2.262,3021,2.129,3022,2.262,3023,3.879,3024,2.262,3025,2.336,3026,2.262,3027,3.879,3028,2.336,3029,3.291,3030,4.008,3031,2.336,3032,2.262,3033,2.336,3034,2.336,3035,2.336,3036,2.336,3037,2.336,3038,2.336,3039,2.336,3040,2.336,3041,2.336,3042,2.262,3043,2.262,3044,2.262,3045,2.262,3046,3.4,3047,3.4,3048,4.401,3049,3.4,3050,4.011,3051,4.401,3052,4.401,3053,3.4,3054,3.4,3055,3.4,3056,3.4,3057,3.291,3058,3.191,3059,2.129,3060,2.193,3061,3.879,3062,2.262,3063,2.336,3064,2.262,3065,2.336,3066,2.336,3067,2.336,3068,2.262,3069,3.291,3070,3.291,3071,2.193]],["title/interfaces/NgxModalAriaLabelledOptions.html",[0,0.104,3016,2.683]],["body/interfaces/NgxModalAriaLabelledOptions.html",[0,0.194,2,0.618,3,0.045,4,0.04,5,0.045,10,0.105,11,0.176,12,0.515,16,0.296,17,0.006,19,0.218,27,0.09,28,1.732,29,1.277,32,0.886,35,1.916,36,2.083,37,2.066,41,1.826,74,1.543,88,0.003,89,0.003,90,0.361,97,1.87,106,1.111,109,1.626,122,1.31,136,2.29,137,1.202,152,1.351,171,1.961,180,0.872,187,0.484,205,0.333,245,1.076,271,1.696,273,1.974,311,1.406,317,0.733,324,3.089,330,2.658,334,1.709,335,1.709,343,1.916,347,3.207,350,1.605,351,2.193,379,1.446,480,1.485,481,1.514,512,1.333,516,1.79,593,1.485,639,3.191,645,2.246,663,1.87,664,2.129,691,1.785,693,1.902,700,3.289,771,1.431,774,3.653,783,1.147,787,2.071,791,1.826,794,1.87,804,2.658,814,2.933,854,1.709,862,2.129,891,4.453,977,4.664,994,2.874,1103,2.129,1131,2.129,1178,2.083,1207,3.099,1221,1.785,1270,3.552,1271,1.746,1427,3.207,1436,2.129,1576,4.968,1812,3.522,1892,3.369,2067,2.016,2132,2.129,2323,3.013,2448,1.87,2748,2.071,2787,2.129,2854,2.016,2985,2.129,2990,2.262,2996,4.26,2997,2.262,2998,4.881,2999,3.4,3001,2.336,3002,2.336,3003,2.336,3004,3.4,3005,2.262,3006,4.527,3007,3.879,3008,4.992,3009,3.761,3010,2.193,3011,3.291,3012,2.336,3013,3.4,3014,3.4,3015,3.191,3016,3.761,3017,3.879,3018,2.336,3019,4.527,3020,2.262,3021,2.129,3022,2.262,3023,3.879,3024,2.262,3025,2.336,3026,2.262,3027,3.879,3028,2.336,3029,3.291,3030,4.008,3031,2.336,3032,2.262,3033,2.336,3034,2.336,3035,2.336,3036,2.336,3037,2.336,3038,2.336,3039,2.336,3040,2.336,3041,2.336,3042,2.262,3043,2.262,3044,2.262,3045,2.262,3046,3.4,3047,3.4,3048,4.401,3049,3.4,3050,4.011,3051,4.401,3052,4.401,3053,3.4,3054,3.4,3055,3.4,3056,3.4,3057,3.291,3058,3.191,3059,2.129,3060,2.193,3061,3.879,3062,2.262,3063,2.336,3064,2.262,3065,2.336,3066,2.336,3067,2.336,3068,2.262,3069,3.291,3070,3.291,3071,2.193]],["title/interfaces/NgxModalBaseConfiguration.html",[0,0.104,3057,2.767]],["body/interfaces/NgxModalBaseConfiguration.html",[0,0.194,2,0.621,3,0.045,4,0.04,5,0.045,10,0.106,11,0.177,12,0.516,16,0.295,17,0.006,19,0.219,27,0.09,28,1.734,29,1.279,32,0.888,35,1.922,36,2.088,37,2.07,41,1.833,74,1.549,88,0.003,89,0.003,90,0.362,97,1.876,106,1.114,109,1.627,122,1.315,136,2.296,137,1.204,152,1.325,171,1.849,180,0.874,187,0.486,205,0.334,245,1.08,271,1.7,273,1.979,311,1.411,317,0.736,324,3.093,330,2.665,334,1.715,335,1.715,343,1.922,347,3.214,350,1.611,351,2.201,379,1.448,480,1.491,481,1.519,512,1.338,516,1.793,593,1.491,639,3.199,645,2.251,663,1.876,664,2.137,691,1.792,693,1.904,700,3.295,771,1.436,774,3.66,783,1.971,787,2.078,791,1.833,794,1.876,804,2.665,814,2.94,854,1.715,862,2.137,891,4.04,977,4.668,994,2.672,1103,2.137,1131,2.137,1178,2.46,1207,3.107,1221,2.604,1270,3.907,1271,1.752,1427,3.214,1436,2.137,1576,4.97,1812,3.528,1892,3.376,2067,2.023,2132,2.137,2323,3.021,2448,1.876,2748,2.078,2787,2.137,2854,2.023,2985,2.137,2990,2.27,2996,3.887,2997,2.27,2998,4.016,2999,3.409,3001,2.345,3002,2.345,3003,2.345,3004,3.409,3005,2.27,3006,4.533,3007,3.887,3008,4.995,3009,3.769,3010,2.201,3011,3.299,3012,2.345,3013,3.409,3014,3.409,3015,3.199,3016,3.199,3017,3.887,3018,2.345,3019,4.533,3020,2.27,3021,2.137,3022,2.27,3023,3.887,3024,2.27,3025,2.345,3026,2.27,3027,3.887,3028,2.345,3029,3.299,3030,4.016,3031,2.345,3032,2.27,3033,2.345,3034,2.345,3035,2.345,3036,2.345,3037,2.345,3038,2.345,3039,2.345,3040,2.345,3041,2.345,3042,2.27,3043,2.27,3044,2.27,3045,2.27,3046,3.409,3047,3.409,3048,4.409,3049,3.409,3050,4.018,3051,4.409,3052,4.409,3053,3.409,3054,3.409,3055,3.409,3056,3.409,3057,3.887,3058,4.586,3059,3.107,3060,2.201,3061,3.887,3062,2.27,3063,2.345,3064,2.27,3065,2.345,3066,2.345,3067,2.345,3068,2.27,3069,3.299,3070,3.299,3071,2.201]],["title/interfaces/NgxModalBaseOptions.html",[0,0.104,3061,2.767]],["body/interfaces/NgxModalBaseOptions.html",[0,0.191,2,0.575,3,0.042,4,0.037,5,0.042,10,0.098,11,0.167,12,0.796,15,2.088,16,0.304,17,0.006,19,0.211,27,0.087,28,1.856,29,1.24,32,1.107,35,1.782,36,2.354,37,1.98,41,2.52,74,2.129,88,0.003,89,0.003,90,0.336,97,1.739,106,1.033,109,1.661,122,1.218,136,2.863,137,1.161,152,1.356,171,1.782,180,0.985,187,0.667,205,0.31,245,1.001,271,1.917,273,2.468,311,1.307,317,0.682,324,3.141,330,2.52,334,1.589,335,1.589,343,1.782,347,3.402,350,2.215,351,3.025,379,1.522,480,1.382,481,1.408,512,1.24,516,1.846,593,2.049,639,3.606,645,2.129,663,1.739,664,1.98,691,2.463,693,1.846,700,3.177,771,1.331,774,3.874,783,1.067,787,2.857,791,1.699,794,1.739,804,2.52,814,3.667,854,1.589,862,1.98,891,3.917,977,4.577,994,2.59,1103,1.98,1131,2.938,1178,2.354,1207,2.938,1221,1.66,1270,3.767,1271,1.624,1427,3.402,1436,1.98,1576,4.977,1812,3.402,1892,3.998,2067,1.875,2132,1.98,2323,3.405,2448,2.58,2748,2.857,2787,1.98,2854,1.875,2985,1.98,2990,2.103,2996,3.719,2997,2.103,2998,3.843,2999,3.843,3000,3.273,3001,2.173,3002,2.173,3003,2.173,3004,3.223,3005,2.103,3006,4.394,3007,3.719,3008,4.971,3009,3.606,3010,2.039,3011,3.12,3012,2.173,3013,3.223,3014,3.223,3015,3.025,3016,3.025,3017,3.719,3018,2.173,3019,4.394,3020,2.103,3021,1.98,3022,2.103,3023,3.719,3024,2.103,3025,2.173,3026,2.103,3027,3.719,3028,2.173,3029,3.12,3030,4.54,3031,2.173,3032,2.103,3033,2.173,3034,2.173,3035,2.173,3036,2.173,3037,2.173,3038,2.173,3039,2.173,3040,2.173,3041,2.173,3042,2.103,3043,2.103,3044,2.103,3045,2.103,3046,3.843,3047,3.223,3048,4.251,3049,3.223,3050,3.874,3051,4.251,3052,4.251,3053,3.223,3054,3.223,3055,3.223,3056,3.223,3057,3.12,3058,3.025,3059,1.98,3060,2.039,3061,4.114,3062,3.12,3063,3.223,3064,4.114,3065,3.223,3066,3.223,3067,3.223,3068,4.114,3069,3.12,3070,3.12,3071,2.039]],["title/interfaces/NgxModalCDKModalConfiguration.html",[0,0.104,3027,2.767]],["body/interfaces/NgxModalCDKModalConfiguration.html",[0,0.191,2,0.574,3,0.042,4,0.037,5,0.042,10,0.098,11,0.167,12,0.765,16,0.296,17,0.006,19,0.211,27,0.087,28,1.692,29,1.41,32,0.839,35,1.779,36,1.972,37,1.979,41,1.696,74,1.433,88,0.003,89,0.003,90,0.335,97,2.577,106,1.53,109,1.645,122,1.216,136,2.169,137,1.16,152,1.355,171,1.781,180,0.826,187,0.449,205,0.309,245,0.999,271,1.606,273,1.869,311,1.305,317,0.681,324,2.997,330,3.32,334,2.354,335,1.586,343,2.64,347,3.072,350,1.491,351,2.036,379,1.521,480,2.047,481,2.086,512,1.837,516,1.845,593,1.379,639,3.022,645,2.126,663,1.736,664,1.977,691,1.658,693,2.001,700,3.174,771,1.972,774,3.499,783,1.065,787,1.923,791,2.517,794,3.072,804,2.517,814,2.777,854,1.586,862,1.977,891,3.914,977,4.575,994,2.588,1103,2.934,1131,1.977,1178,1.972,1207,3.871,1221,1.658,1270,3.402,1271,2.406,1427,3.399,1436,1.977,1576,4.921,1812,4.204,1892,3.227,2067,2.777,2132,2.934,2323,3.402,2448,1.736,2748,1.923,2787,2.934,2854,1.872,2985,1.977,2990,2.1,2996,3.716,2997,2.1,2998,3.839,2999,3.219,3001,2.169,3002,2.169,3003,2.169,3004,4.247,3005,2.1,3006,5.223,3007,3.716,3008,5.09,3009,3.603,3010,2.036,3011,3.116,3012,2.169,3013,3.219,3014,3.219,3015,3.022,3016,3.022,3017,3.716,3018,2.169,3019,4.391,3020,2.1,3021,1.977,3022,2.1,3023,3.716,3024,2.1,3025,2.169,3026,2.1,3027,4.111,3028,3.219,3029,4.111,3030,4.247,3031,3.219,3032,3.116,3033,3.219,3034,3.219,3035,3.219,3036,3.219,3037,3.219,3038,3.219,3039,3.219,3040,3.219,3041,3.219,3042,3.116,3043,4.111,3044,4.111,3045,2.1,3046,3.219,3047,3.219,3048,4.247,3049,3.219,3050,3.871,3051,4.247,3052,4.247,3053,3.219,3054,3.219,3055,3.219,3056,3.219,3057,3.116,3058,3.022,3059,1.977,3060,2.036,3061,3.716,3062,2.1,3063,2.169,3064,2.1,3065,2.169,3066,2.169,3067,2.169,3068,2.1,3069,3.116,3070,3.116,3071,2.036]],["title/interfaces/NgxModalComponentConfiguration.html",[0,0.104,3045,2.767]],["body/interfaces/NgxModalComponentConfiguration.html",[0,0.192,2,0.593,3,0.043,4,0.038,5,0.043,10,0.101,11,0.171,12,0.499,16,0.298,17,0.006,19,0.214,27,0.088,28,1.868,29,1.256,32,0.859,35,1.838,36,2.02,37,2.017,41,1.752,74,1.48,88,0.003,89,0.003,90,0.346,97,1.794,106,1.065,109,1.657,122,1.257,136,2.221,137,1.314,152,1.312,171,1.809,180,0.846,187,0.464,205,0.319,245,1.032,271,1.645,273,2.505,311,1.348,317,0.703,324,3.284,330,2.578,334,1.639,335,1.639,343,1.838,347,3.453,350,1.54,351,2.103,379,1.487,480,1.425,481,1.452,512,1.279,516,1.755,593,2.097,639,3.095,645,2.178,663,1.794,664,2.043,691,1.713,693,1.87,700,3.225,771,1.373,774,3.933,783,1.1,787,1.986,791,1.752,794,1.794,804,3.059,814,2.845,854,1.639,862,2.043,891,3.967,977,4.941,994,2.623,1103,2.043,1131,2.043,1178,2.02,1207,3.006,1221,1.713,1270,3.467,1271,1.675,1427,3.453,1436,2.043,1576,5.024,1812,3.453,1892,3.289,2067,1.933,2132,2.043,2323,2.923,2448,1.794,2748,1.986,2787,2.043,2854,1.933,2985,2.043,2990,2.169,2996,3.787,2997,2.169,2998,3.913,2999,3.298,3001,2.241,3002,2.241,3003,2.241,3004,3.298,3005,2.169,3006,4.451,3007,4.451,3008,5.082,3009,4.05,3010,2.103,3011,3.192,3012,2.241,3013,3.298,3014,3.298,3015,3.095,3016,3.095,3017,3.787,3018,2.241,3019,4.451,3020,2.169,3021,2.043,3022,2.169,3023,4.177,3024,2.169,3025,2.241,3026,2.169,3027,3.787,3028,2.241,3029,3.192,3030,3.913,3031,2.241,3032,2.169,3033,2.241,3034,2.241,3035,2.241,3036,2.241,3037,2.241,3038,2.241,3039,2.241,3040,2.241,3041,2.241,3042,2.169,3043,2.169,3044,2.169,3045,3.192,3046,3.913,3047,3.298,3048,4.809,3049,3.913,3050,4.383,3051,4.809,3052,4.809,3053,3.913,3054,3.913,3055,3.913,3056,3.913,3057,3.192,3058,3.095,3059,2.043,3060,2.103,3061,3.787,3062,2.169,3063,2.241,3064,2.169,3065,2.241,3066,2.241,3067,2.241,3068,2.169,3069,3.192,3070,3.192,3071,2.103]],["title/interfaces/NgxModalComponentOptions.html",[0,0.104,3070,2.767]],["body/interfaces/NgxModalComponentOptions.html",[0,0.193,2,0.599,3,0.044,4,0.039,5,0.044,10,0.102,11,0.172,12,0.503,16,0.302,17,0.006,19,0.215,27,0.089,28,1.715,29,1.261,32,0.865,35,1.855,36,2.034,37,2.028,41,1.769,74,1.494,88,0.003,89,0.003,90,0.35,97,1.811,106,1.075,109,1.641,122,1.268,136,2.237,137,1.318,152,1.315,171,1.936,180,0.852,187,0.468,205,0.322,245,1.042,271,1.656,273,1.928,311,1.361,317,0.71,324,3.294,330,2.596,334,1.654,335,1.654,343,1.855,347,3.148,350,1.555,351,2.123,379,1.427,480,1.438,481,1.466,512,1.291,516,1.762,593,1.438,639,3.117,645,2.193,663,1.811,664,2.062,691,1.729,693,1.877,700,3.239,771,1.386,774,3.585,783,1.11,787,2.005,791,1.769,794,1.811,804,3.075,814,2.865,854,1.654,862,2.062,891,3.982,977,4.949,994,2.845,1103,2.062,1131,2.062,1178,2.034,1207,3.026,1221,1.729,1270,3.486,1271,1.691,1427,3.148,1436,2.062,1576,5,1812,3.469,1892,3.307,2067,1.952,2132,2.062,2323,2.943,2448,1.811,2748,2.005,2787,2.062,2854,1.952,2985,2.062,2990,2.19,2996,3.808,2997,2.19,2998,3.934,2999,3.321,3001,2.262,3002,2.262,3003,2.262,3004,3.321,3005,2.19,3006,4.468,3007,4.468,3008,5.09,3009,4.068,3010,2.123,3011,3.214,3012,2.262,3013,3.321,3014,3.321,3015,3.117,3016,3.117,3017,3.808,3018,2.262,3019,4.468,3020,2.19,3021,2.062,3022,2.19,3023,4.195,3024,2.19,3025,2.262,3026,2.19,3027,3.808,3028,2.262,3029,3.214,3030,3.934,3031,2.262,3032,2.19,3033,2.262,3034,2.262,3035,2.262,3036,2.262,3037,2.262,3038,2.262,3039,2.262,3040,2.262,3041,2.262,3042,2.19,3043,2.19,3044,2.19,3045,2.19,3046,3.321,3047,3.321,3048,4.826,3049,3.934,3050,4.398,3051,4.826,3052,4.826,3053,3.934,3054,3.934,3055,3.934,3056,3.934,3057,3.214,3058,3.117,3059,2.062,3060,2.123,3061,4.195,3062,2.19,3063,2.262,3064,2.19,3065,2.262,3066,2.262,3067,2.262,3068,2.19,3069,3.214,3070,3.808,3071,2.123]],["title/interfaces/NgxModalGlobalCDKConfiguration.html",[0,0.104,3019,2.767]],["body/interfaces/NgxModalGlobalCDKConfiguration.html",[0,0.192,2,0.593,3,0.043,4,0.038,5,0.043,10,0.101,11,0.171,12,0.802,16,0.298,17,0.006,19,0.214,27,0.088,28,1.71,29,1.466,32,0.859,35,1.838,36,2.02,37,2.017,41,1.752,74,1.48,88,0.003,89,0.003,90,0.509,97,1.794,106,1.065,109,1.616,122,1.257,136,2.221,137,1.179,152,1.363,171,1.809,180,0.846,187,0.464,205,0.319,245,1.032,271,1.645,273,1.915,311,1.984,317,0.703,324,3.037,330,2.578,334,1.639,335,1.639,343,1.838,347,3.131,350,1.54,351,2.103,379,1.421,480,1.425,481,1.452,512,1.279,516,1.755,593,1.425,639,3.095,645,2.85,663,1.794,664,2.043,691,1.713,693,2.074,700,3.957,771,1.373,774,3.566,783,1.1,787,1.986,791,1.752,794,1.794,804,2.578,814,2.845,854,1.639,862,2.043,891,3.967,977,4.615,994,2.623,1103,2.043,1131,2.043,1178,2.02,1207,3.006,1221,1.713,1270,3.467,1271,1.675,1427,3.131,1436,2.043,1576,5.024,1812,3.453,1892,3.289,2067,1.933,2132,2.043,2323,2.923,2448,1.794,2748,1.986,2787,2.043,2854,2.845,2985,2.043,2990,2.169,2996,3.787,2997,2.169,2998,3.913,2999,3.298,3001,2.241,3002,2.241,3003,2.241,3004,3.298,3005,2.169,3006,4.451,3007,3.787,3008,4.95,3009,3.672,3010,2.103,3011,3.192,3012,2.241,3013,3.298,3014,3.298,3015,3.095,3016,3.095,3017,3.787,3018,2.241,3019,4.655,3020,4.177,3021,3.006,3022,4.177,3023,4.177,3024,4.177,3025,3.298,3026,4.177,3027,3.787,3028,2.241,3029,3.192,3030,3.913,3031,2.241,3032,2.169,3033,2.241,3034,2.241,3035,2.241,3036,2.241,3037,2.241,3038,2.241,3039,2.241,3040,2.241,3041,2.241,3042,2.169,3043,2.169,3044,2.169,3045,2.169,3046,3.298,3047,3.298,3048,4.315,3049,3.298,3050,3.933,3051,4.315,3052,4.315,3053,3.298,3054,3.298,3055,3.298,3056,3.298,3057,3.192,3058,3.095,3059,2.043,3060,2.103,3061,3.787,3062,2.169,3063,2.241,3064,2.169,3065,2.241,3066,2.241,3067,2.241,3068,2.169,3069,3.192,3070,3.192,3071,2.103]],["title/injectables/NgxModalService.html",[259,1.426,2971,3.966]],["body/injectables/NgxModalService.html",[3,0.032,4,0.028,5,0.032,7,2.697,10,0.075,11,0.136,12,0.768,15,2.602,16,0.289,17,0.006,19,0.222,27,0.05,28,0.9,29,1.007,31,4.529,32,1.299,34,2.369,35,4.623,37,2.519,42,2.195,44,2.129,47,1.706,49,2.056,55,1.238,61,1.701,68,1.419,72,1.138,73,2.103,81,2.291,88,0.003,89,0.003,90,0.404,96,1.119,105,4.27,109,1.578,122,2.394,128,2.374,134,2.71,137,1.221,174,0.84,180,1.095,183,0.809,184,1.387,187,1.079,191,1.468,193,1.996,194,2.416,196,1.455,205,0.236,235,3.943,238,1.238,245,0.763,249,3.061,259,1.306,261,1.211,268,2.231,272,0.674,273,1.52,300,1.43,308,1.041,311,0.997,317,1.261,332,1.51,335,1.914,349,4.133,350,1.138,369,2.473,377,2.813,379,1.433,412,1.664,426,2.386,428,1.853,501,0.787,502,2.8,593,2.064,645,2.82,693,1.736,700,1.238,701,1.603,706,2.82,720,0.898,771,1.604,799,1.715,800,5.924,812,2.813,813,3.461,815,1.266,821,2.095,822,2.095,824,2.534,825,1.715,909,1.656,910,4.216,936,3.632,937,3.215,938,2.457,945,4.158,954,2.298,977,3.784,980,3.4,994,2.722,1025,2.034,1129,2.32,1175,1.358,1177,1.51,1178,1.015,1206,1.555,1241,3.943,1322,3.061,1346,2.034,1380,3.943,1464,1.266,1576,4.977,1583,2.298,1605,3.759,1610,2.298,1611,1.51,1781,3.496,1812,1.326,1813,1.392,1887,2.618,1933,2.495,1962,2.034,2010,1.603,2143,2.32,2145,2.298,2298,3.943,2317,1.937,2403,4.79,2426,1.78,2491,3.943,2548,2.495,2564,2.32,2567,2.534,2604,5.117,2615,3.632,2715,2.151,2743,2.928,2748,3.268,2880,1.853,2883,2.495,2884,2.495,2958,1.937,2971,4.503,2972,2.495,2973,2.495,2985,1.51,2988,2.298,3005,1.603,3008,2.958,3009,3.046,3020,1.603,3022,1.603,3024,1.603,3026,1.603,3043,1.603,3044,1.603,3050,2.386,3058,2.457,3060,1.555,3064,4.619,3068,1.603,3071,4.889,3072,2.793,3073,5.473,3074,5.473,3075,5.473,3076,5.473,3077,5.473,3078,5.473,3079,4.414,3080,2.793,3081,2.793,3082,2.793,3083,7.36,3084,4.414,3085,7.54,3086,6.773,3087,2.793,3088,4.414,3089,6.219,3090,2.793,3091,2.793,3092,2.793,3093,2.793,3094,4.414,3095,2.793,3096,2.793,3097,4.414,3098,4.414,3099,2.793,3100,4.414,3101,2.793,3102,4.414,3103,2.793,3104,5.555,3105,2.793,3106,2.793,3107,2.793,3108,2.298,3109,2.793,3110,5.473,3111,2.793,3112,2.793,3113,2.793,3114,4.414,3115,2.793,3116,2.793,3117,2.793,3118,2.793,3119,2.793,3120,2.793,3121,2.793,3122,7.54,3123,2.793,3124,2.793,3125,2.793,3126,2.793,3127,2.793,3128,2.793,3129,2.793,3130,2.793,3131,4.414,3132,2.793,3133,2.793,3134,2.793,3135,2.793,3136,2.793,3137,2.793,3138,2.793,3139,2.793,3140,2.034,3141,2.793,3142,2.793,3143,2.793,3144,2.793,3145,2.793,3146,2.793,3147,4.414,3148,2.793,3149,2.793,3150,4.414,3151,6.219,3152,2.793,3153,4.414,3154,2.793,3155,2.793,3156,2.793,3157,2.793,3158,2.793,3159,2.793,3160,2.793,3161,2.793,3162,2.793,3163,2.793,3164,2.793,3165,2.793,3166,2.793,3167,2.793,3168,2.793,3169,2.793,3170,2.793,3171,2.793,3172,2.793,3173,2.793,3174,2.793,3175,2.793,3176,2.793]],["title/interfaces/NgxModalTypeOptions.html",[0,0.104,3069,2.767]],["body/interfaces/NgxModalTypeOptions.html",[0,0.194,2,0.614,3,0.045,4,0.04,5,0.045,10,0.105,11,0.175,12,0.664,16,0.301,17,0.006,19,0.218,27,0.09,28,1.728,29,1.273,32,0.881,35,1.9,36,2.071,37,2.056,41,1.812,74,1.531,88,0.003,89,0.003,90,0.358,97,1.855,106,1.102,109,1.646,122,1.3,136,2.277,137,1.198,152,1.349,171,1.955,180,0.867,187,0.48,205,0.33,245,1.067,271,1.686,273,1.962,311,1.395,317,0.728,324,3.079,330,2.642,334,1.695,335,1.695,343,1.9,347,3.193,350,1.593,351,2.176,379,1.441,480,1.474,481,1.502,512,1.322,516,1.783,593,1.474,639,3.172,645,2.233,663,1.855,664,2.113,691,1.771,693,1.896,700,3.277,771,1.42,774,3.636,783,1.138,787,2.054,791,1.812,794,1.855,804,2.642,814,2.916,854,1.695,862,2.113,891,4.022,977,4.846,994,2.996,1103,2.113,1131,2.113,1178,2.071,1207,3.081,1221,1.771,1270,3.536,1271,1.732,1427,3.193,1436,2.113,1576,4.963,1812,3.509,1892,3.354,2067,2,2132,2.113,2323,2.995,2448,1.855,2748,2.054,2787,2.113,2854,2,2985,2.113,2990,2.244,2996,3.862,2997,2.244,2998,3.99,2999,3.38,3001,2.318,3002,2.318,3003,2.318,3004,3.38,3005,2.244,3006,4.512,3007,3.862,3008,4.984,3009,3.744,3010,2.176,3011,3.272,3012,2.318,3013,3.38,3014,3.38,3015,3.172,3016,3.172,3017,3.862,3018,2.318,3019,4.512,3020,2.244,3021,2.113,3022,2.244,3023,3.862,3024,2.244,3025,2.318,3026,2.244,3027,3.862,3028,2.318,3029,3.272,3030,3.99,3031,2.318,3032,2.244,3033,2.318,3034,2.318,3035,2.318,3036,2.318,3037,2.318,3038,2.318,3039,2.318,3040,2.318,3041,2.318,3042,2.244,3043,2.244,3044,2.244,3045,2.244,3046,3.38,3047,3.38,3048,4.385,3049,3.38,3050,3.996,3051,4.385,3052,4.385,3053,3.38,3054,3.38,3055,3.38,3056,3.38,3057,3.272,3058,3.172,3059,2.113,3060,2.176,3061,4.244,3062,2.244,3063,2.318,3064,2.244,3065,2.318,3066,2.318,3067,2.318,3068,2.244,3069,3.862,3070,3.272,3071,2.176]],["title/injectables/NgxOnlineService.html",[259,1.426,1814,3.966]],["body/injectables/NgxOnlineService.html",[3,0.063,4,0.056,5,0.063,10,0.147,11,0.222,16,0.248,17,0.006,19,0.237,27,0.063,32,1.323,49,1.774,57,3.497,61,2.661,88,0.004,89,0.004,90,0.504,96,0.746,174,2.171,183,1.323,184,1.39,187,1.121,196,1.023,205,0.464,206,1.68,259,2.136,261,2.383,268,2.631,272,1.325,300,1.738,308,1.182,317,1.344,335,3.131,366,3.2,368,3.921,369,2.527,373,3.795,412,3.723,501,1.549,513,3.511,651,4.628,771,2.623,815,3.654,949,3.221,1051,3.259,1177,2.97,1178,1.997,1221,4.278,1246,2.888,1276,6.596,1372,4.782,1404,4.433,1406,3.059,1407,2.888,1408,4.909,1410,2.548,1605,3.599,1611,2.97,1616,3.646,1747,5.518,1760,6.211,1801,4.601,1813,2.74,1814,5.94,1815,8.311,1827,5.681,1850,5.94,1851,4.522,1852,4.522,2650,4.233,3177,9.305,3178,5.496,3179,8.063,3180,7.22,3181,5.496,3182,5.496,3183,7.22,3184,5.496,3185,5.496,3186,7.22,3187,5.496,3188,5.496]],["title/directives/NgxQueryParamFormSyncComponent.html",[292,0.757,594,2.288]],["body/directives/NgxQueryParamFormSyncComponent.html",[0,0.093,3,0.031,4,0.028,5,0.031,7,1.878,10,0.073,11,0.189,12,0.821,15,1.048,16,0.239,17,0.006,19,0.197,20,3.336,21,1.617,27,0.061,28,1.984,32,1.234,34,2.729,36,0.991,40,6.363,42,1.26,44,1.785,49,1.922,50,2.659,54,1.433,55,2.719,57,2.903,61,2.08,64,1.565,66,1.962,76,0.991,83,3.033,88,0.003,89,0.003,90,0.397,96,0.833,97,2.055,104,2.435,106,1.729,107,1.986,109,1.136,135,0.991,137,1.084,139,1.134,152,0.781,162,1.801,171,0.678,174,1.302,177,1.617,180,0.933,183,1.306,184,1.465,187,1.059,193,1.841,194,2.849,195,1.986,196,1.443,200,2.568,203,1.633,205,0.23,206,1.324,209,1.617,218,2.243,233,1.517,237,1.235,240,1.89,255,2.728,268,2.293,272,0.657,274,2.719,292,0.68,294,0.678,298,0.82,300,1.51,308,0.847,317,1.523,323,1.809,324,1.068,332,3.316,333,3.139,335,1.182,350,3.773,358,1.809,366,2.387,367,5.103,368,2.619,369,1.426,373,2.719,379,1.62,382,6.914,383,1.89,389,2.243,392,1.392,412,2.524,424,1.617,425,1.737,449,1.89,501,0.768,513,3.255,524,0.862,535,1.158,565,2.527,594,3.545,626,4.254,697,4.265,705,2.106,715,2.331,755,3.308,786,1.89,812,1.737,814,1.395,815,1.235,821,1.294,822,1.294,824,1.565,828,1.986,829,2.1,938,2.998,949,1.089,955,2.41,994,0.922,1011,3.923,1051,3.195,1092,2.243,1093,3.415,1102,2.76,1140,3.563,1142,1.986,1152,4.94,1223,5.921,1224,1.737,1270,2.276,1277,2.1,1346,1.986,1361,2.243,1412,2.435,1428,4.726,1559,2.243,1563,2.41,1599,2.435,1605,2.159,1663,2.435,1737,3.868,1777,1.674,1790,1.986,1801,1.737,1809,3.103,1813,1.359,1820,2.873,1829,1.986,1870,2.243,1962,1.986,1985,3.868,1996,1.89,2010,1.565,2033,5.97,2044,1.474,2056,2.659,2057,1.737,2244,2.435,2247,3.308,2252,4.432,2317,1.89,2425,2.435,2426,3.433,2479,4.468,2564,1.433,2634,2.435,2743,1.809,2896,2.243,2988,2.243,3050,1.474,3108,2.243,3189,7.803,3190,7.803,3191,2.435,3192,8.736,3193,7.47,3194,6.693,3195,5.387,3196,7.125,3197,6.693,3198,4.33,3199,6.693,3200,2.726,3201,3.868,3202,2.726,3203,9.144,3204,2.726,3205,4.33,3206,2.726,3207,6.135,3208,2.726,3209,2.726,3210,2.726,3211,2.726,3212,6.135,3213,6.135,3214,4.33,3215,2.726,3216,5.978,3217,2.726,3218,2.726,3219,5.387,3220,2.726,3221,2.726,3222,4.33,3223,6.135,3224,2.726,3225,4.33,3226,2.726,3227,4.33,3228,2.726,3229,4.33,3230,2.726,3231,7.125,3232,2.726,3233,2.726,3234,2.726,3235,2.726,3236,2.726,3237,2.726,3238,3.868,3239,2.726,3240,2.726,3241,2.726,3242,2.726,3243,2.726,3244,5.387,3245,2.726,3246,2.726,3247,2.726,3248,4.33,3249,2.726,3250,1.89,3251,2.726,3252,2.726,3253,2.726,3254,2.726,3255,2.726,3256,2.726,3257,2.726,3258,2.435,3259,1.809,3260,6.135,3261,5.387,3262,2.726,3263,2.726,3264,2.726,3265,2.726,3266,2.726,3267,2.726,3268,4.33,3269,2.726,3270,2.726,3271,2.726,3272,2.435,3273,2.243,3274,2.726,3275,2.726,3276,2.726,3277,2.726,3278,2.726,3279,2.726,3280,2.726,3281,2.726,3282,2.726,3283,2.726,3284,4.33,3285,4.33,3286,2.726,3287,2.726,3288,2.726,3289,2.726,3290,2.726,3291,2.726,3292,2.726,3293,2.726,3294,2.726]],["title/interfaces/NgxReplaceElementsConfigurationElement.html",[0,0.104,3295,3.966]],["body/interfaces/NgxReplaceElementsConfigurationElement.html",[0,0.183,2,1.123,3,0.082,4,0.073,5,0.082,10,0.191,11,0.262,12,0.765,16,0.296,17,0.006,27,0.107,28,1.459,29,1.473,88,0.005,89,0.005,152,1.414,271,2.117,298,2.831,516,2.27,618,4.962,783,2.479,3295,7.009,3296,5.888,3297,5.888,3298,7.746,3299,7.746,3300,5.888,3301,5.512,3302,5.512]],["title/interfaces/NgxReplaceElementsItem.html",[0,0.104,3302,3.713]],["body/interfaces/NgxReplaceElementsItem.html",[0,0.183,2,1.116,3,0.081,4,0.072,5,0.081,10,0.19,11,0.261,12,0.762,16,0.295,17,0.006,27,0.107,28,1.916,29,1.152,88,0.005,89,0.005,152,1.455,271,2.779,298,2.138,516,1.715,618,6.513,783,2.734,3295,5.85,3296,5.85,3297,5.85,3298,5.85,3299,6.982,3300,5.85,3301,5.477,3302,6.536]],["title/pipes/NgxReplaceElementsPipe.html",[174,1.449,3303,4.305]],["body/pipes/NgxReplaceElementsPipe.html",[3,0.043,4,0.056,5,0.043,7,1.625,11,0.17,12,0.337,16,0.115,17,0.006,19,0.213,27,0.075,28,1.127,32,1.44,34,1.558,37,2.007,41,1.737,42,2.353,44,1.862,47,1.5,49,2.012,50,5.379,51,2.388,55,1.661,61,2.401,66,1.698,74,2.572,75,3.666,88,0.003,89,0.003,90,0.601,96,0.751,97,1.779,98,2.987,106,2.043,109,1.457,136,2.623,137,1.354,152,1.325,174,2.634,176,1.917,177,2.222,179,1.04,180,1.102,182,1.838,183,0.687,184,0.646,185,3.548,186,3.666,187,0.806,193,0.89,194,2.585,195,2.729,196,0.698,200,4.583,203,2.084,204,2.987,205,0.317,206,1.145,211,4.552,237,2.975,238,2.91,241,2.886,250,2.301,255,2.252,271,2.144,298,2.717,300,1.437,304,1.225,308,0.763,322,4.936,323,3.666,324,1.468,328,4.16,341,2.29,358,2.486,369,2.139,379,1.533,425,2.388,426,2.025,428,2.486,431,2.904,432,2.025,467,5.359,479,1.468,501,1.056,509,2.075,512,1.268,515,1.779,516,2.247,524,2.075,544,2.623,618,2.598,641,1.822,691,2.975,706,1.468,720,1.204,735,3.083,753,1.806,764,2.729,772,3.522,794,2.623,821,2.623,822,2.623,826,2.086,854,3.143,909,2.222,949,1.497,951,2.025,953,4.924,955,3.076,963,3.277,993,3.347,1000,2.729,1102,2.388,1165,3.083,1175,1.822,1178,1.362,1270,1.969,1294,2.025,1343,3.347,1346,4.025,1372,2.222,1381,2.151,1406,3.076,1407,1.969,1410,1.737,1420,2.886,1429,2.886,1436,2.025,1466,2.598,1496,2.827,1502,5.126,1563,4.033,1616,2.486,1885,2.886,1887,2.222,1892,1.868,1976,4.936,1996,2.598,2065,2.222,2143,3.45,2173,2.886,2247,2.301,2262,3.083,2317,3.832,2323,1.969,2328,4.547,2458,3.083,2533,2.886,2567,2.151,2715,2.886,2743,3.666,2750,3.347,2931,2.886,2987,3.347,2995,4.547,3006,3.769,3032,2.151,3050,2.025,3059,2.025,3273,7.061,3298,5.962,3301,2.886,3302,5.581,3303,5.864,3304,7.246,3305,7.246,3306,3.747,3307,7.246,3308,7.727,3309,3.747,3310,5.526,3311,6.565,3312,6.565,3313,5.526,3314,3.747,3315,5.526,3316,5.526,3317,3.747,3318,3.747,3319,3.747,3320,3.747,3321,7.246,3322,3.747,3323,3.747,3324,3.747,3325,3.747,3326,3.747,3327,3.747,3328,8.581,3329,6.565,3330,5.526,3331,3.747,3332,3.747,3333,3.747,3334,3.747,3335,3.747,3336,3.747,3337,3.747,3338,3.083,3339,3.747,3340,3.747,3341,3.747,3342,3.747,3343,3.747,3344,3.747,3345,5.526,3346,3.747,3347,3.347,3348,3.747,3349,3.747,3350,3.747,3351,3.747,3352,3.747,3353,3.747,3354,3.747,3355,3.747,3356,3.747,3357,5.526,3358,3.747,3359,3.747,3360,3.347,3361,3.747,3362,5.526,3363,3.747,3364,3.347,3365,3.747,3366,3.747,3367,6.565,3368,3.347,3369,5.526,3370,3.747,3371,3.747,3372,3.747,3373,3.083,3374,3.747,3375,3.747,3376,3.747,3377,3.083,3378,3.747,3379,3.747,3380,3.747,3381,3.747,3382,3.747,3383,3.747,3384,3.747,3385,3.747,3386,3.747,3387,3.747,3388,3.747,3389,3.747]],["title/classes/NgxSaveOnExitAbstractService.html",[90,0.442,3390,4.305]],["body/classes/NgxSaveOnExitAbstractService.html",[3,0.077,4,0.069,5,0.077,10,0.18,11,0.253,12,0.828,15,3.155,16,0.253,17,0.006,19,0.261,27,0.077,29,1.091,88,0.005,89,0.005,90,0.617,92,4.291,109,1.504,122,2.731,184,1.658,187,1.008,268,2.429,272,1.624,335,3.561,350,3.346,387,5.981,565,3.121,595,3.807,814,4.201,1224,4.291,2134,6.757,2479,4.904,2539,7.334,3390,7.334,3391,7.913,3392,7.913,3393,6.734,3394,8.86,3395,8.86,3396,6.734,3397,8.212,3398,8.212,3399,6.734,3400,8.212,3401,8.212,3402,6.734,3403,6.734,3404,6.734]],["title/directives/NgxSaveOnExitComponent.html",[292,0.757,595,2.235]],["body/directives/NgxSaveOnExitComponent.html",[3,0.056,4,0.05,5,0.056,10,0.132,11,0.206,12,0.603,16,0.206,17,0.006,19,0.197,27,0.056,29,1.433,32,1.179,34,1.388,44,1.887,47,1.58,49,1.476,57,2.909,61,2.085,81,2.772,88,0.004,89,0.004,90,0.451,96,0.911,109,1.501,137,1.327,180,1.02,183,1.23,184,1.657,187,1.131,193,1.593,196,1.525,205,0.416,206,2.051,268,1.985,272,1.187,292,1.053,294,1.225,300,1.661,305,3.734,308,1.183,310,3.586,311,3.505,315,2.394,317,1.249,324,3.465,332,2.662,340,2.92,349,2.827,366,4.011,368,3.984,369,2.019,373,3.631,387,5.557,412,3.232,425,4.862,565,3.062,595,3.11,651,3.626,693,2.133,696,4.862,804,3.11,943,6.815,1101,2.92,1221,3.458,1410,4.455,1609,3.793,1801,4.275,2880,4.451,3042,5.077,3391,8.343,3392,8.343,3405,4.924,3406,7.63,3407,6.708,3408,8.193,3409,8.193,3410,6.708,3411,6.708,3412,8.845,3413,7.63,3414,6.708,3415,7.63,3416,6.708,3417,4.924,3418,4.924,3419,5.992,3420,4.924,3421,4.924,3422,6.708,3423,6.708,3424,5.52,3425,6.815,3426,6.708,3427,6.708,3428,4.924,3429,4.924,3430,4.924,3431,4.924,3432,4.924,3433,4.924,3434,4.924]],["title/injectables/NgxSignalStoreService.html",[259,1.426,3435,4.305]],["body/injectables/NgxSignalStoreService.html",[3,0.071,4,0.063,5,0.071,10,0.166,11,0.24,12,0.557,16,0.24,17,0.006,19,0.251,26,3.091,27,0.071,44,1.966,49,1.878,57,3.383,88,0.005,89,0.005,90,0.568,96,0.842,99,4.478,106,2.199,180,0.943,184,1.069,187,1.048,193,1.472,196,1.589,205,0.524,259,2.308,261,2.689,274,4.407,347,2.942,367,4.614,379,1.136,392,3.11,501,2.406,565,2.888,720,1.992,771,3.102,821,2.942,822,2.942,824,3.559,949,3.117,994,2.097,1004,3.351,1246,3.258,1360,4.478,1777,3.807,2143,3.258,2621,6.576,2956,4.515,2957,3.951,2958,4.299,3435,7.625,3436,6.2,3437,6.724,3438,6.2,3439,6.525,3440,7.802,3441,7.802,3442,7.802,3443,5.537,3444,6.2,3445,7.802,3446,6.217,3447,4.515,3448,6.2,3449,6.2,3450,6.2,3451,6.576,3452,6.2,3453,5.101]],["title/interfaces/NgxSignalStoreSlice.html",[0,0.104,3454,3.51]],["body/interfaces/NgxSignalStoreSlice.html",[0,0.162,2,0.751,3,0.055,4,0.049,5,0.055,10,0.128,11,0.203,16,0.3,17,0.006,19,0.238,27,0.106,28,1.987,29,1.504,36,1.739,37,2.011,54,2.516,68,2.887,76,2.941,88,0.004,89,0.004,96,0.65,105,2.839,114,3.205,135,1.739,137,0.775,139,2.736,148,4.064,151,4.801,152,0.954,156,2.939,162,1.991,171,2.234,173,4.791,183,1.556,190,2.306,205,0.404,271,1.416,273,3.354,274,3.887,300,0.851,308,0.661,317,1.728,350,1.951,392,1.538,432,2.587,476,1.875,509,1.513,661,5.253,783,1.915,982,3.176,994,1.619,1271,3.588,1308,2.121,1360,3.777,1563,3.662,2048,4.365,2154,4.365,2859,3.486,3259,5.631,3437,6.664,3439,3.486,3446,3.486,3447,3.486,3454,5.896,3455,3.687,3456,3.687,3457,5.414,3458,3.687,3459,5.414,3460,3.939,3461,3.939,3462,6.537,3463,5.068,3464,5.791,3465,5.068,3466,3.939,3467,3.687,3468,6.661,3469,5.068,3470,6.186,3471,3.687,3472,3.687,3473,5.791,3474,5.068,3475,5.791,3476,5.213,3477,5.414,3478,5.414,3479,3.939,3480,3.687,3481,3.687,3482,3.939,3483,3.687]],["title/interfaces/NgxSignalStoreSliceArrayMethods.html",[0,0.104,3474,3.713]],["body/interfaces/NgxSignalStoreSliceArrayMethods.html",[0,0.161,2,0.743,3,0.054,4,0.048,5,0.054,10,0.127,11,0.201,15,3.507,16,0.301,17,0.006,19,0.237,27,0.106,28,1.931,29,1.37,36,1.721,37,1.996,54,2.489,68,2.59,76,2.928,88,0.004,89,0.004,96,0.643,105,2.809,114,2.875,135,2.928,137,0.767,139,2.716,148,4.041,151,4.434,152,0.947,156,2.908,162,3.352,171,2.27,173,4.764,183,1.602,190,2.289,205,0.4,271,1.401,273,3.311,274,3.97,300,0.842,308,0.654,317,1.724,350,1.93,392,1.522,432,3.53,476,3.157,509,1.496,661,5.239,783,1.901,982,4.333,994,1.602,1271,3.747,1308,2.099,1360,3.749,1563,2.636,2048,3.142,2154,4.333,2859,3.449,3259,5.609,3437,6.523,3439,3.449,3446,3.449,3447,3.449,3454,5.445,3455,3.648,3456,3.648,3457,5.374,3458,3.648,3459,5.374,3460,3.897,3461,3.897,3462,6.512,3463,5.031,3464,5.759,3465,5.031,3466,3.897,3467,3.648,3468,6.631,3469,5.031,3470,6.152,3471,3.648,3472,3.648,3473,5.759,3474,5.759,3475,6.208,3476,5.588,3477,5.374,3478,5.374,3479,6.631,3480,3.648,3481,3.648,3482,3.897,3483,3.648]],["title/interfaces/NgxSignalStoreSliceBaseMethods.html",[0,0.104,3475,3.713]],["body/interfaces/NgxSignalStoreSliceBaseMethods.html",[0,0.16,2,0.739,3,0.054,4,0.048,5,0.054,10,0.126,11,0.2,15,3.599,16,0.302,17,0.006,19,0.237,27,0.106,28,1.929,29,1.367,36,1.712,37,1.989,54,2.476,68,2.584,76,2.922,88,0.004,89,0.004,96,0.64,105,2.794,114,2.869,135,1.712,137,1.303,139,3.51,148,4.03,151,4.422,152,0.943,156,2.892,162,1.959,171,2.267,173,4.751,183,1.6,190,2.281,205,0.398,271,1.394,273,3.308,274,3.964,300,0.837,308,0.65,317,1.722,350,1.92,392,1.514,432,2.546,476,1.845,509,1.489,661,5.232,783,1.894,982,3.125,994,1.594,1271,3.74,1308,2.088,1360,3.736,1563,2.622,2048,3.125,2154,5.599,2859,3.431,3259,5.599,3437,6.514,3439,3.431,3446,3.431,3447,3.431,3454,5.43,3455,3.628,3456,3.628,3457,5.354,3458,3.628,3459,6.134,3460,3.876,3461,3.876,3462,6.5,3463,5.012,3464,5.743,3465,5.012,3466,3.876,3467,3.628,3468,6.616,3469,5.012,3470,6.134,3471,3.628,3472,3.628,3473,5.743,3474,5.012,3475,6.194,3476,5.575,3477,6.944,3478,6.944,3479,3.876,3480,3.628,3481,3.628,3482,3.876,3483,3.628]],["title/interfaces/NgxStorage.html",[0,0.104,3484,3.198]],["body/interfaces/NgxStorage.html",[0,0.2,2,0.988,3,0.072,4,0.064,5,0.072,10,0.168,11,0.242,15,3.788,16,0.307,17,0.006,19,0.185,27,0.109,76,3.438,88,0.005,89,0.005,137,1.276,139,3.935,152,1.372,171,2.138,268,2.33,272,1.518,273,3.194,476,3.086,502,3.221,753,2.058,783,1.833,948,5.977,1263,4.012,2448,2.988,2449,4.177,3484,5.226,3485,4.365,3486,6.247,3487,6.247,3488,6.247,3489,4.177,3490,5.226,3491,6.247,3492,5.479,3493,5.462,3494,4.365,3495,5.479,3496,5.479,3497,4.177]],["title/interfaces/NgxStorageBaseEvent.html",[0,0.104,3491,3.342]],["body/interfaces/NgxStorageBaseEvent.html",[0,0.201,2,1.007,3,0.073,4,0.065,5,0.073,10,0.172,11,0.245,16,0.307,17,0.006,19,0.189,27,0.11,76,3.454,88,0.005,89,0.005,137,1.469,139,3.879,152,1.378,171,2.156,268,2.358,272,1.547,273,3.211,476,3.552,502,3.281,753,2.096,783,1.867,948,4.255,1263,4.087,2448,3.044,2449,6.016,3484,4.255,3485,4.447,3486,4.447,3487,4.447,3488,4.447,3489,4.255,3490,6.016,3491,6.466,3492,5.525,3493,5.525,3494,4.447,3495,5.525,3496,5.525,3497,4.255]],["title/interfaces/NgxStorageClearEvent.html",[0,0.104,3495,3.072]],["body/interfaces/NgxStorageClearEvent.html",[0,0.202,2,1.032,3,0.075,4,0.067,5,0.075,10,0.176,11,0.249,16,0.305,17,0.006,19,0.194,27,0.11,76,3.475,88,0.005,89,0.005,137,1.311,139,3.646,152,1.386,171,2.275,268,2.394,272,1.586,273,3.234,476,3.17,502,3.364,753,2.149,783,1.914,948,4.362,1263,4.19,2448,3.121,2449,4.362,3484,4.362,3485,4.559,3486,4.559,3487,4.559,3488,4.559,3489,4.362,3490,5.369,3491,6.513,3492,5.587,3493,5.611,3494,4.559,3495,5.83,3496,5.587,3497,4.362]],["title/interfaces/NgxStorageRemoveEvent.html",[0,0.104,3496,3.072]],["body/interfaces/NgxStorageRemoveEvent.html",[0,0.201,2,1.011,3,0.073,4,0.066,5,0.073,10,0.172,11,0.246,16,0.308,17,0.006,19,0.19,27,0.11,76,3.571,88,0.005,89,0.005,137,1.294,139,3.613,152,1.413,171,2.259,268,2.364,272,1.553,273,3.322,476,3.13,502,3.296,753,2.106,783,1.875,948,4.274,1263,4.105,2448,3.057,2449,4.274,3484,4.274,3485,4.466,3486,4.466,3487,4.466,3488,4.466,3489,4.274,3490,5.301,3491,6.474,3492,5.536,3493,6.474,3494,4.466,3495,5.536,3496,5.788,3497,4.274]],["title/injectables/NgxStorageService.html",[259,1.426,3498,4.305]],["body/injectables/NgxStorageService.html",[3,0.026,4,0.023,5,0.026,7,1.617,10,0.061,11,0.222,12,0.621,16,0.294,17,0.006,19,0.193,26,1.859,27,0.054,28,0.76,29,0.367,32,1.468,34,2.415,36,1.726,42,1.905,44,2.144,47,1.433,49,2.04,61,2.15,73,0.871,75,1.503,76,3.368,81,1.261,88,0.002,89,0.002,90,0.435,96,0.94,97,1.075,99,2.14,105,2.818,107,2.715,128,0.983,136,0.905,137,0.986,139,3.207,152,1.36,162,1.976,177,1.344,180,1.052,183,0.871,184,1.049,187,1.039,190,1.307,193,1.831,194,1.964,196,1.471,200,2.211,203,0.854,205,0.191,219,1.864,233,2.075,234,2.289,237,2.495,238,2.697,255,1.519,259,1.103,261,0.983,268,2.67,272,0.546,273,2.655,274,1.004,300,1.505,308,0.84,311,3.091,317,0.422,323,1.503,328,3.972,335,2.388,345,2.818,349,4.149,352,1.864,369,2.514,379,0.683,392,1.198,402,2.474,412,3.355,476,3.021,494,2.024,497,4.918,501,0.639,502,1.159,641,1.102,651,2.976,701,1.301,705,1.813,706,2.384,715,1.429,720,0.728,723,2.376,753,3.077,771,1.726,783,2.788,821,2.255,822,2.255,826,1.261,833,2.917,938,3.064,948,4.343,949,1.898,968,4.019,994,2.674,1101,1.344,1109,1.503,1177,1.225,1178,0.823,1208,1.191,1246,2.497,1263,5.32,1264,2.872,1360,2.727,1372,3.265,1404,2.289,1406,1.261,1407,1.191,1410,2.821,1419,1.65,1525,5.386,1609,2.872,1611,2.568,1616,3.653,1777,1.391,1820,3.152,1827,3.152,1870,1.864,1873,1.444,2132,1.225,2318,2.024,2398,2.024,2448,2.888,2449,6.683,2468,2.024,2479,2.715,2480,8.061,2540,2.024,2564,1.96,2650,1.745,2896,3.068,3010,1.261,3201,3.33,3338,4.53,3368,2.024,3484,4.038,3486,4.538,3487,5.012,3488,4.538,3489,5.948,3490,5.116,3492,3.509,3493,4.22,3494,2.585,3495,3.509,3496,3.509,3497,2.474,3498,6.887,3499,8.569,3500,2.266,3501,5.506,3502,6.18,3503,4.751,3504,4.751,3505,6.919,3506,4.751,3507,4.751,3508,3.728,3509,3.728,3510,8.217,3511,2.266,3512,2.266,3513,2.266,3514,3.728,3515,6.086,3516,3.728,3517,2.266,3518,2.266,3519,2.266,3520,3.728,3521,2.266,3522,3.728,3523,2.266,3524,2.266,3525,2.266,3526,2.266,3527,3.728,3528,2.266,3529,3.728,3530,2.266,3531,2.266,3532,3.728,3533,2.266,3534,2.266,3535,2.266,3536,2.266,3537,2.266,3538,2.266,3539,2.266,3540,2.266,3541,2.266,3542,2.266,3543,2.266,3544,1.444,3545,2.266,3546,4.751,3547,2.266,3548,2.266,3549,1.864,3550,2.266,3551,2.266,3552,3.33,3553,2.266,3554,3.728,3555,3.33,3556,3.33,3557,3.728,3558,3.728,3559,2.266,3560,2.266,3561,2.266,3562,2.266,3563,2.266,3564,2.266,3565,6.086,3566,2.266,3567,6.086,3568,3.728,3569,4.751,3570,3.728,3571,3.728,3572,2.266,3573,2.266,3574,3.728,3575,6.086,3576,2.266,3577,2.266,3578,2.266,3579,2.266,3580,2.266,3581,2.266,3582,2.266,3583,4.751,3584,2.266,3585,2.266,3586,2.266,3587,2.266,3588,2.266,3589,2.266,3590,2.266,3591,2.266,3592,2.266,3593,2.266,3594,2.266,3595,2.266,3596,2.266,3597,2.266]],["title/interfaces/NgxStorageSetEvent.html",[0,0.104,3492,3.072]],["body/interfaces/NgxStorageSetEvent.html",[0,0.2,2,1.001,3,0.073,4,0.065,5,0.073,10,0.171,11,0.244,16,0.308,17,0.006,19,0.188,27,0.11,76,3.565,88,0.005,89,0.005,137,1.286,139,3.596,152,1.41,171,2.251,268,2.349,272,1.538,273,3.378,476,3.111,502,3.263,753,2.084,783,1.856,948,4.231,1263,4.064,2448,3.027,2449,4.231,3484,4.231,3485,4.422,3486,4.422,3487,4.422,3488,4.422,3489,4.231,3490,5.268,3491,6.455,3492,5.767,3493,6.455,3494,6.275,3495,5.511,3496,5.511,3497,4.231]],["title/interfaces/NgxStore.html",[0,0.104,3598,3.713]],["body/interfaces/NgxStore.html",[0,0.163,2,0.927,3,0.067,4,0.06,5,0.067,10,0.158,11,0.233,16,0.298,17,0.006,19,0.268,27,0.1,35,4.058,38,2.871,49,1.836,51,3.762,76,2.748,88,0.004,89,0.004,96,0.802,101,4.644,102,2.943,106,1.664,122,1.963,123,5.403,124,3.103,127,4.79,128,4.036,130,5.064,131,4.892,145,5.508,146,4.3,147,5.536,148,4.511,153,5.826,154,3.917,155,5.508,156,3.625,191,3.975,194,2.106,238,2.616,274,4.194,285,4.3,286,4.485,379,1.386,506,3.678,509,2.39,783,1.718,1345,7.485,1801,3.762,1808,5.018,1996,5.244,2633,4.858,3259,5.018,3476,5.786,3549,4.858,3598,5.826,3599,4.858,3600,6.755,3601,7.241,3602,6.778,3603,5.273,3604,6.755,3605,4.858,3606,4.3,3607,4.858,3608,3.917,3609,6.223,3610,8.126,3611,5.273,3612,5.273,3613,5.273,3614,5.273,3615,5.273,3616,5.273]],["title/injectables/NgxStoreService.html",[259,1.426,3250,3.342]],["body/injectables/NgxStoreService.html",[0,0.097,2,0.707,3,0.051,4,0.046,5,0.051,10,0.12,11,0.194,12,0.793,16,0.282,17,0.006,19,0.232,27,0.051,28,1.286,32,0.695,34,2.222,36,3.544,44,2.076,49,1.601,68,2.765,74,2.47,76,2.291,88,0.004,89,0.004,90,0.412,96,1.071,97,2.992,98,4.951,99,3.619,113,2.764,114,2.249,124,2.366,131,5.013,151,5.563,180,1.262,183,1.156,184,1.644,187,1.107,193,2.098,196,1.545,205,0.38,209,2.67,238,2.794,259,1.865,261,1.952,268,2.71,272,1.085,274,4.34,298,2.919,300,1.294,308,0.621,324,1.763,367,3.933,369,1.926,377,2.868,379,1.619,392,3.104,431,2.366,501,1.777,509,1.422,755,2.764,771,2.291,799,2.764,804,2.923,824,2.584,831,2.986,949,3.316,994,2.462,1129,3.314,1793,4.856,2426,2.868,2621,3.467,3250,5.045,3443,4.02,3453,5.188,3598,3.467,3602,6.073,3608,2.986,3617,4.501,3618,6.487,3619,5.188,3620,5.188,3621,5.188,3622,5.188,3623,4.501,3624,6.305,3625,5.188,3626,4.501,3627,5.188,3628,4.501,3629,5.188,3630,4.501,3631,5.188,3632,5.188,3633,4.501,3634,5.965,3635,4.501,3636,5.188,3637,4.501,3638,4.501,3639,7.277,3640,4.501,3641,4.501,3642,4.501,3643,4.501,3644,4.501,3645,4.501,3646,4.501,3647,4.501,3648,4.501,3649,4.501,3650,4.501,3651,4.501,3652,4.501,3653,4.501,3654,4.501,3655,4.501,3656,4.501,3657,4.501,3658,4.501]],["title/directives/NgxTableCellDirective.html",[292,0.757,596,2.288]],["body/directives/NgxTableCellDirective.html",[3,0.051,4,0.045,5,0.051,10,0.119,11,0.193,12,0.563,16,0.271,17,0.006,19,0.184,27,0.051,32,1.412,38,3.046,47,1.499,48,3.011,72,1.818,81,3.197,88,0.004,89,0.004,90,0.574,96,0.606,137,1.34,152,0.647,171,1.558,179,1.238,180,1.101,182,2.083,183,1.148,184,1.732,187,1.196,193,1.059,196,1.348,205,0.377,237,2.839,250,3.847,255,2.553,256,4.563,292,0.983,294,1.109,298,1.884,300,1.599,304,2.048,306,2.739,308,1.293,311,1.591,315,3.521,317,1.348,319,2.561,320,2.483,333,3.205,345,2.645,379,1.148,509,2.711,512,2.12,524,1.98,535,3.334,560,3.437,564,4.391,596,3.727,630,5.422,651,2.411,667,5.751,668,4.563,669,5.274,670,6.064,671,5.719,672,5.267,673,5.274,674,5.021,675,4.615,676,6.55,677,5.274,678,5.578,679,5.578,680,4.826,682,4.563,684,3.487,685,3.992,686,4.344,687,4.826,688,4.826,689,4.826,690,4.826,691,2.839,693,1.894,696,2.843,697,3.992,699,3.436,700,3.666,701,2.561,702,3.436,703,4.615,705,2.169,706,1.747,708,4.508,715,1.341,994,2.902,1072,3.046,1084,3.249,1165,5.155,1452,5.466,1671,5.155,1672,5.155,1673,5.155,1674,5.155,1675,3.67,1676,3.67,1677,3.67,1689,5.155,1691,3.386,1692,5.155,1694,3.67,1695,3.67,1696,3.67,3659,4.461,3660,4.461,3661,6.265,3662,4.461,3663,4.461,3664,4.461,3665,4.461]],["title/interfaces/NgxTableConfiguration.html",[0,0.104,3666,3.966]],["body/interfaces/NgxTableConfiguration.html",[0,0.099,2,0.723,3,0.052,4,0.047,5,0.052,7,3.453,10,0.123,11,0.245,12,0.882,16,0.305,17,0.006,19,0.188,27,0.091,29,1.539,37,1.958,42,1.34,61,1.431,64,4.974,68,2.058,88,0.004,89,0.004,90,0.729,96,0.625,105,2.73,109,1.087,114,3.091,137,1.468,144,3.277,152,1.256,203,2.415,205,0.389,237,4.224,245,1.257,255,2.61,306,5.457,308,1.196,333,3.277,349,3.676,383,4.441,392,2.784,431,4.185,479,3.551,524,2.024,535,4.114,576,2.04,597,2.134,598,2.134,599,2.134,675,2.934,693,2.291,753,3.009,945,5.916,1072,3.114,1103,3.462,1109,5.282,1294,4.804,1464,3.926,1473,5.565,1605,3.193,1887,3.798,1987,5.552,2371,4.664,2535,5.27,3424,5.27,3666,6.06,3667,4.112,3668,4.112,3669,6.405,3670,8.096,3671,7.928,3672,7.129,3673,8.664,3674,8.096,3675,7.111,3676,8.664,3677,7.739,3678,7.739,3679,5.72,3680,7.739,3681,5.72,3682,7.111,3683,6.133,3684,6.551,3685,6.405,3686,7.111,3687,4.112,3688,4.112,3689,4.604,3690,4.112]],["title/interfaces/NgxTableCypressDataTagsBase.html",[0,0.104,3691,3.966]],["body/interfaces/NgxTableCypressDataTagsBase.html",[0,0.183,2,1.12,3,0.081,4,0.073,5,0.081,10,0.191,11,0.262,12,0.876,16,0.289,17,0.006,19,0.21,27,0.097,29,1.377,88,0.005,89,0.005,152,1.449,231,5.195,667,5.577,718,5.195,1072,4.672,1691,5.083,1785,5.869,3691,6.995,3692,5.869,3693,5.869,3694,6.995,3695,6.371,3696,5.494,3697,5.869]],["title/pipes/NgxTableGetPipe.html",[174,1.449,1711,3.966]],["body/pipes/NgxTableGetPipe.html",[3,0.071,4,0.063,5,0.071,12,0.56,16,0.192,17,0.006,19,0.23,27,0.089,32,1.51,36,3.11,44,2.174,47,1.621,48,2.593,49,1.883,64,4.913,73,2.396,88,0.005,89,0.005,90,0.717,96,0.847,136,3.127,152,1.368,173,3.973,174,2.699,176,3.19,179,1.73,180,1.302,182,2.603,183,1.143,184,1.35,185,3.37,186,5.194,187,0.766,193,1.481,196,1.593,204,4.626,205,0.527,206,2.393,324,3.067,328,3.579,379,1.569,384,6.03,425,4.989,428,5.194,706,3.067,826,3.47,1488,6.484,1711,7.61,1713,6.993,1839,5.13,2038,5.13,3377,6.442,3698,7.829,3699,6.234,3700,6.234,3701,6.234,3702,6.993,3703,5.568,3704,5.568,3705,5.13,3706,7.829,3707,6.234,3708,6.234]],["title/pipes/NgxTableHasObserversPipe.html",[174,1.449,3709,3.966]],["body/pipes/NgxTableHasObserversPipe.html",[3,0.079,4,0.07,5,0.079,12,0.62,16,0.212,17,0.006,19,0.203,27,0.079,29,1.35,34,1.945,44,1.589,47,1.926,66,3.127,83,3.777,88,0.005,89,0.005,90,0.632,96,0.937,137,1.35,174,2.075,176,3.531,179,1.915,180,1.362,182,2.771,183,1.265,184,1.437,185,4.505,187,0.847,193,1.639,196,1.667,204,3.73,205,0.583,206,2.109,319,5.14,320,5.177,379,1.528,441,7.444,442,6.164,444,6.164,445,8.307,3709,6.858,3710,8.335,3711,8.335,3712,6.901,3713,8.335,3714,6.901,3715,6.901]],["title/directives/NgxTableOpenRowStateTemplateAbstractComponent.html",[292,0.757,597,2.235]],["body/directives/NgxTableOpenRowStateTemplateAbstractComponent.html",[3,0.069,4,0.062,5,0.069,10,0.26,11,0.237,16,0.289,17,0.006,19,0.179,27,0.069,28,1.726,88,0.005,89,0.005,90,0.557,96,0.826,109,1.558,137,1.248,184,1.677,187,1.152,205,0.514,292,1.21,294,1.512,304,2.519,308,1.064,324,3.019,341,2.811,379,1.413,392,3.187,509,2.435,548,3.493,565,2.863,597,3.573,715,2.544,945,5.636,951,5.299,1020,8.199,1473,6.232,3716,9.527,3717,5.004,3718,6.341,3719,6.341,3720,7.707,3721,7.707,3722,7.557,3723,7.707]],["title/directives/NgxTableSelectTemplateAbstractComponent.html",[292,0.757,598,2.235]],["body/directives/NgxTableSelectTemplateAbstractComponent.html",[3,0.071,4,0.063,5,0.071,10,0.261,11,0.241,16,0.29,17,0.006,19,0.23,21,3.687,27,0.071,70,6.17,88,0.005,89,0.005,90,0.57,96,0.844,98,4.224,102,4.262,109,1.326,137,1.266,184,1.684,187,1.158,194,3.05,205,0.525,292,1.227,294,1.546,304,2.555,308,1.079,324,3.061,341,3.025,379,1.433,509,2.47,548,3.542,565,2.892,598,3.623,951,5.318,1428,4.789,1473,6.077,3717,5.115,3718,6.431,3719,6.431,3724,9.574,3725,7.815,3726,7.815,3727,7.815,3728,8.548]],["title/pipes/NgxTableShowHeaderPipe.html",[174,1.449,3729,3.966]],["body/pipes/NgxTableShowHeaderPipe.html",[3,0.069,4,0.062,5,0.069,12,0.545,16,0.187,17,0.006,19,0.249,27,0.088,29,1.246,32,1.448,35,2.949,36,3.07,42,1.765,44,2.113,47,1.899,49,1.956,61,1.885,64,4.417,73,2.956,74,2.376,88,0.005,89,0.005,90,0.705,96,0.824,105,4.563,114,2.164,135,2.203,137,0.982,152,0.879,174,2.672,176,3.103,179,1.682,180,1.285,182,2.558,183,1.112,184,1.326,185,4.159,186,4.023,187,0.745,193,1.44,196,1.573,204,4.568,205,0.512,206,2.352,237,3.829,324,2.376,425,3.865,428,4.023,693,1.855,720,1.949,826,3.376,863,4.99,1072,4.46,1175,2.949,1464,3.486,1473,3.724,1839,4.99,3683,6.846,3696,6.846,3703,5.417,3704,5.417,3705,4.99,3729,7.313,3730,7.694,3731,7.694,3732,6.064,3733,7.694,3734,8.888,3735,6.064,3736,6.064,3737,6.064,3738,6.064,3739,6.064,3740,4.99,3741,5.417,3742,6.064,3743,7.694,3744,6.064,3745,6.064]],["title/interfaces/NgxTableShowHeaderRequirements.html",[0,0.104,3696,3.713]],["body/interfaces/NgxTableShowHeaderRequirements.html",[0,0.185,2,1.144,3,0.083,4,0.074,5,0.083,10,0.195,11,0.265,16,0.282,17,0.006,19,0.214,27,0.098,29,1.587,88,0.005,89,0.005,152,1.328,231,5.306,667,4.32,718,5.306,1072,4.186,1691,3.938,1785,7.791,3691,5.994,3692,5.994,3693,5.994,3694,7.083,3695,6.507,3696,6.631,3697,7.791]],["title/interfaces/NgxTableSortEvent.html",[0,0.104,719,3.51]],["body/interfaces/NgxTableSortEvent.html",[0,0.161,2,1.174,3,0.085,4,0.076,5,0.085,10,0.2,11,0.269,16,0.269,17,0.006,19,0.22,27,0.085,88,0.005,89,0.005,670,6.336,700,4.233,703,6.086,716,6.682,717,6.682,719,6.368,3746,7.481,3747,7.481,3748,9.265]],["title/pipes/NgxTableSortIconPipe.html",[174,1.449,3749,3.966]],["body/pipes/NgxTableSortIconPipe.html",[3,0.077,4,0.068,5,0.077,12,0.603,16,0.207,17,0.006,19,0.241,27,0.077,34,1.892,44,1.888,47,1.697,48,3.68,88,0.005,89,0.005,90,0.615,96,0.912,152,1.188,174,2.465,176,3.435,179,1.863,180,1.346,182,2.726,183,1.231,184,1.413,185,3.629,187,0.824,193,1.594,196,1.647,204,4.43,205,0.567,206,2.052,379,1.689,675,5.872,700,4.354,703,5.872,706,3.211,722,5.996,3749,6.744,3750,8.197,3751,8.197,3752,6.714,3753,8.197,3754,8.197,3755,6.714,3756,8.197,3757,5.996,3758,6.714,3759,6.714,3760,6.714]],["title/directives/NgxTableSortTemplateAbstractComponent.html",[292,0.757,599,2.235]],["body/directives/NgxTableSortTemplateAbstractComponent.html",[3,0.078,4,0.069,5,0.078,10,0.182,11,0.254,16,0.254,17,0.006,19,0.243,27,0.078,88,0.005,89,0.005,90,0.624,96,0.924,109,1.61,137,1.339,184,1.534,187,1.015,205,0.575,292,1.297,294,1.693,304,2.702,308,1.141,324,3.238,341,2.612,379,1.515,509,2.612,548,3.745,565,3.011,599,3.832,675,6.044,700,4.365,703,4.337,715,2.676,951,5.004,3717,5.6,3718,6.801,3719,6.801,3722,7.95,3757,6.079,3761,8.901,3762,8.265]],["title/directives/NgxTooltipAbstractComponent.html",[292,0.757,600,1.964]],["body/directives/NgxTooltipAbstractComponent.html",[3,0.06,4,0.081,5,0.06,10,0.142,11,0.217,17,0.006,19,0.233,27,0.06,32,0.819,47,1.748,72,3.227,81,1.793,88,0.004,89,0.004,90,0.828,96,0.72,137,1.464,183,1.292,184,1.676,187,1.201,196,1.312,205,0.448,271,2.893,292,1.106,294,1.318,300,1.755,304,2.304,305,3.923,308,0.732,315,3.427,317,1.312,334,2.298,340,3.143,341,2.227,369,2.096,501,1.494,506,2.577,565,2.679,600,2.872,601,3.268,620,4.847,654,4.162,715,2.381,720,1.703,854,4.062,910,4.496,1465,6.516,3763,5.299,3764,6.502,3765,8.071,3766,7.539,3767,7.539,3768,6.295,3769,6.295,3770,7.048,3771,5.983,3772,7.048,3773,7.048,3774,7.048,3775,7.048,3776,7.048,3777,6.295,3778,6.295,3779,6.295,3780,5.299,3781,3.143,3782,3.377,3783,4.733,3784,7.048,3785,7.048]],["title/interfaces/NgxTooltipActiveElementEvent.html",[0,0.104,3786,3.072]],["body/interfaces/NgxTooltipActiveElementEvent.html",[0,0.203,2,0.975,3,0.071,4,0.097,5,0.071,10,0.166,11,0.24,12,0.805,16,0.307,17,0.006,19,0.23,27,0.105,29,1.006,39,3.176,47,1.617,81,2.1,88,0.005,89,0.005,109,1.6,152,1.367,171,2.229,205,0.525,245,1.695,271,2.31,516,1.883,524,1.962,600,2.53,620,4.701,740,4.561,854,4.006,910,4.897,1037,3.095,2147,3.019,2857,3.176,3771,5.066,3781,5.676,3782,3.956,3786,5.444,3787,4.119,3788,6.128,3789,3.956,3790,4.305,3791,3.956,3792,4.976,3793,4.976,3794,3.956]],["title/interfaces/NgxTooltipActiveTooltipEvent.html",[0,0.104,3793,3.072]],["body/interfaces/NgxTooltipActiveTooltipEvent.html",[0,0.205,2,1.02,3,0.074,4,0.098,5,0.074,10,0.174,11,0.247,16,0.298,17,0.006,19,0.236,27,0.107,29,1.053,39,3.325,47,1.664,81,2.198,88,0.005,89,0.005,109,1.48,152,1.321,171,2.266,205,0.549,245,1.774,271,2.377,516,1.937,524,2.053,600,2.648,620,4.348,740,4.34,854,3.484,910,4.945,1037,3.24,2147,3.16,2857,3.325,3771,5.172,3781,5.552,3782,4.141,3786,5.12,3787,4.311,3788,6.211,3789,4.141,3790,4.506,3791,4.141,3792,5.12,3793,5.557,3794,4.141]],["title/interfaces/NgxTooltipBaseEvent.html",[0,0.104,3788,3.198]],["body/interfaces/NgxTooltipBaseEvent.html",[0,0.204,2,0.995,3,0.072,4,0.098,5,0.072,10,0.17,11,0.244,16,0.304,17,0.006,19,0.233,27,0.106,29,1.397,39,3.244,47,1.638,81,2.145,88,0.005,89,0.005,109,1.464,152,1.374,171,2.145,205,0.536,245,1.732,271,2.75,516,2.178,524,2.004,600,2.584,620,4.3,740,4.309,854,3.432,910,4.919,1037,3.161,2147,3.083,2857,3.244,3771,5.513,3781,5.513,3782,4.041,3786,5.042,3787,4.207,3788,6.167,3789,4.041,3790,4.396,3791,4.041,3792,5.042,3793,5.042,3794,4.041]],["title/interfaces/NgxTooltipConfiguration.html",[0,0.104,3789,3.072]],["body/interfaces/NgxTooltipConfiguration.html",[0,0.205,2,1.008,3,0.073,4,0.092,5,0.073,10,0.172,11,0.246,12,0.716,16,0.306,17,0.006,19,0.235,27,0.106,29,1.04,39,3.286,47,1.652,81,2.173,88,0.005,89,0.005,109,1.614,152,1.315,171,2.157,205,0.543,245,1.754,271,2.36,516,1.923,524,2.03,600,2.618,620,4.325,740,4.326,854,3.459,910,4.642,1037,3.202,2147,3.123,2857,3.286,3771,5.145,3781,5.718,3782,4.093,3786,5.083,3787,4.261,3788,6.02,3789,5.083,3790,6.291,3791,4.093,3792,5.083,3793,5.083,3794,4.093]],["title/directives/NgxTooltipDirective.html",[292,0.757,601,2.235]],["body/directives/NgxTooltipDirective.html",[3,0.044,4,0.068,5,0.044,10,0.104,11,0.174,12,0.704,16,0.119,17,0.006,19,0.231,27,0.065,32,1.264,44,1.304,47,1.525,49,1.724,66,1.756,72,3.001,81,2.768,88,0.003,89,0.003,90,0.519,96,0.526,102,3.905,109,1.434,137,0.628,179,1.075,182,1.883,183,1.038,184,1.627,187,1.198,196,1.573,205,0.327,245,1.058,271,2.317,292,1.156,294,0.964,298,1.703,300,1.729,301,3.927,304,1.851,305,3.152,308,1.326,311,1.382,315,3.809,317,1.645,330,3.632,331,3.461,334,1.68,340,2.298,341,2.327,346,2.822,349,2.224,357,4.875,369,2.436,467,3.359,476,3.606,480,2.524,501,1.092,506,1.884,516,1.366,600,1.579,601,3.103,620,3.671,627,5.671,629,4.362,646,5.156,649,4.362,654,2.036,663,2.688,720,1.245,740,3.632,748,5.705,761,4.125,762,4.125,764,4.875,796,4.362,816,2.57,817,4.992,821,2.688,822,2.688,854,3.193,862,2.094,910,2.897,937,4.125,1037,3.337,1101,3.97,1102,4.265,1464,4.004,1606,3.927,1618,4.441,1798,4.125,2989,5.156,3059,3.061,3764,4.362,3766,6.576,3767,6.576,3768,5.058,3769,5.058,3771,5.955,3777,5.058,3778,5.058,3779,5.058,3781,4.852,3795,3.874,3796,8.45,3797,6.693,3798,7.833,3799,7.363,3800,6.693,3801,7.363,3802,6.576,3803,7.363,3804,6.576,3805,5.663,3806,5.663,3807,5.663,3808,5.663,3809,5.663,3810,5.663,3811,5.663,3812,8.181,3813,5.663,3814,6.693,3815,3.874,3816,3.874,3817,3.874,3818,3.874,3819,5.663,3820,3.874,3821,6.693,3822,3.874,3823,3.461,3824,5.058,3825,5.058,3826,3.874,3827,5.663,3828,5.663,3829,3.874,3830,3.874,3831,3.874,3832,3.874,3833,5.663]],["title/interfaces/NgxTooltipInactiveEvent.html",[0,0.104,3792,3.072]],["body/interfaces/NgxTooltipInactiveEvent.html",[0,0.205,2,1.025,3,0.074,4,0.093,5,0.074,10,0.175,11,0.248,16,0.298,17,0.006,19,0.237,27,0.107,29,1.057,39,3.339,47,1.668,81,2.208,88,0.005,89,0.005,109,1.483,152,1.323,171,2.269,205,0.552,245,1.782,271,2.383,516,1.943,524,2.062,600,2.66,620,4.356,740,4.346,854,3.494,910,4.95,1037,3.254,2147,3.174,2857,3.339,3771,5.182,3781,5.559,3782,4.159,3786,5.134,3787,4.33,3788,6.218,3789,4.159,3790,4.525,3791,4.159,3792,5.568,3793,5.134,3794,4.159]],["title/interfaces/NgxTooltipItem.html",[0,0.104,3791,3.072]],["body/interfaces/NgxTooltipItem.html",[0,0.203,2,0.976,3,0.071,4,0.091,5,0.071,10,0.166,11,0.241,12,0.805,16,0.309,17,0.006,19,0.23,27,0.105,29,1.007,39,3.181,47,1.618,81,2.103,88,0.005,89,0.005,109,1.601,152,1.403,171,2.126,205,0.525,245,1.698,271,2.734,516,1.885,524,1.965,600,2.533,620,4.702,740,4.562,854,4.008,910,4.588,1037,3.099,2147,3.023,2857,3.181,3771,5.07,3781,5.678,3782,3.962,3786,4.98,3787,4.124,3788,5.95,3789,3.962,3790,4.311,3791,4.98,3792,4.98,3793,4.98,3794,3.962]],["title/injectables/NgxTooltipService.html",[259,1.426,3764,3.713]],["body/injectables/NgxTooltipService.html",[3,0.037,4,0.033,5,0.037,10,0.086,11,0.152,12,0.444,16,0.245,17,0.006,19,0.225,27,0.037,28,0.658,31,2.35,32,1.229,34,1.392,37,2.336,39,2.526,42,2.224,44,1.669,49,2.108,57,1.399,61,2.549,66,1.462,73,2.305,74,1.264,81,1.091,83,1.462,88,0.003,89,0.003,90,0.296,96,0.671,102,1.608,106,1.392,109,1.297,135,1.794,137,0.8,152,0.716,162,1.342,174,0.97,180,0.751,183,0.905,184,1.526,187,1.1,193,1.173,196,1.251,203,1.862,205,0.273,206,0.986,233,1.796,234,1.981,238,2.188,259,1.461,261,1.399,271,2.352,272,0.778,300,1.662,308,1.132,311,3.061,317,1.527,324,1.934,329,2.881,345,3.558,349,2.835,366,2.188,369,2.544,373,2.979,379,0.905,399,4.459,412,3.29,476,2.838,501,0.909,502,3.069,513,1.569,516,2.028,524,1.019,620,4.413,715,0.97,720,1.037,740,3.116,783,1.956,815,1.462,821,2.344,822,2.344,854,3.142,859,4.369,910,3.439,949,2.396,966,3.803,968,4.127,980,2.485,994,2.03,1004,2.669,1025,4.895,1037,3.351,1051,1.913,1117,1.981,1175,1.569,1177,1.744,1178,1.172,1264,3.803,1277,2.485,1344,2.35,1464,2.718,1611,1.744,1760,4.621,1809,1.496,1813,1.608,1827,2.14,1829,2.35,1850,2.654,1851,2.654,1852,2.654,1874,1.913,2147,2.401,2426,4.616,2564,1.696,2567,5.082,2855,4.459,2857,2.526,3029,1.852,3059,2.669,3108,4.063,3140,2.35,3272,2.881,3544,4.283,3764,3.803,3771,5.905,3781,1.913,3789,2.056,3791,4.283,3794,4.283,3802,6.003,3804,4.41,3824,2.881,3825,5.358,3834,3.226,3835,5.999,3836,6.721,3837,8.727,3838,5.999,3839,5.999,3840,5.999,3841,4.938,3842,3.226,3843,3.226,3844,3.226,3845,4.938,3846,3.226,3847,4.938,3848,4.938,3849,3.226,3850,3.226,3851,4.938,3852,3.226,3853,3.226,3854,4.938,3855,3.226,3856,3.226,3857,4.938,3858,3.226,3859,8.202,3860,8.202,3861,5.687,3862,8.202,3863,8.202,3864,3.226,3865,3.226,3866,3.226,3867,4.938,3868,3.226,3869,3.226,3870,3.226,3871,4.938,3872,3.226,3873,3.226,3874,3.226,3875,5.999,3876,4.938,3877,4.938,3878,6.721,3879,4.938,3880,3.226,3881,3.226,3882,3.226,3883,3.226,3884,3.226,3885,3.226,3886,4.938,3887,3.226,3888,3.226,3889,4.938,3890,3.226,3891,5.999,3892,3.226,3893,4.938,3894,3.226,3895,2.881,3896,3.226,3897,3.226,3898,2.881,3899,3.226,3900,3.226,3901,3.226,3902,3.226,3903,3.226,3904,3.226,3905,3.226,3906,3.226,3907,3.226,3908,5.999,3909,3.226,3910,3.226,3911,3.226,3912,3.226,3913,3.226,3914,3.226,3915,3.226,3916,3.226,3917,3.226,3918,2.881,3919,3.226,3920,3.226,3921,2.485]],["title/interfaces/NgxTourBackdropClipEvent.html",[0,0.104,3922,3.713]],["body/interfaces/NgxTourBackdropClipEvent.html",[0,0.16,2,0.734,3,0.053,4,0.048,5,0.053,7,2.028,10,0.173,11,0.199,12,0.856,15,2.854,16,0.293,17,0.006,19,0.248,27,0.105,28,1.32,29,0.757,37,1.429,39,3.312,88,0.004,89,0.004,90,0.428,102,2.331,106,1.825,109,1.26,135,1.699,137,1.049,152,1.294,190,3.189,194,3.003,205,0.395,237,2.934,245,1.277,255,2.638,268,1.915,271,1.383,272,1.128,273,1.61,292,0.734,294,1.163,308,1.107,317,0.87,343,2.274,379,0.857,380,3.406,467,2.773,485,2.638,511,4.489,512,2.19,516,2.153,521,4.097,603,2.869,607,2.028,620,3.228,622,3.406,633,2.527,645,1.832,652,3.242,693,1.128,701,2.684,753,2.62,794,4.132,833,2.871,859,3.406,963,2.773,981,3.406,982,3.102,999,3.242,1004,3.499,1037,2.331,1072,2.274,1206,4.134,1208,2.458,1223,3.102,1224,2.98,1243,4.715,1294,2.527,1308,2.072,1563,4.462,1606,5.149,1691,2.527,1725,3.84,1781,2.168,1873,2.98,1874,3.84,2147,2.274,2247,2.871,2564,2.458,2570,2.871,2743,4.295,2802,3.406,2855,4.295,2857,3.8,2880,3.102,2957,2.98,3021,4.549,3140,3.406,3544,5.108,3861,5.558,3921,3.602,3922,4.987,3923,3.602,3924,6.706,3925,5.327,3926,4.987,3927,3.406,3928,4.715,3929,3.602,3930,5.72,3931,3.602,3932,3.848,3933,6.174,3934,4.987,3935,3.602,3936,3.848,3937,3.848,3938,5.327,3939,3.848,3940,3.848,3941,3.848,3942,3.848,3943,3.848,3944,6.706,3945,5.72,3946,3.848,3947,6.174,3948,6.341,3949,5.838,3950,3.602,3951,3.602,3952,3.406,3953,4.987,3954,3.602,3955,3.602,3956,3.602,3957,4.987,3958,4.987,3959,3.602,3960,3.602,3961,4.987,3962,3.602,3963,4.715]],["title/directives/NgxTourItemDirective.html",[292,0.757,603,2.136]],["body/directives/NgxTourItemDirective.html",[3,0.053,4,0.047,5,0.053,10,0.124,11,0.198,12,0.417,16,0.228,17,0.006,19,0.218,27,0.053,29,1.407,32,1.297,34,1.308,44,1.069,47,1.334,49,1.847,61,1.443,73,1.784,81,2.503,88,0.004,89,0.004,90,0.732,96,0.875,99,3.698,109,1.256,152,0.934,179,1.288,180,0.706,182,2.142,183,1.181,184,1.68,187,1.159,193,1.102,196,1.617,205,0.392,206,1.969,271,2.635,292,1.254,294,1.154,298,1.937,300,1.692,304,2.106,308,1.159,315,2.257,317,1.617,332,2.509,333,3.785,341,2.036,366,3.279,368,2.257,369,2.299,373,3.541,480,2.429,485,3.701,488,5.388,499,4.691,501,1.308,505,3.575,506,2.257,516,2.252,521,3.208,603,2.855,618,5.129,625,4.739,628,4.962,663,3.057,691,2.919,693,1.553,715,1.396,734,4.146,740,3.705,753,3.133,816,3.08,817,4.714,899,4.542,909,4.978,910,4.869,923,5.3,963,2.753,1017,4.387,1052,5.3,1061,2.753,1062,3.82,1093,2.584,1094,2.958,1222,5.3,1427,2.203,1453,7.148,1465,6.087,1605,3.688,1848,3.08,2404,6.607,2802,3.381,2989,3.575,3930,6.862,3949,4.691,3964,8.499,3965,9.516,3966,6.442,3967,6.442,3968,5.753,3969,6.442,3970,6.442,3971,4.642,3972,4.642,3973,6.442,3974,4.642,3975,4.642,3976,4.642,3977,6.442,3978,4.642,3979,4.642,3980,4.642,3981,3.575,3982,4.642,3983,6.442,3984,4.642,3985,4.642,3986,4.642,3987,4.642]],["title/interfaces/NgxTourRouteOptions.html",[0,0.104,3931,3.713]],["body/interfaces/NgxTourRouteOptions.html",[0,0.161,2,0.741,3,0.054,4,0.048,5,0.054,7,2.047,10,0.174,11,0.201,12,0.842,15,2.868,16,0.291,17,0.006,19,0.249,27,0.106,28,1.329,29,0.765,37,1.443,39,3.334,88,0.004,89,0.004,90,0.433,102,2.353,106,1.837,109,1.267,135,1.715,137,1.056,152,1.342,190,3.06,194,3.013,205,0.399,237,2.953,245,1.289,255,2.656,268,1.928,271,1.397,272,1.138,273,1.625,292,0.741,294,1.174,308,1.111,317,0.879,343,2.295,379,0.865,380,3.438,467,2.8,485,2.656,511,4.519,512,2.205,516,2.158,521,4.104,603,2.888,607,2.047,620,3.249,622,3.438,633,2.552,645,1.849,652,3.273,693,1.138,701,2.71,753,1.543,794,3.093,833,2.898,859,3.438,963,2.8,981,3.438,982,3.132,999,3.273,1004,3.523,1037,2.353,1072,2.295,1206,4.154,1208,2.481,1223,5.34,1224,3.008,1243,4.746,1294,2.552,1308,2.092,1563,4.48,1606,5.175,1691,2.552,1725,3.865,1781,2.189,1873,3.008,1874,3.865,2147,2.295,2247,2.898,2564,2.481,2570,2.898,2743,4.324,2802,3.438,2855,4.324,2857,3.819,2880,3.132,2957,3.008,3021,3.523,3140,3.438,3544,5.129,3861,5.58,3921,3.636,3922,3.636,3923,3.636,3924,5.749,3925,6.622,3926,5.02,3927,3.438,3928,4.746,3929,3.636,3930,5.749,3931,5.02,3932,6.622,3933,6.199,3934,5.02,3935,3.636,3936,3.884,3937,3.884,3938,5.362,3939,3.884,3940,3.884,3941,3.884,3942,3.884,3943,3.884,3944,6.726,3945,5.749,3946,3.884,3947,6.199,3948,6.36,3949,5.862,3950,3.636,3951,3.636,3952,3.438,3953,5.02,3954,3.636,3955,3.636,3956,3.636,3957,5.02,3958,5.02,3959,3.636,3960,3.636,3961,5.02,3962,3.636,3963,4.746]],["title/directives/NgxTourShowWhenDirective.html",[292,0.757,605,2.288]],["body/directives/NgxTourShowWhenDirective.html",[3,0.044,4,0.04,5,0.044,10,0.179,11,0.175,16,0.272,17,0.006,19,0.217,27,0.044,32,1.266,38,2.761,42,1.132,48,4.015,49,1.623,55,2.516,61,1.764,73,1.494,82,5.518,83,3.039,88,0.003,89,0.003,90,0.356,96,0.528,174,1.169,179,1.079,183,1.041,184,1.524,187,1.16,191,2.043,196,1.248,205,0.329,206,1.736,238,1.723,272,0.938,292,1.286,294,0.967,298,1.707,300,1.192,304,1.856,308,1.131,317,1.525,338,2.387,341,2.119,366,2.972,368,3.814,369,2.618,373,3.269,392,2.155,412,2.781,424,2.306,485,3.338,488,4.884,499,4.135,501,1.096,505,2.995,506,1.891,509,2.479,513,1.891,605,2.695,706,3.073,708,4.328,715,2.017,753,2.192,815,1.762,910,4.013,949,2.679,951,4.572,973,4.274,994,1.921,998,2.905,1274,4.373,1322,2.696,1464,4.526,1605,2.831,1618,4.449,1756,7.135,1764,4.449,1781,3.419,1805,2.832,1809,1.803,1810,3.767,1812,1.845,1813,1.938,1831,3.767,1935,4.135,2000,4.884,2002,4.884,2003,5.612,2006,5.371,2010,3.85,2029,4.135,2035,4.884,2039,4.135,2041,3.767,2042,2.832,2043,3.767,2044,2.102,2056,2.387,2057,2.478,2065,3.367,2067,2.905,2068,4.373,2071,5.166,2076,5.166,2089,6.042,2108,5.166,2110,5.681,2115,5.166,2116,4.373,2315,2.696,2328,5.518,3952,4.884,3964,8.491,3988,9.507,3989,3.888,3990,8.459,3991,7.844,3992,5.678,3993,5.678,3994,5.678,3995,3.888,3996,3.888,3997,3.888,3998,3.888,3999,3.888,4000,3.888,4001,3.888,4002,3.888,4003,3.888,4004,5.678,4005,7.844,4006,3.888,4007,3.888,4008,3.888,4009,3.888,4010,3.888,4011,3.888,4012,3.888,4013,5.678,4014,3.888]],["title/interfaces/NgxTourStep.html",[0,0.104,3934,3.713]],["body/interfaces/NgxTourStep.html",[0,0.139,2,0.574,3,0.042,4,0.037,5,0.042,7,2.354,10,0.145,11,0.167,12,0.906,15,3.08,16,0.301,17,0.006,19,0.225,27,0.099,28,1.635,29,1.048,37,1.659,39,3.312,88,0.003,89,0.003,90,0.497,102,2.706,106,2.019,109,1.446,135,1.972,137,1.16,152,1.365,190,3.104,194,3.161,205,0.309,237,3.245,245,0.999,255,2.918,268,1.606,271,1.606,272,0.882,273,2.229,292,0.852,294,0.91,308,1.177,317,0.681,343,2.64,379,0.995,380,3.954,467,3.219,485,2.918,511,5.557,512,2.712,516,2.217,521,4.188,603,2.406,607,1.586,620,3.996,622,5.216,633,2.934,645,1.433,652,3.764,693,1.309,701,2.1,753,1.196,794,2.577,833,3.333,859,3.954,963,2.169,981,3.954,982,3.601,999,3.764,1004,3.499,1037,1.824,1072,2.64,1206,4.461,1208,2.853,1223,2.427,1224,2.331,1243,5.216,1294,2.934,1308,2.406,1563,4.743,1606,5.557,1691,2.934,1725,4.247,1781,2.517,1873,3.459,1874,4.247,2147,1.779,2247,3.333,2564,2.853,2570,3.333,2743,4.751,2802,2.664,2855,4.751,2857,3.914,2880,3.601,2957,3.459,3021,3.499,3140,5.216,3544,5.287,3861,5.753,3921,4.181,3922,2.818,3923,2.818,3924,6.391,3925,4.467,3926,4.181,3927,2.664,3928,5.216,3929,2.818,3930,6.391,3931,2.818,3932,3.01,3933,6.823,3934,4.986,3935,4.181,3936,4.467,3937,4.467,3938,5.893,3939,5.893,3940,5.893,3941,5.893,3942,5.893,3943,4.467,3944,7.008,3945,6.173,3946,4.467,3947,6.564,3948,6.756,3949,6.206,3950,4.181,3951,4.181,3952,3.954,3953,5.516,3954,4.181,3955,4.181,3956,4.181,3957,5.516,3958,5.516,3959,4.181,3960,4.181,3961,5.516,3962,4.181,3963,5.216]],["title/directives/NgxTourStepComponent.html",[292,0.757,607,2.09]],["body/directives/NgxTourStepComponent.html",[3,0.039,4,0.035,5,0.039,7,1.496,10,0.186,11,0.214,12,0.561,16,0.214,17,0.006,19,0.205,27,0.039,28,1.708,32,1.153,42,1.819,44,0.794,47,1.624,49,1.642,55,2.302,68,1.108,72,3.04,88,0.003,89,0.003,90,0.823,96,0.468,109,1.331,135,1.253,137,1.208,152,0.906,162,1.434,183,0.952,184,1.729,187,1.194,191,1.812,194,2.229,196,1.163,203,2.622,205,0.291,206,1.588,249,2.391,253,2.656,271,2.658,292,0.815,294,0.858,300,1.751,304,1.698,305,2.891,308,1.03,315,2.526,317,1.389,319,3.587,320,3.478,334,2.253,340,2.045,341,1.975,357,4.551,367,3.378,369,1.654,377,2.198,426,1.864,485,3.772,488,4.551,499,3.783,501,0.972,505,4.001,506,1.677,511,6.466,512,2.833,516,2.191,521,4.31,524,2.357,565,2.114,607,2.253,616,6.663,617,6.663,618,5.436,619,5.581,620,4.272,621,5.581,622,5.433,623,6.663,624,6.212,625,4.125,626,4.822,627,5.357,628,4.001,629,4.001,632,5.581,633,3.378,634,5.581,639,3.871,641,3.038,645,2.448,646,4.813,649,4.001,651,2.808,652,3.601,653,4.639,654,4.276,656,4.274,657,4.639,659,4.639,660,4.551,661,3.992,663,2.966,664,3.378,684,2.891,720,1.108,740,1.599,786,2.391,816,2.288,817,3.982,824,1.98,899,3.837,941,2.288,977,1.812,1011,4.551,1052,2.837,1083,2.391,1101,2.045,1344,2.511,1427,2.966,1576,1.764,1579,2.656,1683,2.837,2586,2.837,2931,2.656,2989,2.656,2995,2.837,3008,1.864,3671,4.274,3765,4.639,3823,5.581,3927,2.511,3928,2.511,3981,2.656,4015,9.751,4016,9.751,4017,3.448,4018,4.639,4019,5.194,4020,5.194,4021,5.194,4022,5.194,4023,5.194,4024,5.194,4025,5.194,4026,5.194,4027,5.194,4028,3.448,4029,3.448,4030,3.448,4031,3.448,4032,3.448,4033,3.448,4034,3.448,4035,3.448,4036,3.448,4037,3.448,4038,3.448,4039,3.448,4040,3.448,4041,3.448,4042,3.448,4043,5.194,4044,3.448,4045,3.448,4046,3.448,4047,3.448,4048,3.448]],["title/interfaces/NgxTourTokenConfiguration.html",[0,0.104,4049,3.966]],["body/interfaces/NgxTourTokenConfiguration.html",[0,0.122,2,0.888,3,0.065,4,0.058,5,0.065,7,3.191,10,0.151,11,0.226,16,0.296,17,0.006,19,0.241,27,0.084,36,2.673,37,2.249,88,0.004,89,0.004,96,0.768,106,2.594,109,1.562,205,0.478,241,6.298,245,1.545,255,2.998,343,3.577,347,3.492,485,3.658,516,2.219,521,3.191,607,2.453,652,5.101,999,5.101,1072,3.577,1243,5.358,1294,3.977,1308,3.261,1563,4.82,1691,3.977,1873,4.688,1874,4.363,2247,4.517,2564,3.867,2570,4.517,2855,5.744,2880,4.881,3544,5.864,3861,6.38,3924,5.667,3944,7.317,3945,5.667,3947,6.669,3948,7.149,3949,6.701,3950,5.667,3951,5.667,3952,5.358,3953,6.669,3954,5.667,3955,5.667,3956,5.667,3957,6.669,3958,6.669,3959,5.667,3960,5.667,3961,6.669,3962,5.667,3963,6.306,4049,6.728,4050,5.052,4051,6.728,4052,5.656,4053,5.052,4054,5.656,4055,5.656]],["title/directives/NgxTreeGridCellDirective.html",[292,0.757,608,2.235]],["body/directives/NgxTreeGridCellDirective.html",[3,0.03,4,0.027,5,0.03,10,0.198,11,0.13,12,0.593,15,1.019,16,0.217,17,0.006,19,0.194,27,0.03,29,0.686,32,0.817,34,1.194,38,2.572,39,3.09,42,1.758,44,0.976,47,1.53,48,1.103,49,1.689,57,1.837,66,1.202,72,1.726,73,1.628,76,0.963,81,0.897,88,0.002,89,0.002,90,0.243,96,0.718,122,2.008,137,1.559,171,1.053,179,0.736,180,0.804,182,1.408,183,0.776,184,1.53,187,1.198,193,1.256,194,1.511,196,1.694,205,0.224,206,1.295,292,0.948,294,0.659,298,1.274,300,1.499,304,1.384,305,2.358,308,0.73,310,1.931,311,2.738,315,4.101,317,1.782,325,1.931,330,4.582,334,1.15,340,1.573,341,0.838,342,2.368,367,2.289,369,2.348,379,1.21,385,2.182,431,1.394,453,4.67,476,1.659,481,1.628,501,0.747,516,2.065,587,3.761,608,1.964,610,2.452,612,2.867,625,3.582,630,4.112,654,2.226,667,5.908,670,4.67,685,2.699,691,1.919,693,0.639,705,2.06,715,2.222,720,0.852,740,2.8,741,5.126,743,3.085,746,4.074,747,3.852,748,3.085,750,4.652,753,1.729,754,4.188,757,1.931,761,1.931,762,1.931,794,2.51,831,4.007,899,3.247,910,1.357,939,3.263,945,1.628,955,4.832,956,6.034,958,3.263,963,1.573,994,1.433,998,2.706,1004,3.264,1028,3.783,1029,3.783,1030,3.783,1031,3.783,1037,3.011,1041,3.783,1043,3.783,1044,3.783,1049,3.783,1086,3.783,1110,2.042,1142,3.085,1392,3.085,1427,1.259,1432,3.485,1463,7.047,1466,1.839,1473,5.86,1563,1.476,1798,3.085,1874,4.382,1885,2.042,2147,2.572,2158,4.724,2177,2.368,2323,1.394,2426,3.37,2604,2.182,2854,2.167,2857,2.706,2956,1.931,2957,1.69,2958,1.839,2959,2.182,2960,2.042,3373,2.182,3425,2.368,3705,3.485,4056,8.599,4057,8.599,4058,2.652,4059,3.783,4060,3.783,4061,7.912,4062,7.039,4063,6.04,4064,6.04,4065,4.236,4066,6.04,4067,6.04,4068,6.04,4069,4.236,4070,6.04,4071,6.04,4072,6.04,4073,6.04,4074,6.04,4075,4.236,4076,4.236,4077,4.236,4078,4.236,4079,4.236,4080,4.236,4081,4.236,4082,4.236,4083,4.236,4084,4.236,4085,4.236,4086,4.236,4087,4.236,4088,4.236,4089,4.236,4090,4.236,4091,4.236,4092,4.236,4093,4.236,4094,4.236,4095,2.652,4096,4.236,4097,7.388,4098,2.652,4099,4.236,4100,4.236,4101,4.236,4102,4.236,4103,4.236,4104,5.394,4105,5.394,4106,2.652,4107,4.236,4108,4.236,4109,4.236,4110,2.652,4111,2.652,4112,2.652,4113,2.652,4114,4.236,4115,2.652,4116,2.652,4117,2.652,4118,2.368,4119,2.652,4120,2.652,4121,2.652,4122,2.652,4123,2.652,4124,2.652,4125,2.652,4126,2.652,4127,2.652,4128,2.652,4129,6.602,4130,4.236,4131,4.236,4132,2.652,4133,4.236,4134,2.652,4135,2.652,4136,2.652,4137,2.652,4138,2.652,4139,2.652,4140,2.652,4141,2.652,4142,2.652,4143,2.652,4144,2.652,4145,2.652,4146,2.652]],["title/directives/NgxTreeGridDirective.html",[292,0.757,610,2.235]],["body/directives/NgxTreeGridDirective.html",[3,0.044,4,0.039,5,0.044,10,0.24,11,0.173,12,0.701,16,0.266,17,0.006,19,0.196,27,0.044,32,1.029,34,2.2,38,2.736,44,1.798,47,1.518,48,1.597,49,1.465,57,2.441,66,1.741,72,2.293,88,0.003,89,0.003,90,0.352,96,1.108,137,0.622,179,1.066,180,1.187,182,1.871,183,1.032,184,1.704,187,1.158,190,3.09,193,1.854,196,1.742,205,0.325,206,1.72,237,2.55,292,1.151,294,0.955,298,1.692,300,1.45,304,1.839,308,0.919,315,1.868,317,1.569,330,2.609,341,1.214,369,1.762,379,1.495,426,2.076,432,3.963,481,2.559,535,3.578,608,3.4,610,2.609,612,4.361,628,4.335,654,2.958,667,5.125,685,3.586,693,2.084,700,2.494,706,1.505,715,2.003,753,2.177,821,1.823,822,1.823,939,4.335,955,3.132,956,4.098,958,4.335,966,4.335,970,4.63,977,3.854,998,2.879,999,3.902,1006,3.431,1432,4.63,1463,7.808,1473,6.054,2586,5.48,2600,6.549,2854,2.879,3544,5.507,3672,6.934,3783,5.026,3861,5.843,3981,2.959,4056,8.475,4057,8.475,4059,8.358,4060,5.026,4118,3.431,4147,3.841,4148,5.627,4149,7.527,4150,7.806,4151,7.333,4152,7.333,4153,5.627,4154,5.627,4155,5.627,4156,5.627,4157,5.627,4158,5.627,4159,5.627,4160,6.66,4161,5.627,4162,3.841,4163,3.841,4164,5.627,4165,3.841,4166,5.627,4167,3.841,4168,3.841,4169,5.627,4170,3.841,4171,7.333,4172,5.627,4173,3.841,4174,5.627,4175,3.841,4176,5.627,4177,3.841,4178,3.841,4179,3.841,4180,3.841,4181,3.841,4182,3.841,4183,5.627,4184,3.841,4185,3.841,4186,3.841,4187,3.841,4188,3.841,4189,3.841,4190,3.841]],["title/classes/NgxValidators.html",[90,0.442,4191,4.305]],["body/classes/NgxValidators.html",[1,5.696,3,0.071,4,0.035,5,0.039,7,3.002,8,3.052,10,0.091,12,0.847,13,3.052,14,7.876,15,2.66,16,0.257,17,0.006,18,6.081,19,0.239,20,7.171,21,2.026,27,0.039,28,1.052,29,0.553,30,7.903,31,3.757,32,1.32,33,7.779,34,2.582,35,3.613,36,1.874,37,1.577,38,2.508,39,2.639,40,3.757,41,2.391,43,3.052,44,1.868,45,7.903,46,4.607,47,0.707,48,2.145,67,4.244,68,3.031,70,6.01,72,3.483,73,3.209,76,2.515,83,2.337,88,0.003,89,0.003,90,0.569,92,2.177,96,1.102,106,1.454,152,1.35,167,4.244,180,1.188,183,0.946,187,0.959,190,2.604,191,2.711,192,6.671,193,1.983,196,1.755,308,1.079,317,0.636,379,1.718,382,6.135,383,3.576,408,1.661,432,3.742,539,4.199,633,2.788,693,1.669,799,3.167,1025,5.041,1117,3.167,1215,2.369,1452,6.01,1471,6.978,1563,3.853,1873,3.287,1881,5.113,2048,5.183,2247,3.167,2567,3.974,2723,4.244,3023,1.961,3238,4.607,3419,4.607,3918,4.607,4018,3.052,4191,4.607,4192,3.417,4193,5.158,4194,6.214,4195,6.214,4196,6.214,4197,5.158,4198,6.214,4199,5.158,4200,3.417,4201,5.158,4202,5.158,4203,5.158,4204,5.158,4205,3.417,4206,3.417,4207,8.848,4208,3.417,4209,7.43,4210,3.417,4211,5.158,4212,5.158,4213,5.158,4214,5.158,4215,6.214,4216,6.922,4217,8.35,4218,8.35,4219,8.35,4220,6.922,4221,6.214,4222,3.417,4223,6.922,4224,5.158,4225,5.158,4226,3.417,4227,5.158,4228,3.417,4229,5.158,4230,5.158,4231,7.43,4232,7.43,4233,6.922,4234,5.158,4235,3.417,4236,7.43,4237,7.43,4238,3.417,4239,5.55,4240,5.158,4241,5.158,4242,5.158,4243,3.417,4244,3.417,4245,6.214,4246,3.417,4247,3.417,4248,3.417,4249,3.417,4250,3.052,4251,3.417,4252,3.417,4253,3.417,4254,3.417,4255,3.417,4256,3.417,4257,3.417,4258,3.417,4259,3.417,4260,3.417,4261,3.417,4262,3.417,4263,3.417,4264,3.417,4265,3.417]],["title/injectables/NgxWindowService.html",[259,1.426,1406,2.683]],["body/injectables/NgxWindowService.html",[3,0.032,4,0.028,5,0.032,10,0.075,11,0.168,12,0.396,15,2.764,16,0.267,17,0.006,19,0.251,27,0.094,28,0.899,29,1.006,32,1.298,34,1.242,36,2.257,44,1.559,49,1.658,54,1.465,57,1.209,61,2.236,66,3.066,67,2.294,73,1.694,75,1.849,88,0.003,89,0.003,90,0.755,96,0.742,106,1.242,122,2.066,136,2.184,137,0.885,144,1.426,162,2.273,177,1.653,180,0.67,183,1.139,184,1.684,187,1.141,190,2.371,193,1.475,196,1.497,200,4.769,205,0.236,209,2.614,234,2.706,237,2.815,255,1.136,259,1.304,261,1.209,268,2.733,272,0.672,300,1.279,308,1.18,311,2.217,317,1.497,328,2.53,350,2.932,351,1.552,352,2.294,369,2.429,379,1.54,412,2.841,501,0.786,502,3.855,620,4.106,691,1.263,693,1.498,715,2.526,771,2.922,787,1.465,949,2.184,953,2.809,968,4.417,994,0.943,1051,2.614,1082,1.507,1177,1.507,1178,1.013,1206,4.004,1207,2.382,1221,1.997,1222,3.627,1246,4.227,1295,3.627,1372,4.769,1381,3.566,1406,5.172,1407,4.227,1410,3.818,1411,2.147,1427,2.092,1502,6.282,1591,2.49,1593,5.112,1609,7.552,1611,2.382,1612,3.627,1613,3.937,1616,1.849,1665,3.937,1777,1.712,1808,1.849,1809,1.292,1996,3.056,2133,3.627,2403,3.395,2407,4.882,2458,2.294,2564,1.465,2786,6.044,2813,4.882,3273,3.627,3338,4.498,3544,3.483,3555,7.183,3556,7.183,3681,6.044,3895,8.3,3898,5.549,3948,5.689,4051,3.627,4239,2.49,4266,2.788,4267,5.549,4268,4.408,4269,8.236,4270,5.466,4271,5.466,4272,7.194,4273,5.466,4274,8.545,4275,5.466,4276,6.767,4277,7.194,4278,7.194,4279,6.767,4280,6.212,4281,4.408,4282,2.788,4283,2.788,4284,2.788,4285,6.767,4286,2.788,4287,2.788,4288,6.767,4289,4.408,4290,2.788,4291,2.788,4292,7.535,4293,4.408,4294,2.788,4295,4.408,4296,2.788,4297,4.408,4298,2.788,4299,4.408,4300,2.788,4301,4.408,4302,2.788,4303,4.408,4304,2.788,4305,4.408,4306,2.788,4307,6.767,4308,4.408,4309,2.788,4310,4.408,4311,2.788,4312,2.49,4313,2.49,4314,2.788,4315,2.788,4316,2.788,4317,2.788,4318,2.788,4319,2.788,4320,2.788,4321,5.466,4322,2.788,4323,6.212,4324,2.788,4325,5.466,4326,2.788,4327,2.788,4328,2.788,4329,5.466,4330,2.788,4331,4.408,4332,4.408,4333,2.788,4334,4.408,4335,5.466,4336,4.408,4337,2.788,4338,2.788,4339,2.788,4340,2.788,4341,4.408,4342,2.788,4343,2.788,4344,2.788,4345,2.788,4346,2.788,4347,2.788,4348,2.788,4349,2.788,4350,4.408,4351,2.788,4352,2.788]],["title/interfaces/SpecStoreAssets.html",[0,0.104,4353,4.305]],["body/interfaces/SpecStoreAssets.html",[0,0.141,2,1.269,3,0.075,4,0.067,5,0.075,10,0.176,11,0.249,16,0.289,17,0.006,19,0.238,26,3.273,27,0.1,42,2.353,66,2.975,81,2.221,88,0.005,89,0.005,127,5.696,128,2.847,130,3.654,131,3.45,148,4.942,152,1.172,171,2.011,271,1.942,273,2.26,283,4.781,286,5.423,1152,4.552,1369,7.725,3606,6.659,3607,6.652,3608,5.812,4353,7.221,4354,4.781,4355,8.386,4356,8.386,4357,8.386,4358,7.523,4359,6.652,4360,5.402,4361,6.565,4362,6.565,4363,6.565]],["title/injectables/SpecStoreService.html",[259,1.426,4364,4.305]],["body/injectables/SpecStoreService.html",[3,0.043,4,0.038,5,0.043,10,0.101,11,0.171,12,0.695,16,0.297,17,0.006,19,0.253,26,1.878,27,0.043,28,0.768,32,1.428,36,2.813,44,1.278,68,1.783,81,1.274,88,0.003,89,0.003,90,0.345,96,0.986,98,3.926,113,2.313,114,1.344,118,2.234,124,1.979,128,1.633,131,2.915,135,2.392,137,1.254,138,3.29,147,2.499,151,4.308,171,1.379,180,1.178,183,1.017,184,1.757,187,1.198,193,1.989,196,1.66,205,0.318,245,1.028,259,1.641,261,1.633,263,5.977,264,5.977,268,2.931,272,0.908,273,1.297,274,3.954,298,2.584,300,1.779,308,1.276,317,1.508,367,2.998,369,2.049,392,2.334,501,1.062,507,1.788,630,4.508,804,1.746,1129,1.979,1130,5.899,1171,4.954,1323,2.901,1369,5.418,2315,2.611,3083,4.954,3250,6.082,3451,4.273,3618,4.564,3619,4.564,3620,4.564,3621,4.564,3622,4.564,3625,3.099,3627,3.099,3629,3.099,3631,3.099,3632,3.099,3634,2.611,3636,3.099,4354,6.968,4355,5.881,4356,5.881,4357,5.881,4364,4.954,4365,3.766,4366,6.584,4367,6.584,4368,6.584,4369,6.584,4370,6.584,4371,6.584,4372,7.264,4373,7.264,4374,7.264,4375,5.547,4376,3.766,4377,3.766,4378,3.766,4379,3.766,4380,3.766,4381,5.547,4382,3.766,4383,3.364,4384,3.364,4385,3.364,4386,3.364,4387,8.1,4388,8.594,4389,3.766,4390,5.547,4391,3.766,4392,7.264,4393,3.766,4394,7.264,4395,3.766,4396,5.547,4397,3.766,4398,3.766,4399,5.547,4400,3.766,4401,8.1,4402,3.766,4403,5.547,4404,3.766,4405,3.766,4406,3.766,4407,3.364,4408,3.364,4409,5.418,4410,3.364,4411,5.547,4412,4.564,4413,3.766,4414,3.766,4415,3.766,4416,3.766,4417,3.766,4418,3.766,4419,3.766]],["title/interfaces/StoreAssetsOptions.html",[0,0.104,3605,3.966]],["body/interfaces/StoreAssetsOptions.html",[0,0.161,2,0.915,3,0.066,4,0.059,5,0.066,10,0.156,11,0.231,12,0.786,16,0.3,17,0.006,19,0.267,27,0.1,35,4.033,38,2.833,49,1.825,51,3.713,76,2.725,88,0.004,89,0.004,96,0.791,101,4.605,102,2.905,106,2.114,122,1.937,123,4.605,124,3.062,127,4.761,128,3.597,130,4.174,131,4.359,145,5.462,146,4.243,147,5.502,148,5.013,153,6.745,154,3.865,155,5.462,156,5.377,191,3.941,194,2.079,238,2.582,274,4.181,285,4.243,286,4.448,379,1.375,506,3.647,509,2.37,783,1.696,1345,7.205,1801,3.713,1808,4.975,1996,5.2,2633,4.794,3259,4.975,3476,5.75,3549,6.171,3598,4.488,3599,4.794,3600,5.204,3601,6.171,3602,5.776,3603,6.698,3604,7.821,3605,6.171,3606,6.377,3607,7.205,3608,3.865,3609,6.171,3610,8.093,3611,5.204,3612,5.204,3613,5.204,3614,5.204,3615,5.204,3616,5.204]],["title/injectables/StoreEffects.html",[259,1.426,4420,4.305]],["body/injectables/StoreEffects.html",[3,0.071,4,0.064,5,0.071,10,0.168,11,0.242,16,0.242,17,0.006,19,0.273,27,0.071,32,1.39,44,2.072,88,0.005,89,0.005,90,0.574,128,4.16,137,1.457,147,4.159,184,1.629,187,1.105,205,0.53,259,2.324,260,7.777,261,2.719,263,7.06,264,7.06,273,2.159,274,2.779,300,1.68,308,1.242,369,2.501,501,1.767,504,5.6,4410,7.017,4420,7.017,4421,6.269,4422,7.857,4423,6.269,4424,7.857,4425,6.269,4426,9.264,4427,8.995,4428,8.581,4429,7.857,4430,6.269,4431,7.857,4432,7.857,4433,6.269,4434,5.6,4435,6.269]],["title/interfaces/StoreState.html",[0,0.104,3634,3.342]],["body/interfaces/StoreState.html",[0,0.135,2,1.234,3,0.072,4,0.064,5,0.072,10,0.168,11,0.242,16,0.242,17,0.006,19,0.273,26,3.13,27,0.09,28,1.89,29,1.017,42,1.827,44,1.978,61,2.444,68,2.527,88,0.005,89,0.005,90,0.575,127,5.166,128,2.723,130,3.495,131,3.3,148,4.25,152,0.91,156,3.855,171,2.135,205,0.531,245,1.714,259,2.326,268,2.662,272,1.514,286,5.338,753,2.57,949,2.508,1323,6.614,3250,5.452,3451,4.836,3606,5.727,3608,5.696,3634,5.452,4354,4.572,4358,6.47,4359,6.47,4360,5.166,4409,6.47,4412,5.166,4436,5.608,4437,8.278,4438,7.669,4439,5.608,4440,5.166,4441,5.608,4442,5.608,4443,5.608,4444,7.024,4445,5.608,4446,5.608,4447,7.024,4448,7.024,4449,5.608,4450,5.608,4451,5.608,4452,5.608]],["title/injectables/StoreStateService.html",[259,1.426,4440,3.966]],["body/injectables/StoreStateService.html",[0,0.108,2,0.785,3,0.057,4,0.051,5,0.057,10,0.134,11,0.209,12,0.798,16,0.292,17,0.006,19,0.254,26,2.494,27,0.077,28,1.569,29,1.246,32,0.773,36,3.131,42,1.456,44,1.772,61,2.107,68,2.65,88,0.004,89,0.004,90,0.458,96,1.12,98,4.457,113,3.071,114,1.785,127,3.892,128,2.169,130,2.784,131,3.563,138,4.021,148,3.665,151,4.89,152,1.115,156,3.071,171,1.913,180,1.351,183,1.243,184,1.594,187,1.164,193,2.196,196,1.692,205,0.423,245,1.366,259,2.006,261,2.169,268,2.828,272,1.206,274,4.097,286,4.021,298,2.78,300,1.205,308,0.691,367,3.665,369,1.794,392,2.65,630,4.946,753,2.216,804,2.319,949,3.073,1129,2.629,1323,5.924,3250,6.498,3451,3.853,3606,4.938,3608,4.498,3618,5.579,3619,5.579,3620,5.579,3621,5.579,3622,5.579,3625,4.115,3627,4.115,3629,4.115,3631,4.115,3632,4.115,3634,4.701,3636,4.115,4354,6.277,4358,5.579,4359,5.579,4360,4.115,4383,4.467,4384,4.467,4385,4.467,4386,4.467,4407,4.467,4408,4.467,4409,5.579,4412,4.115,4436,4.467,4437,6.056,4438,6.87,4439,4.467,4440,5.579,4441,4.467,4442,7.365,4443,4.467,4444,6.056,4445,6.056,4446,4.467,4447,6.056,4448,6.056,4449,4.467,4450,6.056,4451,4.467,4452,4.467,4453,6.78,4454,6.78,4455,5.002,4456,5.002,4457,5.002,4458,5.002]],["title/interfaces/TableCellTemplate.html",[0,0.104,4459,4.305]],["body/interfaces/TableCellTemplate.html",[0,0.035,2,0.254,3,0.018,4,0.016,5,0.018,7,2.173,10,0.202,11,0.086,12,0.749,14,2.309,15,2.264,16,0.136,17,0.006,19,0.218,20,2.161,21,0.96,26,0.807,27,0.018,28,1.471,29,0.262,32,1.19,34,1.758,41,0.751,42,1.901,44,1.703,47,0.917,49,2.047,50,2.28,54,1.475,55,1.244,57,2.704,61,2.348,64,2.543,66,1.272,70,4.326,72,0.66,73,1.078,74,0.634,76,1.61,81,2.792,83,2.488,88,0.002,89,0.002,90,0.503,97,0.768,98,2.007,102,2.209,105,1.664,106,0.791,107,1.179,109,0.752,114,1.959,122,1.473,128,2.381,134,3.618,135,2.686,136,2.354,137,1.198,152,0.854,162,1.167,173,1.032,174,1.117,176,0.828,183,0.297,184,1.654,187,0.345,190,1.302,191,0.851,194,1.001,196,0.522,203,1.058,205,0.137,206,0.495,209,0.96,215,1.332,233,0.901,236,1.123,237,2.826,244,2.506,250,0.994,253,1.247,255,2.541,256,1.179,257,1.446,272,0.39,294,0.403,298,0.487,300,1.544,301,1.946,306,3.077,308,1.182,311,2.33,317,1.306,319,1.611,320,1.562,328,0.929,332,0.875,333,0.828,334,0.702,339,3.056,341,2.512,343,1.364,345,0.96,346,2.044,347,0.768,349,2.543,350,0.66,363,3.056,366,1.244,368,1.364,369,1.65,373,0.718,379,0.919,380,2.044,382,5.126,384,1.247,392,2.254,395,1.179,408,1.806,412,1.4,424,0.96,426,0.875,431,1.475,432,2.007,437,6.444,449,1.123,471,1.446,476,0.634,501,1.047,509,2.547,512,0.548,513,2.436,524,1.735,535,3.269,548,1.272,564,0.718,626,1.123,633,0.875,645,1.455,656,1.332,660,5.109,661,3.382,667,3.873,668,3.998,669,3.998,670,5.274,671,3.227,672,3.077,673,3.998,674,3.806,675,3.193,676,4.756,677,1.179,682,1.179,684,0.901,686,1.946,693,1.888,697,3.193,700,0.718,705,0.787,706,0.634,708,3.473,711,3.227,715,1.117,718,1.179,719,2.044,720,0.52,753,2.135,754,1.946,755,4.168,772,1.032,783,1.901,796,1.247,815,0.734,821,2.797,822,2.797,887,1.332,909,0.96,926,1.446,941,1.074,942,1.247,945,5.213,949,0.647,951,2.007,955,1.562,963,1.664,972,1.247,973,3.973,994,0.548,998,2.267,1004,1.517,1011,2.044,1012,0.901,1013,2.506,1017,0.96,1025,1.179,1051,0.96,1061,1.664,1062,0.96,1068,2.506,1072,2.154,1082,0.875,1084,1.179,1092,1.332,1093,2.067,1094,1.788,1098,1.446,1101,1.664,1102,1.032,1103,1.517,1105,3.317,1109,2.939,1111,2.309,1120,1.446,1132,1.332,1140,1.332,1142,1.179,1175,0.787,1206,0.901,1208,1.475,1215,1.123,1227,1.123,1270,1.475,1284,2.309,1294,1.517,1295,1.332,1392,1.179,1428,3.413,1429,3.859,1464,0.734,1469,6.444,1473,5.582,1525,1.332,1559,1.332,1594,1.179,1605,1.852,1611,0.875,1614,1.446,1618,3.642,1626,1.446,1691,2.007,1706,1.247,1781,1.301,1808,1.074,1809,1.722,1813,0.807,1829,2.705,1847,1.446,1848,1.074,1874,2.203,1885,1.247,1887,0.96,1892,1.399,1962,1.179,1987,3.642,2010,0.929,2038,1.332,2056,2.28,2067,0.828,2151,2.161,2154,4.137,2247,0.994,2315,1.123,2317,1.123,2323,1.475,2371,2.705,2533,1.247,2535,5.374,2612,4.517,2636,2.506,2637,1.446,2730,1.446,2748,1.475,2753,1.332,2800,1.446,2867,2.506,2956,1.179,2957,1.032,2958,1.123,2959,1.332,2960,1.247,2961,1.446,2962,1.446,2981,1.446,3104,3.957,3216,1.446,3360,2.506,3373,3.056,3424,1.332,3453,3.056,3666,5.772,3670,2.506,3671,1.332,3672,6.79,3674,1.446,3675,1.446,3677,1.446,3678,1.446,3679,1.446,3680,1.446,3682,1.446,3683,1.247,3684,1.332,3687,5.263,3688,4.475,3690,2.506,3697,2.309,3709,2.309,3729,2.309,3740,1.332,3741,1.446,3749,2.309,3935,3.413,3968,1.446,3981,1.247,4149,2.506,4267,1.446,4459,4.903,4460,1.619,4461,1.619,4462,2.806,4463,1.619,4464,2.806,4465,2.806,4466,2.806,4467,2.806,4468,1.619,4469,1.619,4470,1.619,4471,2.806,4472,1.619,4473,1.619,4474,1.619,4475,1.619,4476,1.619,4477,1.619,4478,1.619,4479,2.806,4480,2.806,4481,1.619,4482,1.619,4483,1.619,4484,1.619,4485,2.806,4486,1.619,4487,1.619,4488,3.714,4489,1.619,4490,1.619,4491,1.619,4492,2.806,4493,1.619,4494,1.619,4495,1.619,4496,1.619,4497,2.806,4498,3.714,4499,1.619,4500,1.619,4501,1.619,4502,1.619,4503,1.619,4504,1.619,4505,1.619,4506,1.619,4507,1.619,4508,1.619,4509,1.619,4510,1.619,4511,1.619,4512,1.619,4513,1.619,4514,1.619,4515,1.619,4516,1.619,4517,1.619,4518,1.619,4519,1.619,4520,1.619,4521,1.619,4522,1.619,4523,1.619,4524,1.619,4525,1.619,4526,6.235,4527,1.619,4528,1.619,4529,6.235,4530,2.806,4531,1.619,4532,1.619,4533,1.619,4534,1.619,4535,1.619,4536,1.619,4537,1.619,4538,1.619,4539,1.619,4540,1.619,4541,2.806,4542,1.619,4543,1.619,4544,1.619,4545,1.619,4546,1.619,4547,3.714,4548,1.619,4549,1.619,4550,1.619,4551,4.431,4552,3.714,4553,1.619,4554,1.619,4555,4.431,4556,1.619,4557,2.806,4558,1.619,4559,1.619,4560,1.619,4561,2.806,4562,1.619,4563,2.806,4564,2.806,4565,2.806,4566,1.619,4567,1.619,4568,5.011,4569,1.619,4570,1.619,4571,4.431,4572,1.619,4573,1.619,4574,1.619,4575,1.619,4576,1.619,4577,1.619,4578,1.619,4579,1.619,4580,1.619,4581,2.806,4582,1.619,4583,1.619,4584,2.806,4585,1.619,4586,1.619,4587,1.619,4588,1.619,4589,1.619,4590,1.619,4591,2.806,4592,1.619,4593,1.619,4594,3.714,4595,2.806,4596,1.619,4597,1.619,4598,1.619,4599,1.619,4600,1.619,4601,1.619,4602,1.619,4603,1.619,4604,1.619,4605,1.619,4606,1.619,4607,1.619,4608,2.806,4609,1.619,4610,1.619,4611,1.619,4612,1.619,4613,1.619,4614,2.806,4615,1.619,4616,2.806,4617,1.619,4618,1.619,4619,1.619,4620,1.619,4621,1.619,4622,1.619,4623,1.619,4624,1.619,4625,1.619,4626,1.619,4627,1.619,4628,2.806,4629,2.806,4630,2.806,4631,2.806,4632,1.619,4633,1.619,4634,1.619,4635,1.619,4636,1.619,4637,1.619,4638,1.619,4639,1.619,4640,1.619,4641,1.619,4642,1.619,4643,1.619,4644,1.619,4645,1.619,4646,2.806,4647,1.619,4648,1.619,4649,1.619,4650,1.619,4651,1.619,4652,1.619,4653,1.619,4654,1.619,4655,1.619,4656,1.619,4657,1.619,4658,1.619,4659,1.619,4660,1.619,4661,1.619,4662,1.619,4663,1.619,4664,1.619,4665,1.619,4666,1.619,4667,1.619,4668,1.619,4669,1.619,4670,1.619,4671,1.619,4672,1.619,4673,1.619,4674,1.619,4675,1.619,4676,1.619,4677,1.619,4678,1.619,4679,1.619,4680,1.619,4681,1.619,4682,1.619,4683,1.619,4684,1.619,4685,1.619]],["title/components/TestDisplayContentComponent.html",[109,0.818,550,2.344]],["body/components/TestDisplayContentComponent.html",[3,0.053,4,0.047,5,0.053,10,0.124,11,0.198,17,0.006,19,0.247,27,0.099,28,1.817,47,1.655,68,2.568,88,0.004,89,0.004,90,0.796,109,1.542,114,2.639,171,1.987,179,1.288,180,1.509,182,2.657,187,0.791,205,0.392,245,1.268,292,0.729,293,2.203,294,1.154,298,3.1,300,1.492,304,2.106,341,2.525,361,2.203,478,2.257,479,2.523,480,1.75,481,1.784,484,3.211,485,2.625,507,4.55,509,2.815,512,3.014,514,2.257,515,3.057,516,1.553,517,3.984,518,2.314,519,2.314,520,2.257,521,2.013,522,2.314,523,2.257,524,3.007,525,2.314,526,2.257,527,2.314,528,3.211,529,2.314,530,3.132,531,3.211,532,2.257,533,2.057,534,2.257,535,3.393,536,2.314,537,3.984,538,2.257,539,2.203,540,2.257,541,2.152,542,2.314,543,2.203,544,2.203,545,2.314,546,2.257,547,2.257,548,2.104,549,2.314,550,3.885,551,2.314,552,3.132,553,3.211,554,3.132,555,3.132,556,2.314,557,3.132,558,2.314,559,3.132,560,3.057,561,2.314,562,2.314,563,2.314,564,2.057,565,1.57,566,2.152,567,2.152,568,2.314,569,2.203,570,2.314,571,2.314,572,2.314,573,2.152,574,2.203,575,2.314,576,3.85,577,3.892,578,2.314,579,2.314,580,2.104,581,2.203,582,2.314,583,2.203,584,2.314,585,2.203,586,2.314,587,2.152,588,2.152,589,2.203,590,2.314,591,2.203,592,2.314,593,1.75,594,2.203,595,2.152,596,2.203,597,2.152,598,2.152,599,2.152,600,1.892,601,2.152,602,2.314,603,2.057,604,2.314,605,2.203,606,2.314,607,2.013,608,2.152,609,2.314,610,2.152,611,2.314,612,2.203,613,2.314,614,2.314,641,2.257,720,1.492,1012,4.118,1082,2.509,1240,5.152,1725,2.753,1747,3.82,1752,2.85,1754,4.908,4686,5.129,4687,3.219,4688,6.442,4689,4.466,4690,3.219,4691,3.219]],["title/components/TestErrorComponent.html",[109,0.818,552,2.344]],["body/components/TestErrorComponent.html",[3,0.052,4,0.046,5,0.052,10,0.122,11,0.196,12,0.571,17,0.006,19,0.245,27,0.098,28,1.962,47,1.726,68,2.848,88,0.004,89,0.004,90,0.791,109,1.535,114,2.613,136,2.54,164,4.219,171,2.073,179,1.264,180,1.506,182,2.772,187,0.781,205,0.385,245,1.244,255,2.591,292,0.715,293,2.163,294,1.133,298,3.098,300,1.482,304,2.078,341,2.729,361,2.163,478,2.216,479,3.105,480,1.718,481,1.751,484,3.17,485,2.591,507,4.536,509,2.801,512,2.478,514,2.216,515,3.018,516,1.533,517,3.952,518,2.272,519,2.272,520,2.216,521,1.976,522,2.272,523,2.216,524,2.997,525,2.272,526,2.216,527,2.272,528,3.17,529,2.272,530,3.092,531,3.17,532,2.216,533,2.019,534,2.216,535,3.366,536,2.272,537,3.952,538,2.216,539,2.163,540,2.216,541,2.112,542,2.272,543,2.163,544,2.163,545,2.272,546,2.216,547,2.216,548,2.065,549,2.272,550,3.092,551,2.272,552,3.854,553,3.17,554,3.092,555,3.092,556,2.272,557,3.092,558,2.272,559,3.092,560,3.018,561,2.272,562,2.272,563,2.272,564,2.019,565,1.542,566,2.112,567,2.112,568,2.272,569,2.163,570,2.272,571,2.272,572,2.272,573,2.112,574,2.163,575,2.272,576,4.071,577,3.675,578,2.272,579,2.272,580,2.065,581,2.163,582,2.272,583,2.163,584,2.272,585,2.163,586,2.272,587,2.112,588,2.112,589,2.163,590,2.272,591,2.163,592,2.272,593,1.718,594,2.163,595,2.112,596,2.163,597,2.112,598,2.112,599,2.112,600,1.857,601,2.112,602,2.272,603,2.019,604,2.272,605,2.163,606,2.272,607,1.976,608,2.112,609,2.272,610,2.112,611,2.272,612,2.163,613,2.272,614,2.272,630,3.539,641,2.216,720,1.464,1012,3.539,1082,2.463,1240,3.771,1664,3.65,1725,2.702,1747,3.771,1752,2.798,1754,3.023,4686,3.159,4687,3.159,4689,4.409,4690,3.159,4691,3.159,4692,4.898]],["title/components/TestErrorDataComponent.html",[109,0.818,554,2.344]],["body/components/TestErrorDataComponent.html",[3,0.052,4,0.046,5,0.052,10,0.122,11,0.195,12,0.57,17,0.006,19,0.245,27,0.098,28,1.991,47,1.725,68,2.846,88,0.004,89,0.004,90,0.79,109,1.533,114,2.609,136,2.535,164,4.21,171,2.071,179,1.26,180,1.506,182,2.769,187,0.779,205,0.384,245,1.24,255,2.586,292,0.713,293,2.156,294,1.13,298,3.098,300,1.481,304,2.074,341,2.726,361,2.156,478,2.209,479,3.101,480,1.713,481,1.745,484,3.163,485,2.586,507,4.534,509,2.798,512,2.474,514,2.209,515,3.012,516,1.53,517,3.946,518,2.265,519,2.265,520,2.209,521,1.97,522,2.265,523,2.209,524,2.996,525,2.265,526,2.209,527,2.265,528,3.163,529,2.265,530,3.085,531,3.163,532,2.209,533,2.013,534,2.209,535,3.361,536,2.265,537,3.946,538,2.209,539,2.156,540,2.209,541,2.106,542,2.265,543,2.156,544,2.156,545,2.265,546,2.209,547,2.209,548,2.058,549,2.265,550,3.085,551,2.265,552,3.085,553,3.163,554,3.849,555,3.085,556,2.265,557,3.085,558,2.265,559,3.085,560,3.012,561,2.265,562,2.265,563,2.265,564,2.013,565,1.537,566,2.106,567,2.106,568,2.265,569,2.156,570,2.265,571,2.265,572,2.265,573,2.106,574,2.156,575,2.265,576,4.068,577,3.67,578,2.265,579,2.265,580,2.058,581,2.156,582,2.265,583,2.156,584,2.265,585,2.156,586,2.265,587,2.106,588,2.106,589,2.156,590,2.265,591,2.156,592,2.265,593,1.713,594,2.156,595,2.106,596,2.156,597,2.106,598,2.106,599,2.106,600,1.851,601,2.106,602,2.265,603,2.013,604,2.265,605,2.156,606,2.265,607,1.97,608,2.106,609,2.265,610,2.106,611,2.265,612,2.156,613,2.265,614,2.265,630,3.532,641,2.209,720,1.46,1012,3.532,1082,2.455,1240,3.763,1664,3.642,1725,2.694,1747,3.763,1752,2.789,1754,3.014,4686,3.15,4687,3.15,4689,4.4,4690,3.15,4691,3.15,4692,4.887]],["title/components/TestLoadingComponent.html",[109,0.818,555,2.344]],["body/components/TestLoadingComponent.html",[3,0.052,4,0.046,5,0.052,10,0.122,11,0.196,12,0.571,17,0.006,19,0.245,27,0.098,28,1.962,47,1.726,68,2.547,88,0.004,89,0.004,90,0.791,109,1.535,114,3.081,136,2.54,164,4.219,171,2.073,179,1.264,180,1.506,182,2.772,187,0.781,205,0.385,245,1.244,255,2.591,292,0.715,293,2.163,294,1.133,298,3.098,300,1.482,304,2.078,341,2.729,361,2.163,478,2.216,479,3.105,480,1.718,481,1.751,484,3.17,485,2.591,507,4.536,509,2.801,512,2.478,514,2.216,515,3.018,516,1.533,517,3.952,518,2.272,519,2.272,520,2.216,521,1.976,522,2.272,523,2.216,524,2.997,525,2.272,526,2.216,527,2.272,528,3.17,529,2.272,530,3.092,531,3.17,532,2.216,533,2.019,534,2.216,535,3.366,536,2.272,537,3.952,538,2.216,539,2.163,540,2.216,541,2.112,542,2.272,543,2.163,544,2.163,545,2.272,546,2.216,547,2.216,548,2.065,549,2.272,550,3.092,551,2.272,552,3.092,553,3.17,554,3.092,555,3.854,556,2.272,557,3.092,558,2.272,559,3.092,560,3.018,561,2.272,562,2.272,563,2.272,564,2.019,565,1.542,566,2.112,567,2.112,568,2.272,569,2.163,570,2.272,571,2.272,572,2.272,573,2.112,574,2.163,575,2.272,576,4.071,577,3.675,578,2.272,579,2.272,580,2.065,581,2.163,582,2.272,583,2.163,584,2.272,585,2.163,586,2.272,587,2.112,588,2.112,589,2.163,590,2.272,591,2.163,592,2.272,593,1.718,594,2.163,595,2.112,596,2.163,597,2.112,598,2.112,599,2.112,600,1.857,601,2.112,602,2.272,603,2.019,604,2.272,605,2.163,606,2.272,607,1.976,608,2.112,609,2.272,610,2.112,611,2.272,612,2.163,613,2.272,614,2.272,630,3.539,641,2.216,720,1.464,1012,3.539,1082,2.463,1240,3.771,1664,3.65,1725,2.702,1747,3.771,1752,2.798,1754,3.023,4686,3.159,4687,3.159,4689,4.409,4690,3.159,4691,3.159,4692,4.898]],["title/components/TestOfflineComponent.html",[109,0.818,557,2.344]],["body/components/TestOfflineComponent.html",[3,0.052,4,0.046,5,0.052,10,0.122,11,0.196,12,0.571,17,0.006,19,0.245,27,0.098,28,1.962,47,1.726,68,2.547,88,0.004,89,0.004,90,0.791,109,1.535,114,2.613,136,2.54,164,4.219,171,2.073,179,1.264,180,1.506,182,2.772,187,0.781,205,0.385,245,1.244,255,2.591,292,0.715,293,2.163,294,1.133,298,3.098,300,1.482,304,2.078,341,2.729,361,2.163,478,2.216,479,3.105,480,1.718,481,1.751,484,3.17,485,2.591,507,4.536,509,2.801,512,2.478,514,2.216,515,3.018,516,1.533,517,3.952,518,2.272,519,2.272,520,2.216,521,1.976,522,2.272,523,2.216,524,2.997,525,2.272,526,2.216,527,2.272,528,3.17,529,2.272,530,3.092,531,3.17,532,2.216,533,2.019,534,2.216,535,3.366,536,2.272,537,3.952,538,2.216,539,2.163,540,2.216,541,2.112,542,2.272,543,2.163,544,2.163,545,2.272,546,2.216,547,2.216,548,2.065,549,2.272,550,3.092,551,2.272,552,3.092,553,3.17,554,3.092,555,3.092,556,2.272,557,3.854,558,2.272,559,3.092,560,3.018,561,2.272,562,2.272,563,2.272,564,2.019,565,1.542,566,2.112,567,2.112,568,2.272,569,2.163,570,2.272,571,2.272,572,2.272,573,2.112,574,2.163,575,2.272,576,4.071,577,3.675,578,2.272,579,2.272,580,2.065,581,2.163,582,2.272,583,2.163,584,2.272,585,2.163,586,2.272,587,2.112,588,2.112,589,2.163,590,2.272,591,2.163,592,2.272,593,1.718,594,2.163,595,2.112,596,2.163,597,2.112,598,2.112,599,2.112,600,1.857,601,2.112,602,2.272,603,2.019,604,2.272,605,2.163,606,2.272,607,1.976,608,2.112,609,2.272,610,2.112,611,2.272,612,2.163,613,2.272,614,2.272,630,3.539,641,2.216,720,1.464,1012,3.539,1082,2.463,1240,3.771,1664,3.65,1725,2.702,1747,4.945,1752,2.798,1754,3.023,4686,3.159,4687,3.159,4689,4.409,4690,3.159,4691,3.159,4692,4.898]],["title/components/TestOverrideDisplayContentComponent.html",[109,0.818,559,2.344]],["body/components/TestOverrideDisplayContentComponent.html",[3,0.052,4,0.046,5,0.052,10,0.121,11,0.195,17,0.006,19,0.245,27,0.098,28,1.805,47,1.638,68,2.542,88,0.004,89,0.004,90,0.79,109,1.533,114,2.969,171,1.967,179,1.258,180,1.505,182,2.63,187,0.971,205,0.383,245,1.238,292,0.712,293,2.152,294,1.127,298,3.097,300,1.573,304,2.071,341,2.499,361,2.152,478,2.204,479,2.482,480,1.709,481,1.742,484,3.159,485,2.582,507,4.533,509,2.797,512,3.055,514,2.204,515,3.007,516,1.528,517,3.943,518,2.26,519,2.26,520,2.204,521,1.966,522,2.26,523,2.204,524,2.995,525,2.26,526,2.204,527,2.26,528,3.159,529,2.26,530,3.081,531,3.159,532,2.204,533,2.009,534,2.204,535,3.358,536,2.26,537,3.943,538,2.204,539,2.152,540,2.204,541,2.102,542,2.26,543,2.152,544,2.152,545,2.26,546,2.204,547,2.204,548,2.054,549,2.26,550,3.081,551,2.26,552,3.081,553,3.159,554,3.081,555,3.081,556,2.26,557,3.081,558,2.26,559,3.846,560,3.467,561,2.26,562,2.26,563,2.26,564,2.009,565,1.534,566,2.102,567,2.102,568,2.26,569,2.152,570,2.26,571,2.26,572,2.26,573,2.102,574,2.152,575,2.26,576,3.821,577,3.858,578,2.26,579,2.26,580,2.054,581,2.152,582,2.26,583,2.152,584,2.26,585,2.152,586,2.26,587,2.102,588,2.102,589,2.152,590,2.26,591,2.152,592,2.26,593,1.709,594,2.152,595,2.102,596,2.152,597,2.102,598,2.102,599,2.102,600,1.847,601,2.102,602,2.26,603,2.009,604,2.26,605,2.152,606,2.26,607,1.966,608,2.102,609,2.26,610,2.102,611,2.26,612,2.152,613,2.26,614,2.26,641,3.081,720,1.457,1012,4.066,1082,2.45,1240,5.114,1725,2.689,1747,3.758,1752,2.783,1754,5.521,4686,5.77,4687,3.143,4689,5.065,4690,3.143,4691,5.77,4693,6.336,4694,6.336,4695,4.533]],["title/pipes/TransformPipe.html",[174,1.449,4696,4.305]],["body/pipes/TransformPipe.html",[3,0.07,4,0.062,5,0.07,12,0.551,15,3.773,16,0.239,17,0.006,19,0.181,27,0.07,32,1.534,34,2.186,44,2.056,47,1.606,49,1.706,54,4.075,88,0.005,89,0.005,90,0.563,96,1.053,102,3.866,174,2.685,176,3.141,177,3.641,179,1.703,180,1.293,182,2.578,183,1.125,184,1.337,185,5.39,186,5.144,187,0.754,193,1.841,194,2.767,196,1.143,200,4.599,203,3.204,204,4.191,205,0.519,206,1.877,209,4.599,211,4.257,328,4.451,347,2.914,379,1.75,706,3.037,798,5.973,831,4.073,854,3.363,2408,4.729,2931,5.973,4696,7.974,4697,6.14,4698,9.659,4699,7.754,4700,7.754,4701,6.14,4702,8.499,4703,7.754,4704,7.754,4705,6.14,4706,6.14]],["title/interfaces/TranslationLoaderActionEntity.html",[0,0.104,2284,3.966]],["body/interfaces/TranslationLoaderActionEntity.html",[0,0.156,2,1.14,3,0.083,4,0.074,5,0.098,10,0.194,11,0.264,16,0.224,17,0.006,27,0.083,88,0.005,89,0.005,96,0.986,114,3.375,122,2.857,152,1.326,271,2.798,392,3.102,693,1.751,826,4.042,1496,4.396,1680,5.975,2265,5.975,2266,5.975,2268,6.071,2284,7.07,3259,4.817,4707,6.485,4708,7.674,4709,7.261]],["title/dependencies.html",[240,2.78,4710,4.472]],["body/dependencies.html",[17,0.006,21,4.08,22,5.299,23,5.299,88,0.005,89,0.005,124,3.616,154,4.564,205,0.581,272,1.659,524,2.174,539,3.265,791,3.19,817,4.384,1082,3.719,1212,5.01,1224,4.384,1246,3.616,1321,6.145,1407,3.616,1410,3.857,1497,4.564,1498,4.384,1706,5.299,2255,6.145,2347,5.299,2384,6.145,2385,6.145,2558,4.224,2560,4.564,3364,7.43,3377,5.661,3458,5.299,3702,6.145,4434,6.145,4710,5.299,4711,6.88,4712,9.868,4713,6.88,4714,6.88,4715,6.88,4716,9.291,4717,6.88,4718,6.88,4719,6.88,4720,6.88,4721,6.88,4722,6.88,4723,6.88,4724,6.88,4725,6.88,4726,6.88,4727,6.88,4728,6.88,4729,6.88,4730,6.88]],["title/miscellaneous/enumerations.html",[4731,2.78,4732,5.186]],["body/miscellaneous/enumerations.html",[10,0.201,17,0.006,32,1.478,88,0.005,89,0.005,114,3.313,122,2.5,392,2.416,703,5.589,1118,7.833,1119,7.833,1496,3.847,2265,6.186,2266,6.186,2268,5.818,4707,7.833,4708,7.833,4731,5.213,4732,6.715,4733,7.519,4734,8.77,4735,7.519,4736,7.519]],["title/miscellaneous/functions.html",[798,4.472,4731,2.78]],["body/miscellaneous/functions.html",[10,0.191,12,0.763,16,0.261,17,0.006,57,3.089,83,3.227,88,0.005,89,0.005,96,1.154,152,1.231,180,1.292,193,2.017,196,1.689,268,2.107,379,1.557,798,5.486,1004,4.591,1125,5.86,1134,4.725,1150,6.293,1210,6.989,1212,6.61,1215,4.938,1407,4.77,1496,3.644,1664,4.088,2258,6.186,2334,6.361,2337,7.468,2355,6.361,2362,7.586,4731,4.938,4737,7.122,4738,7.122,4739,7.122,4740,8.494,4741,7.122,4742,7.122,4743,7.122,4744,7.122,4745,7.122,4746,8.494,4747,7.122,4748,7.122]],["title/index.html",[10,0.107,4749,3.581,4750,3.581]],["body/index.html",[4,0.07,7,2.201,17,0.005,26,4.318,41,3.175,49,1.705,54,2.668,61,1.577,88,0.004,89,0.004,97,2.409,122,1.688,134,3.117,135,1.844,180,1.041,191,2.668,203,3.266,207,4.176,209,4.596,240,6.646,272,1.651,274,3.035,311,1.811,335,4.023,379,0.93,382,3.519,404,5.275,412,1.914,431,2.668,479,2.682,485,2.068,533,3.435,541,3.175,684,2.825,693,1.224,706,2.682,786,3.519,804,2.353,891,2.597,945,4.758,1000,4.987,1037,2.531,1129,2.668,1131,2.744,1132,4.176,1206,2.825,1227,4.748,1232,4.987,1240,3.01,1246,4.875,1272,4.534,1308,2.25,1360,2.914,1407,4.073,1420,3.91,1466,3.519,1498,3.235,1504,2.914,1549,5.275,1571,7.127,1790,3.697,2048,3.367,2143,5.038,2173,5.275,2249,3.697,2268,3.367,2371,3.697,2408,3.91,2435,4.176,2538,4.534,2567,3.931,2621,3.91,2635,7.41,2856,3.91,3058,2.825,3062,3.931,3347,4.534,3502,4.534,3552,4.534,3740,6.376,4312,6.922,4313,4.534,4710,3.91,4751,6.848,4752,5.076,4753,6.848,4754,5.076,4755,6.922,4756,6.922,4757,6.922,4758,5.076,4759,5.076,4760,5.076,4761,5.076,4762,5.076,4763,5.076,4764,5.076,4765,5.076,4766,5.076,4767,5.076,4768,6.848,4769,5.076,4770,6.848,4771,5.076,4772,5.076,4773,5.076,4774,5.076,4775,5.076,4776,5.076,4777,5.076,4778,5.076,4779,5.076,4780,5.076,4781,5.076,4782,5.076,4783,5.076,4784,5.076,4785,5.076,4786,5.076,4787,5.076,4788,5.076,4789,5.076,4790,5.076,4791,5.076,4792,5.076,4793,5.076,4794,5.076,4795,5.076,4796,5.076,4797,5.076,4798,5.076,4799,6.848,4800,5.076,4801,5.076,4802,5.076,4803,6.848,4804,5.076,4805,5.076,4806,6.848,4807,5.076,4808,5.076,4809,5.076,4810,5.076,4811,5.076,4812,5.076,4813,5.076,4814,5.076,4815,5.076,4816,5.076,4817,5.076,4818,5.076,4819,5.076,4820,5.076,4821,5.076,4822,5.076,4823,5.076,4824,5.076,4825,5.275,4826,4.176,4827,7.41,4828,6.116,4829,4.534,4830,4.534,4831,4.534,4832,4.534,4833,4.534,4834,4.534,4835,4.534,4836,4.534,4837,4.534,4838,8.396,4839,4.534,4840,4.534,4841,4.534,4842,6.116,4843,4.534,4844,4.534,4845,4.534,4846,4.534,4847,4.534,4848,4.534,4849,4.534,4850,4.534,4851,6.116,4852,4.534,4853,4.534,4854,4.534,4855,6.116,4856,6.116,4857,4.534,4858,4.534,4859,4.534,4860,4.534,4861,4.534,4862,4.534,4863,4.534,4864,4.534,4865,4.534,4866,4.534,4867,4.534,4868,4.534,4869,4.534,4870,4.534,4871,4.534,4872,4.534,4873,4.534,4874,4.534,4875,4.534,4876,4.534,4877,4.534,4878,4.534,4879,4.534,4880,4.534,4881,4.534]],["title/license.html",[4749,3.581,4750,3.581,4825,3.088]],["body/license.html",[17,0.005,49,1.493,88,0.005,89,0.005,122,2.256,203,3.111,209,5.272,311,2.421,379,1.244,412,2.558,693,1.636,1037,3.383,1232,6.008,1240,4.024,1308,3.007,1420,5.226,1571,5.583,1790,4.942,2173,6.354,2249,4.942,2408,5.226,2435,5.583,4755,6.06,4756,6.06,4757,6.06,4825,5.226,4826,5.583,4827,8.26,4828,7.368,4829,6.06,4830,6.06,4831,6.06,4832,6.06,4833,6.06,4834,6.06,4835,6.06,4836,6.06,4837,6.06,4838,8.855,4839,6.06,4840,6.06,4841,6.06,4842,7.368,4843,6.06,4844,6.06,4845,6.06,4846,6.06,4847,6.06,4848,6.06,4849,6.06,4850,6.06,4851,7.368,4852,6.06,4853,6.06,4854,6.06,4855,7.368,4856,7.368,4857,6.06,4858,6.06,4859,6.06,4860,6.06,4861,6.06,4862,6.06,4863,6.06,4864,6.06,4865,6.06,4866,6.06,4867,6.06,4868,6.06,4869,6.06,4870,6.06,4871,6.06,4872,6.06,4873,6.06,4874,6.06,4875,6.06,4876,6.06,4877,6.06,4878,6.06,4879,6.06,4880,6.06,4881,6.06]],["title/modules.html",[2333,5.092]],["body/modules.html",[17,0.005,88,0.005,89,0.005,1271,3.516,2332,6.111,2333,6.111,4882,7.934,4883,7.934]],["title/overview.html",[4884,5.905]],["body/overview.html",[2,1.2,17,0.005,88,0.005,89,0.005,92,4.874,176,3.913,250,4.696,261,3.317,294,1.902,479,2.996,514,3.719,998,3.913,1308,3.389,2154,5.074,2331,7.288,2359,6.831,2577,5.876,4710,5.891,4884,6.831,4885,7.648,4886,7.648,4887,6.831,4888,7.648,4889,7.648,4890,6.831,4891,6.831,4892,7.648]],["title/properties.html",[11,0.179,240,2.78]],["body/properties.html",[11,0.243,17,0.006,88,0.005,89,0.005,1360,4.538,4825,6.089,4826,6.505,4893,7.906]],["title/miscellaneous/typealiases.html",[4731,2.78,4894,5.806]],["body/miscellaneous/typealiases.html",[10,0.084,15,3.026,16,0.297,17,0.006,28,1.351,34,1.663,36,1.141,37,1.478,39,3.018,48,1.306,54,1.65,64,1.802,66,2.191,68,1.895,70,4.56,76,2.407,88,0.003,89,0.003,98,1.697,105,3.498,114,2.104,122,1.044,125,3.522,127,1.802,129,2.177,132,2.177,144,4.435,146,3.522,148,2.614,151,3.498,152,0.455,158,2.177,159,3.353,160,3.979,168,3.979,169,3.725,183,0.886,190,2.322,203,2.224,211,2.177,215,5.452,219,3.979,223,3.725,225,4.319,238,2.143,241,2.418,247,3.522,268,2.602,273,2.031,274,3.49,282,2.287,283,3.522,284,3.725,286,1.862,287,2.287,300,0.558,306,1.928,350,1.279,363,5.888,382,4.09,387,2.287,392,1.554,395,2.287,432,3.581,435,2.804,485,1.279,509,2.389,512,1.062,516,1.166,524,0.992,535,2.813,620,1.565,645,1.23,660,4.826,661,3.804,672,1.928,701,1.802,715,0.944,718,3.522,753,1.026,764,2.287,783,2.428,802,3.522,804,1.456,813,3.983,833,4.068,841,2.287,847,2.287,866,3.522,867,2.418,868,5.104,869,3.725,877,3.725,955,3.283,956,3.522,974,4.319,998,2.474,1004,1.697,1037,2.941,1072,2.351,1129,1.65,1202,2.583,1217,2.583,1218,2.804,1219,4.319,1244,4.319,1263,2.001,1271,2.143,1277,2.418,1280,4.319,1286,4.319,1294,1.697,1308,2.143,1324,4.319,1360,2.776,1438,2.583,1439,5.452,1444,3.979,1445,2.287,1447,3.725,1448,2.418,1449,2.418,1450,2.418,1451,3.979,1452,2.001,1466,2.177,1484,2.177,1485,3.208,1499,3.208,1576,1.606,1679,2.583,1741,2.804,1742,7.034,1745,4.319,1746,3.979,1747,1.862,1748,3.979,1749,2.583,1750,2.583,1751,6.391,1752,2.969,1753,3.979,1809,2.242,1883,2.804,1888,4.319,1889,4.319,1987,2.083,2044,1.697,2143,1.65,2147,2.351,2292,3.979,2416,5.452,2426,3.082,2448,1.49,2553,2.177,2554,4.594,2556,2.177,2558,1.928,2559,2.083,2561,3.759,2562,3.208,2563,3.082,2578,2.001,2580,2.001,2581,3.082,2722,4.319,2723,3.979,2850,2.583,2851,3.979,2857,2.474,2985,2.614,2997,1.802,3007,2.776,3008,1.697,3009,1.748,3010,1.748,3011,1.802,3015,1.748,3016,1.748,3017,2.776,3060,2.692,3071,2.692,3189,2.804,3190,2.804,3191,4.319,3258,4.319,3296,2.583,3297,4.853,3299,3.979,3300,2.583,3301,3.725,3437,5.736,3439,3.522,3446,3.522,3447,3.522,3454,2.287,3455,3.725,3456,6.561,3462,3.725,3463,3.725,3464,3.725,3465,3.725,3467,3.725,3469,3.725,3471,2.418,3472,3.725,3473,3.725,3476,4.09,3480,2.418,3481,3.725,3483,2.418,3485,2.177,3489,3.208,3490,3.208,3492,2.001,3495,2.001,3496,2.001,3497,3.208,3599,5.452,3601,3.979,3602,3.725,3608,3.913,3609,2.583,3634,4.09,3667,2.804,3668,5.918,3683,3.725,3684,3.979,3686,4.319,3692,2.583,3693,3.979,3694,6.219,3771,1.862,3781,3.498,3782,3.082,3786,2.001,3787,2.083,3792,2.001,3793,2.001,3794,3.082,3923,2.418,3926,4.543,3927,3.522,3928,3.522,3929,3.725,3933,3.725,3963,3.522,4049,2.583,4050,2.804,4051,2.583,4053,4.319,4104,4.319,4105,4.319,4250,2.804,4354,2.287,4731,2.177,4887,4.319,4890,4.319,4891,4.319,4895,3.14,4896,8.909,4897,7.156,4898,4.836,4899,8.131,4900,5.898,4901,3.14,4902,4.836,4903,8.341,4904,4.836,4905,3.14,4906,4.836,4907,6.626,4908,7.156,4909,4.836,4910,4.836,4911,5.898,4912,4.836,4913,8.518,4914,4.836,4915,3.14,4916,4.836,4917,4.836,4918,4.836,4919,7.875,4920,4.836,4921,5.898,4922,5.898,4923,4.836,4924,3.14,4925,5.898,4926,3.14,4927,3.14,4928,3.14,4929,3.14,4930,4.836,4931,5.898,4932,3.14,4933,7.559,4934,4.836,4935,5.898,4936,7.156,4937,4.836,4938,5.898,4939,3.14,4940,5.898,4941,7.559,4942,3.14,4943,4.836,4944,5.898,4945,4.836,4946,4.836,4947,4.836,4948,4.836,4949,4.836,4950,4.836,4951,4.836,4952,4.836,4953,4.836,4954,4.836,4955,3.14,4956,4.836,4957,3.14,4958,4.836,4959,4.836,4960,4.836,4961,4.836,4962,4.836,4963,4.836,4964,4.836,4965,4.836,4966,3.14,4967,4.836,4968,4.836,4969,4.836,4970,4.836,4971,4.836,4972,3.14,4973,3.14,4974,3.14,4975,3.14,4976,4.836,4977,4.836,4978,4.836,4979,4.836,4980,4.836,4981,4.836,4982,4.836,4983,4.836,4984,4.836,4985,4.836,4986,4.836,4987,3.14,4988,3.14,4989,3.14,4990,3.14,4991,3.14,4992,3.14,4993,6.626,4994,3.14,4995,3.14,4996,3.14,4997,3.14,4998,3.14,4999,3.14,5000,3.14,5001,3.14]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":66,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["0.0.0",{"_index":4893,"title":{},"body":{"properties.html":{}}}],["0.15.0",{"_index":4730,"title":{},"body":{"dependencies.html":{}}}],["0754",{"_index":463,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["1",{"_index":998,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["1,2,3,4",{"_index":2576,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["1.0.0",{"_index":2255,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"dependencies.html":{}}}],["1.2.1",{"_index":4723,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":4978,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["100",{"_index":3921,"title":{},"body":{"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["11",{"_index":4979,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["11.1.0",{"_index":4727,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":4980,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["1200",{"_index":4307,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["13",{"_index":4890,"title":{},"body":{"overview.html":{},"miscellaneous/typealiases.html":{}}}],["14",{"_index":4981,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["15",{"_index":4982,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["16",{"_index":4983,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["16.0.4",{"_index":4717,"title":{},"body":{"dependencies.html":{}}}],["17",{"_index":4984,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["18",{"_index":4887,"title":{},"body":{"overview.html":{},"miscellaneous/typealiases.html":{}}}],["19",{"_index":4985,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["19.2.1",{"_index":4716,"title":{},"body":{"dependencies.html":{}}}],["1].focus",{"_index":1003,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["1]?.focus",{"_index":1006,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["1fr",{"_index":1482,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["2",{"_index":2722,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"miscellaneous/typealiases.html":{}}}],["2.32.4",{"_index":4724,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":4986,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["20.1.0",{"_index":4715,"title":{},"body":{"dependencies.html":{}}}],["20.1.2",{"_index":4712,"title":{},"body":{"dependencies.html":{}}}],["2023",{"_index":4829,"title":{},"body":{"index.html":{},"license.html":{}}}],["2025",{"_index":4832,"title":{},"body":{"index.html":{},"license.html":{}}}],["22",{"_index":4889,"title":{},"body":{"overview.html":{}}}],["3",{"_index":2723,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"classes/NgxValidators.html":{},"miscellaneous/typealiases.html":{}}}],["3.0.1",{"_index":4725,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":4728,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":2965,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["37",{"_index":4888,"title":{},"body":{"overview.html":{}}}],["4",{"_index":223,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"injectables/NgxImageMarkerService.html":{},"miscellaneous/typealiases.html":{}}}],["4.1.0",{"_index":4719,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":4722,"title":{},"body":{"dependencies.html":{}}}],["401",{"_index":2413,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["4217",{"_index":1687,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["4217](https://en.wikipedia.org/wiki/iso_4217",{"_index":1697,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["474.603.875",{"_index":202,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["474603875",{"_index":201,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["5",{"_index":4976,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["5100",{"_index":462,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["5px",{"_index":3946,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["6",{"_index":4977,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["7",{"_index":4891,"title":{},"body":{"overview.html":{},"miscellaneous/typealiases.html":{}}}],["7.1.5",{"_index":4720,"title":{},"body":{"dependencies.html":{}}}],["7.8.0",{"_index":4726,"title":{},"body":{"dependencies.html":{}}}],["7061",{"_index":464,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["79",{"_index":4892,"title":{},"body":{"overview.html":{}}}],["8",{"_index":225,"title":{},"body":{"pipes/BtwPipe.html":{},"miscellaneous/typealiases.html":{}}}],["9",{"_index":219,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/NgxStorageService.html":{},"miscellaneous/typealiases.html":{}}}],["9.0.0",{"_index":4721,"title":{},"body":{"dependencies.html":{}}}],["9]*[,.]{0,1}[0",{"_index":3594,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["_",{"_index":2753,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/TableCellTemplate.html":{}}}],["_removedvalue",{"_index":1657,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["a11y",{"_index":336,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["a[data",{"_index":3344,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["abdurrahman",{"_index":4819,"title":{},"body":{"index.html":{}}}],["ability",{"_index":3397,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["above",{"_index":1037,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["abstract",{"_index":565,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"classes/NgxI18nAbstractService.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTourStepComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["abstractcontrol",{"_index":389,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["abstraction",{"_index":3232,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["abstractions",{"_index":4773,"title":{},"body":{"index.html":{}}}],["abstracts",{"_index":245,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["accept",{"_index":1548,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["acceptcategory",{"_index":1536,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["acceptcategory(name",{"_index":1546,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["accepted",{"_index":1560,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxHasCookieDirective.html":{}}}],["acceptservice",{"_index":1537,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["acceptservice(category",{"_index":1551,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["accepttype",{"_index":1507,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["access",{"_index":4267,"title":{},"body":{"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["accessibility",{"_index":2989,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["accessible",{"_index":774,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["accessor",{"_index":363,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["accessors",{"_index":99,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourItemDirective.html":{}}}],["accessors.length",{"_index":427,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["according",{"_index":685,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["accordingly",{"_index":1829,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["accordion",{"_index":527,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["accordion'},{'name",{"_index":525,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["accordion.component",{"_index":1085,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["account",{"_index":3956,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["acoolmethod",{"_index":4329,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["act",{"_index":1828,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["action",{"_index":122,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["action.id",{"_index":2307,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["action.state",{"_index":2303,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["action/has",{"_index":2156,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["actioncreator",{"_index":119,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["actionfromresult",{"_index":2306,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["actionreducer",{"_index":123,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["actions",{"_index":128,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["actions.channel",{"_index":4410,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["actions.concat(action.id",{"_index":2304,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["actions.data",{"_index":4443,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["actions.filter((actionfromresult",{"_index":2305,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["actions.videos",{"_index":4415,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["actiontype",{"_index":3083,"title":{},"body":{"injectables/NgxModalService.html":{},"injectables/SpecStoreService.html":{}}}],["activatedroute",{"_index":3248,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["activatedroutesnapshot",{"_index":3400,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["active",{"_index":910,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["actives",{"_index":3888,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["activetooltip",{"_index":3835,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["actual",{"_index":107,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/TableCellTemplate.html":{}}}],["actual_component",{"_index":614,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["actually",{"_index":1933,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxModalService.html":{}}}],["adapter",{"_index":159,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["add",{"_index":135,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["addcharatindex",{"_index":210,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["addcharatindex(value",{"_index":222,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["added",{"_index":333,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["additional",{"_index":1243,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["addloadedtranslations",{"_index":2275,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["addloadedtranslations(translations",{"_index":2280,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["adds",{"_index":796,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["adjust",{"_index":4037,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["adjusted",{"_index":2648,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["advantage",{"_index":3320,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["advertisement",{"_index":3056,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["affect",{"_index":3038,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["affects",{"_index":3034,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["aftercontentchecked",{"_index":4465,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["afterviewinit",{"_index":899,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["aftervisible",{"_index":3941,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["afterwards",{"_index":4036,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["again",{"_index":3358,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["alert",{"_index":3049,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["alertdialog",{"_index":3009,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["alias",{"_index":892,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["aliases",{"_index":4895,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allornothingrequired",{"_index":4193,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequired(control",{"_index":4199,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequirederror",{"_index":4204,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequiredvalidator",{"_index":4243,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequiredvalidator(control",{"_index":4257,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allow",{"_index":343,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["allowbeforeunloadhandler",{"_index":3406,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["allowclear",{"_index":2573,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["allowed",{"_index":2570,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["allowing",{"_index":3718,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["allowmultipleopenrows",{"_index":4527,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["allowmultiplerowsopen",{"_index":3676,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["allows",{"_index":323,"title":{},"body":{"directives/FocusClickDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{}}}],["allowzoom",{"_index":2571,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["along",{"_index":1855,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["alongside",{"_index":3063,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["already",{"_index":233,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["always",{"_index":1294,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["amount",{"_index":633,"title":{},"body":{"components/MockTourStepComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["amountofsteps",{"_index":616,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["anchor",{"_index":3354,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["anchors",{"_index":3351,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["and/or",{"_index":4849,"title":{},"body":{"index.html":{},"license.html":{}}}],["angular",{"_index":2143,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["angular's",{"_index":3032,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["angular/cdk",{"_index":4711,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/a11y",{"_index":811,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["angular/cdk/bidi",{"_index":3003,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["angular/cdk/dialog",{"_index":3005,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["angular/cdk/overlay",{"_index":3868,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["angular/cdk/portal",{"_index":3870,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["angular/cdk/table",{"_index":4463,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["angular/common",{"_index":1082,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":118,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/SpecStoreService.html":{}}}],["angular/compiler",{"_index":4713,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":205,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"dependencies.html":{}}}],["angular/core/rxjs",{"_index":2883,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxModalService.html":{}}}],["angular/forms",{"_index":21,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":3364,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"dependencies.html":{}}}],["angular/router",{"_index":1224,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"dependencies.html":{}}}],["animation",{"_index":2861,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{}}}],["api",{"_index":1151,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["app",{"_index":3322,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["app.component.ts",{"_index":3335,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["appcomponent",{"_index":3336,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["append",{"_index":2245,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["appending",{"_index":2250,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["application",{"_index":1221,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxWindowService.html":{}}}],["applications",{"_index":2899,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["applied",{"_index":3023,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"classes/NgxValidators.html":{}}}],["approach",{"_index":3502,"title":{},"body":{"injectables/NgxStorageService.html":{},"index.html":{}}}],["approaches",{"_index":2467,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["area",{"_index":2733,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["aren't",{"_index":2397,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["args",{"_index":246,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["args{constructorparameters",{"_index":1409,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["arguments",{"_index":310,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["aria",{"_index":663,"title":{},"body":{"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["ariadescribedby",{"_index":2972,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{}}}],["arialabel",{"_index":3148,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["arialabelledby",{"_index":2973,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{}}}],["arising",{"_index":4879,"title":{},"body":{"index.html":{},"license.html":{}}}],["around",{"_index":3945,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["array",{"_index":432,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["array.from(this.tablecelltemplates()).foreach((tablecelltemplate",{"_index":4627,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["array.from(this.tablecelltemplates()).some((celltemplate",{"_index":4638,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["array.isarray(open",{"_index":987,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["array.isarray(value",{"_index":2038,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"pipes/NgxTableGetPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["arrayelementtype",{"_index":3462,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["arraysignal",{"_index":4898,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["arrowdown",{"_index":1023,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["arrowdown(event",{"_index":1040,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["arrowleft",{"_index":4125,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["arrowup",{"_index":1024,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["arrowup(event",{"_index":1042,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["ascending",{"_index":1118,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"miscellaneous/enumerations.html":{}}}],["asobservable",{"_index":492,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{}}}],["assertion",{"_index":4121,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["assertive",{"_index":1750,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"miscellaneous/typealiases.html":{}}}],["assets",{"_index":147,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{}}}],["assets.ts",{"_index":283,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/SpecStoreAssets.html":{},"miscellaneous/typealiases.html":{}}}],["assigns",{"_index":4620,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["assistive",{"_index":775,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["associated",{"_index":4839,"title":{},"body":{"index.html":{},"license.html":{}}}],["async",{"_index":2135,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["atleastonerequired",{"_index":4194,"title":{},"body":{"classes/NgxValidators.html":{}}}],["atleastonerequired(options",{"_index":4205,"title":{},"body":{"classes/NgxValidators.html":{}}}],["atleastonerequirederror",{"_index":46,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["atleastonerequiredvalidator",{"_index":43,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["atleastonerequiredvalidator(options",{"_index":4260,"title":{},"body":{"classes/NgxValidators.html":{}}}],["atleastonerequiredvalidatoroptions",{"_index":1,"title":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["attach",{"_index":859,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["attached",{"_index":3029,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxTooltipService.html":{}}}],["attempt",{"_index":1279,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["attempted",{"_index":2490,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["attention",{"_index":3055,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["attr.aria",{"_index":3823,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["attr.data",{"_index":1707,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["attr.role",{"_index":3783,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["attr.tabindex",{"_index":342,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["attribute",{"_index":4524,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["attributes",{"_index":2995,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourStepComponent.html":{}}}],["auth",{"_index":1247,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticated",{"_index":1134,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"miscellaneous/functions.html":{}}}],["authenticated.directive.ts",{"_index":2760,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:125",{"_index":2766,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:27",{"_index":2769,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:30",{"_index":2775,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:35",{"_index":2770,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:40",{"_index":2773,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:41",{"_index":2774,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:42",{"_index":2771,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:43",{"_index":2772,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:48",{"_index":2763,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:70",{"_index":2764,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:74",{"_index":2765,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:76",{"_index":2767,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:80",{"_index":2768,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated/is",{"_index":2759,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticatedcallhandler",{"_index":1204,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["authentication",{"_index":1212,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["authenticationresponse",{"_index":1320,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationresponsesubject",{"_index":1248,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationresponsetype",{"_index":1313,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationresponsetype['session']['permissions",{"_index":1351,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationservice",{"_index":2070,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticationstatussubject",{"_index":1249,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authorized",{"_index":2410,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["authors",{"_index":4870,"title":{},"body":{"index.html":{},"license.html":{}}}],["auto",{"_index":1470,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["autoclearcookies",{"_index":1514,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["autoclose",{"_index":3026,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["autodetect",{"_index":1501,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["autofocus",{"_index":3044,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["autofocustarget",{"_index":3004,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["autogenerated",{"_index":3821,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["automatically",{"_index":1870,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["autoshow",{"_index":1511,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["available",{"_index":1271,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["availablelanguages",{"_index":2236,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["availablelanguagessubject",{"_index":2436,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["availabletranslations",{"_index":2388,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["availabletranslations[path",{"_index":2396,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["avoid",{"_index":735,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["axis",{"_index":3951,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["back",{"_index":701,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"miscellaneous/typealiases.html":{}}}],["backdrop",{"_index":3021,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["base",{"_index":101,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["based",{"_index":706,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{}}}],["baseformaccessor",{"_index":91,"title":{"classes/BaseFormAccessor.html":{}},"body":{"classes/BaseFormAccessor.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{}}}],["basestore",{"_index":110,"title":{"interfaces/BaseStore.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["basestoreaction",{"_index":3614,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["basestoreactions",{"_index":129,"title":{"interfaces/BaseStoreActions.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["basestoreassets",{"_index":127,"title":{"interfaces/BaseStoreAssets.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/typealiases.html":{}}}],["basestoreassetsgeneratoroptions",{"_index":145,"title":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{}},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["basestoreeffectsinterface",{"_index":125,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["basestoreselector",{"_index":3611,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["basestoreselectors",{"_index":132,"title":{"interfaces/BaseStoreSelectors.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["baseurl",{"_index":1137,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["baseurlhandler",{"_index":1179,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["basicentityadapteractions",{"_index":168,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"miscellaneous/typealiases.html":{}}}],["basicentityadapterreduceractions",{"_index":157,"title":{"interfaces/BasicEntityAdapterReducerActions.html":{}},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["basicentitystate",{"_index":170,"title":{"interfaces/BasicEntityState.html":{}},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["bc.onmessage",{"_index":1400,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["bc.onmessageerror",{"_index":1396,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["be62",{"_index":461,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["be62510007547061",{"_index":460,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["becomes",{"_index":3938,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["before",{"_index":2743,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["beforeunload",{"_index":3422,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["beforeunloadevent",{"_index":3415,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["beforevisible",{"_index":3939,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["behavior",{"_index":3424,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["behaviorsubject",{"_index":502,"title":{},"body":{"components/MockTourHolderComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["behaviorsubject('hello",{"_index":496,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["behaviorsubject('unset",{"_index":1266,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["behaviorsubject(0",{"_index":4295,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["behaviorsubject(1200",{"_index":4308,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["behaviorsubject(false",{"_index":2298,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxModalService.html":{}}}],["behaviorsubject(this.parsevalue(value",{"_index":3592,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["behaviorsubject(true",{"_index":4303,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["behaviorsubject(undefined",{"_index":1264,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{}}}],["behaviour",{"_index":4680,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["being",{"_index":1102,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["belgian",{"_index":197,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["below",{"_index":39,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"miscellaneous/typealiases.html":{}}}],["benoit",{"_index":4607,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["benoît",{"_index":4815,"title":{},"body":{"index.html":{}}}],["best",{"_index":687,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["better",{"_index":3737,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["between",{"_index":3918,"title":{},"body":{"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{}}}],["bind(this",{"_index":2706,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["blob",{"_index":1189,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["blocked",{"_index":359,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["blueprint",{"_index":3603,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["blur",{"_index":748,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["body",{"_index":1165,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{}}}],["body.createelement(element",{"_index":3379,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["body.queryselector(selector.replace('{{id",{"_index":3376,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["boolean",{"_index":29,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["boolean(action",{"_index":3125,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["boolean(availabletranslations[path",{"_index":2393,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["boolean(celltemplate.footertemplate",{"_index":4639,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["boolean(closed",{"_index":3126,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["boolean(tour?.[index",{"_index":4013,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["booleanrecord",{"_index":4902,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["booleansignal",{"_index":4904,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["bootstrap",{"_index":4886,"title":{},"body":{"overview.html":{}}}],["both",{"_index":2564,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["bottom",{"_index":3861,"title":{},"body":{"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridDirective.html":{}}}],["branch",{"_index":4799,"title":{},"body":{"index.html":{}}}],["break",{"_index":3705,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["breaking",{"_index":4315,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["brief",{"_index":3001,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["broadcast",{"_index":1383,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broadcastchannel",{"_index":1368,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broadcastchannel's",{"_index":1422,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broadcastchannel(...args",{"_index":1415,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broken",{"_index":2415,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["browse",{"_index":4883,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1410,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"dependencies.html":{}}}],["browserdocument",{"_index":4335,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["browserwindow",{"_index":2813,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxWindowService.html":{}}}],["browserwindow.matchmedia(query",{"_index":2825,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["btw",{"_index":181,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["btwpipe",{"_index":175,"title":{"pipes/BtwPipe.html":{}},"body":{"pipes/BtwPipe.html":{}}}],["bubbling",{"_index":4123,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["bug",{"_index":4812,"title":{},"body":{"index.html":{}}}],["build",{"_index":4783,"title":{},"body":{"index.html":{}}}],["bump",{"_index":4807,"title":{},"body":{"index.html":{}}}],["busting",{"_index":2243,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["busy",{"_index":1784,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["button",{"_index":339,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["buttons",{"_index":4578,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["bypass",{"_index":3398,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["bypasssaveonexit",{"_index":3394,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["c",{"_index":4828,"title":{},"body":{"index.html":{},"license.html":{}}}],["cache",{"_index":2242,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["cachebust",{"_index":2237,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["call",{"_index":1154,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["callback",{"_index":4334,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["called",{"_index":351,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxWindowService.html":{}}}],["calling",{"_index":2540,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxStorageService.html":{}}}],["calls",{"_index":1136,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["came",{"_index":2394,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["cancelled",{"_index":836,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["canedit",{"_index":2588,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["case",{"_index":83,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxTableHasObserversPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{}}}],["cases",{"_index":3740,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["casing",{"_index":3333,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["cast",{"_index":1342,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["catcherror",{"_index":2387,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["catcherror((res",{"_index":2406,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["categories",{"_index":1550,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["category",{"_index":1493,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{}}}],["causing",{"_index":4699,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["cdk",{"_index":235,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxModalService.html":{}}}],["cdkdialog",{"_index":3018,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["cdktablemodule",{"_index":4462,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cdref",{"_index":1017,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cell",{"_index":667,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cell'},{'name",{"_index":537,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["cell.component.ts",{"_index":1669,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:25",{"_index":1685,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["cell.component.ts:37",{"_index":1729,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:42",{"_index":1724,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:47",{"_index":1718,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:52",{"_index":1720,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.directive",{"_index":1696,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["cell.directive.ts",{"_index":3660,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["cell.resetsortdirection",{"_index":4646,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cell.sortdirection",{"_index":1121,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["cell.sortdirection.tolocalelowercase",{"_index":1122,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["cellclass",{"_index":668,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cellname",{"_index":4644,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cells",{"_index":4488,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["celltemplate",{"_index":669,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["center",{"_index":2855,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["certain",{"_index":1559,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["change",{"_index":2132,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxStorageService.html":{}}}],["changed",{"_index":1579,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxTourStepComponent.html":{}}}],["changedcategories",{"_index":1520,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["changedetection",{"_index":941,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedetectionstrategy",{"_index":972,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedetectionstrategy.onpush",{"_index":942,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedetectorref",{"_index":1061,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedservices",{"_index":1521,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["changer",{"_index":393,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["changes",{"_index":1093,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["channel",{"_index":1369,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["channel.service.ts",{"_index":1366,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:115",{"_index":1394,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:15",{"_index":1405,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:20",{"_index":1401,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:29",{"_index":1386,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:55",{"_index":1379,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:72",{"_index":1390,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:93",{"_index":1399,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel/broadcast",{"_index":1365,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channelerror",{"_index":4366,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["channelerrormessage",{"_index":4367,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["channelloading",{"_index":4368,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["channelname",{"_index":1382,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channelname{string",{"_index":1416,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channels",{"_index":1403,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["char",{"_index":212,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["charge",{"_index":2435,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"index.html":{},"license.html":{}}}],["check",{"_index":73,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["checkbox",{"_index":3688,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["checkboxtemplate",{"_index":4516,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["checked",{"_index":2800,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"interfaces/TableCellTemplate.html":{}}}],["checks",{"_index":31,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{}}}],["child",{"_index":4132,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["children",{"_index":4137,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["choice",{"_index":1592,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["chronological",{"_index":4247,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldates",{"_index":4195,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldates(startcontrolkey",{"_index":4208,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldatesvalidator",{"_index":4246,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldatesvalidator(startcontrolkey",{"_index":4263,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologically",{"_index":4211,"title":{},"body":{"classes/NgxValidators.html":{}}}],["circular",{"_index":736,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["claim",{"_index":4873,"title":{},"body":{"index.html":{},"license.html":{}}}],["class",{"_index":90,"title":{"classes/BaseFormAccessor.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"classes/NgxValidators.html":{}},"body":{"classes/BaseFormAccessor.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["class.ngx",{"_index":3968,"title":{},"body":{"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["classes",{"_index":92,"title":{},"body":{"classes/BaseFormAccessor.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"classes/NgxValidators.html":{},"overview.html":{}}}],["clean",{"_index":22,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxMobileLayoutService.html":{},"dependencies.html":{}}}],["clean(defaultlayout",{"_index":2938,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["clean(group.value",{"_index":59,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clean(this.defaultlayout?.layout",{"_index":2966,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["cleanedformvalue",{"_index":58,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedkeys",{"_index":60,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedkeys.has(key",{"_index":80,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedkeys.size",{"_index":65,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clear",{"_index":139,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["clearchannel",{"_index":4372,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["cleardata",{"_index":3194,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["cleared",{"_index":3554,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["clearformerror",{"_index":24,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clearformerror(control",{"_index":87,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clearing",{"_index":2572,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["clears",{"_index":3201,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["clearstorage",{"_index":3507,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["clearstorage(storage",{"_index":3512,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["clearvideos",{"_index":4373,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["click",{"_index":306,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["click.directive.ts",{"_index":297,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:12",{"_index":309,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:24",{"_index":321,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:28",{"_index":312,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:37",{"_index":313,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click/focus",{"_index":296,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["clicked",{"_index":2612,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["clicking",{"_index":326,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["clicks",{"_index":2684,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["client.service.ts",{"_index":1127,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:120",{"_index":1168,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:14",{"_index":1172,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:143",{"_index":1170,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:16",{"_index":1143,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:166",{"_index":1166,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:29",{"_index":1163,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:41",{"_index":1161,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:61",{"_index":1157,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:99",{"_index":1148,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client/authenticated",{"_index":1126,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["clone",{"_index":4759,"title":{},"body":{"index.html":{}}}],["close",{"_index":645,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["close(onclose",{"_index":3079,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["closechannel",{"_index":1373,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["closechannel(channelname",{"_index":1378,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["closed",{"_index":2748,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["closeflyout",{"_index":2906,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["closeondestroy",{"_index":3166,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["closeonnavigation",{"_index":3020,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["closeonoverlaydetachments",{"_index":3167,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["closer",{"_index":3958,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["closes",{"_index":1380,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxModalService.html":{}}}],["closing",{"_index":3042,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["code",{"_index":4804,"title":{},"body":{"index.html":{}}}],["collection",{"_index":4780,"title":{},"body":{"index.html":{}}}],["column",{"_index":670,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["columninput",{"_index":4628,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["columnkey",{"_index":3748,"title":{},"body":{"interfaces/NgxTableSortEvent.html":{}}}],["columns",{"_index":1469,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["combination",{"_index":2262,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["combinelatest",{"_index":1322,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["combinelatest([this.getsession",{"_index":1337,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["comma",{"_index":4233,"title":{},"body":{"classes/NgxValidators.html":{}}}],["comma.validator",{"_index":4254,"title":{},"body":{"classes/NgxValidators.html":{}}}],["comma/decimals",{"_index":4253,"title":{},"body":{"classes/NgxValidators.html":{}}}],["commit",{"_index":4803,"title":{},"body":{"index.html":{}}}],["common",{"_index":4770,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":4689,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["complete",{"_index":2650,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{}}}],["completed",{"_index":2318,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxStorageService.html":{}}}],["completes",{"_index":3514,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["complex",{"_index":4772,"title":{},"body":{"index.html":{}}}],["compliant",{"_index":937,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTooltipDirective.html":{}}}],["compodoc",{"_index":4766,"title":{},"body":{"index.html":{}}}],["component",{"_index":109,"title":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}},"body":{"classes/BaseFormAccessor.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["component'},{'name",{"_index":522,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["component.component.html",{"_index":450,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["component/empty.component.ts",{"_index":2260,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["component_template",{"_index":518,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["componentclass",{"_index":4477,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["componentportal",{"_index":3869,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["componentportal(component",{"_index":3909,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["componentref",{"_index":1856,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["componentref.setinput('data",{"_index":1858,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["components",{"_index":479,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{},"overview.html":{}}}],["componenttype",{"_index":247,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"miscellaneous/typealiases.html":{}}}],["componenttypewrapper",{"_index":226,"title":{"interfaces/ComponentTypeWrapper.html":{}},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["computed",{"_index":1703,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["condition",{"_index":1756,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["conditionalfunction",{"_index":13,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["conditionalfunction(group.value",{"_index":69,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["conditions",{"_index":1240,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxDisplayContentDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{},"license.html":{}}}],["config",{"_index":1892,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["config.defaultassetpaths",{"_index":2358,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["config.token.ts",{"_index":3668,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["configurable",{"_index":530,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["configuration",{"_index":37,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"miscellaneous/typealiases.html":{}}}],["configuration.allowclear",{"_index":2727,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.allowzoom",{"_index":2718,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.autoclose",{"_index":3133,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration.component",{"_index":3116,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration.defaultstate",{"_index":2744,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.markertypes.view",{"_index":2710,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.markertypes?.edit",{"_index":2728,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.markertypes?.view",{"_index":2708,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.mode",{"_index":2697,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.role",{"_index":3176,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration.ts",{"_index":1485,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["configuration.types.ts",{"_index":1203,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["configuration.zoom?.current",{"_index":2725,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.zoom?.levels",{"_index":2721,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration?.autoclose",{"_index":3132,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration?.closeonnavigation",{"_index":3164,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration?.direction",{"_index":3157,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration?.role",{"_index":3146,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configurationvalue",{"_index":3089,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configure",{"_index":2895,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["configured",{"_index":3059,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["connect",{"_index":4044,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["connectedposition",{"_index":3866,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["connection",{"_index":4880,"title":{},"body":{"index.html":{},"license.html":{}}}],["consent",{"_index":1586,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["consentchanged",{"_index":1588,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["console.error",{"_index":824,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourStepComponent.html":{}}}],["console.error('ngxforms",{"_index":1943,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["console.error('something",{"_index":2325,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["console.error(res.message",{"_index":2409,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["console.warn",{"_index":428,"title":{},"body":{"directives/FormAccessorContainer.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["console.warn('browser",{"_index":4348,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["const",{"_index":42,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["constructor",{"_index":949,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["constructor(@inject('store",{"_index":3450,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["constructor(createdstore",{"_index":3438,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["constructor(httpbackend",{"_index":2375,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["constructor(private",{"_index":3556,"title":{},"body":{"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["constructor(selectors",{"_index":3623,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["constructorparameters",{"_index":1385,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["constructs",{"_index":1149,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["consult",{"_index":4765,"title":{},"body":{"index.html":{}}}],["container",{"_index":856,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["container(s",{"_index":888,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["container.directive",{"_index":927,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["container.directive.ts",{"_index":884,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["container.directive.ts:15",{"_index":894,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["container.directive.ts:20",{"_index":897,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["container.index",{"_index":930,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["container.ts",{"_index":365,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:18",{"_index":407,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:23",{"_index":413,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:33",{"_index":391,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:47",{"_index":397,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:59",{"_index":401,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:75",{"_index":398,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:85",{"_index":376,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container/form",{"_index":364,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["containers",{"_index":901,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["containing",{"_index":4216,"title":{},"body":{"classes/NgxValidators.html":{}}}],["contains",{"_index":2458,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["content",{"_index":512,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"miscellaneous/typealiases.html":{}}}],["content.component.ts",{"_index":1736,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["content.component.ts:11",{"_index":1739,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["content.directive",{"_index":4690,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["content.directive.ts",{"_index":1755,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:118",{"_index":1774,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:168",{"_index":1775,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:179",{"_index":1779,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:214",{"_index":1776,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:223",{"_index":1789,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:237",{"_index":1787,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:277",{"_index":1783,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:36",{"_index":1799,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:37",{"_index":1806,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:38",{"_index":1791,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:39",{"_index":1811,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:40",{"_index":1803,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:41",{"_index":1795,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:48",{"_index":1800,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:53",{"_index":1807,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:58",{"_index":1804,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:63",{"_index":1792,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:68",{"_index":1771,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:73",{"_index":1773,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:81",{"_index":1770,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.types.ts",{"_index":1742,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["content/components/display",{"_index":4686,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["content/display",{"_index":1735,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["contentchild",{"_index":1084,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["contentchild('celltmpl",{"_index":3661,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["contentchild('footertmpl",{"_index":1689,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["contentchild('headertmpl",{"_index":1692,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["contentchild>('checkboxtmpl",{"_index":4517,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('contenttmpl",{"_index":1064,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["contentchild>('detailrowtmpl",{"_index":4511,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('emptytmpl",{"_index":4513,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('headertmpl",{"_index":1070,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["contentchild>('loadingtmpl",{"_index":4515,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('openrowstatetmpl",{"_index":4523,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('radiotmpl",{"_index":4519,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('sorttmpl",{"_index":4521,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchildren",{"_index":926,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["contentchildren(ngxabstracttablecelldirective",{"_index":4509,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchildren(ngxaccessibledraganddropcontainerdirective",{"_index":914,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["contentcustom",{"_index":4695,"title":{},"body":{"components/TestOverrideDisplayContentComponent.html":{}}}],["contenttemplate",{"_index":1018,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["context",{"_index":1146,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["continue",{"_index":3880,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["contract",{"_index":4876,"title":{},"body":{"index.html":{},"license.html":{}}}],["contribute",{"_index":4797,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":4796,"title":{},"body":{"index.html":{}}}],["contributors",{"_index":4814,"title":{},"body":{"index.html":{}}}],["control",{"_index":70,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["control?.value",{"_index":4586,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["controlnames",{"_index":4258,"title":{},"body":{"classes/NgxValidators.html":{}}}],["controlpaths",{"_index":4906,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["controls",{"_index":14,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["controlvalueaccessor",{"_index":2636,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["convenient",{"_index":4314,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["convert",{"_index":195,"title":{},"body":{"pipes/BtwPipe.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["converts",{"_index":189,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["converttoarray",{"_index":2098,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["converttoarray(this.permission",{"_index":2212,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["cookie",{"_index":1517,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{}}}],["cookie(s",{"_index":1998,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts",{"_index":1994,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:148",{"_index":2009,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:158",{"_index":2015,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:168",{"_index":2012,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:34",{"_index":2023,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:36",{"_index":2027,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:37",{"_index":2030,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:38",{"_index":2026,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:39",{"_index":2018,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:40",{"_index":2020,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:48",{"_index":2028,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:49",{"_index":2024,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:54",{"_index":2021,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:59",{"_index":2022,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:64",{"_index":2008,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:70",{"_index":2007,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:89",{"_index":2011,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:96",{"_index":2016,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.name",{"_index":1651,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookie.services",{"_index":2046,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.services.map((service",{"_index":2049,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.ts",{"_index":1659,"title":{},"body":{"interfaces/NgxCookieValue.html":{}}}],["cookie.value",{"_index":1652,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookie/has",{"_index":1993,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookieconsent",{"_index":1498,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"dependencies.html":{},"index.html":{}}}],["cookieconsent.acceptcategory(name",{"_index":1639,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.acceptedcategory(name",{"_index":1638,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.acceptedservice(name",{"_index":1640,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.acceptservice(name",{"_index":1641,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.getcookie('data",{"_index":1643,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.run",{"_index":1635,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.setcookiedata",{"_index":1650,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.show(true",{"_index":1642,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookies",{"_index":1549,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxHasCookieDirective.html":{},"index.html":{}}}],["cookieschanged",{"_index":1526,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieschangedsubject",{"_index":1527,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsentchanged",{"_index":1528,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsentchangedsubject",{"_index":1529,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsented",{"_index":1530,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsentedsubject",{"_index":1531,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookievalue",{"_index":1494,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["copies",{"_index":4851,"title":{},"body":{"index.html":{},"license.html":{}}}],["copy",{"_index":2173,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{},"license.html":{}}}],["copyright",{"_index":4827,"title":{},"body":{"index.html":{},"license.html":{}}}],["core",{"_index":1407,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["correct",{"_index":191,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["correctly",{"_index":1962,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["corresponding",{"_index":833,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"miscellaneous/typealiases.html":{}}}],["corresponds",{"_index":2404,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxTourItemDirective.html":{}}}],["couple",{"_index":3326,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["create",{"_index":238,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/StoreAssetsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["createaccessorproviders",{"_index":252,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["createbasestoreassets",{"_index":4358,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createcustomelement(linkcomponent",{"_index":3339,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["created",{"_index":2621,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"index.html":{}}}],["createdstore",{"_index":3441,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["createeffect",{"_index":4426,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["createentityadapterstoreassets",{"_index":4359,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createimagemakeredit",{"_index":2669,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createimagemakeredit(id",{"_index":2674,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createimagemarker",{"_index":2670,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createimagemarker(image",{"_index":2679,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarker",{"_index":2599,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["createmarkerclickedlistener",{"_index":2671,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarkerclickedlistener(marker",{"_index":2681,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarkervaluechanges",{"_index":2672,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarkervaluechanges(marker",{"_index":2685,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmodalcomponent",{"_index":3076,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["createmodalcomponent(options",{"_index":3081,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["createreadonlyimagemarker",{"_index":2673,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createreadonlyimagemarker(id",{"_index":2688,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["creates",{"_index":2615,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{}}}],["createstoreassets",{"_index":4360,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createstoreassets('state",{"_index":4439,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createstoreassets(storeslice",{"_index":4363,"title":{},"body":{"interfaces/SpecStoreAssets.html":{}}}],["currency",{"_index":536,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["currencypipe",{"_index":1670,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["current",{"_index":715,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["currentcookies",{"_index":1656,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["currentgrid",{"_index":1440,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["currentlanguage",{"_index":781,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["currentlanguagesubject",{"_index":2437,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["currently",{"_index":1605,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["currentmarker",{"_index":2589,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["currentroute",{"_index":3403,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["currentscrollposition",{"_index":4269,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["currentscrollpositionsubject",{"_index":4270,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["currentsorting",{"_index":1120,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["currentsortingevent",{"_index":4484,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["currentstep",{"_index":617,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["currentvalue",{"_index":1871,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["currentzoomlevel",{"_index":2590,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["custom",{"_index":641,"title":{},"body":{"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTourStepComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["customelements.define('ngx",{"_index":3341,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["custommessages",{"_index":777,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["cutout",{"_index":3944,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["cutoutmargin",{"_index":3924,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["cy",{"_index":1708,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["cypress",{"_index":686,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cypress/playwright",{"_index":2100,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["cypress/playwrite",{"_index":2696,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["cypressdatatags",{"_index":671,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cypressdatatagsinput",{"_index":4630,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cypressleafobject",{"_index":4909,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cypressobject",{"_index":4912,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cypresstag",{"_index":1701,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["cypresstag]'},{'name",{"_index":575,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["damages",{"_index":4874,"title":{},"body":{"index.html":{},"license.html":{}}}],["darkmode",{"_index":4355,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["darr",{"_index":3760,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["data",{"_index":28,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"miscellaneous/typealiases.html":{}}}],["data',data",{"_index":1969,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["data'},{'name",{"_index":551,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["data)formaccessor",{"_index":251,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{}}}],["data)formaccessors",{"_index":430,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["data.from",{"_index":844,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.fromlabel",{"_index":842,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.item",{"_index":840,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.itemlabel",{"_index":838,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.to",{"_index":846,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.tolabel",{"_index":845,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data[current",{"_index":3276,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["dataformaccessor",{"_index":561,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["dataformaccessors",{"_index":409,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["datasourcesubject",{"_index":487,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["datatype",{"_index":273,"title":{},"body":{"injectables/EffectsService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"miscellaneous/typealiases.html":{}}}],["date",{"_index":539,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"classes/NgxValidators.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"dependencies.html":{}}}],["dateaftermaxdate",{"_index":4991,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["datebeforemindate",{"_index":4992,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["datepipe",{"_index":1710,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["daterangeerrorcodes",{"_index":4914,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["daterangevalidator",{"_index":4196,"title":{},"body":{"classes/NgxValidators.html":{}}}],["daterangevalidator(min",{"_index":4221,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dates",{"_index":4220,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dates.validator",{"_index":4249,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dates/chronological",{"_index":4248,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dd",{"_index":4219,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dd/mm/yyyy",{"_index":1730,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["de",{"_index":4756,"title":{},"body":{"index.html":{},"license.html":{}}}],["deal",{"_index":4840,"title":{},"body":{"index.html":{},"license.html":{}}}],["dealings",{"_index":4881,"title":{},"body":{"index.html":{},"license.html":{}}}],["decimals",{"_index":4232,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercomma",{"_index":4197,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercomma(max",{"_index":4227,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercommavalidator",{"_index":4252,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercommavalidator(max",{"_index":4262,"title":{},"body":{"classes/NgxValidators.html":{}}}],["declarations",{"_index":4885,"title":{},"body":{"overview.html":{}}}],["declare",{"_index":3112,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["decorators",{"_index":315,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["deepmerge",{"_index":2384,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"dependencies.html":{}}}],["deepmerge(...response.map((item",{"_index":2429,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["default",{"_index":308,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["defaultassetpaths",{"_index":2238,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["defaultlanguage",{"_index":2239,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["defaultlayout",{"_index":2900,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["defaultlayout.footer",{"_index":2951,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["defaultlayout.header?.left",{"_index":2942,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["defaultlayout.header?.main",{"_index":2944,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["defaultlayout.header?.right",{"_index":2946,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["defaultlayout.navigation",{"_index":2948,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["defaultposition",{"_index":3790,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["defaultprojectorfn",{"_index":120,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["defaultrowopen",{"_index":4543,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["defaults",{"_index":3681,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["defaultstate",{"_index":2568,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["defaultvalue",{"_index":3086,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["define",{"_index":1429,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["defined",{"_index":187,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["definedcolumns",{"_index":4500,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["defines",{"_index":3671,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["delay",{"_index":3140,"title":{},"body":{"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["delete",{"_index":161,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["delete(url",{"_index":1144,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["denis",{"_index":207,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/NgxI18nService.html":{},"index.html":{}}}],["depend",{"_index":4241,"title":{},"body":{"classes/NgxValidators.html":{}}}],["depended",{"_index":4239,"title":{},"body":{"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{}}}],["dependedcontrol",{"_index":4242,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedcontrolkey",{"_index":4236,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequired",{"_index":4198,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequired(controls",{"_index":4235,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequiredvalidator",{"_index":4255,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequiredvalidator(controls",{"_index":4261,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependencies",{"_index":4710,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":239,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["depending",{"_index":1284,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["depends",{"_index":1665,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{},"injectables/NgxWindowService.html":{}}}],["deprecated",{"_index":418,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["deps",{"_index":2363,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["depth",{"_index":4763,"title":{},"body":{"index.html":{}}}],["descendants",{"_index":915,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["descending",{"_index":1119,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"miscellaneous/enumerations.html":{}}}],["describedby",{"_index":862,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipDirective.html":{}}}],["describedbyid",{"_index":3068,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["describes",{"_index":639,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["describing",{"_index":919,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["description",{"_index":96,"title":{},"body":{"classes/BaseFormAccessor.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreStateService.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/functions.html":{}}}],["descriptions",{"_index":3067,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["deselect",{"_index":4559,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["deselected",{"_index":835,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["destroy",{"_index":399,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["destroyed",{"_index":368,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["destroyedsubject",{"_index":943,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["destruction",{"_index":2150,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["detail",{"_index":2535,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["detailed",{"_index":4792,"title":{},"body":{"index.html":{}}}],["detailrowtemplate",{"_index":4510,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["details",{"_index":1052,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["detailselement",{"_index":1019,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["detailselement?.nativeelement",{"_index":1100,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["detect",{"_index":1848,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["detectchanges",{"_index":1845,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["detected",{"_index":3262,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["detection",{"_index":3035,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["detector",{"_index":2133,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxWindowService.html":{}}}],["determine",{"_index":4533,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["developers",{"_index":4771,"title":{},"body":{"index.html":{}}}],["dialog",{"_index":3008,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{},"miscellaneous/typealiases.html":{}}}],["dialogref",{"_index":3144,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentinstance",{"_index":3168,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentref.setinput",{"_index":3169,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentref.setinput('ariadescribedby",{"_index":3172,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentref.setinput('arialabelledby",{"_index":3173,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogservice",{"_index":3073,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["direction",{"_index":700,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["direction.enum",{"_index":717,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{}}}],["direction.enum.ts",{"_index":4734,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directions",{"_index":4655,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["directive",{"_index":292,"title":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["directives",{"_index":294,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"overview.html":{}}}],["directly",{"_index":3542,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["dirty",{"_index":387,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"miscellaneous/typealiases.html":{}}}],["disable",{"_index":2957,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["disablebackdrop",{"_index":3942,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["disableclose",{"_index":3152,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["disabled",{"_index":301,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["dismiss",{"_index":3053,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["dispatch",{"_index":2286,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["dispatchdatatosignalstore",{"_index":3480,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["dispatchdatatostore",{"_index":4409,"title":{},"body":{"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["dispatchdatatostore(actions.data",{"_index":4446,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["dispatchdatatostore(actions.iscompleted",{"_index":4451,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["dispatches",{"_index":3847,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["dispatching",{"_index":3235,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["dispatchtranslationloaderaction",{"_index":2276,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["dispatchtranslationloaderaction(action",{"_index":2283,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["display",{"_index":1725,"title":{},"body":{"components/NgxDateTableCellComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["displaycontent",{"_index":1757,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["displaycontent]'},{'name",{"_index":578,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["displaycontentarialive",{"_index":1758,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["displaycontentconfiguration",{"_index":1759,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["displayed",{"_index":2880,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["dispose",{"_index":2003,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["disposition').split('.')[1",{"_index":1195,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["distinctuntilchanged",{"_index":1274,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["distribute",{"_index":4847,"title":{},"body":{"index.html":{},"license.html":{}}}],["docs",{"_index":3000,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalBaseOptions.html":{}}}],["docs](https://developer.mozilla.org/en",{"_index":3013,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["document",{"_index":1502,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["document.createelement('p",{"_index":852,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["document.getelementbyid(arialabelledby",{"_index":2993,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["document:keydown.escape",{"_index":629,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["document?.activeelement",{"_index":4140,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["documentation",{"_index":1571,"title":{},"body":{"injectables/NgxCookieService.html":{},"index.html":{},"license.html":{}}}],["doesn't",{"_index":3704,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["dom",{"_index":480,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["domain",{"_index":1486,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["domparser",{"_index":3367,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["domsanitizer",{"_index":3363,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["don't",{"_index":236,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/TableCellTemplate.html":{}}}],["done",{"_index":1934,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["dossoine",{"_index":4816,"title":{},"body":{"index.html":{}}}],["dot",{"_index":3702,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"dependencies.html":{}}}],["down",{"_index":954,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{}}}],["download",{"_index":1138,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["download(url",{"_index":1156,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["downloading",{"_index":1159,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["drag",{"_index":773,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["draganddropservice",{"_index":902,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["draggable",{"_index":765,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["draw",{"_index":2678,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["drop",{"_index":733,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["drop.service.ts",{"_index":770,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:119",{"_index":795,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:161",{"_index":810,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:20",{"_index":790,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:25",{"_index":806,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:32",{"_index":784,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:39",{"_index":803,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.types.ts",{"_index":868,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["drop/drag",{"_index":732,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["drop/has",{"_index":2164,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["due",{"_index":3360,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["dummy",{"_index":2261,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["duplicate",{"_index":2816,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["duplicatequery",{"_index":2818,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["duplicatequery[0",{"_index":2820,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["duplicatequery[1",{"_index":2821,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["during",{"_index":3966,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["dynamic",{"_index":4714,"title":{},"body":{"dependencies.html":{}}}],["dynamically",{"_index":4667,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["e.g",{"_index":3052,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["each",{"_index":431,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["earlier",{"_index":1847,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["early",{"_index":821,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["easier",{"_index":2898,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["easy",{"_index":1132,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["edit",{"_index":2555,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["editable",{"_index":672,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["editableinput",{"_index":4631,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["editabletablecellrecord",{"_index":4490,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["effect",{"_index":973,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["effectactions",{"_index":4917,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["effects",{"_index":126,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effects.service",{"_index":4435,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["effectsinterface['add",{"_index":289,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsinterface['delete",{"_index":291,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsinterface['set",{"_index":140,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsinterface['update",{"_index":290,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsservice",{"_index":260,"title":{"injectables/EffectsService.html":{}},"body":{"injectables/EffectsService.html":{},"injectables/StoreEffects.html":{}}}],["ekinci",{"_index":4820,"title":{},"body":{"index.html":{}}}],["element",{"_index":516,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"miscellaneous/typealiases.html":{}}}],["element.focus",{"_index":4139,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["element.innertext",{"_index":857,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["element.setattribute('id",{"_index":858,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["elementid",{"_index":618,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["elementref",{"_index":740,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["elements",{"_index":691,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{}}}],["elements.pipe.ts",{"_index":3306,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.pipe.ts:15",{"_index":3314,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.pipe.ts:16",{"_index":3317,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.pipe.ts:24",{"_index":3309,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.types.ts",{"_index":3297,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"miscellaneous/typealiases.html":{}}}],["elements/replace",{"_index":3305,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elsetemplateref",{"_index":2000,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["elseviewref",{"_index":2071,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["embeddedviewref",{"_index":2089,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["emit",{"_index":349,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["emitdatatype",{"_index":3012,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["emitevent",{"_index":437,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{},"interfaces/TableCellTemplate.html":{}}}],["emits",{"_index":651,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["emitted",{"_index":3010,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxStorageService.html":{},"miscellaneous/typealiases.html":{}}}],["emitter",{"_index":2980,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["emitting",{"_index":4671,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["emitvalueonsingleitem",{"_index":3678,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["empty",{"_index":64,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["empty'},{'name",{"_index":542,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["emptydata",{"_index":4483,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["emptylabel",{"_index":1715,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["emptytemplate",{"_index":4512,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["emsens",{"_index":4822,"title":{},"body":{"index.html":{}}}],["en",{"_index":410,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["enabled",{"_index":1615,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["encountered",{"_index":1839,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["end",{"_index":1025,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["endcontrol",{"_index":4214,"title":{},"body":{"classes/NgxValidators.html":{}}}],["endcontrolkey",{"_index":4209,"title":{},"body":{"classes/NgxValidators.html":{}}}],["ended",{"_index":4292,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["enhancement",{"_index":4811,"title":{},"body":{"index.html":{}}}],["ensures",{"_index":1361,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["enter",{"_index":329,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["entering",{"_index":3883,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["entire",{"_index":2896,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["entity",{"_index":285,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystate",{"_index":163,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["entitystatus",{"_index":172,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["entitystoreaction",{"_index":3615,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystoreactions",{"_index":282,"title":{"interfaces/EntityStoreActions.html":{}},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["entitystoreassets",{"_index":286,"title":{"interfaces/EntityStoreAssets.html":{}},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/typealiases.html":{}}}],["entitystoreassetsgeneratoroptions",{"_index":155,"title":{"interfaces/EntityStoreAssetsGeneratorOptions.html":{}},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystoreeffectsinterface",{"_index":284,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["entitystoreselector",{"_index":3612,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystoreselectors",{"_index":287,"title":{"interfaces/EntityStoreSelectors.html":{}},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["enum",{"_index":4709,"title":{},"body":{"interfaces/TranslationLoaderActionEntity.html":{}}}],["enumerations",{"_index":4732,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":3757,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["enums/sort",{"_index":716,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{}}}],["environment",{"_index":2127,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["equal",{"_index":1450,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"miscellaneous/typealiases.html":{}}}],["equiv",{"_index":3758,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["error",{"_index":68,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"miscellaneous/typealiases.html":{}}}],["error'},{'name",{"_index":553,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["error('this",{"_index":4444,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["errorcomponent",{"_index":1893,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["errordata",{"_index":4691,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["errorinterface",{"_index":116,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["errorkeys",{"_index":1877,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["errorkeys',errorkeys",{"_index":1968,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["errormessage",{"_index":113,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["errors",{"_index":86,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["errors',errors",{"_index":1967,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["errorselement",{"_index":1894,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["escape",{"_index":646,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["eslint",{"_index":2956,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxSignalStoreService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["eslint/no",{"_index":2960,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["eslint/prefer",{"_index":3449,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["essence",{"_index":3002,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["essential",{"_index":2536,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["essentially",{"_index":2693,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["etc",{"_index":4788,"title":{},"body":{"index.html":{}}}],["eur",{"_index":1688,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["even",{"_index":3953,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["event",{"_index":311,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{},"license.html":{}}}],["event.active",{"_index":3920,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["event.direction",{"_index":4654,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["event.preventdefault",{"_index":1087,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["event.returnvalue",{"_index":3432,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["event.stopimmediatepropagation",{"_index":1088,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["event.stoppropagation",{"_index":4127,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["event.ts",{"_index":3747,"title":{},"body":{"interfaces/NgxTableSortEvent.html":{}}}],["eventemitter",{"_index":445,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["eventhandler",{"_index":353,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["eventlisteners",{"_index":2840,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["events",{"_index":345,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["eventtype",{"_index":1441,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["example",{"_index":200,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"pipes/TransformPipe.html":{}}}],["exceeded",{"_index":4230,"title":{},"body":{"classes/NgxValidators.html":{}}}],["execute",{"_index":325,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["executed",{"_index":348,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["exist",{"_index":1419,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxStorageService.html":{}}}],["existing",{"_index":723,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxStorageService.html":{}}}],["exists",{"_index":234,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["exit",{"_index":822,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["exit.component.abstract",{"_index":3402,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit.component.abstract.ts",{"_index":3405,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:12",{"_index":3411,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:22",{"_index":3429,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:27",{"_index":3428,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:33",{"_index":3421,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:38",{"_index":3417,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:43",{"_index":3418,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:45",{"_index":3420,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.service.abstract.ts",{"_index":3393,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit.service.abstract.ts:10",{"_index":3399,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit.service.abstract.ts:15",{"_index":3396,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit/save",{"_index":3392,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["exits",{"_index":3577,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["expandablerows",{"_index":4160,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["expanded",{"_index":4612,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["expiresafterdays",{"_index":1487,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["explaining",{"_index":797,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["explanations",{"_index":4793,"title":{},"body":{"index.html":{}}}],["explicitly",{"_index":2968,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["export",{"_index":27,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["exportas",{"_index":890,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["exported",{"_index":167,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"classes/NgxValidators.html":{}}}],["exports",{"_index":2359,"title":{},"body":{"modules/NgxI18nModule.html":{},"overview.html":{}}}],["exposes",{"_index":2786,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxWindowService.html":{}}}],["express",{"_index":4861,"title":{},"body":{"index.html":{},"license.html":{}}}],["expresses",{"_index":1600,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["extend",{"_index":3046,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["extended",{"_index":2716,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["extender",{"_index":3658,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["extends",{"_index":171,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["external",{"_index":3325,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["extra",{"_index":982,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["extract",{"_index":3609,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["extraction",{"_index":4972,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["extracts",{"_index":3471,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["extractstoreassettype",{"_index":4918,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["extras",{"_index":3932,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["facilitate",{"_index":4769,"title":{},"body":{"index.html":{}}}],["failed",{"_index":2294,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["fall",{"_index":2969,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["fallback",{"_index":1664,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"modules/NgxI18nModule.html":{},"injectables/NgxMobileLayoutService.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"miscellaneous/functions.html":{}}}],["fallback.component.ts",{"_index":1662,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["fallback.component.ts:13",{"_index":1666,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["fallback/cookie",{"_index":1661,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["fallbackcomponent",{"_index":2014,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["fallbacks",{"_index":1738,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["fallbacktemplate",{"_index":2013,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["fallbacktranslationloader",{"_index":2362,"title":{},"body":{"modules/NgxI18nModule.html":{},"miscellaneous/functions.html":{}}}],["fallbacktranslationloader(http",{"_index":2355,"title":{},"body":{"modules/NgxI18nModule.html":{},"miscellaneous/functions.html":{}}}],["false",{"_index":81,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["falsy",{"_index":208,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["faulty",{"_index":4560,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["feat(package",{"_index":4809,"title":{},"body":{"index.html":{}}}],["feat/package/feature",{"_index":4802,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1227,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"injectables/NgxI18nService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["feature(s",{"_index":2066,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["feature.directive.ts",{"_index":2064,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:116",{"_index":2082,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:123",{"_index":2083,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:175",{"_index":2081,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:33",{"_index":2094,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:37",{"_index":2097,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:41",{"_index":2085,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:47",{"_index":2086,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:52",{"_index":2087,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:57",{"_index":2095,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:58",{"_index":2096,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:59",{"_index":2088,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:60",{"_index":2090,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:65",{"_index":2091,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:70",{"_index":2093,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:75",{"_index":2092,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:80",{"_index":2078,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:85",{"_index":2079,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:90",{"_index":2080,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:95",{"_index":2077,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.pipe.ts",{"_index":2119,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:16",{"_index":2129,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:17",{"_index":2130,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:22",{"_index":2137,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:26",{"_index":2138,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:31",{"_index":2131,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:40",{"_index":2121,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:53",{"_index":2126,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:64",{"_index":2123,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:88",{"_index":2120,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature/has",{"_index":2063,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["features",{"_index":1225,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFeatureDirective.html":{}}}],["featuretype",{"_index":1228,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["femke",{"_index":4823,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":825,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{}}}],["fetchchannel",{"_index":263,"title":{},"body":{"injectables/EffectsService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["fetchchannel(ispublic",{"_index":265,"title":{},"body":{"injectables/EffectsService.html":{}}}],["fetched",{"_index":2398,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxStorageService.html":{}}}],["fetches",{"_index":2288,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["fetching",{"_index":2329,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["fetchpath",{"_index":2399,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["fetchvideos",{"_index":264,"title":{},"body":{"injectables/EffectsService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["fetchvideos(id",{"_index":269,"title":{},"body":{"injectables/EffectsService.html":{}}}],["field",{"_index":4202,"title":{},"body":{"classes/NgxValidators.html":{}}}],["fields",{"_index":4203,"title":{},"body":{"classes/NgxValidators.html":{}}}],["figured",{"_index":2174,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxImageMarkerComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["files",{"_index":2249,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"index.html":{},"license.html":{}}}],["filetype",{"_index":1193,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["fill",{"_index":1449,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"miscellaneous/typealiases.html":{}}}],["filled",{"_index":33,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["filling",{"_index":1468,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["filter",{"_index":812,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["filter(([action",{"_index":3124,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["filter((queryid",{"_index":2837,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["filter((translation",{"_index":2423,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["filter(boolean",{"_index":828,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["filtered",{"_index":3216,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["filters",{"_index":3231,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["filtersform",{"_index":3245,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["finalize",{"_index":2548,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxModalService.html":{}}}],["find",{"_index":1000,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{}}}],["find/replace",{"_index":3370,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["findfocusableelement",{"_index":4063,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["findindex",{"_index":4549,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["fired",{"_index":3025,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["first",{"_index":955,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["firstcookiesconsented",{"_index":1532,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["firstcookiesconsentedsubject",{"_index":1533,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["fit",{"_index":1448,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"miscellaneous/typealiases.html":{}}}],["fitness",{"_index":4866,"title":{},"body":{"index.html":{},"license.html":{}}}],["fix",{"_index":4806,"title":{},"body":{"index.html":{}}}],["fix(package",{"_index":4808,"title":{},"body":{"index.html":{}}}],["fix/package/feature",{"_index":4801,"title":{},"body":{"index.html":{}}}],["flag",{"_index":750,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["flatten",{"_index":2031,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["flatten(hascookies).every((hascookie",{"_index":2052,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["flexibleconnectedto(elementref",{"_index":3904,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["flip",{"_index":3742,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["flow",{"_index":1801,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["flows",{"_index":885,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["flyout",{"_index":2853,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["flyoutanimationduration",{"_index":2863,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{}}}],["flyoutclass",{"_index":2870,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["flyoutstate",{"_index":2901,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["flyoutstatesubject",{"_index":2902,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["fn",{"_index":4591,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["fns",{"_index":4718,"title":{},"body":{"dependencies.html":{}}}],["focus",{"_index":330,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["focus.directive",{"_index":768,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["focus.directive.ts",{"_index":2157,"title":{},"body":{"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:13",{"_index":2163,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:15",{"_index":2172,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:18",{"_index":2160,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:20",{"_index":2166,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:25",{"_index":2159,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:31",{"_index":2165,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:34",{"_index":2161,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:39",{"_index":2171,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:41",{"_index":2167,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:43",{"_index":2162,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:45",{"_index":2169,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:47",{"_index":2170,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:54",{"_index":2168,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focusable",{"_index":4097,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["focusableelement",{"_index":4133,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["focusclick",{"_index":299,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["focusclick]'},{'name",{"_index":562,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["focusclickdirective",{"_index":293,"title":{"directives/FocusClickDirective.html":{}},"body":{"directives/FocusClickDirective.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["focused",{"_index":3041,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["focussed",{"_index":754,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["focussedcell",{"_index":4506,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["focussedrow",{"_index":4505,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["following",{"_index":2408,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["footer",{"_index":1691,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["footertemplate",{"_index":673,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["force",{"_index":2248,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["forchild",{"_index":2335,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["forchild(translationloader",{"_index":2336,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["foreach((marker",{"_index":2757,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["forkjoin",{"_index":2386,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["forkjoin(requestedtranslations).pipe",{"_index":2419,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["form",{"_index":382,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["form.accessor",{"_index":417,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["form.accessor.ts",{"_index":95,"title":{},"body":{"classes/BaseFormAccessor.html":{}}}],["form/base",{"_index":94,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{}}}],["formaccessor",{"_index":563,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["formaccessorcontainer",{"_index":361,"title":{"directives/FormAccessorContainer.html":{}},"body":{"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["formaccessorcontrolsentity",{"_index":4920,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["formaccessors",{"_index":411,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxImageMarkerComponent.html":{}}}],["format",{"_index":192,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"classes/NgxValidators.html":{}}}],["formcontainer",{"_index":100,"title":{},"body":{"classes/BaseFormAccessor.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{}}}],["formcontrol",{"_index":1428,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["formgenerated",{"_index":4481,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["formgroup",{"_index":20,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["formgroupdirective",{"_index":1895,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["formgroupname",{"_index":1922,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["formnamedirective",{"_index":1896,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["formrecord",{"_index":4466,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["forms",{"_index":404,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"index.html":{}}}],["formstateoptionsentity",{"_index":390,"title":{"interfaces/FormStateOptionsEntity.html":{}},"body":{"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{}}}],["formtype",{"_index":3207,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["forroot",{"_index":2341,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["forroot(config",{"_index":2342,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["forwardref",{"_index":242,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["found",{"_index":426,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["free",{"_index":4835,"title":{},"body":{"index.html":{},"license.html":{}}}],["friendly",{"_index":337,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["fromevent",{"_index":1408,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxOnlineService.html":{}}}],["fromevent(window",{"_index":3186,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["fromevent>(this.broadcastchannel[channelname",{"_index":1423,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["fromstore",{"_index":2392,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["frontend",{"_index":3703,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["function",{"_index":15,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/IbanPipe.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"modules/NgxI18nModule.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxModalBaseOptions.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/typealiases.html":{}}}],["functional",{"_index":108,"title":{},"body":{"classes/BaseFormAccessor.html":{}}}],["functionalities",{"_index":4789,"title":{},"body":{"index.html":{}}}],["functions",{"_index":798,"title":{"miscellaneous/functions.html":{}},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["furnished",{"_index":4854,"title":{},"body":{"index.html":{},"license.html":{}}}],["gdpr",{"_index":3239,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["generate",{"_index":253,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["generated",{"_index":3453,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["generatengxtableform",{"_index":4468,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["generatengxtableform(this.rowsformgroup",{"_index":4554,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["generates",{"_index":248,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["generator",{"_index":148,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/typealiases.html":{}}}],["generator.ts",{"_index":3599,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["generator.types",{"_index":3466,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["generator.types.ts",{"_index":4897,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["generic",{"_index":1679,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"miscellaneous/typealiases.html":{}}}],["get(selectablekey",{"_index":4648,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["get(url",{"_index":1160,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["getauthenticationresponse",{"_index":1253,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getavailablelanguages",{"_index":2516,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["getchannel",{"_index":4374,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["getcomponent",{"_index":2907,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["getcomponent(component",{"_index":2912,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["getcontainer",{"_index":903,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["getcontainer(index",{"_index":905,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["getcookie",{"_index":1538,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcookie(cookie",{"_index":1553,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcookieobservable",{"_index":1539,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcookieobservable(cookie",{"_index":1555,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcurrentlanguage",{"_index":805,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["getdefaultlanguage",{"_index":2518,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["getelementid",{"_index":3979,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["geterrors",{"_index":1897,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["geterrors(data",{"_index":1901,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["getfirstrow",{"_index":4151,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["getitem",{"_index":3486,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["getitem(key",{"_index":3516,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getitemobservable",{"_index":3487,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["getitemobservable(key",{"_index":3518,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getlastrow",{"_index":4152,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["getlocalstorage",{"_index":3536,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getmatchingquery",{"_index":2790,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["getmatchingquery$(id",{"_index":2796,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["getmessagerecord",{"_index":809,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["getmetadata",{"_index":1318,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getnewlanguage",{"_index":2439,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["getnewlanguage(language",{"_index":2444,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["getprop",{"_index":1713,"title":{},"body":{"components/NgxDateTableCellComponent.html":{},"pipes/NgxTableGetPipe.html":{}}}],["getproperty",{"_index":3701,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["getproperty(value",{"_index":3708,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["getrow",{"_index":4153,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["getrow(index",{"_index":4164,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["gets",{"_index":332,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["getsession",{"_index":1254,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getsessionstorage",{"_index":3538,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getstate",{"_index":3443,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{}}}],["getting",{"_index":4749,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettranslation",{"_index":2374,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{}}}],["gettranslation(key",{"_index":2500,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["gettranslation(lang",{"_index":2380,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["gettranslationobservable",{"_index":2498,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["gettranslationobservable(key",{"_index":2503,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["gettranslations",{"_index":2277,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nService.html":{}}}],["getuser",{"_index":1315,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getvalue",{"_index":2491,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{}}}],["getvalue(configurationvalue",{"_index":3084,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["getvideos",{"_index":4375,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["getvideos(actiontype",{"_index":4381,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["give",{"_index":3985,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["given",{"_index":4704,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["global",{"_index":1270,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["globalfeatures",{"_index":1339,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["globalfeaturessubject",{"_index":1250,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["globally",{"_index":3669,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["go",{"_index":999,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridDirective.html":{}}}],["grab",{"_index":1472,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["grabs",{"_index":3529,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["granted",{"_index":4834,"title":{},"body":{"index.html":{},"license.html":{}}}],["graph",{"_index":4882,"title":{},"body":{"modules.html":{}}}],["grid",{"_index":1463,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["grid.cell.directive",{"_index":4178,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.cell.directive.ts",{"_index":4058,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:102",{"_index":4089,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:109",{"_index":4087,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:116",{"_index":4081,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:121",{"_index":4082,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:126",{"_index":4098,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:143",{"_index":4106,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:152",{"_index":4095,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:174",{"_index":4110,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:24",{"_index":4115,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:27",{"_index":4113,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:32",{"_index":4116,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:37",{"_index":4084,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:53",{"_index":4085,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:60",{"_index":4086,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:67",{"_index":4083,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:74",{"_index":4092,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:81",{"_index":4090,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:88",{"_index":4088,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:95",{"_index":4091,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.directive",{"_index":4119,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.directive.ts",{"_index":4147,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:19",{"_index":4177,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:21",{"_index":4161,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:26",{"_index":4158,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:31",{"_index":4159,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:38",{"_index":4173,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:47",{"_index":4175,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:56",{"_index":4165,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:69",{"_index":4162,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:76",{"_index":4163,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:85",{"_index":4167,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:94",{"_index":4170,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:98",{"_index":4168,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.types.ts",{"_index":4944,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grid/tree",{"_index":4057,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["group",{"_index":45,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["groups",{"_index":472,"title":{},"body":{"pipes/IbanPipe.html":{},"injectables/NgxI18nLoadingService.html":{}}}],["guard",{"_index":2539,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"classes/NgxSaveOnExitAbstractService.html":{}}}],["guards",{"_index":1239,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["guided",{"_index":4784,"title":{},"body":{"index.html":{}}}],["guioptions",{"_index":1495,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["handle",{"_index":57,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{}}}],["handleaccessorsaction",{"_index":370,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleaccessorsaction(action",{"_index":375,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handlecomponentrender",{"_index":1898,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handlecomponentrender(shouldshow",{"_index":1903,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handlecontentscroll",{"_index":4276,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["handlecurrentsort(event",{"_index":4651,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handledatachanges",{"_index":3195,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledatachanges(data",{"_index":3202,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledatachanges(value",{"_index":3252,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledatachanges?(data",{"_index":3292,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledirtystate",{"_index":3395,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["handleeffect",{"_index":4428,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["handleeffect(actions.videos",{"_index":4431,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["handleformaccessormarkasdirty",{"_index":414,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessormarkasdirty(form",{"_index":420,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessormarkastouched",{"_index":415,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessormarkastouched(form",{"_index":422,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessorupdatevalueandvalidity",{"_index":416,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleinteraction",{"_index":619,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["handlengxtableheadervaluechanges",{"_index":4469,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlengxtableheadervaluechanges(this.rowsformgroup",{"_index":4684,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlengxtablevaluechanges",{"_index":4470,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlenocomponentflow",{"_index":1899,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handlenocomponentflow(shouldshow",{"_index":1907,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handler",{"_index":338,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["handlerowclicked(row",{"_index":4603,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlerowcolumns",{"_index":4659,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlerowstate(index",{"_index":4613,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlers",{"_index":1213,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["handles",{"_index":696,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["handlesort",{"_index":678,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["handlesort(column",{"_index":4641,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handletablecelltemplates",{"_index":4621,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handleunloadevent",{"_index":3407,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["handleunloadevent(event",{"_index":3414,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["handleurl",{"_index":1139,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["handleurl(url",{"_index":1162,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["handlewhenfocussed",{"_index":743,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["handlewhenfocussed(action",{"_index":757,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["handling",{"_index":254,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["happens",{"_index":3205,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["hasacceptedcategory",{"_index":1540,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasacceptedcategory(name",{"_index":1557,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasacceptedservice",{"_index":1541,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasacceptedservice(category",{"_index":1561,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasactivemodal",{"_index":3074,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasauthenticated",{"_index":1251,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["hasbackdrop",{"_index":3022,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["haschanges",{"_index":2641,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["hascookie",{"_index":1999,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["hascookie]'},{'name",{"_index":584,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["hascookieelse",{"_index":2001,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["hasdependedrequirederror",{"_index":4240,"title":{},"body":{"classes/NgxValidators.html":{}}}],["hasdocument",{"_index":4277,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["hasfeature",{"_index":1255,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["hasfeature(converttoarray(this.feature",{"_index":2112,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["hasfeature(requiredfeatures",{"_index":1285,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["hasfocus",{"_index":741,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hasfootertemplates",{"_index":4502,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["hasmodal",{"_index":3139,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasmodalsubject",{"_index":3075,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasnext",{"_index":4014,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["hasobservers",{"_index":443,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["hasobserverspipe",{"_index":439,"title":{"pipes/HasObserversPipe.html":{}},"body":{"pipes/HasObserversPipe.html":{}}}],["hasone",{"_index":79,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["hasonekey",{"_index":77,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["haspermission",{"_index":1256,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["haspermission(requiredpermissions",{"_index":1289,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["hasprevious",{"_index":4012,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["hasrequireddescription",{"_index":3077,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasrequireddescription(options",{"_index":3090,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["header",{"_index":1072,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["header.pipe.ts",{"_index":3732,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["header.pipe.ts:18",{"_index":3735,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["header/show",{"_index":3731,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["headercontrol",{"_index":4498,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["headertemplate",{"_index":674,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["heirstrate",{"_index":4818,"title":{},"body":{"index.html":{}}}],["hello",{"_index":494,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/NgxStorageService.html":{}}}],["helpers",{"_index":3695,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["helpers.ts",{"_index":4956,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["hence",{"_index":4494,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["here",{"_index":1344,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{}}}],["hereby",{"_index":4833,"title":{},"body":{"index.html":{},"license.html":{}}}],["hidden",{"_index":3741,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["hide",{"_index":863,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["hideelement",{"_index":820,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["hideelement(element",{"_index":864,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["hidefrombots",{"_index":1515,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["hideheaderrowoption",{"_index":3683,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["hideheaderrowoptions",{"_index":3686,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["hideheaderrowwhen",{"_index":3734,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["hideheaderwhen",{"_index":3680,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["hides/renders",{"_index":2017,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["hidewhennotemplateprovided",{"_index":1743,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["highest",{"_index":1867,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["highlight",{"_index":3935,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["highlighted",{"_index":3949,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["highlightkey",{"_index":3682,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["hold",{"_index":968,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxCookieService.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["holder",{"_index":486,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/NgxCookieService.html":{}}}],["holder'},{'name",{"_index":519,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["holder.component.mock.ts",{"_index":483,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:14",{"_index":500,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:16",{"_index":498,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:18",{"_index":495,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:22",{"_index":490,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holders",{"_index":4871,"title":{},"body":{"index.html":{},"license.html":{}}}],["holding",{"_index":1402,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["holds",{"_index":1793,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxStoreService.html":{}}}],["home",{"_index":1026,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["host",{"_index":334,"title":{},"body":{"directives/FocusClickDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["host.directive.ts",{"_index":898,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:19",{"_index":922,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:20",{"_index":924,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:25",{"_index":925,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:30",{"_index":916,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:35",{"_index":918,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:42",{"_index":908,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:51",{"_index":906,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:55",{"_index":911,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:62",{"_index":913,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["hostbinding",{"_index":3981,"title":{},"body":{"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["hostbinding('attr.role",{"_index":4176,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["hostbinding('class",{"_index":656,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["hostbinding('class.ngx",{"_index":3977,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["hostbindings",{"_index":628,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["hostdirective",{"_index":738,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["hostlistener",{"_index":340,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('blur",{"_index":761,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('click",{"_index":316,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["hostlistener('document:keydown.escape",{"_index":649,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["hostlistener('focus",{"_index":762,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowdown",{"_index":1041,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowleft",{"_index":4100,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowright",{"_index":4101,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowup",{"_index":1043,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.control.end",{"_index":4102,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.control.home",{"_index":4108,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.end",{"_index":1044,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.enter",{"_index":318,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["hostlistener('keydown.home",{"_index":1049,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.pagedown",{"_index":4109,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.pageup",{"_index":4107,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('mouseenter",{"_index":3778,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["hostlistener('mouseleave",{"_index":3777,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["hostlistener('window:beforeunload",{"_index":3416,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["hostlisteners",{"_index":305,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hover",{"_index":3812,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["html",{"_index":515,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["htmlelement",{"_index":794,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["htmlimageelement",{"_index":2675,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["htmlparagraphelement",{"_index":851,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["http",{"_index":1125,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"modules/NgxI18nModule.html":{},"miscellaneous/functions.html":{}}}],["httpbackend",{"_index":2337,"title":{},"body":{"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"miscellaneous/functions.html":{}}}],["httpclient",{"_index":1130,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/SpecStoreService.html":{}}}],["httpclient(this.httpbackend).get(fetchpath).pipe",{"_index":2402,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["httpclientconfiguration",{"_index":1216,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["httpcontext",{"_index":1147,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["httperrorresponse",{"_index":117,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["httphandler",{"_index":4748,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httphandlerfn",{"_index":4746,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httpinterceptorfn",{"_index":1209,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["httprequest",{"_index":1210,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"miscellaneous/functions.html":{}}}],["httpresponse",{"_index":1173,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["https://cookieconsent.orestbida.com",{"_index":1524,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["https://cookieconsent.orestbida.com/essential/getting",{"_index":1572,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["https://developer.mozilla.org/en",{"_index":1370,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["https://docs.cypress.io/guides/references/best",{"_index":689,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts",{"_index":2136,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts",{"_index":2068,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["https://markerjs.com",{"_index":2585,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["https://www.w3.org/wai/aria/apg/patterns/accordion",{"_index":940,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{}}}],["https://www.w3.org/wai/aria/apg/patterns/treegrid",{"_index":4060,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["hyperdrive",{"_index":4831,"title":{},"body":{"index.html":{},"license.html":{}}}],["i18n",{"_index":541,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{}}}],["i18n.service",{"_index":2521,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["i18n.service.ts",{"_index":2434,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:120",{"_index":2451,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:129",{"_index":2445,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:17",{"_index":2460,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:22",{"_index":2465,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:27",{"_index":2463,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:34",{"_index":2459,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:41",{"_index":2457,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:48",{"_index":2464,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:53",{"_index":2443,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:65",{"_index":2462,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:71",{"_index":2466,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:80",{"_index":2453,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:98",{"_index":2447,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.types",{"_index":2348,"title":{},"body":{"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["i18n/root",{"_index":2433,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["i18nloadingservice",{"_index":2541,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["i18nservice",{"_index":2542,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ian",{"_index":4821,"title":{},"body":{"index.html":{}}}],["iban",{"_index":458,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["ibannumber",{"_index":465,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["ibanpipe",{"_index":456,"title":{"pipes/IbanPipe.html":{}},"body":{"pipes/IbanPipe.html":{}}}],["iben",{"_index":49,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["ibenvandeveire",{"_index":4751,"title":{},"body":{"index.html":{}}}],["ibenvandeveire/ngx",{"_index":1246,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"dependencies.html":{},"index.html":{}}}],["ibenvandeveire/rxjs",{"_index":4790,"title":{},"body":{"index.html":{}}}],["ibenvandeveire/types",{"_index":1321,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"dependencies.html":{}}}],["icon",{"_index":3756,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["icon.pipe.ts",{"_index":3752,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["icon.pipe.ts:15",{"_index":3755,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["icon/sort",{"_index":3751,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["id",{"_index":271,"title":{},"body":{"injectables/EffectsService.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["id={{id",{"_index":3345,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ideal",{"_index":3230,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["identifier",{"_index":3355,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["identify",{"_index":3348,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ids",{"_index":3066,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["idselector",{"_index":153,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["if(layout",{"_index":2886,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().flyout",{"_index":2891,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().footer",{"_index":2892,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().header",{"_index":2887,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().header.left",{"_index":2888,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().header.right",{"_index":2889,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().navigation",{"_index":2890,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["ignore",{"_index":344,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["ignored",{"_index":434,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["image",{"_index":544,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["imagedescription",{"_index":2591,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["imageelement",{"_index":2592,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["imagemarkerservice",{"_index":2593,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["img[data",{"_index":3346,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["implement",{"_index":2099,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["implementation",{"_index":938,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["implementations",{"_index":2468,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{}}}],["implemented",{"_index":2134,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{}}}],["implementing",{"_index":1737,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["implements",{"_index":206,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["implied",{"_index":4862,"title":{},"body":{"index.html":{},"license.html":{}}}],["import",{"_index":19,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["important",{"_index":104,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["imports",{"_index":1012,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"modules/NgxI18nModule.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["improve",{"_index":4774,"title":{},"body":{"index.html":{}}}],["in/from",{"_index":3553,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["inactive",{"_index":1465,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTourItemDirective.html":{}}}],["include",{"_index":3347,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"index.html":{}}}],["included",{"_index":1420,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{},"license.html":{}}}],["includeinnerhtml",{"_index":3298,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["including",{"_index":4842,"title":{},"body":{"index.html":{},"license.html":{}}}],["incorrectchronologicaldate",{"_index":4213,"title":{},"body":{"classes/NgxValidators.html":{}}}],["incorrectchronologicaldates",{"_index":4212,"title":{},"body":{"classes/NgxValidators.html":{}}}],["independent",{"_index":4767,"title":{},"body":{"index.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["index).concat(this.rows.slice(index",{"_index":4182,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["indexes",{"_index":986,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["indexes.foreach((index",{"_index":988,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["indicate",{"_index":1680,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["indicates",{"_index":3048,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["indicator",{"_index":3675,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["indices",{"_index":4570,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["indirectly",{"_index":3031,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["individual",{"_index":2048,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"classes/NgxValidators.html":{},"index.html":{}}}],["infinite",{"_index":4672,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["inform",{"_index":4781,"title":{},"body":{"index.html":{}}}],["information",{"_index":787,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxWindowService.html":{}}}],["informing",{"_index":3657,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["inheritdoc",{"_index":4054,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["inherited",{"_index":630,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["initchannel",{"_index":1374,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["initchannel(...args",{"_index":1384,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["initform",{"_index":3196,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["initi18n",{"_index":2499,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["initi18n(language",{"_index":2506,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["initial",{"_index":1777,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["initialdata",{"_index":3470,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["initialize",{"_index":1413,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["initializelanguage",{"_index":2440,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["initializes",{"_index":1387,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxI18nService.html":{}}}],["initiallayoutset",{"_index":2903,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["initiallayoutsetsubject",{"_index":2904,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["initially",{"_index":4142,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["initialstatevalue",{"_index":150,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{}}}],["initialvalue",{"_index":3607,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["inject",{"_index":501,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/TableCellTemplate.html":{}}}],["inject('selectors",{"_index":3638,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["inject(actions",{"_index":4422,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["inject(activatedroute",{"_index":3225,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["inject(changedetectorref",{"_index":1062,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["inject(dialog",{"_index":3100,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["inject(document",{"_index":4297,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["inject(domsanitizer",{"_index":3316,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["inject(effectsservice",{"_index":4424,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["inject(elementref",{"_index":1798,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["inject(formgroupdirective",{"_index":1920,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inject(formgroupname",{"_index":1923,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inject(httpclient",{"_index":1171,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/SpecStoreService.html":{}}}],["inject(liveannouncer",{"_index":789,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["inject(ngxaccessibledraganddropabstractservice",{"_index":921,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["inject(ngxaccordioncomponent",{"_index":1075,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["inject(ngxauthenticationservicetoken",{"_index":2128,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["inject(ngxauthenticationurlhandlertoken",{"_index":1180,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["inject(ngxcookieservice",{"_index":2025,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["inject(ngxi18nconfigurationtoken",{"_index":2356,"title":{},"body":{"modules/NgxI18nModule.html":{},"injectables/NgxI18nRootService.html":{}}}],["inject(ngxi18nloadingservice",{"_index":2378,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["inject(ngxi18nrootservice",{"_index":2508,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["inject(ngxi18nservice",{"_index":2546,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["inject(ngximagemarkerservice",{"_index":2626,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["inject(ngxmobilelayoutservice",{"_index":2881,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["inject(ngxmodalconfigurationtoken",{"_index":3098,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["inject(ngxonlineservice",{"_index":1802,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["inject(ngxreplaceelementsconfigurationtoken",{"_index":3313,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["inject(ngxtableconfigurationtoken",{"_index":4476,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["inject(ngxtooltipconfigurationtoken",{"_index":3851,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["inject(ngxtooltipservice",{"_index":3779,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["inject(ngxtourservice",{"_index":499,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["inject(ngxtreegriddirective",{"_index":4114,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["inject(ngxwindowservice",{"_index":1404,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{}}}],["inject(overlay",{"_index":3857,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["inject(overlaypositionbuilder",{"_index":3854,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["inject(platform_id",{"_index":4299,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["inject(renderer2",{"_index":1078,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["inject(router",{"_index":3227,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["inject(store",{"_index":3636,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["inject(templateref",{"_index":1929,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["inject(translateservice",{"_index":2512,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["inject(viewcontainerref",{"_index":1810,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["inject>(elementref",{"_index":923,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTourItemDirective.html":{}}}],["inject>(templateref",{"_index":1805,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["injectable",{"_index":259,"title":{"injectables/EffectsService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{}},"body":{"injectables/EffectsService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["injectables",{"_index":261,"title":{},"body":{"injectables/EffectsService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"overview.html":{}}}],["injection",{"_index":1207,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxWindowService.html":{}}}],["injectiontoken",{"_index":3685,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["injectngxsignalstore",{"_index":3448,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["injectngxsignalstore(createdstore",{"_index":3452,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["injector",{"_index":3006,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["innerhtml",{"_index":1976,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["innertext",{"_index":3349,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["input",{"_index":341,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["input('checkbox",{"_index":4532,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["input('dd/mm/yyyy",{"_index":1728,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["input('empty",{"_index":1723,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["input('eur",{"_index":1684,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["input('polite",{"_index":1796,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["input(false",{"_index":346,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["input(true",{"_index":2637,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["input(undefined",{"_index":895,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["input(uuid",{"_index":3819,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["input.required",{"_index":654,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxHasCookieDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["inputs",{"_index":304,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["inputsignal",{"_index":951,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["inputted",{"_index":4229,"title":{},"body":{"classes/NgxValidators.html":{}}}],["insert",{"_index":1978,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inside",{"_index":3037,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["install",{"_index":4761,"title":{},"body":{"index.html":{}}}],["installation",{"_index":4758,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1381,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["instances",{"_index":2493,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["instant",{"_index":2502,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["instantiated",{"_index":3036,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["instantiation",{"_index":3028,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["instead",{"_index":384,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxTableGetPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["intentional",{"_index":433,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["interact",{"_index":3234,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["interaction",{"_index":3051,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["interactions",{"_index":653,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["intercepted",{"_index":3423,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["interceptor",{"_index":4747,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interceptors",{"_index":1205,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/FormStateOptionsEntity.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/FormStateOptionsEntity.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"overview.html":{}}}],["internal",{"_index":231,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["internally",{"_index":4333,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["interop",{"_index":2884,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxModalService.html":{}}}],["interrupted",{"_index":3426,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["invalid",{"_index":1726,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["invaliddecimalsaftercomma",{"_index":4234,"title":{},"body":{"classes/NgxValidators.html":{}}}],["invalidmaxdate",{"_index":4989,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["invalidmindate",{"_index":4990,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["invalidrange",{"_index":4225,"title":{},"body":{"classes/NgxValidators.html":{}}}],["isactive",{"_index":1453,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"directives/NgxTourItemDirective.html":{}}}],["isauthenticated",{"_index":1252,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["isbrowser",{"_index":4278,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["isclicked",{"_index":302,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["isclicked(event",{"_index":314,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["iscompleted",{"_index":4437,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["isdirty",{"_index":3408,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["isdisabled",{"_index":4595,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["isempty",{"_index":3697,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/TableCellTemplate.html":{}}}],["isentered",{"_index":303,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["isfocussedon",{"_index":2158,"title":{},"body":{"directives/NgxHasFocusDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["isloading",{"_index":1785,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["isn't",{"_index":358,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["iso",{"_index":1686,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["isolate",{"_index":2367,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["isopen",{"_index":1020,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["isplatformbrowser",{"_index":4331,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["isplatformbrowser(this.platformid",{"_index":4347,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["ispublic",{"_index":267,"title":{},"body":{"injectables/EffectsService.html":{}}}],["isset",{"_index":1649,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["issues",{"_index":2931,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourStepComponent.html":{},"pipes/TransformPipe.html":{}}}],["isvalid",{"_index":3409,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["it's",{"_index":215,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["item",{"_index":753,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["item'},{'name",{"_index":528,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["item.component",{"_index":976,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["item.component.html",{"_index":1014,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.scss",{"_index":1016,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts",{"_index":1010,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:107",{"_index":1032,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:112",{"_index":1073,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:117",{"_index":1074,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:122",{"_index":1069,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:127",{"_index":1058,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:137",{"_index":1045,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:146",{"_index":1056,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:153",{"_index":1054,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:160",{"_index":1050,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:184",{"_index":1053,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:19",{"_index":1430,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:193",{"_index":1047,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:24",{"_index":1431,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:29",{"_index":1435,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:40",{"_index":1076,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:41",{"_index":1063,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:42",{"_index":1079,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:47",{"_index":1067,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:52",{"_index":1081,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:57",{"_index":1065,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:62",{"_index":1071,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:67",{"_index":1036,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:78",{"_index":1034,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:89",{"_index":1039,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:98",{"_index":1038,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.data",{"_index":3380,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["item.directive.ts",{"_index":734,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:13",{"_index":763,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["item.directive.ts:14",{"_index":3976,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:15",{"_index":3978,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:16",{"_index":3975,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:18",{"_index":752,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["item.directive.ts:21",{"_index":3970,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:26",{"_index":3969,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:33",{"_index":3974,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:44",{"_index":3980,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:48",{"_index":3971,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:58",{"_index":3972,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.filter((key",{"_index":1478,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["item.id",{"_index":993,"title":{},"body":{"components/NgxAccordionComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["item.translations",{"_index":2430,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["item.updateaccordionitemstate(true",{"_index":985,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["item/accordion",{"_index":975,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["item/configurable",{"_index":1425,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item/items",{"_index":3648,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["item/tour",{"_index":3965,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item[itemkey",{"_index":1717,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["itemdirective",{"_index":737,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["itemid",{"_index":739,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["itemkey",{"_index":1716,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["itemregisteredsubject",{"_index":944,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["items",{"_index":50,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["items.foreach((item",{"_index":3374,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["items.length",{"_index":3366,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["itemsize",{"_index":1460,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["itself",{"_index":383,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"classes/NgxValidators.html":{}}}],["join",{"_index":2416,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"miscellaneous/typealiases.html":{}}}],["json",{"_index":2372,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["json.parse(data[current",{"_index":3277,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["json.parse(value",{"_index":3597,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["json.stringify(item",{"_index":3581,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["json.stringify(parseddata[current",{"_index":3290,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["keep",{"_index":2317,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["keeps",{"_index":3104,"title":{},"body":{"injectables/NgxModalService.html":{},"interfaces/TableCellTemplate.html":{}}}],["key",{"_index":76,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FocusClickDirective.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["key.isactive",{"_index":1479,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["keydown",{"_index":356,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["keydown.arrowdown",{"_index":1028,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowdown(event",{"_index":1033,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["keydown.arrowleft",{"_index":4075,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowright",{"_index":4076,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowup",{"_index":1029,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowup(event",{"_index":1035,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["keydown.control.end",{"_index":4077,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.control.home",{"_index":4078,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.end",{"_index":1030,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.enter",{"_index":307,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["keydown.home",{"_index":1031,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.pagedown",{"_index":4079,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.pageup",{"_index":4080,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keyof",{"_index":3259,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["keys",{"_index":51,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["keys.reduce((hasone",{"_index":78,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["keys.ts",{"_index":4908,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["keys].map((item",{"_index":1477,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["keytype",{"_index":18,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"classes/NgxValidators.html":{}}}],["keyvaluepair",{"_index":4923,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["key}error",{"_index":3644,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["key}errormessage",{"_index":3646,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["key}loading",{"_index":3642,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["kind",{"_index":4860,"title":{},"body":{"index.html":{},"license.html":{}}}],["know",{"_index":1808,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["labbledby",{"_index":4045,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["label",{"_index":891,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["labelledby",{"_index":664,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["labelledbyid",{"_index":2998,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["labels",{"_index":2990,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["lang",{"_index":2383,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["language",{"_index":808,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["languagerouteparam",{"_index":2240,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{}}}],["languages",{"_index":2241,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["languages?.length",{"_index":2456,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["largest",{"_index":1474,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["last",{"_index":956,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"miscellaneous/typealiases.html":{}}}],["lastly",{"_index":3342,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["later",{"_index":2715,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["latest",{"_index":2124,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{}}}],["lax",{"_index":1491,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["layer",{"_index":2701,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["layout",{"_index":533,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{}}}],["layout'},{'name",{"_index":531,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["layout.component.html",{"_index":2869,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts",{"_index":2866,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:22",{"_index":2882,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:27",{"_index":2879,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:32",{"_index":2876,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:40",{"_index":2872,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.flyout",{"_index":2949,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.header?.left",{"_index":2941,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.header?.main",{"_index":2943,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.header?.right",{"_index":2945,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts",{"_index":2894,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:120",{"_index":2915,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:134",{"_index":2911,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:150",{"_index":2918,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:166",{"_index":2913,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:18",{"_index":2926,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:23",{"_index":2925,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:30",{"_index":2920,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:38",{"_index":2923,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:45",{"_index":2922,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:51",{"_index":2929,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:57",{"_index":2928,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:64",{"_index":2917,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.ts",{"_index":1439,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"miscellaneous/typealiases.html":{}}}],["layout.types.ts",{"_index":2851,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["layout/mobile",{"_index":2865,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["layoutservice",{"_index":2871,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layoutsubject",{"_index":2905,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["lazy",{"_index":2538,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"index.html":{}}}],["lazyhtmlgeneration",{"_index":1516,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["leaks",{"_index":2142,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["leave",{"_index":3886,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["leaving",{"_index":3814,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["left",{"_index":2147,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"miscellaneous/typealiases.html":{}}}],["legend",{"_index":514,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"overview.html":{}}}],["length",{"_index":218,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["level",{"_index":2604,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["levels",{"_index":2575,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["liability",{"_index":4875,"title":{},"body":{"index.html":{},"license.html":{}}}],["liable",{"_index":4872,"title":{},"body":{"index.html":{},"license.html":{}}}],["lib",{"_index":2034,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nRootService.html":{}}}],["libs/.../accordion.types.ts",{"_index":4926,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../authenticated",{"_index":4927,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../authentication",{"_index":4929,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../authentication.interceptor.ts",{"_index":4741,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../authentication.ts",{"_index":4737,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../authentication.types.ts",{"_index":4928,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../configurable",{"_index":4931,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../cookie",{"_index":4932,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../core.ts",{"_index":4738,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../cypress",{"_index":4910,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../cypress.types.ts",{"_index":4922,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../date",{"_index":4915,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../display",{"_index":4933,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../drag",{"_index":4925,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../effects.ts",{"_index":4900,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../entity",{"_index":4901,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../errors.interface.ts",{"_index":4934,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../form",{"_index":4907,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../i18n",{"_index":4735,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/.../i18n.module.ts",{"_index":4739,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../image",{"_index":4935,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../internal",{"_index":4955,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../merge.util.ts",{"_index":4924,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../mobile",{"_index":4905,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../modal.types.ts",{"_index":4936,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../ngx",{"_index":4921,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../observable.types.ts",{"_index":4903,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../query",{"_index":4966,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../replace",{"_index":4937,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../require",{"_index":4957,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../show",{"_index":4939,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../signal",{"_index":4896,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../signals.ts",{"_index":4899,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../sort",{"_index":4733,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/.../storage.types.ts",{"_index":4938,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../store",{"_index":4913,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../store.ts",{"_index":4960,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../tooltip.types.ts",{"_index":4940,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../tour.token.type.ts",{"_index":4942,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../tour.types.ts",{"_index":4941,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../tree",{"_index":4943,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts",{"_index":1245,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:103",{"_index":1316,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:114",{"_index":1317,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:125",{"_index":1319,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:138",{"_index":1298,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:158",{"_index":1307,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:177",{"_index":1287,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:199",{"_index":1293,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:211",{"_index":1290,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:232",{"_index":1283,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:34",{"_index":1265,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:40",{"_index":1267,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:46",{"_index":1269,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:53",{"_index":1278,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:61",{"_index":1281,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:71",{"_index":1304,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:80",{"_index":1311,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:89",{"_index":1314,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:96",{"_index":1282,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/directives/has",{"_index":2062,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["libs/angular/authentication/src/lib/directives/is",{"_index":2758,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["libs/angular/authentication/src/lib/interceptors/authentication/authentication.interceptor.ts",{"_index":4744,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/angular/authentication/src/lib/pipes/has",{"_index":2118,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["libs/angular/authentication/src/lib/services/authenticated",{"_index":1124,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["libs/angular/authentication/src/lib/types/authenticated",{"_index":1218,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/authentication/src/lib/types/authentication",{"_index":1202,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/authentication/src/lib/types/authentication.types.ts",{"_index":4997,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/cookies/src/lib/abstracts/cookie",{"_index":1660,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["libs/angular/cookies/src/lib/directives/has",{"_index":1992,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts",{"_index":1523,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:166",{"_index":1558,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:184",{"_index":1547,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:194",{"_index":1562,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:213",{"_index":1552,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:220",{"_index":1575,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:229",{"_index":1554,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:238",{"_index":1556,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:256",{"_index":1568,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:277",{"_index":1565,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:31",{"_index":1601,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:36",{"_index":1595,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:41",{"_index":1587,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:46",{"_index":1607,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:53",{"_index":1580,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:58",{"_index":1608,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:63",{"_index":1598,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:69",{"_index":1590,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:75",{"_index":1582,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:81",{"_index":1604,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:86",{"_index":1578,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:99",{"_index":1570,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/types/cookie",{"_index":1484,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/cookies/src/lib/types/has",{"_index":1991,"title":{},"body":{"interfaces/NgxHasCookieConfiguration.html":{}}}],["libs/angular/cookies/src/lib/types/set",{"_index":1658,"title":{},"body":{"interfaces/NgxCookieValue.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts",{"_index":4266,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:106",{"_index":4284,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:115",{"_index":4287,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:136",{"_index":4282,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:15",{"_index":4298,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:20",{"_index":4300,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:25",{"_index":4309,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:30",{"_index":4304,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:35",{"_index":4296,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:40",{"_index":4306,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:45",{"_index":4302,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:50",{"_index":4294,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:56",{"_index":4291,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:61",{"_index":4281,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:89",{"_index":4290,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:99",{"_index":4283,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/forms/src/lib/abstracts/base",{"_index":93,"title":{},"body":{"classes/BaseFormAccessor.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts",{"_index":1876,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:13",{"_index":1879,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:17",{"_index":1878,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:9",{"_index":1880,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/form",{"_index":362,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["libs/angular/forms/src/lib/abstracts/save",{"_index":3391,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts",{"_index":1890,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:156",{"_index":1904,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:193",{"_index":1908,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:230",{"_index":1902,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:34",{"_index":1921,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:37",{"_index":1924,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:38",{"_index":1916,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:42",{"_index":1931,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:43",{"_index":1917,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:44",{"_index":1927,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:45",{"_index":1930,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:46",{"_index":1912,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:49",{"_index":1926,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:50",{"_index":1925,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:55",{"_index":1928,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:60",{"_index":1911,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:65",{"_index":1919,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:70",{"_index":1918,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:75",{"_index":1913,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:80",{"_index":1900,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:87",{"_index":1910,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:93",{"_index":1909,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/interfaces/errors.interface.ts",{"_index":1883,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/forms/src/lib/interfaces/form",{"_index":435,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/forms/src/lib/utils/accessor",{"_index":227,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["libs/angular/forms/src/lib/validators/at",{"_index":6,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["libs/angular/forms/src/lib/validators/date",{"_index":4988,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts",{"_index":4192,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:100",{"_index":4222,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:27",{"_index":4200,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:40",{"_index":4206,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:55",{"_index":4238,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:70",{"_index":4228,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:83",{"_index":4210,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/i18n/src/lib/abstracts/i18n",{"_index":2230,"title":{},"body":{"classes/NgxI18nAbstractService.html":{}}}],["libs/angular/i18n/src/lib/components/empty",{"_index":2259,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["libs/angular/i18n/src/lib/i18n.module.ts",{"_index":2334,"title":{},"body":{"modules/NgxI18nModule.html":{},"miscellaneous/functions.html":{}}}],["libs/angular/i18n/src/lib/i18n.module.ts:29",{"_index":2343,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["libs/angular/i18n/src/lib/i18n.module.ts:55",{"_index":2338,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["libs/angular/i18n/src/lib/i18n.types.ts",{"_index":2234,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["libs/angular/i18n/src/lib/loader/multi",{"_index":2368,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts",{"_index":2532,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:16",{"_index":2547,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:20",{"_index":2545,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:22",{"_index":2544,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/services/i18n",{"_index":2265,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts",{"_index":2492,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:16",{"_index":2513,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:21",{"_index":2509,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:26",{"_index":2515,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:33",{"_index":2517,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:40",{"_index":2519,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:49",{"_index":2507,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:65",{"_index":2511,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:76",{"_index":2501,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:87",{"_index":2504,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:97",{"_index":2520,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/root",{"_index":2432,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts",{"_index":2970,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:13",{"_index":2984,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:14",{"_index":2983,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:19",{"_index":2977,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:26",{"_index":2975,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:31",{"_index":2974,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:36",{"_index":2976,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:41",{"_index":2979,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:47",{"_index":2982,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:49",{"_index":2978,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts",{"_index":3763,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:17",{"_index":3780,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:22",{"_index":3775,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:33",{"_index":3776,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:47",{"_index":3773,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:55",{"_index":3770,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:60",{"_index":3772,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:65",{"_index":3774,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tour",{"_index":4015,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts",{"_index":3795,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:114",{"_index":3815,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:23",{"_index":3822,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:24",{"_index":3817,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:29",{"_index":3811,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:36",{"_index":3810,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:43",{"_index":3813,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:50",{"_index":3808,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:57",{"_index":3809,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:67",{"_index":3820,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:72",{"_index":3805,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:77",{"_index":3818,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:83",{"_index":3807,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:88",{"_index":3806,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:93",{"_index":3816,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tour",{"_index":3964,"title":{},"body":{"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["libs/angular/inform/src/lib/mocks/tour",{"_index":482,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts",{"_index":3072,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:124",{"_index":3080,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:146",{"_index":3096,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:177",{"_index":3082,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:222",{"_index":3091,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:244",{"_index":3087,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:29",{"_index":3099,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:32",{"_index":3101,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:37",{"_index":3105,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:42",{"_index":3103,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:49",{"_index":3093,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts",{"_index":3834,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:122",{"_index":3849,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:169",{"_index":3844,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:184",{"_index":3846,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:197",{"_index":3843,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:23",{"_index":3852,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:24",{"_index":3858,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:25",{"_index":3855,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:28",{"_index":3850,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:33",{"_index":3865,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:39",{"_index":3853,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:44",{"_index":3856,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:49",{"_index":3864,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:54",{"_index":3842,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/types/modal.types.ts",{"_index":2997,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/inform/src/lib/types/tooltip.types.ts",{"_index":3787,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/inform/src/lib/types/tour.token.type.ts",{"_index":4050,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/inform/src/lib/types/tour.types.ts",{"_index":3923,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/abstracts/display",{"_index":1734,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["libs/angular/layout/src/lib/abstracts/drag",{"_index":731,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["libs/angular/layout/src/lib/abstracts/table/open",{"_index":3716,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["libs/angular/layout/src/lib/abstracts/table/select",{"_index":3724,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["libs/angular/layout/src/lib/abstracts/table/sort",{"_index":3761,"title":{},"body":{"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts",{"_index":935,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:111",{"_index":957,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:128",{"_index":960,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:33",{"_index":969,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:38",{"_index":967,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:43",{"_index":971,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48",{"_index":950,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:82",{"_index":962,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:92",{"_index":965,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/item/accordion",{"_index":1009,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts",{"_index":666,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:14",{"_index":714,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:19",{"_index":710,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:20",{"_index":712,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:21",{"_index":709,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:26",{"_index":707,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:31",{"_index":681,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:36",{"_index":694,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:42",{"_index":683,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:47",{"_index":692,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:52",{"_index":713,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:57",{"_index":695,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:82",{"_index":698,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:91",{"_index":704,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/currency",{"_index":1668,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["libs/angular/layout/src/lib/components/cell/date",{"_index":1709,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["libs/angular/layout/src/lib/components/cell/generic",{"_index":3659,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/configurable",{"_index":1424,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["libs/angular/layout/src/lib/components/image",{"_index":2582,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["libs/angular/layout/src/lib/components/mobile",{"_index":2864,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["libs/angular/layout/src/lib/components/table/ngx",{"_index":4460,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["libs/angular/layout/src/lib/directives/display",{"_index":1754,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["libs/angular/layout/src/lib/directives/drag",{"_index":883,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["libs/angular/layout/src/lib/directives/has",{"_index":2155,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["libs/angular/layout/src/lib/directives/tree",{"_index":4056,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["libs/angular/layout/src/lib/enums/sort",{"_index":4736,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/angular/layout/src/lib/pipes/aria",{"_index":1112,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/get",{"_index":3698,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/has",{"_index":3710,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/item",{"_index":1455,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["libs/angular/layout/src/lib/pipes/show",{"_index":3730,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/sort",{"_index":3750,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["libs/angular/layout/src/lib/services/image",{"_index":2666,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["libs/angular/layout/src/lib/services/mobile",{"_index":2893,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["libs/angular/layout/src/lib/services/online",{"_index":3177,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["libs/angular/layout/src/lib/tokens/ngx",{"_index":3667,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/accordion.types.ts",{"_index":4996,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/configurable",{"_index":1438,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/display",{"_index":1741,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/drag",{"_index":867,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/image",{"_index":2553,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/internal",{"_index":4999,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/mobile",{"_index":2850,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/show",{"_index":3692,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/layout/src/lib/types/sort",{"_index":3746,"title":{},"body":{"interfaces/NgxTableSortEvent.html":{}}}],["libs/angular/layout/src/lib/types/tree",{"_index":4998,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts",{"_index":3617,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:13",{"_index":3635,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:15",{"_index":3624,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:42",{"_index":3630,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:51",{"_index":3633,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:60",{"_index":3626,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:69",{"_index":3628,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:78",{"_index":3637,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/base",{"_index":111,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/effects.ts",{"_index":4974,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/entity",{"_index":158,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/require",{"_index":5000,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/store",{"_index":146,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/store.ts",{"_index":5001,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.service.ts",{"_index":262,"title":{},"body":{"injectables/EffectsService.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.service.ts:17",{"_index":270,"title":{},"body":{"injectables/EffectsService.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.service.ts:9",{"_index":266,"title":{},"body":{"injectables/EffectsService.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts",{"_index":4421,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:11",{"_index":4423,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:12",{"_index":4425,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:14",{"_index":4430,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:24",{"_index":4433,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/store",{"_index":4354,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/store/src/lib/signal/abstracts/store.service.ts",{"_index":3436,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["libs/angular/store/src/lib/signal/abstracts/store.service.ts:19",{"_index":3440,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["libs/angular/store/src/lib/signal/abstracts/store.service.ts:30",{"_index":3444,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["libs/angular/store/src/lib/signal/types/signal",{"_index":3455,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/utils/src/lib/abstracts/query",{"_index":3189,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/utils/src/lib/directives/cypress",{"_index":1698,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["libs/angular/utils/src/lib/directives/focus",{"_index":295,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts",{"_index":178,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts:13",{"_index":188,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/has",{"_index":440,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts",{"_index":457,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts:8",{"_index":459,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/replace",{"_index":3304,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts",{"_index":4697,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts:17",{"_index":4701,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["libs/angular/utils/src/lib/services/broadcast",{"_index":1364,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["libs/angular/utils/src/lib/services/media",{"_index":2782,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["libs/angular/utils/src/lib/services/storage",{"_index":3499,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["libs/angular/utils/src/lib/tokens/cypress",{"_index":4987,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/utils/src/lib/types/cypress.types.ts",{"_index":4994,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/utils/src/lib/types/replace",{"_index":3296,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"miscellaneous/typealiases.html":{}}}],["libs/angular/utils/src/lib/types/signals.ts",{"_index":4973,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/angular/utils/src/lib/types/storage.types.ts",{"_index":3485,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["libs/javascript/core/src/lib/core.ts",{"_index":4743,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/javascript/rxjs/src/lib/types/observable/observable.types.ts",{"_index":4975,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/javascript/types/authentication/src/lib/authentication.ts",{"_index":4742,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/javascript/utils/src/lib/object/merge/merge.util.ts",{"_index":4995,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["license",{"_index":4825,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["lifecycle",{"_index":4665,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["limit",{"_index":1986,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["limitation",{"_index":4843,"title":{},"body":{"index.html":{},"license.html":{}}}],["limited",{"_index":4863,"title":{},"body":{"index.html":{},"license.html":{}}}],["line",{"_index":2958,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxSignalStoreService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["link",{"_index":3273,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["link.\"the",{"_index":3352,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["linkcomponent",{"_index":3329,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["links",{"_index":3323,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["list",{"_index":408,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["listen",{"_index":1051,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["listened",{"_index":2799,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["listener",{"_index":1621,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{}}}],["listeners",{"_index":1654,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{}}}],["listentoonlinestatus",{"_index":1744,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["listing",{"_index":3540,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["lists",{"_index":3065,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["literal",{"_index":144,"title":{},"body":{"interfaces/BaseStoreActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"pipes/NgxAriaSortPipe.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxWindowService.html":{},"miscellaneous/typealiases.html":{}}}],["live",{"_index":791,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"dependencies.html":{}}}],["liveannouncer",{"_index":788,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["liveregionservice",{"_index":778,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["load",{"_index":1594,"title":{},"body":{"injectables/NgxCookieService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/TableCellTemplate.html":{}}}],["loaded",{"_index":2268,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loader",{"_index":2258,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"miscellaneous/functions.html":{}}}],["loading",{"_index":114,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["loading'},{'name",{"_index":556,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["loading.service.ts",{"_index":2267,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:15",{"_index":2295,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:21",{"_index":2312,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:23",{"_index":2299,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:25",{"_index":2311,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:28",{"_index":2310,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:40",{"_index":2297,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:48",{"_index":2285,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:57",{"_index":2281,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:67",{"_index":2287,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:77",{"_index":2290,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:91",{"_index":2293,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.types",{"_index":2316,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.types.ts",{"_index":4707,"title":{},"body":{"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["loading/i18n",{"_index":2266,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["loadingdata",{"_index":4482,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["loadingtemplate",{"_index":4514,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["loadtranslations",{"_index":2278,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loadtranslations(paths",{"_index":2289,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["local",{"_index":2448,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["locale",{"_index":1505,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["localstorage",{"_index":2480,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{}}}],["localstorage.getitem('ngx",{"_index":2484,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["localstorage.setitem('ngx",{"_index":2482,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["localstorage/sessionstorage",{"_index":3548,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["localstoragerecord",{"_index":3503,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["location",{"_index":1237,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["lodash",{"_index":1706,"title":{},"body":{"directives/NgxCypressTagDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/TableCellTemplate.html":{},"dependencies.html":{}}}],["log",{"_index":1941,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["logical",{"_index":3033,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["logs",{"_index":3561,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["longer",{"_index":380,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["longestrow",{"_index":1475,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["loop",{"_index":3373,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["lower",{"_index":3332,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["lowercase",{"_index":3362,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["lowercased",{"_index":3334,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["made",{"_index":1155,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["main",{"_index":2856,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"index.html":{}}}],["maintained",{"_index":4754,"title":{},"body":{"index.html":{}}}],["make",{"_index":772,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["makes",{"_index":3962,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["managescripttags",{"_index":1513,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["map",{"_index":813,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxModalService.html":{},"miscellaneous/typealiases.html":{}}}],["map(([action",{"_index":3127,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["map((action",{"_index":3135,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["map((hascookies",{"_index":2051,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["map((key",{"_index":1988,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["map((response",{"_index":1192,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["map((result",{"_index":2308,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["map((state",{"_index":2875,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["map((status",{"_index":1275,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["map((translations",{"_index":2405,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["maps",{"_index":2846,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mark",{"_index":909,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["markallasdirty",{"_index":371,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markallasdirty(form",{"_index":388,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markallastouched",{"_index":372,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markallastouched(form",{"_index":396,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markasactive",{"_index":742,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["markasactive(id",{"_index":907,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["markasdirty",{"_index":381,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markastouched",{"_index":394,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["marked",{"_index":4042,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["marker",{"_index":2561,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["marker'},{'name",{"_index":545,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["marker.addeventlistener('select",{"_index":2752,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.addeventlistener('statechange",{"_index":2746,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.all_marker_types",{"_index":2729,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.availablemarkertypes",{"_index":2709,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.close",{"_index":2704,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.component.scss",{"_index":2587,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts",{"_index":2584,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:104",{"_index":2613,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:109",{"_index":2611,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:111",{"_index":2616,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:116",{"_index":2618,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:137",{"_index":2619,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:149",{"_index":2614,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:47",{"_index":2627,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:48",{"_index":2629,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:49",{"_index":2622,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:54",{"_index":2620,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:59",{"_index":2628,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:64",{"_index":2624,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:69",{"_index":2605,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:74",{"_index":2606,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:79",{"_index":2610,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:84",{"_index":2602,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:89",{"_index":2603,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:94",{"_index":2630,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:99",{"_index":2608,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.removeeventlistener('select",{"_index":2703,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.removeeventlistener('statechange",{"_index":2713,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.restorestate(configuration.defaultstate",{"_index":2745,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts",{"_index":2667,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:117",{"_index":2677,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:188",{"_index":2687,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:207",{"_index":2683,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:221",{"_index":2690,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:26",{"_index":2692,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:31",{"_index":2691,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:40",{"_index":2680,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:66",{"_index":2689,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.show",{"_index":2742,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.show(configuration.defaultstate",{"_index":2711,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.targetroot",{"_index":2702,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.types.ts",{"_index":2554,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["marker.uistylesettings.clearbuttonvisible",{"_index":2726,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.notesareastyleclassname",{"_index":2731,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolbaractivebuttonstylecolorsclassname",{"_index":2739,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolbarbuttonstylecolorsclassname",{"_index":2738,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolbarstylecolorsclassname",{"_index":2734,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolboxactivebuttonstylecolorsclassname",{"_index":2741,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolboxbuttonstylecolorsclassname",{"_index":2740,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolboxstylecolorsclassname",{"_index":2736,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.zoombuttonvisible",{"_index":2717,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.zoomoutbuttonvisible",{"_index":2719,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.zoomlevel",{"_index":2724,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.zoomsteps",{"_index":2720,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker/image",{"_index":2583,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["markerarea",{"_index":2686,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["markerarea(image",{"_index":2712,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["markerareastate",{"_index":2559,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["markerbase",{"_index":2556,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["markerclicked",{"_index":2594,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["markerdestroyedsubject",{"_index":2595,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["markerjs",{"_index":2558,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["markerjs2",{"_index":2560,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"dependencies.html":{}}}],["markers",{"_index":2609,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["markertypes",{"_index":2574,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["markerview",{"_index":2682,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["markerview(image",{"_index":2700,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marks",{"_index":385,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["marktranslationsloadedasfailed",{"_index":2279,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["match",{"_index":471,"title":{},"body":{"pipes/IbanPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["matched",{"_index":82,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["matchedquery",{"_index":2824,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["matchedquery.addeventlistener('change",{"_index":2832,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["matches",{"_index":3310,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["matchfunction",{"_index":4237,"title":{},"body":{"classes/NgxValidators.html":{}}}],["matching",{"_index":89,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["math.max",{"_index":1476,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["max",{"_index":1471,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"classes/NgxValidators.html":{}}}],["maxdate",{"_index":4265,"title":{},"body":{"classes/NgxValidators.html":{}}}],["maximum",{"_index":4231,"title":{},"body":{"classes/NgxValidators.html":{}}}],["meant",{"_index":886,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["mechanic",{"_index":4534,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["media",{"_index":2784,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylist",{"_index":2823,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylistenermap",{"_index":2791,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylistevent",{"_index":2830,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["memberof",{"_index":352,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["memoizedselector",{"_index":121,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["memory",{"_index":2141,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["merchantability",{"_index":4865,"title":{},"body":{"index.html":{},"license.html":{}}}],["merge",{"_index":1790,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"index.html":{},"license.html":{}}}],["message",{"_index":804,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["messageerror",{"_index":1395,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["messagerecord",{"_index":782,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["messages",{"_index":785,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxFormsErrorAbstractComponent.html":{}}}],["messagetype",{"_index":1389,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["message{any",{"_index":1418,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["met",{"_index":1241,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxModalService.html":{}}}],["metadata",{"_index":179,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["method",{"_index":350,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":183,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/typealiases.html":{}}}],["methodsdictionary",{"_index":3459,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["milestone",{"_index":4813,"title":{},"body":{"index.html":{}}}],["milliseconds",{"_index":2860,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{}}}],["min",{"_index":4226,"title":{},"body":{"classes/NgxValidators.html":{}}}],["mind",{"_index":3330,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["mindate",{"_index":4264,"title":{},"body":{"classes/NgxValidators.html":{}}}],["minimum",{"_index":4018,"title":{},"body":{"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{}}}],["minmax(0",{"_index":1481,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["miscellaneous",{"_index":4731,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["missing",{"_index":3264,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["mit",{"_index":4826,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mm",{"_index":4218,"title":{},"body":{"classes/NgxValidators.html":{}}}],["mobile",{"_index":547,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mock",{"_index":484,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mockchannel",{"_index":275,"title":{},"body":{"injectables/EffectsService.html":{}}}],["mocked",{"_index":2695,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["mockprivatechannel",{"_index":276,"title":{},"body":{"injectables/EffectsService.html":{}}}],["mocktourholdercomponent",{"_index":478,"title":{"components/MockTourHolderComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mocktourstepcomponent",{"_index":520,"title":{"components/MockTourStepComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mockvideos",{"_index":277,"title":{},"body":{"injectables/EffectsService.html":{}}}],["modal",{"_index":1576,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{},"miscellaneous/typealiases.html":{}}}],["modals",{"_index":3058,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["modalvisible",{"_index":1534,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["modalvisiblesubject",{"_index":1535,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["mode",{"_index":1509,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["models",{"_index":3461,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["modifies",{"_index":1584,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["modify",{"_index":4845,"title":{},"body":{"index.html":{},"license.html":{}}}],["modular",{"_index":4777,"title":{},"body":{"index.html":{}}}],["module",{"_index":2331,"title":{"modules/NgxI18nModule.html":{}},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"overview.html":{}}}],["modules",{"_index":2333,"title":{"modules.html":{}},"body":{"modules/NgxI18nModule.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":2340,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["moment",{"_index":2534,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["mono",{"_index":4752,"title":{},"body":{"index.html":{}}}],["more",{"_index":41,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["mouse",{"_index":327,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["mouseenter",{"_index":3768,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["mouseleave",{"_index":3769,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["move",{"_index":959,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["moved",{"_index":841,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["movedown",{"_index":4064,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movefocus",{"_index":946,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["movefocus(id",{"_index":952,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["moveleft",{"_index":4065,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moveleft(event",{"_index":4099,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moveright",{"_index":4066,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moves",{"_index":958,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["moveto",{"_index":4154,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["moveto(direction",{"_index":4166,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["movetobottomcontrolend",{"_index":4067,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetobottomend",{"_index":4068,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetocell",{"_index":4069,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetocell(cell",{"_index":4103,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetofirstcellofgrid",{"_index":4070,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetofirstcolumnofgrid",{"_index":4071,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetofirstofrow",{"_index":4072,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetolastcellofgrid",{"_index":4073,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moveup",{"_index":4074,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moving",{"_index":1446,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["mozilla",{"_index":2999,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ms",{"_index":3937,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["multi",{"_index":257,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/TableCellTemplate.html":{}}}],["multiple",{"_index":2371,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["multiselect",{"_index":4679,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["mutable",{"_index":4493,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["mycomponent",{"_index":451,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["name",{"_index":180,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["named",{"_index":4800,"title":{},"body":{"index.html":{}}}],["names",{"_index":2730,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["native",{"_index":2987,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["nature",{"_index":3361,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["navigate",{"_index":3272,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["navigating",{"_index":4124,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["navigation",{"_index":2854,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["navigationextras",{"_index":3925,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["near",{"_index":3899,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["necessary",{"_index":249,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTourStepComponent.html":{}}}],["need",{"_index":74,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"components/NgxAccordionComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["needed",{"_index":55,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["needs",{"_index":1215,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{}}}],["negative",{"_index":3959,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["nested",{"_index":1719,"title":{},"body":{"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["never",{"_index":105,"title":{},"body":{"classes/BaseFormAccessor.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":61,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["newcontainer",{"_index":882,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["newindex",{"_index":880,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["newlanguage",{"_index":2477,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["newly",{"_index":2282,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["newsortdirection",{"_index":721,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["newvalue",{"_index":3494,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["next",{"_index":1004,"title":{},"body":{"components/NgxAccordionComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["next.active",{"_index":3875,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["next.id",{"_index":3879,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["next.path",{"_index":2427,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["next.source",{"_index":3876,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["next.translations",{"_index":2428,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["nextstate",{"_index":3404,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["ng_validators",{"_index":243,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["ng_value_accessor",{"_index":244,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngaftercontentchecked",{"_index":4666,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngafterviewinit",{"_index":625,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["ngclass",{"_index":4464,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngcomponentoutlet",{"_index":2867,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngif",{"_index":1935,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["ngmodule",{"_index":2344,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["ngonchanges",{"_index":2600,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["ngonchanges(changes",{"_index":2617,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["ngondestroy",{"_index":373,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngoninit",{"_index":626,"title":{},"body":{"components/MockTourStepComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngrx/effects",{"_index":4434,"title":{},"body":{"injectables/StoreEffects.html":{},"dependencies.html":{}}}],["ngrx/entity",{"_index":154,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"dependencies.html":{}}}],["ngrx/signals",{"_index":3458,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"dependencies.html":{}}}],["ngrx/store",{"_index":124,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"dependencies.html":{}}}],["ngtemplateoutlet",{"_index":1013,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngx",{"_index":524,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["ngxabstracttablecelldirective",{"_index":564,"title":{"directives/NgxAbstractTableCellDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxabstracttablecelldirective:14",{"_index":1695,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:21",{"_index":3664,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:26",{"_index":3665,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:27",{"_index":3662,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:31",{"_index":1671,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:32",{"_index":1693,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:33",{"_index":3663,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:36",{"_index":1674,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:38",{"_index":1690,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:42",{"_index":1672,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:44",{"_index":1682,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:47",{"_index":1673,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:49",{"_index":1678,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:52",{"_index":1694,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:57",{"_index":1675,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:59",{"_index":1731,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:65",{"_index":1727,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:72",{"_index":1722,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:77",{"_index":1721,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:82",{"_index":1676,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:91",{"_index":1677,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxaccessibleabstractdraganddropitemdirective",{"_index":566,"title":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropabstractservice",{"_index":769,"title":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["ngxaccessibledraganddropbasemessage",{"_index":866,"title":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{}},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxaccessibledraganddropcontainer",{"_index":889,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["ngxaccessibledraganddropcontainer]'},{'name",{"_index":568,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropcontainerdirective",{"_index":567,"title":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropcontainerindex",{"_index":893,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["ngxaccessibledraganddropcontainerlabel",{"_index":896,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["ngxaccessibledraganddropfromtomessage",{"_index":869,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxaccessibledraganddrophost",{"_index":900,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["ngxaccessibledraganddrophost]'},{'name",{"_index":570,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddrophostdescription",{"_index":917,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["ngxaccessibledraganddrophostdirective",{"_index":569,"title":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropitem]'},{'name",{"_index":572,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropitemdirective",{"_index":571,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropmessage",{"_index":802,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxaccessibledraganddropmessagerecord",{"_index":819,"title":{"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{}},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropmessagerecords",{"_index":818,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["ngxaccessibledraganddropmoveevent",{"_index":878,"title":{"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropmovetype",{"_index":877,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxaccordioncomponent",{"_index":523,"title":{"components/NgxAccordionComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccordionitemcomponent",{"_index":526,"title":{"components/NgxAccordionItemComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccordionopenbehavior",{"_index":974,"title":{},"body":{"components/NgxAccordionComponent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxariasort",{"_index":1115,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["ngxariasortpipe",{"_index":1111,"title":{"pipes/NgxAriaSortPipe.html":{}},"body":{"pipes/NgxAriaSortPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxauthenticatedhttpclient",{"_index":1123,"title":{"injectables/NgxAuthenticatedHttpClient.html":{}},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["ngxauthenticatedhttpclientconfiguration",{"_index":1176,"title":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{}},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["ngxauthenticatedhttpinterceptor",{"_index":4740,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ngxauthenticatedhttpinterceptor(request",{"_index":4745,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ngxauthenticatedroute",{"_index":1217,"title":{"interfaces/NgxAuthenticatedRoute.html":{}},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"miscellaneous/typealiases.html":{}}}],["ngxauthenticatedroutes",{"_index":1244,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"miscellaneous/typealiases.html":{}}}],["ngxauthenticationabstractservice",{"_index":1211,"title":{"classes/NgxAuthenticationAbstractService.html":{}},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxauthenticationconfiguration",{"_index":1214,"title":{"interfaces/NgxAuthenticationConfiguration.html":{}},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["ngxauthenticationresponsefeature",{"_index":1286,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"miscellaneous/typealiases.html":{}}}],["ngxauthenticationservicetoken",{"_index":2084,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxauthenticationstatus",{"_index":1324,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"miscellaneous/typealiases.html":{}}}],["ngxauthenticationurlhandlertoken",{"_index":1174,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["ngxbroadcastchannelservice",{"_index":1363,"title":{"injectables/NgxBroadcastChannelService.html":{}},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["ngxconfigurablelayoutcomponent",{"_index":529,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxconfigurablelayoutgrid",{"_index":1444,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"miscellaneous/typealiases.html":{}}}],["ngxconfigurablelayoutitemcomponent",{"_index":532,"title":{"components/NgxConfigurableLayoutItemComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxconfigurablelayoutitemdropevent",{"_index":1437,"title":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{}},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["ngxconfigurablelayoutitementity",{"_index":1445,"title":{"interfaces/NgxConfigurableLayoutItemEntity.html":{}},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"miscellaneous/typealiases.html":{}}}],["ngxconfigurablelayoutitemsize",{"_index":1458,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayoutitemsizeoption",{"_index":1447,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"miscellaneous/typealiases.html":{}}}],["ngxconfigurablelayoutitemsizepipe",{"_index":1454,"title":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayouttype",{"_index":1451,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"miscellaneous/typealiases.html":{}}}],["ngxcookie",{"_index":1483,"title":{"interfaces/NgxCookie.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["ngxcookiecategories",{"_index":1499,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"miscellaneous/typealiases.html":{}}}],["ngxcookiechangedevent",{"_index":1519,"title":{"interfaces/NgxCookieChangedEvent.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookieconfiguration",{"_index":1508,"title":{"interfaces/NgxCookieConfiguration.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookieevent",{"_index":1518,"title":{"interfaces/NgxCookieEvent.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookielanguageconfiguration",{"_index":1500,"title":{"interfaces/NgxCookieLanguageConfiguration.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookies",{"_index":1620,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["ngxcookieservice",{"_index":1522,"title":{"injectables/NgxCookieService.html":{}},"body":{"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{}}}],["ngxcookiesfallbackcomponent",{"_index":573,"title":{"directives/NgxCookiesFallBackComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasCookieDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxcookiesfallbackcomponenttoken",{"_index":2019,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["ngxcookievalue",{"_index":1567,"title":{"interfaces/NgxCookieValue.html":{}},"body":{"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{}}}],["ngxcurrencytablecellcomponent",{"_index":534,"title":{"components/NgxCurrencyTableCellComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxcypresstagdirective",{"_index":574,"title":{"directives/NgxCypressTagDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdatetablecellcomponent",{"_index":538,"title":{"components/NgxDateTableCellComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentarialive",{"_index":1748,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"miscellaneous/typealiases.html":{}}}],["ngxdisplaycontentcomponent",{"_index":576,"title":{"directives/NgxDisplayContentComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentcomponent:11",{"_index":4692,"title":{},"body":{"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["ngxdisplaycontentcomponentconfiguration",{"_index":1745,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["ngxdisplaycontentconditions",{"_index":1752,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxdisplaycontentconfiguration",{"_index":1740,"title":{"interfaces/NgxDisplayContentConfiguration.html":{}},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentconfigurationtoken",{"_index":1794,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentdirective",{"_index":577,"title":{"directives/NgxDisplayContentDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentoverrideconfiguration",{"_index":1753,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"miscellaneous/typealiases.html":{}}}],["ngxdisplaycontentrecord",{"_index":1751,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["ngxdisplaycontentstatus",{"_index":1746,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"miscellaneous/typealiases.html":{}}}],["ngxforms",{"_index":429,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["ngxformscontrolvalueaccessor",{"_index":579,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorabstractcomponent",{"_index":580,"title":{"directives/NgxFormsErrorAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorconfigurationoptions",{"_index":1882,"title":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrordirective",{"_index":1944,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrors",{"_index":1891,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrors]'},{'name",{"_index":582,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorsconfigurationtoken",{"_index":1915,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrorsdirective",{"_index":581,"title":{"directives/NgxFormsErrorsDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorshowsettings",{"_index":1888,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxformserrorshowwhensettings",{"_index":1889,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxhascookieconfiguration",{"_index":1667,"title":{"interfaces/NgxHasCookieConfiguration.html":{}},"body":{"directives/NgxCookiesFallBackComponent.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{}}}],["ngxhascookiedirective",{"_index":583,"title":{"directives/NgxHasCookieDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasCookieDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfeature",{"_index":2069,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["ngxhasfeature]'},{'name",{"_index":586,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfeaturedirective",{"_index":585,"title":{"directives/NgxHasFeatureDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFeatureDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfeatureelse",{"_index":2072,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["ngxhasfeatureguard",{"_index":1226,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxhasfeaturepipe",{"_index":2117,"title":{"pipes/NgxHasFeaturePipe.html":{}},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["ngxhasfeatureshouldhaveallfeatures",{"_index":2073,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["ngxhasfeatureshouldhavefeature",{"_index":2074,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["ngxhasfocusdirective",{"_index":587,"title":{"directives/NgxHasFocusDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFocusDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfocusdirective:13",{"_index":4117,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:18",{"_index":4094,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:25",{"_index":4093,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:34",{"_index":4111,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:43",{"_index":4112,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective",{"_index":588,"title":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfocusdraganddropabstractdirective:15",{"_index":767,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:20",{"_index":751,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:31",{"_index":749,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:39",{"_index":766,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:41",{"_index":756,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:45",{"_index":759,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:47",{"_index":760,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:54",{"_index":758,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhaspermission",{"_index":2181,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["ngxhaspermission]'},{'name",{"_index":590,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhaspermissiondirective",{"_index":589,"title":{"directives/NgxHasPermissionDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhaspermissionelse",{"_index":2182,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["ngxhaspermissionguard",{"_index":1231,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxhaspermissionpipe",{"_index":2214,"title":{"pipes/NgxHasPermissionPipe.html":{}},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["ngxhaspermissionshouldhaveallpermissions",{"_index":2183,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["ngxhaspermissionshouldhavepermission",{"_index":2184,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["ngxi18n",{"_index":2489,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["ngxi18nabstractservice",{"_index":2229,"title":{"classes/NgxI18nAbstractService.html":{}},"body":{"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nService.html":{}}}],["ngxi18nconfiguration",{"_index":2233,"title":{"interfaces/NgxI18nConfiguration.html":{}},"body":{"interfaces/NgxI18nConfiguration.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["ngxi18nconfigurationtoken",{"_index":2353,"title":{},"body":{"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["ngxi18nemptycomponent",{"_index":540,"title":{"components/NgxI18nEmptyComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxi18nloadingservice",{"_index":2264,"title":{"injectables/NgxI18nLoadingService.html":{}},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ngxi18nmodule",{"_index":2332,"title":{"modules/NgxI18nModule.html":{}},"body":{"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"modules.html":{}}}],["ngxi18nmultitranslationhttploader",{"_index":2349,"title":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}},"body":{"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["ngxi18nmultitranslationhttploader(http",{"_index":2357,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["ngxi18nrootservice",{"_index":2431,"title":{"injectables/NgxI18nRootService.html":{}},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["ngxi18nservice",{"_index":2352,"title":{"injectables/NgxI18nService.html":{}},"body":{"modules/NgxI18nModule.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ngxi18nsetlanguageguard",{"_index":2263,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["ngxi18ntranslationloaderresolver",{"_index":2350,"title":{"injectables/NgxI18nTranslationLoaderResolver.html":{}},"body":{"modules/NgxI18nModule.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ngxi8nrootservice",{"_index":2510,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["ngximagemarker",{"_index":2581,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["ngximagemarkerbase",{"_index":2552,"title":{"interfaces/NgxImageMarkerBase.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkercomponent",{"_index":543,"title":{"components/NgxImageMarkerComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngximagemarkerconfiguration",{"_index":2566,"title":{"interfaces/NgxImageMarkerConfiguration.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkeredit",{"_index":2580,"title":{"interfaces/NgxImageMarkerEdit.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["ngximagemarkeritem",{"_index":2563,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["ngximagemarkerservice",{"_index":2625,"title":{"injectables/NgxImageMarkerService.html":{}},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["ngximagemarkerstate",{"_index":2562,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["ngximagemarkertypes",{"_index":2565,"title":{"interfaces/NgxImageMarkerTypes.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkerview",{"_index":2578,"title":{"interfaces/NgxImageMarkerView.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"miscellaneous/typealiases.html":{}}}],["ngxinform",{"_index":3110,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["ngxisauthenticated",{"_index":2761,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxisauthenticated]'},{'name",{"_index":592,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxisauthenticateddirective",{"_index":591,"title":{"directives/NgxIsAuthenticatedDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxisauthenticatedelse",{"_index":2762,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxisauthenticatedguard",{"_index":1235,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxlayout",{"_index":1866,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["ngxmediaqueryservice",{"_index":2781,"title":{"injectables/NgxMediaQueryService.html":{}},"body":{"injectables/NgxMediaQueryService.html":{}}}],["ngxmobilelayout",{"_index":2849,"title":{"interfaces/NgxMobileLayout.html":{}},"body":{"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["ngxmobilelayoutcomponent",{"_index":546,"title":{"components/NgxMobileLayoutComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxmobilelayoutconfiguration",{"_index":2858,"title":{"interfaces/NgxMobileLayoutConfiguration.html":{}},"body":{"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["ngxmobilelayoutconfigurationtoken",{"_index":2919,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["ngxmobilelayoutservice",{"_index":2852,"title":{"injectables/NgxMobileLayoutService.html":{}},"body":{"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["ngxmodalabstractcomponent",{"_index":593,"title":{"directives/NgxModalAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxmodalabstractcomponent`](../abstracts/modal/modal.abstract.component.ts",{"_index":3047,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalactiontype",{"_index":2985,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxmodalarialabelbaseoptions",{"_index":2996,"title":{"interfaces/NgxModalAriaLabelBaseOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalarialabelledoptions",{"_index":3016,"title":{"interfaces/NgxModalAriaLabelledOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxmodalarialabeloptions",{"_index":3015,"title":{"interfaces/NgxModalAriaLabelOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxmodalbaseconfiguration",{"_index":3057,"title":{"interfaces/NgxModalBaseConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalbaseoptions",{"_index":3061,"title":{"interfaces/NgxModalBaseOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalcdkmodalconfiguration",{"_index":3027,"title":{"interfaces/NgxModalCDKModalConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalclose",{"_index":3122,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["ngxmodalcomponentconfiguration",{"_index":3045,"title":{"interfaces/NgxModalComponentConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalcomponentoptions",{"_index":3070,"title":{"interfaces/NgxModalComponentOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalconfiguration",{"_index":3060,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxmodalconfigurationtoken",{"_index":3107,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["ngxmodalglobalcdkconfiguration",{"_index":3019,"title":{"interfaces/NgxModalGlobalCDKConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodallabelariaoptions",{"_index":3017,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxmodaloptions",{"_index":3071,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxmodalrole",{"_index":3007,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxmodalservice",{"_index":2971,"title":{"injectables/NgxModalService.html":{}},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{}}}],["ngxmodaltypeoptions",{"_index":3069,"title":{"interfaces/NgxModalTypeOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxngxwindowservice",{"_index":4311,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["ngxonlineservice",{"_index":1814,"title":{"injectables/NgxOnlineService.html":{}},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{}}}],["ngxopenrowstatecolumn",{"_index":4663,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngxqueryparamformsynccomponent",{"_index":594,"title":{"directives/NgxQueryParamFormSyncComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxreplaceelements",{"_index":3308,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsconfiguration",{"_index":3301,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"miscellaneous/typealiases.html":{}}}],["ngxreplaceelementsconfigurationelement",{"_index":3295,"title":{"interfaces/NgxReplaceElementsConfigurationElement.html":{}},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["ngxreplaceelementsconfigurationtoken",{"_index":3365,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsitem",{"_index":3302,"title":{"interfaces/NgxReplaceElementsItem.html":{}},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementspipe",{"_index":3303,"title":{"pipes/NgxReplaceElementsPipe.html":{}},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsselector",{"_index":3299,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"miscellaneous/typealiases.html":{}}}],["ngxsaveonexitabstractservice",{"_index":3390,"title":{"classes/NgxSaveOnExitAbstractService.html":{}},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["ngxsaveonexitcomponent",{"_index":595,"title":{"directives/NgxSaveOnExitComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxsignalstore",{"_index":3437,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["ngxsignalstoreconfiguration",{"_index":3467,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["ngxsignalstoredispatchactions",{"_index":3481,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["ngxsignalstorerecord",{"_index":3439,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["ngxsignalstoreselectfunction",{"_index":3463,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["ngxsignalstoreservice",{"_index":3435,"title":{"injectables/NgxSignalStoreService.html":{}},"body":{"injectables/NgxSignalStoreService.html":{}}}],["ngxsignalstoreslice",{"_index":3454,"title":{"interfaces/NgxSignalStoreSlice.html":{}},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["ngxsignalstoreslicearraygenerator",{"_index":3464,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["ngxsignalstoreslicearraymethods",{"_index":3474,"title":{"interfaces/NgxSignalStoreSliceArrayMethods.html":{}},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicebasemethods",{"_index":3475,"title":{"interfaces/NgxSignalStoreSliceBaseMethods.html":{}},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoresliceconfiguration",{"_index":3469,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["ngxsignalstoreslicedatatype",{"_index":3472,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["ngxsignalstoreslicegenerator",{"_index":3465,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["ngxsignalstoreslicemethods",{"_index":3473,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["ngxsignalstorestate",{"_index":3447,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["ngxsignalstoreviewstate",{"_index":3446,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstorage",{"_index":3484,"title":{"interfaces/NgxStorage.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstoragebaseevent",{"_index":3491,"title":{"interfaces/NgxStorageBaseEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstorageclearevent",{"_index":3495,"title":{"interfaces/NgxStorageClearEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstorageevent",{"_index":3497,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstoragerecord",{"_index":3489,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstorageremoveevent",{"_index":3496,"title":{"interfaces/NgxStorageRemoveEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstorageservice",{"_index":3498,"title":{"injectables/NgxStorageService.html":{}},"body":{"injectables/NgxStorageService.html":{}}}],["ngxstoragesetevent",{"_index":3492,"title":{"interfaces/NgxStorageSetEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstoragetype",{"_index":3490,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstore",{"_index":3598,"title":{"interfaces/NgxStore.html":{}},"body":{"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ngxstoreactions",{"_index":3601,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstoreselectors",{"_index":3602,"title":{},"body":{"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ngxstoreservice",{"_index":3250,"title":{"injectables/NgxStoreService.html":{}},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:13",{"_index":4407,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:15",{"_index":4408,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:42",{"_index":4385,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:51",{"_index":4386,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:60",{"_index":4383,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:69",{"_index":4384,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxtablecelldirective",{"_index":596,"title":{"directives/NgxTableCellDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableclass",{"_index":3673,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["ngxtablecomponent",{"_index":548,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableconfiguration",{"_index":3666,"title":{"interfaces/NgxTableConfiguration.html":{}},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtableconfigurationtoken",{"_index":3690,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablecypressdatatags",{"_index":718,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtablecypressdatatagsbase",{"_index":3691,"title":{"interfaces/NgxTableCypressDataTagsBase.html":{}},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["ngxtablegetpipe",{"_index":1711,"title":{"pipes/NgxTableGetPipe.html":{}},"body":{"components/NgxDateTableCellComponent.html":{},"pipes/NgxTableGetPipe.html":{}}}],["ngxtablehasobservers",{"_index":3711,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["ngxtablehasobserverspipe",{"_index":3709,"title":{"pipes/NgxTableHasObserversPipe.html":{}},"body":{"pipes/NgxTableHasObserversPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtableopenrowstatetemplateabstractcomponent",{"_index":597,"title":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableselectcolumn",{"_index":4662,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngxtableselecttemplateabstractcomponent",{"_index":598,"title":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableshowheader",{"_index":3733,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["ngxtableshowheaderpipe",{"_index":3729,"title":{"pipes/NgxTableShowHeaderPipe.html":{}},"body":{"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtableshowheaderrequirements",{"_index":3696,"title":{"interfaces/NgxTableShowHeaderRequirements.html":{}},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["ngxtablesortdirection",{"_index":703,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"miscellaneous/enumerations.html":{}}}],["ngxtablesortdirection.ascending",{"_index":722,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxTableSortIconPipe.html":{}}}],["ngxtablesortdirection.descending",{"_index":727,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["ngxtablesortevent",{"_index":719,"title":{"interfaces/NgxTableSortEvent.html":{}},"body":{"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablesorticon",{"_index":3753,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["ngxtablesorticonpipe",{"_index":3749,"title":{"pipes/NgxTableSortIconPipe.html":{}},"body":{"pipes/NgxTableSortIconPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablesorttemplateabstractcomponent",{"_index":599,"title":{"directives/NgxTableSortTemplateAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltip",{"_index":3796,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltip]'},{'name",{"_index":602,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltipabstractcomponent",{"_index":600,"title":{"directives/NgxTooltipAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltipactiveelementevent",{"_index":3786,"title":{"interfaces/NgxTooltipActiveElementEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtooltipactivetooltipevent",{"_index":3793,"title":{"interfaces/NgxTooltipActiveTooltipEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtooltipbaseevent",{"_index":3788,"title":{"interfaces/NgxTooltipBaseEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipcomponent",{"_index":3797,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltipconfiguration",{"_index":3789,"title":{"interfaces/NgxTooltipConfiguration.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltipconfigurationtoken",{"_index":3872,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["ngxtooltipdirective",{"_index":601,"title":{"directives/NgxTooltipDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltipdisabled",{"_index":3798,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltipevent",{"_index":3794,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtooltipid",{"_index":3799,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltipinactiveevent",{"_index":3792,"title":{"interfaces/NgxTooltipInactiveEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtooltipitem",{"_index":3791,"title":{"interfaces/NgxTooltipItem.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltipposition",{"_index":3781,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtooltippositionclass",{"_index":3782,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtooltipservice",{"_index":3764,"title":{"injectables/NgxTooltipService.html":{}},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtouraction",{"_index":3933,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtourbackdropclipevent",{"_index":3922,"title":{"interfaces/NgxTourBackdropClipEvent.html":{}},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourdirection",{"_index":3926,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtourinteraction",{"_index":3927,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtouritemdirective",{"_index":603,"title":{"directives/NgxTourItemDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourregistrationevent",{"_index":3929,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtourrouteoptions",{"_index":3931,"title":{"interfaces/NgxTourRouteOptions.html":{}},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourservice",{"_index":505,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["ngxtourshowwhen",{"_index":3990,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["ngxtourshowwhen]'},{'name",{"_index":606,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourshowwhendirective",{"_index":605,"title":{"directives/NgxTourShowWhenDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourshowwhenelse",{"_index":3991,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["ngxtourstep",{"_index":3934,"title":{"interfaces/NgxTourStep.html":{}},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourstep.offset",{"_index":4055,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["ngxtourstepcomponent",{"_index":607,"title":{"directives/NgxTourStepComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourstepcomponent:103",{"_index":662,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:105",{"_index":648,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:112",{"_index":647,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:33",{"_index":665,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:38",{"_index":644,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:45",{"_index":643,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:53",{"_index":638,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:58",{"_index":658,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:63",{"_index":655,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:68",{"_index":642,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:73",{"_index":635,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:78",{"_index":636,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:83",{"_index":631,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:88",{"_index":637,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:93",{"_index":640,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:98",{"_index":650,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepoffset",{"_index":3963,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtourstepposition",{"_index":3928,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtourtokenconfiguration",{"_index":4049,"title":{"interfaces/NgxTourTokenConfiguration.html":{}},"body":{"interfaces/NgxTourTokenConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtourtokentype",{"_index":4053,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtreegrid",{"_index":4149,"title":{},"body":{"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtreegrid]'},{'name",{"_index":611,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridcell",{"_index":4061,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxtreegridcell]'},{'name",{"_index":609,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridcelldirective",{"_index":608,"title":{"directives/NgxTreeGridCellDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridcellrow",{"_index":4062,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxtreegridcelltarget",{"_index":4104,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"miscellaneous/typealiases.html":{}}}],["ngxtreegriddirective",{"_index":610,"title":{"directives/NgxTreeGridDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridexpandable",{"_index":4150,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["ngxtreegridrow",{"_index":613,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridrowdirective",{"_index":612,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridrowtarget",{"_index":4105,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"miscellaneous/typealiases.html":{}}}],["ngxutils",{"_index":1412,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["ngxvalidators",{"_index":4191,"title":{"classes/NgxValidators.html":{}},"body":{"classes/NgxValidators.html":{}}}],["ngxwindowservice",{"_index":1406,"title":{"injectables/NgxWindowService.html":{}},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["node_modules/@ngrx/signals/src/signal",{"_index":3460,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["non",{"_index":1466,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["none",{"_index":1117,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{}}}],["noninfringement",{"_index":4869,"title":{},"body":{"index.html":{},"license.html":{}}}],["note",{"_index":3337,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["notes",{"_index":2732,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["nothing",{"_index":67,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{}}}],["notice",{"_index":4855,"title":{},"body":{"index.html":{},"license.html":{}}}],["notify",{"_index":1653,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["now",{"_index":3356,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["npm",{"_index":4760,"title":{},"body":{"index.html":{}}}],["null",{"_index":48,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"miscellaneous/typealiases.html":{}}}],["number",{"_index":190,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["number(value",{"_index":3595,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["numbers",{"_index":199,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["numbersignal",{"_index":4945,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["obj",{"_index":23,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxMobileLayoutService.html":{},"dependencies.html":{}}}],["object",{"_index":36,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"miscellaneous/typealiases.html":{}}}],["object.entries(item.data).foreach(([key",{"_index":3381,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["object.entries(record).foreach(([key",{"_index":3588,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["object.entries(storage).foreach(([key",{"_index":3591,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["object.entries(this.sortabletablecellrecord()).foreach(([cellname",{"_index":4643,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["object.keys(categories).length",{"_index":1619,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["object.keys(data",{"_index":1985,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["object.keys(data).map((key",{"_index":1983,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["object.keys(data).slice(0",{"_index":1990,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["object.keys(parseddata",{"_index":3289,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["object.keys(selectors).reduce((previous",{"_index":3640,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["object.keys(value).length",{"_index":3279,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["object.values(group.controls",{"_index":63,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["object.values(this.markers",{"_index":2756,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["object.values(this.rowsformgroup.controls).some",{"_index":4585,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["object.values(this.sortabletablecellrecord()).foreach((cell",{"_index":4657,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["object.values(value).every((selected",{"_index":4674,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["objects",{"_index":3549,"title":{},"body":{"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["observable",{"_index":268,"title":{},"body":{"injectables/EffectsService.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["observable.pipe(sharereplay",{"_index":2324,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["observablearray",{"_index":4946,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observableblob",{"_index":4947,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observableboolean",{"_index":4948,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observablebooleanrecord",{"_index":4949,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observablenumber",{"_index":4950,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observablerecord",{"_index":4951,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observables",{"_index":1525,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxStorageService.html":{},"interfaces/TableCellTemplate.html":{}}}],["observablestring",{"_index":4952,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observablestringrecord",{"_index":4953,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["observe",{"_index":1190,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["observer",{"_index":3713,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["observers",{"_index":447,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["observers.pipe.ts",{"_index":442,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["observers.pipe.ts:13",{"_index":3712,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["observers.pipe.ts:8",{"_index":446,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["observers/has",{"_index":441,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["obtaining",{"_index":4837,"title":{},"body":{"index.html":{},"license.html":{}}}],["occurring",{"_index":3547,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["of(mockchannel",{"_index":279,"title":{},"body":{"injectables/EffectsService.html":{}}}],["of(mockprivatechannel",{"_index":280,"title":{},"body":{"injectables/EffectsService.html":{}}}],["of(mockvideos",{"_index":281,"title":{},"body":{"injectables/EffectsService.html":{}}}],["of(payload",{"_index":4447,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["of(this.currentlanguage",{"_index":827,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["offer",{"_index":3541,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["offline",{"_index":1747,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"miscellaneous/typealiases.html":{}}}],["offline'},{'name",{"_index":558,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["offset",{"_index":3948,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["old",{"_index":3584,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["oldvalue",{"_index":3493,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["omit",{"_index":2859,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["onblur",{"_index":744,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["once",{"_index":1887,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["onchange",{"_index":1626,"title":{},"body":{"injectables/NgxCookieService.html":{},"interfaces/TableCellTemplate.html":{}}}],["onchange.bind(this",{"_index":1628,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onchanged",{"_index":4480,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["onchanges",{"_index":2586,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["onclose",{"_index":3064,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["onconsent",{"_index":1596,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onconsent.bind(this",{"_index":1625,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["ondestroy",{"_index":366,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["ondestroycomponent",{"_index":2032,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["ondestroyed",{"_index":2042,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["ondestroysubject",{"_index":1760,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["one",{"_index":7,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["one.ts",{"_index":4958,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ones",{"_index":725,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["onescape",{"_index":627,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["onfirstconsent",{"_index":1602,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onfirstconsent.bind(this",{"_index":1623,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onfocus",{"_index":745,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["oninit",{"_index":1011,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["online",{"_index":1815,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{}}}],["onlineservice",{"_index":1761,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["onlinesubject",{"_index":3179,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["onlyself",{"_index":438,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{}}}],["onmodalhide",{"_index":1632,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onmodalhide.bind(this",{"_index":1634,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onmodalshow",{"_index":1629,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onmodalshow.bind(this",{"_index":1631,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onpush",{"_index":1849,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["ontouch",{"_index":4479,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ontouched",{"_index":4592,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["onvisible",{"_index":3940,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["open",{"_index":945,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["open(options",{"_index":3092,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["open/closed",{"_index":1059,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["opened",{"_index":1103,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["openedindex",{"_index":4547,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["openflyout",{"_index":2908,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["openflyout(flyout",{"_index":2914,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["opening",{"_index":3111,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["openrows",{"_index":4495,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["openrowstate",{"_index":3689,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["openrowstatetemplate",{"_index":4522,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["opens",{"_index":3094,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["operator",{"_index":508,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["operators",{"_index":504,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/StoreEffects.html":{}}}],["opinionated",{"_index":1128,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["opt",{"_index":1510,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["option",{"_index":4497,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["optional",{"_index":12,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":1663,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["options",{"_index":35,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxStore.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["options.autoclose",{"_index":3131,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.autofocus",{"_index":3155,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.closeonnavigation",{"_index":3165,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.component",{"_index":3115,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.conditionalfunction",{"_index":52,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["options.controls",{"_index":53,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["options.data",{"_index":3171,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.describedbyid",{"_index":3151,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.direction",{"_index":3158,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.has('when",{"_index":3743,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["options.hasbackdrop",{"_index":3160,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.interface.ts",{"_index":436,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{}}}],["options.label",{"_index":3149,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.labelledbyid",{"_index":3150,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.panelclass",{"_index":3162,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.restorefocus",{"_index":3154,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.role",{"_index":3147,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.ts",{"_index":149,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{}}}],["options.type",{"_index":3174,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.viewcontainerref",{"_index":3156,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["optionsvalue",{"_index":3085,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["order",{"_index":97,"title":{},"body":{"classes/BaseFormAccessor.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["original",{"_index":211,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/TransformPipe.html":{},"miscellaneous/typealiases.html":{}}}],["original.slice(0",{"_index":213,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["original.slice(index",{"_index":214,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["originx",{"_index":3859,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["originy",{"_index":3860,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["others",{"_index":2529,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["otherwise",{"_index":4878,"title":{},"body":{"index.html":{},"license.html":{}}}],["ouput",{"_index":452,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["out",{"_index":1308,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"index.html":{},"license.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["outcome",{"_index":1846,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["outerhtml",{"_index":3331,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["output",{"_index":320,"title":{},"body":{"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["output.observers.length",{"_index":455,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["output['listeners']?.length",{"_index":3715,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["outputemitterref",{"_index":319,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["outputs",{"_index":2601,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["outputtoobservable",{"_index":3106,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["outputtoobservable(modal.action).pipe(startwith(undefined",{"_index":3120,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["outputtoobservable(modal.close).pipe",{"_index":3121,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["outside",{"_index":3889,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["over",{"_index":2323,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["overarching",{"_index":4148,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["overlay",{"_index":3867,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlaypositionbuilder",{"_index":3836,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayref",{"_index":3837,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayservice",{"_index":3838,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayx",{"_index":3862,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayy",{"_index":3863,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["override",{"_index":560,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["overrideconfiguration",{"_index":1762,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["overview",{"_index":4884,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":800,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxModalService.html":{}}}],["overwrites",{"_index":3088,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["overwritten",{"_index":4526,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["p",{"_index":1886,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["package",{"_index":240,"title":{"dependencies.html":{},"properties.html":{}},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"index.html":{}}}],["packages",{"_index":2635,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"index.html":{}}}],["padding",{"_index":3943,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["page",{"_index":1593,"title":{},"body":{"injectables/NgxCookieService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxWindowService.html":{}}}],["pages",{"_index":4786,"title":{},"body":{"index.html":{}}}],["pairs",{"_index":1426,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["pairwise",{"_index":3871,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["panelclass",{"_index":3024,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["paragraph",{"_index":1972,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["param",{"_index":34,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/typealiases.html":{}}}],["parameter",{"_index":2244,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["parameters",{"_index":193,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["parameters[1",{"_index":1186,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["parameters[1]['params",{"_index":1183,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["parameters[2",{"_index":1199,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["params",{"_index":40,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxI18nService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{}}}],["parent",{"_index":453,"title":{},"body":{"pipes/HasObserversPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["parent.appendchild(element",{"_index":860,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["parent.contains(element",{"_index":2994,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["parent.setattribute('aria",{"_index":861,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["parentelement",{"_index":1864,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["parentelement.getattribute('aria",{"_index":1872,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["parentelement.setattribute('aria",{"_index":1869,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["parse",{"_index":3368,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{}}}],["parsed",{"_index":3546,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["parseddata",{"_index":3286,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["parser",{"_index":3371,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["parser.parsefromstring(value",{"_index":3372,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["parses",{"_index":3522,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["parsevalue",{"_index":3508,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["parsevalue(value",{"_index":3520,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["part",{"_index":2065,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["partial",{"_index":169,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["particular",{"_index":4867,"title":{},"body":{"index.html":{},"license.html":{}}}],["particularly",{"_index":4201,"title":{},"body":{"classes/NgxValidators.html":{}}}],["parts",{"_index":3318,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["pass",{"_index":102,"title":{},"body":{"classes/BaseFormAccessor.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["passed",{"_index":347,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["passes",{"_index":807,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["patch",{"_index":1140,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["patch(url",{"_index":1164,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["patched",{"_index":4576,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["patchvalue(true",{"_index":4650,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["path",{"_index":1488,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxTableGetPipe.html":{}}}],["paths",{"_index":2292,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"miscellaneous/typealiases.html":{}}}],["path}${lang}.json${this.config.cachebust",{"_index":2400,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["pattern",{"_index":939,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["payload",{"_index":138,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["perform",{"_index":1048,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["performance",{"_index":3738,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["permission",{"_index":1232,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"index.html":{},"license.html":{}}}],["permission(s",{"_index":2199,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["permission.directive.ts",{"_index":2179,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:103",{"_index":2191,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:110",{"_index":2192,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:167",{"_index":2190,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:30",{"_index":2204,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:31",{"_index":2193,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:34",{"_index":2194,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:39",{"_index":2195,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:44",{"_index":2202,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:45",{"_index":2203,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:46",{"_index":2196,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:47",{"_index":2197,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:52",{"_index":2198,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:57",{"_index":2201,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:62",{"_index":2200,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:67",{"_index":2187,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:72",{"_index":2188,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:77",{"_index":2189,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:82",{"_index":2186,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.pipe.ts",{"_index":2215,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:18",{"_index":2221,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:19",{"_index":2222,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:24",{"_index":2224,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:28",{"_index":2225,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:33",{"_index":2223,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:42",{"_index":2217,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:55",{"_index":2220,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:68",{"_index":2218,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:92",{"_index":2216,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission/has",{"_index":2178,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["permissions",{"_index":1230,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["permissions(s",{"_index":2180,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permissiontype",{"_index":1233,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["permit",{"_index":4852,"title":{},"body":{"index.html":{},"license.html":{}}}],["person",{"_index":4836,"title":{},"body":{"index.html":{},"license.html":{}}}],["persons",{"_index":4853,"title":{},"body":{"index.html":{},"license.html":{}}}],["pipe",{"_index":174,"title":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"pipes/TransformPipe.html":{}},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["pipe(filter((languages",{"_index":2455,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["pipe(switchmap",{"_index":4412,"title":{},"body":{"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["pipe(usemockdataduringtour('world",{"_index":493,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["pipe,pipetransform,outputemitterref",{"_index":3714,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["pipe/get.pipe",{"_index":1733,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["pipe/get.pipe.ts",{"_index":3699,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["pipe/get.pipe.ts:16",{"_index":3700,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["pipes",{"_index":176,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"overview.html":{}}}],["pipes/get",{"_index":1732,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["pipetransform",{"_index":204,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"pipes/TransformPipe.html":{}}}],["placed",{"_index":887,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["platform",{"_index":4285,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["platform_id",{"_index":4332,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["platformid",{"_index":4271,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["platforms",{"_index":4310,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["played",{"_index":2862,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{}}}],["please",{"_index":786,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourStepComponent.html":{},"index.html":{}}}],["polite",{"_index":1749,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"miscellaneous/typealiases.html":{}}}],["portal",{"_index":3907,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["portions",{"_index":4858,"title":{},"body":{"index.html":{},"license.html":{}}}],["position",{"_index":620,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"injectables/NgxWindowService.html":{},"miscellaneous/typealiases.html":{}}}],["positionclass",{"_index":3765,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["positionrecord",{"_index":3839,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["positionstrategy",{"_index":3902,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["possible",{"_index":652,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["post",{"_index":1141,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["post(url",{"_index":1167,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["postmessage",{"_index":1375,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["postmessage(channelname",{"_index":1388,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["pr",{"_index":4810,"title":{},"body":{"index.html":{}}}],["practices",{"_index":688,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["practices#selecting",{"_index":690,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["precedence",{"_index":3030,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["preconditions",{"_index":3097,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["preference",{"_index":1617,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["preferences",{"_index":1585,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["prepend",{"_index":3479,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["present",{"_index":1295,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["preserve",{"_index":3442,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["preserved",{"_index":1862,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["pressed",{"_index":357,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["prev",{"_index":4954,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["prevent",{"_index":1101,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["prevented",{"_index":3413,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["previous",{"_index":2426,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"miscellaneous/typealiases.html":{}}}],["previous.active",{"_index":3890,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["previous.id",{"_index":3884,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["previous.source",{"_index":3887,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["previouscontainer",{"_index":881,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["previousindex",{"_index":879,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["previously",{"_index":3040,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["priority",{"_index":1868,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["private",{"_index":369,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["proceed",{"_index":3054,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["programmatically",{"_index":4120,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["project",{"_index":3062,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["projects",{"_index":4791,"title":{},"body":{"index.html":{}}}],["promise",{"_index":1506,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["proof",{"_index":3501,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["prop",{"_index":3377,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"dependencies.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"properties.html":{}}}],["property",{"_index":136,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"pipes/HasObserversPipe.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["proposed",{"_index":2446,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["props",{"_index":3482,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["protected",{"_index":367,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["provide",{"_index":255,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxI18nConfiguration.html":{},"modules/NgxI18nModule.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["provided",{"_index":379,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["providedin",{"_index":1177,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["providengxreplaceelementsconfiguration",{"_index":3343,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["provider",{"_index":241,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"miscellaneous/typealiases.html":{}}}],["providers",{"_index":250,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"modules/NgxI18nModule.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"overview.html":{}}}],["providers.util.ts",{"_index":229,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["providers/accessor",{"_index":228,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["provides",{"_index":335,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"injectables/NgxStorageService.html":{},"index.html":{}}}],["providing",{"_index":1131,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["public",{"_index":184,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["publish",{"_index":4846,"title":{},"body":{"index.html":{},"license.html":{}}}],["pure",{"_index":2139,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["purpose",{"_index":4868,"title":{},"body":{"index.html":{},"license.html":{}}}],["purposes",{"_index":1433,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["put",{"_index":1142,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["put(url",{"_index":1169,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["queries",{"_index":2785,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query",{"_index":2252,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["query.removeeventlistener('change",{"_index":2842,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts",{"_index":2783,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:102",{"_index":2797,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:121",{"_index":2801,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:13",{"_index":2811,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:18",{"_index":2810,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:23",{"_index":2809,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:29",{"_index":2806,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:37",{"_index":2808,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts:44",{"_index":2804,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["querychangedevent",{"_index":2829,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["querychangedevent.currenttarget",{"_index":2831,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["querychangedsubject",{"_index":2792,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["queryid",{"_index":2838,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["queryidmap",{"_index":2793,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["querylist",{"_index":4507,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["querylistmap",{"_index":2794,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["queryparam",{"_index":3222,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queryparams",{"_index":3192,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queryparamshandling",{"_index":3291,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queryparamstype",{"_index":3203,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["quick",{"_index":4778,"title":{},"body":{"index.html":{}}}],["radio",{"_index":3687,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["radiocontrol",{"_index":4499,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["radiotemplate",{"_index":4518,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["random",{"_index":3243,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["range",{"_index":4224,"title":{},"body":{"classes/NgxValidators.html":{}}}],["range.validator",{"_index":4251,"title":{},"body":{"classes/NgxValidators.html":{}}}],["range.validator.ts",{"_index":4916,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["range/date",{"_index":4250,"title":{},"body":{"classes/NgxValidators.html":{},"miscellaneous/typealiases.html":{}}}],["reactiveformsmodule",{"_index":4467,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["read",{"_index":3445,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["readme",{"_index":177,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"pipes/TransformPipe.html":{}}}],["readme’s",{"_index":4795,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":300,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"miscellaneous/typealiases.html":{}}}],["ready",{"_index":2152,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["real",{"_index":3550,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["really",{"_index":1648,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["reason",{"_index":1098,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["receive",{"_index":3707,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["record",{"_index":783,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nLoadingService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxTooltipService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["record[key",{"_index":3575,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["record[key].asobservable",{"_index":3576,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["record[key]?.next(undefined",{"_index":3586,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["records",{"_index":4622,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["recreate",{"_index":2647,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["redirect",{"_index":1238,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["reduce",{"_index":3275,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["reduce((previous",{"_index":2425,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["reducers",{"_index":130,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["reducers.ts",{"_index":160,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"miscellaneous/typealiases.html":{}}}],["redux",{"_index":4775,"title":{},"body":{"index.html":{}}}],["ref",{"_index":1914,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["refer",{"_index":2469,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["reference",{"_index":1436,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["refers",{"_index":3357,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["reformat",{"_index":469,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["reformat.trim",{"_index":475,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["regarding",{"_index":4805,"title":{},"body":{"index.html":{}}}],["regardless",{"_index":1060,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["region",{"_index":792,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{}}}],["register",{"_index":963,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["registercell",{"_index":4155,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registercell(index",{"_index":4169,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registerdraganddropitem",{"_index":904,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["registerdraganddropitem(item",{"_index":912,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["registered",{"_index":970,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxTreeGridDirective.html":{}}}],["registeritem",{"_index":947,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["registeritem(item",{"_index":961,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["registermediaqueries",{"_index":2795,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["registermediaqueries(...queries",{"_index":2803,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["registeronchange(fn",{"_index":4589,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["registerontouched(fn",{"_index":4593,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["registerrow",{"_index":4156,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registerrow(row",{"_index":4172,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registers",{"_index":4171,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["related",{"_index":4313,"title":{},"body":{"injectables/NgxWindowService.html":{},"index.html":{}}}],["relating",{"_index":4764,"title":{},"body":{"index.html":{}}}],["relativeto",{"_index":3285,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["reload",{"_index":2550,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["remaining",{"_index":1242,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxI18nRootService.html":{}}}],["remove",{"_index":476,"title":{},"body":{"pipes/IbanPipe.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["removecookie",{"_index":1542,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["removecookie(cookie",{"_index":1564,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["removed",{"_index":2877,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["removefocus",{"_index":746,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["removeitem",{"_index":948,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["removeitem(item",{"_index":964,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["removeitem(key",{"_index":3523,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["removeonblur",{"_index":3801,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["removeonmouseout",{"_index":3766,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["removerow",{"_index":4157,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["removerow(index",{"_index":4174,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["removes",{"_index":966,"title":{},"body":{"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridDirective.html":{}}}],["removetooltip",{"_index":3802,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["removing",{"_index":2755,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["render",{"_index":1781,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["rendered",{"_index":1427,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{}}}],["renderelsetemplate",{"_index":2004,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["renderer",{"_index":1021,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["renderer2",{"_index":1077,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["rendering",{"_index":1614,"title":{},"body":{"injectables/NgxCookieService.html":{},"interfaces/TableCellTemplate.html":{}}}],["renderinitialtemplate",{"_index":1765,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["renders",{"_index":1772,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["rendertemplate",{"_index":1766,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["rendertemplate(status",{"_index":1778,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["renderthentemplate",{"_index":2005,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["reordered",{"_index":847,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"miscellaneous/typealiases.html":{}}}],["repeat(${longestrow",{"_index":1480,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["replace",{"_index":467,"title":{},"body":{"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["replace(`{{#from",{"_index":848,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["replace(`{{#to",{"_index":849,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["replacement",{"_index":3378,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replacement.innerhtml",{"_index":3383,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replacement.setattribute(key",{"_index":3382,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replaces",{"_index":322,"title":{},"body":{"directives/FocusClickDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["replacing",{"_index":3350,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replaysubject",{"_index":2807,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["repo",{"_index":4753,"title":{},"body":{"index.html":{}}}],["reposition",{"_index":3897,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["repository",{"_index":4798,"title":{},"body":{"index.html":{}}}],["represent",{"_index":682,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["represented",{"_index":3543,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["represents",{"_index":1683,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["request",{"_index":1150,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"miscellaneous/functions.html":{}}}],["requested",{"_index":2421,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{}}}],["requestedtranslations",{"_index":2390,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["requests",{"_index":2246,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["require",{"_index":2750,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["requireatleastone",{"_index":3694,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"miscellaneous/typealiases.html":{}}}],["required",{"_index":72,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["required.validator",{"_index":4245,"title":{},"body":{"classes/NgxValidators.html":{}}}],["required.validator.ts",{"_index":9,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["required/all",{"_index":4244,"title":{},"body":{"classes/NgxValidators.html":{}}}],["required/at",{"_index":8,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["required/depended",{"_index":4256,"title":{},"body":{"classes/NgxValidators.html":{}}}],["requiredfeatures",{"_index":1288,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredfeatures.every((feature",{"_index":1347,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredfeatures.some((feature",{"_index":1349,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredpermissions",{"_index":1291,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredpermissions.every((permission",{"_index":1355,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredpermissions.some((permission",{"_index":1357,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requirements.ts",{"_index":3693,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"miscellaneous/typealiases.html":{}}}],["requires",{"_index":3050,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["rerender",{"_index":4700,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["res.status",{"_index":2412,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["reset",{"_index":2154,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/TableCellTemplate.html":{},"overview.html":{}}}],["resetformonnewdata",{"_index":4535,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["resetngxtableform",{"_index":4471,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["resets",{"_index":699,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["resetsortdirection",{"_index":679,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["resize",{"_index":4342,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["resolve",{"_index":2543,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["resolver",{"_index":2537,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["resolvers",{"_index":2351,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["resources",{"_index":2411,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["respective",{"_index":4794,"title":{},"body":{"index.html":{}}}],["respectively",{"_index":3552,"title":{},"body":{"injectables/NgxStorageService.html":{},"index.html":{}}}],["respond",{"_index":2981,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["response",{"_index":1191,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["response.body",{"_index":1196,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["response.headers.get('content",{"_index":1194,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["response.user",{"_index":1330,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["responsetype",{"_index":1188,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["rest",{"_index":1647,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["restore",{"_index":3039,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["restorefocus",{"_index":3043,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["restriction",{"_index":4841,"title":{},"body":{"index.html":{},"license.html":{}}}],["result",{"_index":831,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTreeGridCellDirective.html":{},"pipes/TransformPipe.html":{}}}],["result.length",{"_index":2309,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["result.replace",{"_index":837,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["results",{"_index":88,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["resulttype",{"_index":3610,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["resulttype[key]['actions",{"_index":3616,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["resulttype[key]['selectors",{"_index":3613,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["return",{"_index":44,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["returned",{"_index":3706,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["returning",{"_index":3388,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["returns",{"_index":196,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["returntype",{"_index":4288,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["reunes",{"_index":4824,"title":{},"body":{"index.html":{}}}],["revision",{"_index":1512,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["right",{"_index":2857,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"miscellaneous/typealiases.html":{}}}],["rights",{"_index":4844,"title":{},"body":{"index.html":{},"license.html":{}}}],["role",{"_index":977,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["root",{"_index":1178,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["rootclass",{"_index":621,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["rooti18nservice",{"_index":2495,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["roottarget",{"_index":2676,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["route",{"_index":1223,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["route.types.ts",{"_index":1219,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"miscellaneous/typealiases.html":{}}}],["router",{"_index":3193,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["routermodule",{"_index":2868,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["routerstatesnapshot",{"_index":3401,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["routes",{"_index":1220,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["routing",{"_index":2897,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["row",{"_index":1473,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["row)?.focus",{"_index":4136,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["row.directive",{"_index":4118,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["rowclass",{"_index":4538,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["rowclicked",{"_index":3679,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["rowitem",{"_index":1714,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["rowkey",{"_index":1712,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["rows",{"_index":3672,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["rowsformgroup",{"_index":4496,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["rtl",{"_index":1503,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["run",{"_index":1206,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["runariachecks",{"_index":3078,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["runariachecks(options",{"_index":3095,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["runinbrowser",{"_index":4279,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["runinbrowser(action",{"_index":4286,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["running",{"_index":2145,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxModalService.html":{}}}],["rxjs",{"_index":272,"title":{},"body":{"injectables/EffectsService.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"dependencies.html":{},"index.html":{}}}],["rxjs/operators",{"_index":2315,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["sadly",{"_index":166,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["safe",{"_index":4268,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["safehtml",{"_index":3312,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["safely",{"_index":3881,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["same",{"_index":1874,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["samesite",{"_index":1489,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["sanitize",{"_index":3386,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["sanitizer",{"_index":3315,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["save",{"_index":2479,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"injectables/NgxStorageService.html":{}}}],["saved",{"_index":2812,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["saves",{"_index":2382,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["saving",{"_index":3545,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["scan",{"_index":2313,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["scan((actions",{"_index":2302,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["scramble",{"_index":3212,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambled",{"_index":3237,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams",{"_index":3197,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams(params",{"_index":3210,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams(value",{"_index":3254,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams?(params",{"_index":3293,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambler",{"_index":3241,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambler(value.sorting",{"_index":3255,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambling",{"_index":3263,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scroll",{"_index":3895,"title":{},"body":{"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["scrollingup",{"_index":4272,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrollingupsubject",{"_index":4273,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrolls",{"_index":3898,"title":{},"body":{"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["scrollstrategy",{"_index":3900,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["scrollto",{"_index":4280,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrollto(offset",{"_index":4289,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrollup",{"_index":4349,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["se",{"_index":4259,"title":{},"body":{"classes/NgxValidators.html":{}}}],["searches",{"_index":4096,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["searchquery",{"_index":3244,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["second",{"_index":1844,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["see",{"_index":38,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxStore.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["seen",{"_index":659,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["select",{"_index":98,"title":{},"body":{"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["selectable",{"_index":4529,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectablecolumn",{"_index":4562,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectablekey",{"_index":4530,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectabletype",{"_index":4531,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectall",{"_index":288,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selectchannelmessageerrors",{"_index":1376,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selectchannelmessageerrors(channelname",{"_index":1393,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selectchannelmessages",{"_index":1377,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selectchannelmessages(channelname",{"_index":1398,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selected",{"_index":755,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["selectedrow",{"_index":4503,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selecterror",{"_index":142,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selecterrorfromstore",{"_index":3619,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selecterrorfromstore(selector",{"_index":3625,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selecterrormessage",{"_index":143,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selecterrormessagefromstore",{"_index":3620,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selecterrormessagefromstore(selector",{"_index":3627,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectfromstore",{"_index":3621,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectfromstore(selector",{"_index":3629,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectid",{"_index":156,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["selection",{"_index":4675,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectloading",{"_index":141,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selectloadingfromstore",{"_index":3622,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectloadingfromstore(selector",{"_index":3632,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selector",{"_index":298,"title":{},"body":{"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["selector.selectall",{"_index":3650,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selector.selecterror",{"_index":3654,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selector.selecterrormessage",{"_index":3656,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selector.selectloading",{"_index":3652,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selectors",{"_index":131,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["selectors.channel",{"_index":4388,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["selectors.subscribercount",{"_index":4399,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["selectors.videos",{"_index":4401,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["selectrow(index",{"_index":4647,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sell",{"_index":4850,"title":{},"body":{"index.html":{},"license.html":{}}}],["send",{"_index":1153,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["sending",{"_index":3240,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sends",{"_index":1391,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["separately",{"_index":2828,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["series",{"_index":2291,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["server",{"_index":1612,"title":{},"body":{"injectables/NgxCookieService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxWindowService.html":{}}}],["serves",{"_index":2668,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["service",{"_index":771,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxWindowService.html":{}}}],["service.abstract.ts",{"_index":2231,"title":{},"body":{"classes/NgxI18nAbstractService.html":{}}}],["service.abstract.ts:9",{"_index":2232,"title":{},"body":{"classes/NgxI18nAbstractService.html":{}}}],["service.ts",{"_index":4365,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:14",{"_index":4389,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:17",{"_index":4395,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:20",{"_index":4391,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:23",{"_index":4393,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:27",{"_index":4402,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:30",{"_index":4406,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:33",{"_index":4404,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:34",{"_index":4405,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:37",{"_index":4400,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:40",{"_index":4397,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:42",{"_index":4398,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:44",{"_index":4380,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:52",{"_index":4376,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:56",{"_index":4382,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:65",{"_index":4377,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:69",{"_index":4378,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:73",{"_index":4379,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service/online.service.ts",{"_index":3178,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:10",{"_index":3185,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:15",{"_index":3184,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:20",{"_index":3182,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:25",{"_index":3180,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:51",{"_index":3181,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/storage.service.ts",{"_index":3500,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:122",{"_index":3526,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:175",{"_index":3524,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:20",{"_index":3535,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:214",{"_index":3513,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:25",{"_index":3531,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:254",{"_index":3528,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:265",{"_index":3521,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:29",{"_index":3530,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:33",{"_index":3534,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:38",{"_index":3533,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:39",{"_index":3511,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:54",{"_index":3537,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:70",{"_index":3539,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:83",{"_index":3517,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:93",{"_index":3519,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["services",{"_index":506,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxStore.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["session",{"_index":1263,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"miscellaneous/typealiases.html":{}}}],["sessionfeatures",{"_index":1340,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionfeatures.has(`${feature",{"_index":1348,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionpermissions",{"_index":1353,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionpermissions.has(permission",{"_index":1356,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionstorage",{"_index":3510,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["sessionstoragerecord",{"_index":3504,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["set",{"_index":137,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/TableCellTemplate.html":{}}}],["set([...(features",{"_index":1341,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["set([...permissions",{"_index":1354,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["set([0",{"_index":4574,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["set([index",{"_index":4619,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["set(hideheaderrowwhen",{"_index":3739,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["set(object.keys(cleanedformvalue",{"_index":62,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["set(this.data().map((_",{"_index":4572,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["setactive",{"_index":3967,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["setactive(isactive",{"_index":3973,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["setariabusytag",{"_index":1767,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setariabusytag(isloading",{"_index":1782,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setarialivetag",{"_index":1768,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setarialivetag(value",{"_index":1786,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setavailablelanguages",{"_index":2441,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setavailablelanguages(languages",{"_index":2450,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setcompleted",{"_index":4453,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["setcompleted(payload",{"_index":4450,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["setcookie",{"_index":1543,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setcookie(cookie",{"_index":1566,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setcurrentlanguage",{"_index":2442,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setcurrentlanguage(language",{"_index":2452,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setdata",{"_index":4454,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["setdata(payload",{"_index":4445,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["setdatainroute",{"_index":3198,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["setdatainroute(data",{"_index":3214,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["setdisabledstate?(isdisabled",{"_index":4596,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["setdraganddropdescription",{"_index":779,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["setdraganddropdescription(parent",{"_index":793,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["setdraganddropdescription(this.elementref.nativeelement",{"_index":932,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["seterror",{"_index":3477,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["setfocus",{"_index":747,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["setfocus(hasfocus",{"_index":1055,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["setformerror",{"_index":25,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setformerror(control",{"_index":71,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setformerror(group.get(key",{"_index":85,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setglobalfeatures",{"_index":1257,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["setglobalfeatures(features",{"_index":1292,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["setitem",{"_index":3488,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["setitem(key",{"_index":3525,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["setlanguage",{"_index":2496,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["setlayout",{"_index":2909,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["setlayout(layout",{"_index":2916,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["setloading",{"_index":3478,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["setmessage",{"_index":780,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["setmessage(message",{"_index":801,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["sets",{"_index":705,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["setsortdirection",{"_index":680,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["setsortdirection(direction",{"_index":702,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["setter",{"_index":4536,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["settimeout",{"_index":980,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{}}}],["setting",{"_index":1885,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["settings",{"_index":1574,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxImageMarkerService.html":{}}}],["settooltipevent",{"_index":3841,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["settooltipevent(event",{"_index":3845,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["setup",{"_index":54,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAbstractTableCellDirective.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["setupcookieshandler",{"_index":1544,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setupcookieshandler(categories",{"_index":1569,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setupinitiallayout",{"_index":2910,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["setupstorage",{"_index":3509,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["setupstorage(storage",{"_index":3527,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["setwitherror",{"_index":4442,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["several",{"_index":4312,"title":{},"body":{"injectables/NgxWindowService.html":{},"index.html":{}}}],["shall",{"_index":4856,"title":{},"body":{"index.html":{},"license.html":{}}}],["share",{"_index":2634,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["shared",{"_index":2033,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sharereplay",{"_index":2314,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["shouldbeauthenticated",{"_index":1236,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["shouldhaveallfeatures",{"_index":1229,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFeatureDirective.html":{}}}],["shouldhaveallpermissions",{"_index":1234,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["shouldhavefeature",{"_index":2075,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["shouldhavepermission",{"_index":2185,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["shouldn't",{"_index":3213,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["shouldrender",{"_index":2114,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["shouldshow",{"_index":1906,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["show",{"_index":1464,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["showdetailrow",{"_index":3670,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["showdetailrowoption",{"_index":3684,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["showed",{"_index":3736,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["showinactive",{"_index":1442,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["showing",{"_index":3936,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["showmodal",{"_index":1545,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["shown",{"_index":1618,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["showonfocus",{"_index":3803,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["showonmouseenter",{"_index":3767,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["showopenrowstate",{"_index":3674,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["showselectedopenrow",{"_index":3677,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["showtooltip",{"_index":3804,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["showtooltip(tooltip",{"_index":3848,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["showwhen",{"_index":1884,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}}}],["side",{"_index":1613,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxWindowService.html":{}}}],["sign",{"_index":1302,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signal",{"_index":661,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["signal(false",{"_index":1068,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["signal(undefined",{"_index":4485,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["signals",{"_index":4492,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["signalstorefeature",{"_index":3457,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["signed",{"_index":1280,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"miscellaneous/typealiases.html":{}}}],["signin",{"_index":1258,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signin(signindata",{"_index":1296,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signindata",{"_index":1301,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signindatatype",{"_index":1297,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signing",{"_index":1326,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signinuser",{"_index":1259,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signinuser(signindata",{"_index":1303,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signout",{"_index":1260,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signout(signoutdatatype",{"_index":1305,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutdatatype",{"_index":1306,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutresponsetype",{"_index":1325,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutuser",{"_index":1261,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutuser(signoutdatatype",{"_index":1310,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signs",{"_index":1299,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["similar",{"_index":232,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["simplechangehaschanged",{"_index":2632,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.canedit",{"_index":2643,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.currentzoomlevel",{"_index":2645,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.markertypes",{"_index":2644,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.startstate",{"_index":2642,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.zoomlevels",{"_index":2646,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simply",{"_index":3283,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["single",{"_index":1987,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["situations",{"_index":3238,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{}}}],["size",{"_index":1467,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["size.pipe.ts",{"_index":1457,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["size.pipe.ts:17",{"_index":1461,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["size/item",{"_index":1456,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["slice",{"_index":151,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"miscellaneous/typealiases.html":{}}}],["slice(0",{"_index":1989,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["slicekey",{"_index":3604,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["slices",{"_index":3476,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"miscellaneous/typealiases.html":{}}}],["software",{"_index":4838,"title":{},"body":{"index.html":{},"license.html":{}}}],["something",{"_index":2407,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxWindowService.html":{}}}],["somethinghappened",{"_index":4327,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["somethinghascompleted",{"_index":448,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["sometimes",{"_index":3236,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["someuniqueid",{"_index":3353,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["somewhere",{"_index":4501,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sort",{"_index":675,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["sort.pipe.ts",{"_index":1114,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["sort.pipe.ts:12",{"_index":1116,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["sort/aria",{"_index":1113,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["sortable",{"_index":676,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["sortableinput",{"_index":4629,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sortabletablecellrecord",{"_index":4487,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sortdirection",{"_index":677,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["sorted",{"_index":4525,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sorting",{"_index":697,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["sorttemplate",{"_index":4520,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"index.html":{}}}],["sources",{"_index":3885,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["space",{"_index":474,"title":{},"body":{"pipes/IbanPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["spaces",{"_index":468,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["specific",{"_index":75,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["specifically",{"_index":3129,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["specified",{"_index":2955,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["specstoreassets",{"_index":4353,"title":{"interfaces/SpecStoreAssets.html":{}},"body":{"interfaces/SpecStoreAssets.html":{}}}],["specstoreservice",{"_index":4364,"title":{"injectables/SpecStoreService.html":{}},"body":{"injectables/SpecStoreService.html":{}}}],["ssr",{"_index":3338,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["standalone",{"_index":182,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["start",{"_index":2567,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{},"index.html":{}}}],["startcontrolkey",{"_index":4215,"title":{},"body":{"classes/NgxValidators.html":{}}}],["started",{"_index":4750,"title":{"index.html":{},"license.html":{}},"body":{}}],["started.html",{"_index":1573,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["startstate",{"_index":2596,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["starttour",{"_index":489,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["startwith",{"_index":1610,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxModalService.html":{}}}],["startwith(cookieconsent.getcookie('data",{"_index":1645,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["startwith(undefined",{"_index":3123,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["state",{"_index":392,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["state.service.ts",{"_index":4436,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["state.service.ts:31",{"_index":4455,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.service.ts:36",{"_index":4458,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.service.ts:44",{"_index":4457,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.service.ts:50",{"_index":4456,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.ts",{"_index":4919,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stateinterface",{"_index":115,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["statetype",{"_index":3468,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["stateupdated",{"_index":2597,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["statewrapper",{"_index":3618,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["static",{"_index":1452,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"modules/NgxI18nModule.html":{},"directives/NgxTableCellDirective.html":{},"classes/NgxValidators.html":{},"miscellaneous/typealiases.html":{}}}],["status",{"_index":1276,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxOnlineService.html":{}}}],["status.types.ts",{"_index":4930,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stay",{"_index":3233,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["step",{"_index":521,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["step(card",{"_index":3960,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["step.component.mock.ts",{"_index":615,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["step.component.ts",{"_index":4017,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:103",{"_index":4033,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:105",{"_index":4029,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:112",{"_index":4028,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:33",{"_index":4034,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:38",{"_index":4027,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:45",{"_index":4026,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:53",{"_index":4023,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:58",{"_index":4032,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:63",{"_index":4031,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:68",{"_index":4025,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:73",{"_index":4020,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:78",{"_index":4021,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:83",{"_index":4019,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:88",{"_index":4022,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:93",{"_index":4024,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:98",{"_index":4030,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step/tour",{"_index":4016,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["stepclass",{"_index":622,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["steps",{"_index":634,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["steptitle",{"_index":4043,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["still",{"_index":3108,"title":{},"body":{"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["stop",{"_index":4122,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["storage",{"_index":2449,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["storage.clear",{"_index":3587,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storage.removeitem(key",{"_index":3585,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storage.setitem(key",{"_index":3580,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storage[key",{"_index":3578,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageevents",{"_index":3505,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageeventsubject",{"_index":3506,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice",{"_index":3557,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice.localstorage.setitem('hello",{"_index":3558,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice.sessionstorage.setitem('hello",{"_index":3559,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice.storageevent$.subscribe(console.log",{"_index":3560,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["store",{"_index":274,"title":{},"body":{"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["store.spec",{"_index":278,"title":{},"body":{"injectables/EffectsService.html":{}}}],["store.ts",{"_index":112,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["store.types.ts",{"_index":3456,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["storeactions",{"_index":4959,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["storeassetsoptions",{"_index":3605,"title":{"interfaces/StoreAssetsOptions.html":{}},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["storeauthenticationresponse",{"_index":1262,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["storeauthenticationresponse(response",{"_index":1312,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["stored",{"_index":1309,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["storeeffects",{"_index":4420,"title":{"injectables/StoreEffects.html":{}},"body":{"injectables/StoreEffects.html":{}}}],["storeflowasset",{"_index":4993,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["storeflowassets",{"_index":3608,"title":{},"body":{"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/typealiases.html":{}}}],["storeitem",{"_index":3631,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["stores",{"_index":1300,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["storeselectors",{"_index":4961,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["storeservice",{"_index":3249,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["storeslice",{"_index":4361,"title":{},"body":{"interfaces/SpecStoreAssets.html":{}}}],["storestate",{"_index":3634,"title":{"interfaces/StoreState.html":{}},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/typealiases.html":{}}}],["storestatedata",{"_index":4962,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["storestateerror",{"_index":4963,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["storestateerrormessage",{"_index":4964,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["storestateloading",{"_index":4965,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["storestateservice",{"_index":4440,"title":{"injectables/StoreStateService.html":{}},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["strategy",{"_index":3896,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["streams",{"_index":2836,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["stress",{"_index":3359,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["strict",{"_index":1492,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["string",{"_index":152,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"pipes/NgxTableSortIconPipe.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["string(date.now",{"_index":2257,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["stringifiedqueryparamstype",{"_index":3258,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"miscellaneous/typealiases.html":{}}}],["stringify",{"_index":3288,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["strings",{"_index":1343,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["stringsignal",{"_index":4967,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stringtype",{"_index":3011,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"miscellaneous/typealiases.html":{}}}],["string}{{#from}}${string}{{#item}}${string}{{#to}}${string",{"_index":874,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#from}}${string}{{#to}}${string}{{#item}}${string",{"_index":875,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#item}}${string",{"_index":876,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#item}}${string}{{#from}}${string}{{#to}}${string",{"_index":871,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#item}}${string}{{#to}}${string}{{#from}}${string",{"_index":870,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#to}}${string}{{#from}}${string}{{#item}}${string",{"_index":873,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#to}}${string}{{#item}}${string}{{#from}}${string",{"_index":872,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{id}}${string",{"_index":3300,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"miscellaneous/typealiases.html":{}}}],["structural",{"_index":1995,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["studio",{"_index":4830,"title":{},"body":{"index.html":{},"license.html":{}}}],["styleurl",{"_index":1015,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{}}}],["styleurls",{"_index":4474,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["styling",{"_index":1462,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["sub",{"_index":3600,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["subject",{"_index":412,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{},"license.html":{}}}],["subject.complete",{"_index":3590,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subject.getvalue",{"_index":3579,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subject.next(item",{"_index":3582,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subject.next(undefined",{"_index":3589,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subjects",{"_index":3515,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["sublicense",{"_index":4848,"title":{},"body":{"index.html":{},"license.html":{}}}],["subscribe",{"_index":513,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["subscribe(observable",{"_index":2122,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["subscribed",{"_index":2789,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["subscribercount",{"_index":4356,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["subscribes",{"_index":454,"title":{},"body":{"pipes/HasObserversPipe.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["subscription",{"_index":2010,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["subscriptions",{"_index":2146,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxMediaQueryService.html":{}}}],["subsequent",{"_index":386,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["subslice",{"_index":3606,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["substantial",{"_index":4857,"title":{},"body":{"index.html":{},"license.html":{}}}],["substrings",{"_index":834,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["succeeded",{"_index":473,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["such",{"_index":2395,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["summary",{"_index":1046,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["summaryelement",{"_index":1022,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["super(route",{"_index":3251,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["super(selectors",{"_index":4441,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["supported",{"_index":4491,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sure",{"_index":2533,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["survey.component.html",{"_index":3246,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["switch",{"_index":724,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["switchmap",{"_index":1323,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["switchmap((isauthenticated",{"_index":1359,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sync",{"_index":3229,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts",{"_index":3191,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"miscellaneous/typealiases.html":{}}}],["sync.component.abstract.ts:100",{"_index":3208,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:110",{"_index":3200,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:119",{"_index":3215,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:152",{"_index":3206,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:161",{"_index":3204,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:168",{"_index":3211,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:17",{"_index":3226,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:174",{"_index":3218,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:18",{"_index":3228,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:20",{"_index":3220,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:25",{"_index":3221,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:30",{"_index":3224,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:33",{"_index":3209,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync/query",{"_index":3190,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"miscellaneous/typealiases.html":{}}}],["system",{"_index":2235,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["tab",{"_index":3425,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["tabindex",{"_index":331,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxTooltipDirective.html":{}}}],["table",{"_index":535,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"miscellaneous/typealiases.html":{}}}],["table'},{'name",{"_index":549,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["table.component.html",{"_index":4473,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["table.component.scss",{"_index":4475,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["table.component.ts",{"_index":4461,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecelltemplate",{"_index":4459,"title":{"interfaces/TableCellTemplate.html":{}},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecelltemplaterecord",{"_index":4486,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecelltemplates",{"_index":4508,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecolumns",{"_index":4504,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecypressrecord",{"_index":4489,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tables",{"_index":3719,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["tableviewcomponent",{"_index":3247,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["tag",{"_index":684,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["tag.directive.ts",{"_index":1700,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tag.directive.ts:18",{"_index":1705,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tag.directive.ts:25",{"_index":1702,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tag/cypress",{"_index":1699,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tags",{"_index":4634,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tags.token.ts",{"_index":4911,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tailored",{"_index":1158,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["take",{"_index":814,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{}}}],["take(1",{"_index":829,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["taken",{"_index":3955,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["takes",{"_index":2787,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["takeuntil",{"_index":1813,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["takeuntil(this.destroyed",{"_index":2056,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["takeuntil(this.hasmodalsubject.pipe(filter((hasmodal",{"_index":3138,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["takeuntil(this.markerdestroyedsubject",{"_index":2664,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["takeuntil(this.ondestroy",{"_index":1958,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["takeuntil(this.ondestroysubject",{"_index":1822,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["takeuntil(this.ondestroysubject.asobservable",{"_index":1850,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["taking",{"_index":3319,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["tap",{"_index":815,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["tap(([index",{"_index":4009,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["tap(([previous",{"_index":3874,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tap((action",{"_index":3128,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["tap((currentlanguage",{"_index":830,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["tap((data",{"_index":3268,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["tap((hascookie",{"_index":2053,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["tap((hasfeature",{"_index":2113,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["tap((haspermission",{"_index":2213,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["tap((isauthenticated",{"_index":2780,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["tap((language",{"_index":853,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["tap((online",{"_index":1818,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["tap((response",{"_index":1332,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["tap((selected",{"_index":4682,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tap((translations",{"_index":2420,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["tap((value",{"_index":2151,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["target",{"_index":3328,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["target.innerhtml",{"_index":3384,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["target.replacewith(replacement",{"_index":3385,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["targetrowindex",{"_index":1443,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["td",{"_index":4141,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["technologies",{"_index":776,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["template",{"_index":509,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"miscellaneous/typealiases.html":{}}}],["template.component.ts",{"_index":3717,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["template.component.ts:12",{"_index":3721,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["template.component.ts:13",{"_index":3725,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["template.component.ts:14",{"_index":3762,"title":{},"body":{"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["template.component.ts:17",{"_index":3723,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["template.component.ts:18",{"_index":3727,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["template.component.ts:22",{"_index":3720,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["template.component.ts:23",{"_index":3726,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["templateref",{"_index":708,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["templaterefs",{"_index":2029,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["templates",{"_index":711,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["templates/columns",{"_index":4668,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["templateurl",{"_index":449,"title":{},"body":{"pipes/HasObserversPipe.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["test",{"_index":507,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/SpecStoreService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["test.component.ts",{"_index":4687,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["test.component.ts:41",{"_index":4688,"title":{},"body":{"components/TestDisplayContentComponent.html":{}}}],["test.component.ts:62",{"_index":4693,"title":{},"body":{"components/TestOverrideDisplayContentComponent.html":{}}}],["test.component.ts:63",{"_index":4694,"title":{},"body":{"components/TestOverrideDisplayContentComponent.html":{}}}],["testdisplaycontentcomponent",{"_index":550,"title":{"components/TestDisplayContentComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testerrorcomponent",{"_index":552,"title":{"components/TestErrorComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testerrordatacomponent",{"_index":554,"title":{"components/TestErrorDataComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testing",{"_index":2694,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["testloadingcomponent",{"_index":555,"title":{"components/TestLoadingComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testofflinecomponent",{"_index":557,"title":{"components/TestOfflineComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testoverridedisplaycontentcomponent",{"_index":559,"title":{"components/TestOverrideDisplayContentComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["tests",{"_index":2101,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxImageMarkerService.html":{}}}],["text",{"_index":854,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"pipes/TransformPipe.html":{}}}],["text/html",{"_index":3369,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["that's",{"_index":2488,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["thentemplateref",{"_index":2002,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["thenviewref",{"_index":2076,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["there's",{"_index":1109,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["therefor",{"_index":2749,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["they're",{"_index":3117,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["things",{"_index":3327,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.abstractcontrol",{"_index":1945,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.dirty",{"_index":1954,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.invalid",{"_index":1952,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.statuschanges.pipe(startwith(this.abstractcontrol.status",{"_index":1951,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.valuechanges.pipe(startwith(this.abstractcontrol.value",{"_index":1949,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.accessors",{"_index":421,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["this.actions",{"_index":4660,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.actions$.pipe",{"_index":4427,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["this.activetooltip",{"_index":3878,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.allowbeforeunloadhandler",{"_index":3430,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.allowmultipleopenrows",{"_index":4617,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ariadescribedby",{"_index":2992,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["this.arialabelledby",{"_index":2991,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["this.authenticationresponsesubject.asobservable",{"_index":1328,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.authenticationresponsesubject.next(response",{"_index":1327,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.authenticationservice",{"_index":2111,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["this.authenticationservice.haspermission(converttoarray(permission",{"_index":2227,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["this.authenticationservice.isauthenticated",{"_index":2779,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.authenticationstatussubject.next('signed",{"_index":1333,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.authenticationstatussubject.pipe",{"_index":1273,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.availablelanguagessubject",{"_index":2454,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.availablelanguagessubject.getvalue().includes(language",{"_index":2487,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.availablelanguagessubject.next(languages",{"_index":2486,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.availablelanguagessubject.next(this.configuration.availablelanguages",{"_index":2475,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.baseurl",{"_index":1181,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.baseurl}/${url",{"_index":1182,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.broadcastchannel[channelname",{"_index":1414,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["this.broadcastchannel[channelname].close",{"_index":1417,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["this.broadcastchannel[channelname].postmessage(message",{"_index":1421,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["this.canedit",{"_index":2658,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.cdref",{"_index":2140,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["this.cdref.detectchanges",{"_index":1094,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["this.changedetectorref",{"_index":2144,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["this.changedetectorref.markforcheck",{"_index":2153,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["this.channel",{"_index":4413,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.cleardata",{"_index":3281,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.clearstorage(localstorage",{"_index":3572,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.clearstorage(sessionstorage",{"_index":3573,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.close(options.onclose",{"_index":3134,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.close.emit",{"_index":2986,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["this.column",{"_index":730,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.columns",{"_index":4563,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.component",{"_index":2060,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.componentref",{"_index":1961,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["this.componentref.destroy",{"_index":1960,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["this.componentref.instance",{"_index":1964,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.componentref.setinput",{"_index":1966,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.componentref.setinput('cookies",{"_index":2061,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.conditions",{"_index":1863,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.conditions.error",{"_index":1840,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.conditions.loading",{"_index":1836,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.conditions.offline",{"_index":1833,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.config.cachebust",{"_index":2401,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.config.component",{"_index":1955,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.config.errors[key",{"_index":1984,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.config.show",{"_index":1982,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.config.showwhen",{"_index":1953,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.configuration.component",{"_index":3910,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.configuration.components.error",{"_index":1842,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.components.loading",{"_index":1838,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.components.offline",{"_index":1835,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.defaultlanguage",{"_index":2472,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.configuration.defaultposition",{"_index":3892,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.configuration.hidewhennotemplateprovided",{"_index":1860,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.languagerouteparam",{"_index":2474,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.configuration.listentoonlinestatus",{"_index":1816,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration?.modals?.[options.type",{"_index":3114,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.configuration?.modals[options.type",{"_index":3175,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.configuration[item.elementid",{"_index":3375,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.containers().find((container",{"_index":929,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.control",{"_index":1942,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.cookies",{"_index":2037,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.cookies.map((cookie",{"_index":2045,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.cookieschanged$.pipe",{"_index":1644,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookieschangedsubject.asobservable",{"_index":1577,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookieschangedsubject.next(cookieconsent.getcookie('data",{"_index":1655,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentchanged$.pipe(startwith(undefined",{"_index":1637,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentchangedsubject.asobservable",{"_index":1581,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentchangedsubject.next(event",{"_index":1627,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsented$.pipe(startwith(undefined",{"_index":1636,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentedsubject.asobservable",{"_index":1589,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentedsubject.next(event",{"_index":1624,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.createimagemakeredit(id",{"_index":2698,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.createmarker",{"_index":2638,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.createmarkerclickedlistener(marker",{"_index":2707,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.createmarkervaluechanges(marker",{"_index":2714,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.createmodalcomponent(options",{"_index":3119,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.createreadonlyimagemarker(id",{"_index":2699,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.currentlanguage",{"_index":823,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxI18nRootService.html":{}}}],["this.currentlanguagesubject.asobservable",{"_index":2461,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.currentlanguagesubject.getvalue",{"_index":2476,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.currentlanguagesubject.next(newlanguage",{"_index":2483,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.currentmarker",{"_index":2639,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentmarker.close",{"_index":2649,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentmarker.mode",{"_index":2661,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentmarker.valuechanges",{"_index":2662,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentscrollposition",{"_index":4321,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.currentscrollpositionsubject$.asobservable",{"_index":4293,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.currentsortingevent.set(this.currentsorting",{"_index":4545,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.currentzoomlevel",{"_index":2653,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.custommessages",{"_index":865,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.cypresstag",{"_index":1704,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["this.data",{"_index":4551,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data().length",{"_index":4573,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data()?.length",{"_index":4567,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data()[index][selectablekey",{"_index":4649,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data.length",{"_index":4615,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.datasourcesubject",{"_index":491,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["this.defaultlanguage",{"_index":2471,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.defaultlayout",{"_index":2935,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.layout",{"_index":2934,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout?.flyoutanimationduration",{"_index":2964,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultrowopen",{"_index":4548,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.definedcolumns.set",{"_index":4661,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.description",{"_index":933,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.destroyed",{"_index":2043,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.destroyed$.complete",{"_index":424,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["this.destroyed$.next",{"_index":2057,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.destroyed$.next(null",{"_index":4685,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.destroyed$.next(undefined",{"_index":423,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["this.destroyedsubject$.asobservable",{"_index":3427,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.destroyedsubject$.complete",{"_index":3434,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.destroyedsubject$.next(undefined",{"_index":3433,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.destroyedsubject.complete",{"_index":1008,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.destroyedsubject.next",{"_index":1007,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.detailrowtemplate",{"_index":4614,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.detailselement",{"_index":1099,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.dialogservice.closeall",{"_index":3141,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.dialogservice.open(component",{"_index":3145,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.disabled",{"_index":354,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{}}}],["this.displaycontentconfiguration",{"_index":1825,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.dispose",{"_index":2041,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.document",{"_index":4325,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.document.addeventlistener('scroll",{"_index":4339,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.document.defaultview",{"_index":4338,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.draganddropservice",{"_index":931,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.editabletablecellrecord.set",{"_index":4626,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.editabletablecellrecord.update((value",{"_index":4636,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.effectsservice.fetchchannel",{"_index":4429,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["this.effectsservice.fetchvideos",{"_index":4432,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["this.elementref",{"_index":3832,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.elementref.nativeelement",{"_index":2657,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{}}}],["this.elementref.nativeelement.children",{"_index":4138,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.elementref.nativeelement.focus",{"_index":2177,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["this.elementref.nativeelement.getattribute('id",{"_index":3983,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.elementref.nativeelement.parentelement",{"_index":1865,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.elementref.nativeelement.parentelement?.setattribute('aria",{"_index":1875,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.elementref.nativeelement.parentnode",{"_index":1980,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.elementref.nativeelement.setattribute('id",{"_index":3986,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.elsetemplateref",{"_index":2108,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.elseviewref",{"_index":2110,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.emitvalueonsingleitem",{"_index":4566,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.errorcomponent",{"_index":1959,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.errorselement",{"_index":1970,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.feature",{"_index":2106,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.findfocusableelement",{"_index":4134,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.firstcookiesconsentedsubject.asobservable",{"_index":1597,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.firstcookiesconsentedsubject.next(event",{"_index":1622,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.flyoutstatesubject$.asobservable",{"_index":2921,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.flyoutstatesubject$.next('in",{"_index":2952,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.flyoutstatesubject$.next('out",{"_index":2954,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.focusclick.emit",{"_index":360,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["this.focusclick.emit(event",{"_index":355,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["this.form",{"_index":3265,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.form.reset",{"_index":3282,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.form.setvalue(value",{"_index":3280,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.form.valuechanges",{"_index":3267,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.formgenerated",{"_index":4553,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.formgenerated.set(true",{"_index":4556,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.formgroupdirective",{"_index":1946,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.formgroupdirective.form.get(control",{"_index":1947,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.formnamedirective?.control.get(control",{"_index":1948,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.getauthenticationresponse().pipe",{"_index":1329,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.getcomponent",{"_index":2940,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.getcomponent(layout.footer",{"_index":2950,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.getcomponent(layout.navigation",{"_index":2947,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.getcookie(cookie",{"_index":1646,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.geterrors(this.abstractcontrol.errors",{"_index":1965,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.geterrors(this.abstractcontrol.errors).errors.join",{"_index":1977,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.getitem(key",{"_index":3568,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.getitemobservable(key",{"_index":3569,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.getnewlanguage(language",{"_index":2478,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.getrow(0",{"_index":4185,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.getrow(index)?.registercell(cell",{"_index":4189,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.getrow(this.rows.length",{"_index":4186,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.getsession().pipe",{"_index":1352,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.getvalue",{"_index":3163,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(configuration?.data",{"_index":3170,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(configuration?.hasbackdrop",{"_index":3159,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(configuration?.panelclass",{"_index":3161,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(undefined",{"_index":3153,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.globalfeaturessubject.asobservable()]).pipe",{"_index":1338,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.globalfeaturessubject.next(features",{"_index":1350,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.handleaccessorsaction",{"_index":419,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["this.handlecomponentrender(shouldshow",{"_index":1957,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.handlecontentscroll.bind(this",{"_index":4340,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.handlecurrentsort(this.currentsorting",{"_index":4546,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlecurrentsort(this.currentsortingevent",{"_index":4640,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handledatachanges",{"_index":3270,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.handledatachanges(data",{"_index":3271,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.handlenocomponentflow(shouldshow",{"_index":1956,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.handlerowclicked(this.data()[0",{"_index":4569,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlerowclicked(this.data()[openedindex",{"_index":4550,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlerowcolumns",{"_index":4565,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlerowstate(index",{"_index":4610,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handletablecelltemplates",{"_index":4669,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handleurl(url",{"_index":1185,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.handlewhenfocussed",{"_index":1086,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["this.hascookie",{"_index":2036,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.hascookieelse",{"_index":2040,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.hasdocument",{"_index":4337,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.hasfeature",{"_index":2149,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["this.hasfocus",{"_index":1110,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["this.hasfocus.set(hasfocus",{"_index":1096,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.hasfootertemplates.set",{"_index":4637,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.hasmodalsubject.asobservable",{"_index":3102,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.hasmodalsubject.next(false",{"_index":3142,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.hasmodalsubject.next(true",{"_index":3113,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.hasmodalsubject.value",{"_index":3109,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.haspermission",{"_index":2228,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["this.hasrequireddescription(options",{"_index":3143,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.headercontrol.disable",{"_index":4598,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.enable",{"_index":4601,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.patchvalue(false",{"_index":4587,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.patchvalue(true",{"_index":4588,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.setvalue",{"_index":4673,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.valuechanges",{"_index":4681,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.httpclient",{"_index":1187,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.delete",{"_index":1197,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.get",{"_index":1184,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.get('test",{"_index":4411,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.httpclient.patch",{"_index":1201,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.post",{"_index":1198,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.put",{"_index":1200,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.i18nloadingservice.dispatchtranslationloaderaction",{"_index":2549,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["this.i18nservice.initi18n(this.i18nservice.currentlanguage).pipe",{"_index":2551,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["this.id",{"_index":3785,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["this.imageelement",{"_index":2640,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.imageelement().nativeelement",{"_index":2656,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.imagemarkerservice.createimagemarker",{"_index":2655,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.initform",{"_index":3266,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.initiallayoutset$.pipe",{"_index":2933,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.initiallayoutsetsubject$.next(true",{"_index":2967,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.initiallayoutsetsubject$.pipe",{"_index":2924,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.injector",{"_index":3340,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.isactive",{"_index":3982,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.isauthenticated$.pipe",{"_index":1358,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.isbrowser",{"_index":4336,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.isdirty",{"_index":3431,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.isopen.set(isopen",{"_index":1090,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.itemregisteredsubject.next",{"_index":990,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.itemregisteredsubject.pipe",{"_index":979,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items",{"_index":995,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.findindex",{"_index":992,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.findindex((item",{"_index":1005,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.foreach((item",{"_index":984,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.length",{"_index":1002,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.push(item",{"_index":991,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.slice(0",{"_index":996,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.slice(index",{"_index":997,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items[direction",{"_index":1001,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items[id].markasactive",{"_index":928,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.items[index]?.updateaccordionitemstate(true",{"_index":989,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items[item.itemid",{"_index":934,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.languagerouteparam",{"_index":2473,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.layoutservice.flyoutstate$.pipe",{"_index":2874,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["this.layoutservice.setupinitiallayout",{"_index":2885,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["this.layoutsubject$.asobservable",{"_index":2927,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.getvalue",{"_index":2953,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.next",{"_index":2937,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.next(clean(layout",{"_index":2936,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.next(rest",{"_index":2963,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.liveregionservice.announce(result",{"_index":850,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.localstoragerecord",{"_index":3567,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.markerclicked.emit(value",{"_index":2665,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.markerdestroyedsubject.complete",{"_index":2652,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.markerdestroyedsubject.next",{"_index":2651,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.markers[id",{"_index":2705,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.markertypes",{"_index":2660,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.mediaquerylistenermap.clear",{"_index":2848,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.mediaquerylistenermap.get(id",{"_index":2843,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.mediaquerylistenermap.set(id",{"_index":2833,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.messagerecord[currentlanguage].container",{"_index":843,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.messagerecord[currentlanguage].item",{"_index":839,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.messagerecord[currentlanguage][type",{"_index":832,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.messagerecord[language].description",{"_index":855,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.modalvisiblesubject.asobservable",{"_index":1603,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.modalvisiblesubject.next(false",{"_index":1633,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.modalvisiblesubject.next(true",{"_index":1630,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.movetocell('first",{"_index":4130,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.movetocell('last",{"_index":4131,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.movetocell(ngxtreegridcell",{"_index":4128,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.movetocell(this.ngxtreegridcell",{"_index":4129,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.ngxcookieservice.hasacceptedcategory(cookie.category",{"_index":2047,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.ngxcookieservice.hasacceptedservice(cookie.category",{"_index":2050,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.ngxhasfeature",{"_index":2107,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhasfeatureelse",{"_index":2109,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhasfeatureshouldhaveallfeatures",{"_index":2103,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhasfeatureshouldhavefeature",{"_index":2105,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhaspermission",{"_index":2210,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxhaspermissionelse",{"_index":2211,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxhaspermissionshouldhaveallpermissions",{"_index":2206,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxhaspermissionshouldhavepermission",{"_index":2208,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxisauthenticated",{"_index":2777,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.ngxisauthenticatedelse",{"_index":2778,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.ngxtableconfiguration?.allowmultiplerowsopen",{"_index":4528,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.emitvalueonsingleitem",{"_index":4542,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.hideheaderwhen",{"_index":4544,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.highlightkey",{"_index":4539,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.ngxtableclass",{"_index":4478,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.showdetailrow",{"_index":4541,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.showopenrowstate",{"_index":4540,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.showselectedopenrow",{"_index":4537,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtooltip",{"_index":3829,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipcomponent",{"_index":3831,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipdisabled",{"_index":3827,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipid",{"_index":3833,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipposition",{"_index":3830,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipservice.settooltipevent",{"_index":3784,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["this.ngxtourshowwhen",{"_index":4005,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.ngxtourshowwhenelse",{"_index":4006,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.ngxtreegrid",{"_index":4183,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.ngxtreegridcell",{"_index":4126,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.ngxtreegridcellrow",{"_index":4143,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.onblur",{"_index":2176,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["this.onchanged",{"_index":4590,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.onchanged(handlengxtablevaluechanges(value",{"_index":4676,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.onchanged(value",{"_index":4678,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ondestroysubject$.complete",{"_index":1939,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.ondestroysubject$.next",{"_index":1938,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.ondestroysubject.complete",{"_index":1852,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["this.ondestroysubject.next",{"_index":1851,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["this.onfocus",{"_index":2175,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["this.onlineservice.online",{"_index":1817,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.onlinesubject.asobservable",{"_index":3183,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["this.onlinesubject.next(false",{"_index":3188,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["this.onlinesubject.next(true",{"_index":3187,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["this.ontouch",{"_index":4594,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.open",{"_index":978,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.openrows",{"_index":4571,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.openrows.add(index",{"_index":4616,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.openrows.delete(index",{"_index":4618,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.openrows.has(index",{"_index":4611,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.overlaypositionbuilder",{"_index":3903,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref",{"_index":3893,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref.attach",{"_index":3912,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref.detach",{"_index":3917,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref.updatepositionstrategy(positionstrategy",{"_index":3906,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref?.hasattached",{"_index":3877,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayservice.create",{"_index":3894,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayservice.scrollstrategies.reposition",{"_index":3901,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overrideconfiguration",{"_index":1824,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.overrideconfiguration[status]?.data",{"_index":1859,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.overrideconfiguration[status]?.template",{"_index":1853,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.parent.getrow(ngxtreegridcellrow",{"_index":4146,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.parent.movefocus(this.id",{"_index":1089,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.parent.registeritem(this",{"_index":1097,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.parent.removeitem(this",{"_index":1108,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.parent?.registercell(ngxtreegridcellrow",{"_index":4144,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.parsevalue(storage.getitem(key",{"_index":3574,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.permission",{"_index":2209,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.position",{"_index":4038,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.querychangedsubject.asobservable().pipe",{"_index":2835,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.querychangedsubject.complete",{"_index":2845,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.querychangedsubject.next(id",{"_index":2827,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.querychangedsubject.next(null",{"_index":2844,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.queryidmap.get",{"_index":2815,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.queryidmap.get(id",{"_index":2814,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.queryidmap.has(id",{"_index":2834,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.queryidmap.set(id",{"_index":2822,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.queryidmap].find",{"_index":2819,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.queryidmap].some(([_",{"_index":2817,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.querylistmap",{"_index":2841,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.querylistmap.clear",{"_index":2847,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.querylistmap.get(id).matches",{"_index":2839,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.querylistmap.set(id",{"_index":2826,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.queryparams",{"_index":3274,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.radiocontrol.disable",{"_index":4599,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.radiocontrol.enable",{"_index":4602,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.radiocontrol.patchvalue(value",{"_index":4580,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.radiocontrol.valuechanges",{"_index":4677,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.removeitem(key",{"_index":3570,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.removetooltip",{"_index":3825,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["this.renderelsetemplate",{"_index":2055,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.renderer.createelement('p",{"_index":1973,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.insertbefore",{"_index":1979,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.listen(detailselement.nativeelement",{"_index":1104,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.renderer.nextsibling(this.elementref.nativeelement",{"_index":1981,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.removechild(this.elementref.nativeelement.parentnode",{"_index":1971,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.setattribute(this.errorselement",{"_index":1974,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.setproperty",{"_index":1975,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderinitialtemplate",{"_index":1843,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.rendertemplate('error",{"_index":1841,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.rendertemplate('loading",{"_index":1837,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.rendertemplate('offline",{"_index":1834,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.renderthentemplate",{"_index":2054,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.resetformonnewdata",{"_index":4558,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.role",{"_index":4190,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rootclass",{"_index":4039,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.rooti18nservice.currentlanguage",{"_index":2522,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.rooti18nservice.setcurrentlanguage(language",{"_index":2525,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.route",{"_index":3223,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.router.navigate",{"_index":3284,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.row",{"_index":4145,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.row.getcell(cell",{"_index":4135,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.rowclicked.emit(row",{"_index":4604,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rows",{"_index":4180,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows.length",{"_index":4188,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows.push(row",{"_index":4179,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows.slice(0",{"_index":4181,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows[direction",{"_index":4187,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows[index",{"_index":4184,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rowsformgroup",{"_index":4557,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.disable",{"_index":4597,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.enable",{"_index":4600,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.patchvalue",{"_index":4683,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.patchvalue(writengxtablevalue(value",{"_index":4583,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.reset",{"_index":4581,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.valuechanges",{"_index":4670,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.runariachecks(options",{"_index":3118,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.sanitizer.bypasssecuritytrusthtml(body.documentelement.innerhtml",{"_index":3389,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.scrambleparams",{"_index":3260,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.scrambleparams(data",{"_index":3287,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.scrollingup",{"_index":4319,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.scrollingupsubject$.asobservable",{"_index":4301,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.scrollingupsubject$.next(false",{"_index":4351,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.scrollingupsubject$.next(true",{"_index":4352,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.selectable",{"_index":4552,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectablekey",{"_index":4555,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectabletype",{"_index":4579,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectedrow",{"_index":4606,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectedrow.set(index",{"_index":4609,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectedrow.set(undefined",{"_index":4561,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selecterrorfromstore",{"_index":4390,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selecterrorfromstore(selectors.videos",{"_index":4403,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selecterrorfromstore(selectors[key",{"_index":3645,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.selecterrormessagefromstore",{"_index":4392,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selecterrormessagefromstore(selectors[key",{"_index":3647,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.selectfromstore",{"_index":4387,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selectfromstore(selectors.darkmode",{"_index":4396,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selectfromstore(selectors[key",{"_index":3641,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.selectloadingfromstore",{"_index":4394,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selectloadingfromstore(selectors[key",{"_index":3643,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.session",{"_index":1362,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.sessionstoragerecord",{"_index":3565,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.setariabusytag(this.conditions.loading",{"_index":1832,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.setarialivetag(this.displaycontentarialive",{"_index":1826,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.setcurrentlanguage(language",{"_index":2485,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.setdatainroute(data",{"_index":3269,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.setitem(key",{"_index":3571,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.setsortdirection(newsortdirection",{"_index":728,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.setupstorage(localstorage",{"_index":3566,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.setupstorage(sessionstorage",{"_index":3564,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.shouldbeauthenticated",{"_index":2776,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.shouldhaveallfeatures",{"_index":2102,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.shouldhaveallpermissions",{"_index":2205,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.shouldhavefeature",{"_index":2104,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.shouldhavepermission",{"_index":2207,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.showdetailrow",{"_index":4568,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.showopenrowstate",{"_index":4564,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.showselectedopenrow",{"_index":4605,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.showtooltip",{"_index":3824,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["this.signinuser(signindata).pipe",{"_index":1331,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.signoutuser(signoutdatatype).pipe",{"_index":1335,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.sort.emit",{"_index":729,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.sortabletablecellrecord",{"_index":4652,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[column",{"_index":4642,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[column].handlesort",{"_index":4645,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[event.column].setsortdirection(event.direction",{"_index":4658,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[event.column].sortdirection",{"_index":4653,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord.set",{"_index":4624,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord.update((value",{"_index":4633,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortdirection",{"_index":726,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.startstate",{"_index":2659,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.state.data",{"_index":4449,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.state.iscompleted",{"_index":4452,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.stateupdated.emit(value",{"_index":2663,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.statewrapper",{"_index":3639,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.stepclass",{"_index":4040,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.storageeventsubject.asobservable",{"_index":3532,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.storageeventsubject.next(event",{"_index":3583,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.store",{"_index":3451,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.store).pipe",{"_index":4448,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.store.dispatch(actions.channel.clear",{"_index":4414,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.dispatch(actions.channel.effects.set",{"_index":4418,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.dispatch(actions.videos.clear",{"_index":4417,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.dispatch(actions.videos.effects.set",{"_index":4419,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.pipe(select(selector.error",{"_index":3653,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.store.pipe(select(selector.errormessage",{"_index":3655,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.store.pipe(select(selector.loading",{"_index":3651,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.store.pipe(select(selector.select",{"_index":3649,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.storeauthenticationresponse(response",{"_index":1334,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.storeauthenticationresponse(undefined",{"_index":1336,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.storeservice.setfilters(value",{"_index":3253,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.subscribe",{"_index":2226,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["this.subscribe(this.authenticationservice.hasfeature(converttoarray(feature",{"_index":2148,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["this.summaryelement()?.nativeelement.focus",{"_index":1095,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.tablecelltemplaterecord.set",{"_index":4623,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecelltemplaterecord.update((value",{"_index":4632,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecolumns.set([...(columns",{"_index":4664,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecypressrecord.set",{"_index":4625,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecypressrecord.update((value",{"_index":4635,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.template",{"_index":1936,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.templateref",{"_index":1937,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{}}}],["this.thentemplateref",{"_index":2035,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.thenviewref",{"_index":2115,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.titleelement",{"_index":4041,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.titleid.set(id",{"_index":4048,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.tooltipeventssubject",{"_index":3873,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.tooltipeventssubject.next(event",{"_index":3919,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.tooltipservice.removetooltip",{"_index":3826,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.tooltipservice.settooltipevent",{"_index":3828,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.tourservice.closetour().subscribe",{"_index":4035,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.tourservice.currentindex",{"_index":4007,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.tourservice.currenttour",{"_index":4008,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.tourservice.registerelement(this",{"_index":3984,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.tourservice.starttour",{"_index":510,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["this.tourservice.unregisterelement(this.touritem",{"_index":3987,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.translateservice.get(key",{"_index":2530,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.getdefaultlang",{"_index":2524,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.instant(key",{"_index":2528,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.langs",{"_index":2523,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.reloadlang(language",{"_index":2527,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.translations",{"_index":2531,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.use(this.rooti18nservice.currentlanguage",{"_index":2526,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translationloaderactionssubject$.next(action",{"_index":2319,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationloaderactionssubject$.pipe",{"_index":2300,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationloadingservice.addloadedtranslations",{"_index":2422,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationloadingservice.gettranslations",{"_index":2389,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationloadingservice.loadtranslations",{"_index":2417,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationloadingservice.marktranslationsloadedasfailed",{"_index":2414,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationsfailedsubject$.asobservable",{"_index":2296,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationsfailedsubject$.next(false",{"_index":2330,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationsloading[paths",{"_index":2322,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationspaths.map((path",{"_index":2391,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationspaths.tostring",{"_index":2418,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationssubject$.getvalue",{"_index":2321,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationssubject$.next",{"_index":2320,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.unscrambleparams",{"_index":3261,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.unscrambleparams(value",{"_index":3278,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.updateaccordionitemstate(event.newstate",{"_index":1107,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.updateconditions",{"_index":1819,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.updateconditions(this.displaycontent",{"_index":1823,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.updateview",{"_index":2039,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.updateviewsubject",{"_index":1830,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.updateviewsubject.next",{"_index":1821,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.videos",{"_index":4416,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.viewcontainer.clear",{"_index":1831,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.viewcontainer.createcomponent",{"_index":1963,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["this.viewcontainer.createcomponent(component",{"_index":1857,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.viewcontainer.createembeddedview",{"_index":2116,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.hascookieelse",{"_index":2059,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.overrideconfiguration[status]?.template",{"_index":1854,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.template",{"_index":1940,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.templateref",{"_index":1861,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.thentemplateref",{"_index":2058,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.widthsubject$.asobservable",{"_index":4305,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.widthsubject$.getvalue",{"_index":4345,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.widthsubject$.next(this.window.innerwidth",{"_index":4341,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window",{"_index":4323,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window.addeventlistener('resize",{"_index":4343,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window.innerwidth",{"_index":4344,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window.scrollto(0",{"_index":4346,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice",{"_index":3562,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.windowservice.currentscrollposition",{"_index":4322,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.document",{"_index":4326,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.hasdocument",{"_index":4330,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.isbrowser",{"_index":1616,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["this.windowservice.runinbrowser",{"_index":1411,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxWindowService.html":{}}}],["this.windowservice.scrollingup",{"_index":4320,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.scrollto(500",{"_index":4328,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.width",{"_index":4318,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.window",{"_index":4324,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowsservice.runinbrowser",{"_index":2481,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.windowwidth",{"_index":4317,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.zoomlevels",{"_index":2654,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["those",{"_index":2301,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["though",{"_index":3954,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["through",{"_index":1392,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["throughout",{"_index":2494,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["throw",{"_index":377,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourStepComponent.html":{}}}],["throwerror",{"_index":4438,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["tick",{"_index":983,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["time",{"_index":1208,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["times",{"_index":2631,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["timing",{"_index":2930,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["title",{"_index":511,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["titleelement",{"_index":623,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["titleelement.nativeelement.getattribute('id",{"_index":4046,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["titleelement.nativeelement.setattribute('id",{"_index":4047,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["titleid",{"_index":624,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["todo",{"_index":133,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["toggle",{"_index":1105,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["toggleevent",{"_index":1106,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["token",{"_index":4051,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{},"miscellaneous/typealiases.html":{}}}],["tokens",{"_index":1175,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["tokens/i18n.token",{"_index":2354,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["toolbar",{"_index":2735,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["toolbox",{"_index":2737,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["tools",{"_index":4782,"title":{},"body":{"index.html":{}}}],["tooltip",{"_index":3771,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"miscellaneous/typealiases.html":{}}}],["tooltipeventssubject",{"_index":3840,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipportal",{"_index":3908,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipposition",{"_index":3891,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref",{"_index":3911,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('id",{"_index":3916,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('position",{"_index":3914,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('positionclass",{"_index":3915,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('text",{"_index":3913,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltips",{"_index":4787,"title":{},"body":{"index.html":{}}}],["tooltipservice",{"_index":3800,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["top",{"_index":3544,"title":{},"body":{"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{}}}],["tort",{"_index":4877,"title":{},"body":{"index.html":{},"license.html":{}}}],["tosignal",{"_index":2873,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["tosignal(this.layoutservice.layout",{"_index":2878,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["total",{"_index":632,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["touched",{"_index":395,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["touchedeventlistener",{"_index":1932,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["touchedeventlistener(this.abstractcontrol",{"_index":1950,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["touppercase",{"_index":4705,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["tour",{"_index":485,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["tour.types",{"_index":4052,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["touritem",{"_index":3930,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["touritem]'},{'name",{"_index":604,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["tourservice",{"_index":488,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["track",{"_index":2403,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxWindowService.html":{}}}],["tracked",{"_index":2805,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["trailing",{"_index":477,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["transform",{"_index":185,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"pipes/TransformPipe.html":{}}}],["transform(direction",{"_index":3754,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["transform(feature",{"_index":2125,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["transform(output",{"_index":444,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["transform(permission",{"_index":2219,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["transform(undefined",{"_index":1459,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["transform(value",{"_index":186,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/TransformPipe.html":{}}}],["transformer",{"_index":4698,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["transformer(value",{"_index":4706,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["transformertype",{"_index":4702,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["transformpipe",{"_index":4696,"title":{"pipes/TransformPipe.html":{}},"body":{"pipes/TransformPipe.html":{}}}],["transforms",{"_index":4703,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["translate",{"_index":2514,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["translate/core",{"_index":2347,"title":{},"body":{"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"dependencies.html":{}}}],["translateloader",{"_index":2345,"title":{},"body":{"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translatemodule",{"_index":2346,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["translatemodule.forchild",{"_index":2366,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["translatemodule.forroot",{"_index":2360,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["translateservice",{"_index":2497,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["translation",{"_index":1496,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["translation.fromstore",{"_index":2424,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts",{"_index":2370,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:19",{"_index":2379,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:25",{"_index":2377,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:37",{"_index":2381,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation/multi",{"_index":2369,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translationloader",{"_index":2339,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["translationloaderactionentity",{"_index":2284,"title":{"interfaces/TranslationLoaderActionEntity.html":{}},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["translationloaderactionssubject",{"_index":2269,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationloaderactionstateenum",{"_index":4708,"title":{},"body":{"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["translationloadingservice",{"_index":2373,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translations",{"_index":1504,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"index.html":{}}}],["translationsfailed",{"_index":2270,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationsfailedsubject",{"_index":2271,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationsloaded",{"_index":2272,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationsloading",{"_index":2273,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationspaths",{"_index":2376,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translationssubject",{"_index":2274,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationtype",{"_index":2505,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["tree",{"_index":481,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["treegrid",{"_index":4059,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["trigger",{"_index":1091,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["triggered",{"_index":1583,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{}}}],["triggering",{"_index":1591,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxWindowService.html":{}}}],["true",{"_index":47,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["trusted",{"_index":3387,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["truth",{"_index":2470,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["ts",{"_index":2385,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"dependencies.html":{}}}],["tuples",{"_index":2788,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["two",{"_index":2988,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["type",{"_index":16,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":4894,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":164,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"directives/NgxDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["typedaction",{"_index":165,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["typeof",{"_index":826,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["types",{"_index":720,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["typescript",{"_index":2959,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["typing",{"_index":1345,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["uarr",{"_index":3759,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["ui",{"_index":1997,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["unauthenticated",{"_index":1135,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["uncheck",{"_index":4584,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["undefined",{"_index":994,"title":{},"body":{"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["under",{"_index":3952,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["underneath",{"_index":1905,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["unique",{"_index":764,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{},"miscellaneous/typealiases.html":{}}}],["unknown",{"_index":173,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"pipes/NgxTableGetPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["unless",{"_index":3130,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["unload",{"_index":3412,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["unregister",{"_index":2802,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["unscramble",{"_index":3219,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams",{"_index":3199,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams(params",{"_index":3217,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams(value",{"_index":3256,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams?(params",{"_index":3294,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambler",{"_index":3242,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambler(value.sorting",{"_index":3257,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unselect",{"_index":4608,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["unset",{"_index":1277,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"miscellaneous/typealiases.html":{}}}],["unsorted",{"_index":4656,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["unsubscribe",{"_index":3136,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["until",{"_index":2932,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["unused",{"_index":2961,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"interfaces/TableCellTemplate.html":{}}}],["up",{"_index":953,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["upcoming",{"_index":3882,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["update",{"_index":162,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["updateaccordionitemstate",{"_index":1027,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["updateaccordionitemstate(isopen",{"_index":1057,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["updateallvalueandvalidity",{"_index":374,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["updateallvalueandvalidity(form",{"_index":400,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["updateconditions",{"_index":1769,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["updateconditions(conditions",{"_index":1788,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["updated",{"_index":1820,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["updates",{"_index":402,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxStorageService.html":{}}}],["updatevalueandvalidity",{"_index":405,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["updateview",{"_index":2006,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["updateviewsubject",{"_index":1763,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["upon",{"_index":2067,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["url",{"_index":1152,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/SpecStoreAssets.html":{}}}],["us/docs/web/accessibility/aria/aria_live_regions",{"_index":1797,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["us/docs/web/accessibility/aria/attributes/aria",{"_index":3014,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["us/docs/web/api/broadcastchannel",{"_index":1371,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["use",{"_index":203,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["used",{"_index":106,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"classes/NgxI18nAbstractService.html":{},"components/NgxI18nEmptyComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["usedefaultlang",{"_index":2364,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["useexisting",{"_index":256,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["usefactory",{"_index":2361,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["useful",{"_index":2247,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["uselocalstorage",{"_index":1490,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["usemockdataduringtour",{"_index":503,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["user",{"_index":324,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["users",{"_index":1272,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"index.html":{}}}],["uses",{"_index":1222,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxTourItemDirective.html":{},"injectables/NgxWindowService.html":{}}}],["usevalue",{"_index":2365,"title":{},"body":{"modules/NgxI18nModule.html":{}}}],["using",{"_index":328,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["utilities",{"_index":4768,"title":{},"body":{"index.html":{}}}],["utils",{"_index":26,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["uuid",{"_index":817,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"dependencies.html":{}}}],["v",{"_index":2251,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["v3",{"_index":4779,"title":{},"body":{"index.html":{}}}],["v4",{"_index":816,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["v=1",{"_index":2253,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["v=1.0.0",{"_index":2254,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["v=1743428073628",{"_index":2256,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["valcke",{"_index":4817,"title":{},"body":{"index.html":{}}}],["valid",{"_index":3419,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{},"classes/NgxValidators.html":{}}}],["validates",{"_index":4223,"title":{},"body":{"classes/NgxValidators.html":{}}}],["validation",{"_index":258,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["validationerrors",{"_index":1881,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxValidators.html":{}}}],["validator",{"_index":30,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["validatorfn",{"_index":4207,"title":{},"body":{"classes/NgxValidators.html":{}}}],["validity",{"_index":403,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["value",{"_index":32,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/enumerations.html":{}}}],["value.charat(4",{"_index":221,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value.charat(8",{"_index":224,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value.isempty",{"_index":3744,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["value.isloading",{"_index":3745,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["value.length",{"_index":4582,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["value.match(/^[0",{"_index":3593,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["value.match(/{(.*:.*[,]{0,1",{"_index":3596,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["value.replace(/(.{4})/g",{"_index":470,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["value.replace(/\\./g",{"_index":217,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value.replace(/\\s/g",{"_index":466,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["value.tostring",{"_index":216,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["valuechanges",{"_index":2579,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["valuechanges.asobservable",{"_index":2751,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["valuechanges.next(event?.markerarea?.getstate",{"_index":2747,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["valuechanges.next(marker",{"_index":2754,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["values",{"_index":1873,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{}}}],["van",{"_index":4755,"title":{},"body":{"index.html":{},"license.html":{}}}],["vanilla",{"_index":1497,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"dependencies.html":{}}}],["var",{"_index":517,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["variables",{"_index":56,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["vars",{"_index":2962,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"interfaces/TableCellTemplate.html":{}}}],["vat",{"_index":198,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["veire",{"_index":4757,"title":{},"body":{"index.html":{},"license.html":{}}}],["version",{"_index":1360,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["vertical",{"_index":3957,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["very",{"_index":1599,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["videos",{"_index":4357,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["videoserror",{"_index":4369,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["videoserrormessage",{"_index":4370,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["videosloading",{"_index":4371,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["view",{"_index":1809,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["viewchild",{"_index":1083,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["viewchild('celltmpl",{"_index":1681,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{}}}],["viewchild('details",{"_index":1066,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["viewchild('imageelement",{"_index":2623,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["viewchild('summary",{"_index":1080,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["viewchild>('contenttmpl",{"_index":1434,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["viewchild>('steptitle",{"_index":657,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["viewchildren",{"_index":103,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{}}}],["viewchildren(baseformaccessor",{"_index":406,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["viewcontainer",{"_index":1764,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["viewcontainerref",{"_index":1812,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["viewmarkerbase",{"_index":2557,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["viewport",{"_index":3961,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["views",{"_index":2044,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"miscellaneous/typealiases.html":{}}}],["visible",{"_index":1606,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["visual",{"_index":1092,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["visualize",{"_index":3722,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["visualized",{"_index":3728,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["void",{"_index":317,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"modules/NgxI18nModule.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["vs",{"_index":3551,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["wait",{"_index":981,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["walkthrough",{"_index":4785,"title":{},"body":{"index.html":{}}}],["want",{"_index":237,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["warn",{"_index":425,"title":{},"body":{"directives/FormAccessorContainer.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["warning",{"_index":378,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["warranties",{"_index":4864,"title":{},"body":{"index.html":{},"license.html":{}}}],["warranty",{"_index":4859,"title":{},"body":{"index.html":{},"license.html":{}}}],["way",{"_index":1996,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStore.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ways",{"_index":1133,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["wcag",{"_index":1432,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["wcag/aria",{"_index":936,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{}}}],["wcag/wai",{"_index":2607,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["we'll",{"_index":2633,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["we're",{"_index":1611,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["we've",{"_index":1268,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["web",{"_index":3321,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["webcomponent",{"_index":3307,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["webcomponents",{"_index":3311,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["well",{"_index":84,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxConfigurableLayoutItemComponent.html":{}}}],["wen",{"_index":3137,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["went",{"_index":2326,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["weren't",{"_index":2939,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["when.directive.ts",{"_index":3989,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:123",{"_index":3995,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:26",{"_index":4002,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:27",{"_index":4003,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:32",{"_index":3998,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:37",{"_index":4000,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:38",{"_index":4001,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:39",{"_index":3999,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:40",{"_index":3992,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:63",{"_index":3993,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:68",{"_index":3994,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:70",{"_index":3996,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:74",{"_index":3997,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when/tour",{"_index":3988,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["whenactive",{"_index":4011,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["whenever",{"_index":1827,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{}}}],["wheninactive",{"_index":4010,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["whether",{"_index":693,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"index.html":{},"license.html":{}}}],["whilst",{"_index":2328,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["whitespace",{"_index":3947,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["whose",{"_index":2798,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["width",{"_index":4274,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["widthsubject",{"_index":4275,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["wiki",{"_index":4762,"title":{},"body":{"index.html":{}}}],["window",{"_index":1609,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["window.scrolly",{"_index":4350,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["window:beforeunload",{"_index":3410,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["windowservice",{"_index":1372,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["windowservice.runinbrowser",{"_index":3563,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["windowsservice",{"_index":2438,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["windowwidth",{"_index":4316,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["wish",{"_index":194,"title":{},"body":{"pipes/BtwPipe.html":{},"components/MockTourStepComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxMobileLayoutConfiguration.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["wishing",{"_index":1780,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["withcredentials",{"_index":1145,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["within",{"_index":1563,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{}}}],["withlatestfrom",{"_index":4004,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["without",{"_index":209,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["withpositions([this.positionrecord[tooltipposition",{"_index":3905,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["work",{"_index":1346,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["workflow",{"_index":4776,"title":{},"body":{"index.html":{}}}],["works",{"_index":920,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["world",{"_index":497,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/NgxStorageService.html":{}}}],["wouter",{"_index":134,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["wrap",{"_index":230,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["wrapped",{"_index":1397,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["wrapper",{"_index":1129,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["wraps",{"_index":1367,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["writable",{"_index":3483,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"miscellaneous/typealiases.html":{}}}],["writablearraysignal",{"_index":4968,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["writablebooleansignal",{"_index":4969,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["writablenumbersignal",{"_index":4970,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["writablesignal",{"_index":660,"title":{},"body":{"components/MockTourStepComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/typealiases.html":{}}}],["writablestringsignal",{"_index":4971,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["writengxtablevalue",{"_index":4472,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["writevalue",{"_index":4575,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["writevalue(value",{"_index":4577,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["wrong",{"_index":2327,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["wysiwyg",{"_index":3324,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["xxxx.xxx.xxx",{"_index":220,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["y",{"_index":3950,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["yes",{"_index":799,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"modules/NgxI18nModule.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"classes/NgxValidators.html":{}}}],["yourcomponent",{"_index":3555,"title":{},"body":{"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["youtube",{"_index":4362,"title":{},"body":{"interfaces/SpecStoreAssets.html":{}}}],["yyyy",{"_index":4217,"title":{},"body":{"classes/NgxValidators.html":{}}}],["zone.js",{"_index":4729,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":2577,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"overview.html":{}}}],["zooming",{"_index":2569,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["zoomlevels",{"_index":2598,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AtLeastOneRequiredValidatorOptions.html":{"url":"interfaces/AtLeastOneRequiredValidatorOptions.html","title":"interface - AtLeastOneRequiredValidatorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AtLeastOneRequiredValidatorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/validators/at-least-one-required/at-least-one-required.validator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            conditionalFunction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            controls\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        conditionalFunction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        conditionalFunction:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        controls\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        controls:     KeyType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyType[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FormGroup } from '@angular/forms';\nimport clean from 'obj-clean';\n\nimport { clearFormError, setFormError } from '../utils';\n\nexport interface AtLeastOneRequiredValidatorOptions {\n\tcontrols?: KeyType[];\n\tconditionalFunction?: (data: any) => boolean;\n}\n\n/**\n * FormGroup validator which checks if either at least one value is filled in\n *\n * @param options - An optional object with configuration options, see below params for more info\n */\nexport const atLeastOneRequiredValidator = (\n\toptions?: AtLeastOneRequiredValidatorOptions\n) => {\n\treturn (group: FormGroup): { atLeastOneRequiredError: true } | null => {\n\t\t// Iben: Get the optional configuration items\n\t\tlet conditionalFunction: (data: any) => boolean;\n\t\tlet keys: KeyType[];\n\n\t\tif (options) {\n\t\t\tconditionalFunction = options.conditionalFunction;\n\t\t\tkeys = options.controls;\n\t\t}\n\t\t// Iben: Setup the needed variables to handle the validator\n\t\tconst cleanedFormValue = clean(group.value);\n\t\tconst cleanedKeys = new Set(Object.keys(cleanedFormValue));\n\t\tconst controls = Object.values(group.controls);\n\t\tconst empty = cleanedKeys.size === 0;\n\n\t\t// Iben: If nothing is filled in, we return an error\n\t\tif (\n\t\t\t(empty && !conditionalFunction) ||\n\t\t\t(empty && conditionalFunction && conditionalFunction(group.value))\n\t\t) {\n\t\t\tfor (const control of controls) {\n\t\t\t\tsetFormError(control, 'required');\n\t\t\t}\n\n\t\t\treturn { atLeastOneRequiredError: true };\n\t\t}\n\n\t\t// Iben: Check if we need to check on a specific key\n\t\tif (keys) {\n\t\t\tconst hasOneKey = keys.reduce((hasOne, key) => hasOne || cleanedKeys.has(key), false);\n\n\t\t\t// Iben: Only return an error when there is no key matched at all\n\t\t\t// and in case of a conditionalFunction if the conditionalFunction is matched as well\n\t\t\tif (\n\t\t\t\t(!hasOneKey && !conditionalFunction) ||\n\t\t\t\t(!hasOneKey && conditionalFunction && conditionalFunction(group.value))\n\t\t\t) {\n\t\t\t\tfor (const key of keys) {\n\t\t\t\t\tsetFormError(group.get(key), 'required');\n\t\t\t\t}\n\n\t\t\t\treturn { atLeastOneRequiredError: true };\n\t\t\t}\n\t\t}\n\n\t\t// Iben: In case there are no errors, clean the required errors and return null\n\t\tfor (const control of controls) {\n\t\t\tclearFormError(control, 'required');\n\t\t}\n\n\t\treturn null;\n\t};\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseFormAccessor.html":{"url":"classes/BaseFormAccessor.html","title":"class - BaseFormAccessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseFormAccessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/base-form/base-form.accessor.ts\n        \n\n\n            \n                Description\n            \n            \n                In order to select all accessors in a FormContainer, we need this base class to pass to our ViewChildren.\nIMPORTANT: This will never be used as an actual functional component\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class BaseFormAccessor {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStore.html":{"url":"interfaces/BaseStore.html","title":"interface - BaseStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            errorMessage\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     StateInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StateInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorMessage:     ErrorInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ErrorInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreActions.html":{"url":"interfaces/BaseStoreActions.html","title":"interface - BaseStoreActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            effects\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:     ActionCreator>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        effects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        effects:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreAssets.html":{"url":"interfaces/BaseStoreAssets.html","title":"interface - BaseStoreAssets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreAssets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            reducers\n                                        \n                                \n                                \n                                        \n                                            selectors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:         BaseStoreActions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseStoreActions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reducers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reducers:     ActionReducer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionReducer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectors:         BaseStoreSelectors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseStoreSelectors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreAssetsGeneratorOptions.html":{"url":"interfaces/BaseStoreAssetsGeneratorOptions.html","title":"interface - BaseStoreAssetsGeneratorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreAssetsGeneratorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-assets-generator-options.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            initialStateValue\n                                        \n                                \n                                \n                                        \n                                            slice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        initialStateValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialStateValue:     StateInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StateInterface\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        slice:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\n\nexport interface EntityStoreAssetsGeneratorOptions {\n\tslice: string;\n\tselectId?: IdSelector;\n\tinitialStateValue?: StateInterface[];\n}\n\nexport interface BaseStoreAssetsGeneratorOptions {\n\tslice: string;\n\tinitialStateValue?: StateInterface;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreSelectors.html":{"url":"interfaces/BaseStoreSelectors.html","title":"interface - BaseStoreSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            select\n                                        \n                                \n                                \n                                        \n                                            selectError\n                                        \n                                \n                                \n                                        \n                                            selectErrorMessage\n                                        \n                                \n                                \n                                        \n                                            selectLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        select\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        select:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectError:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectErrorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectErrorMessage:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectLoading:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BasicEntityAdapterReducerActions.html":{"url":"interfaces/BasicEntityAdapterReducerActions.html","title":"interface - BasicEntityAdapterReducerActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BasicEntityAdapterReducerActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-adapter-reducers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            add\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        add\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        add:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EntityState } from '@ngrx/entity';\n\n// Iben: actions get typed to any as the type TypedAction from ngrx/store is sadly not exported\ninterface BasicEntityAdapterReducerActions {\n\tadd: any;\n\tset: any;\n\tdelete: any;\n\tupdate: any;\n}\n\nexport type BasicEntityAdapterActions = Partial;\n\nexport interface BasicEntityState extends EntityState {\n\tentityStatus: {\n\t\tloading: boolean;\n\t\terror: boolean;\n\t\terrorMessage: unknown;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BasicEntityState.html":{"url":"interfaces/BasicEntityState.html","title":"interface - BasicEntityState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BasicEntityState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-adapter-reducers.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        EntityState\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entityStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entityStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entityStatus:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EntityState } from '@ngrx/entity';\n\n// Iben: actions get typed to any as the type TypedAction from ngrx/store is sadly not exported\ninterface BasicEntityAdapterReducerActions {\n\tadd: any;\n\tset: any;\n\tdelete: any;\n\tupdate: any;\n}\n\nexport type BasicEntityAdapterActions = Partial;\n\nexport interface BasicEntityState extends EntityState {\n\tentityStatus: {\n\t\tloading: boolean;\n\t\terror: boolean;\n\t\terrorMessage: unknown;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/BtwPipe.html":{"url":"pipes/BtwPipe.html","title":"pipe - BtwPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  BtwPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        btw\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts:13\n                        \n                    \n\n\n            \n                \n                        Converts a BTW number to the correct format\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value we wish to convert\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        BtwPipe\nThe BtwPipe will format Belgian VAT numbers.\nFor example\n474603875 will format to 474.603.875.\nHow to use\n\n    \n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n\tname: 'btw',\n\tstandalone: true,\n})\nexport class BtwPipe implements PipeTransform {\n\t/**\n\t * Converts a BTW number to the correct format\n\t *\n\t * @param value - The value we wish to convert\n\t */\n\tpublic transform(value: string): string {\n\t\tif (!value) {\n\t\t\t// Denis: if the value is falsy, return it without transform.\n\t\t\treturn value;\n\t\t}\n\n\t\tconst addCharAtIndex = (original: string, char: string, index: number): string => {\n\t\t\treturn original.slice(0, index) + char + original.slice(index);\n\t\t};\n\n\t\t// Iben: Convert to string if it's a number\n\t\tvalue = value.toString();\n\n\t\tif (value.replace(/\\./g, '').length === 9) {\n\t\t\tvalue = '0' + value;\n\t\t}\n\n\t\t// Iben: Format: xxxx.xxx.xxx\n\t\tif (value.charAt(4) !== '.') {\n\t\t\tvalue = addCharAtIndex(value, '.', 4);\n\t\t}\n\n\t\tif (value.charAt(8) !== '.') {\n\t\t\tvalue = addCharAtIndex(value, '.', 8);\n\t\t}\n\n\t\treturn value;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentTypeWrapper.html":{"url":"interfaces/ComponentTypeWrapper.html","title":"interface - ComponentTypeWrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ComponentTypeWrapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/utils/accessor-providers/accessor-providers.util.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface to wrap an component class in.\nThis interface is for internal use, as a similar one already exists in the CDK, but we don't want to create a dependency on that for this package.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Provider, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { BaseFormAccessor } from '../../abstracts';\n\n/**\n * An interface to wrap an component class in.\n *\n * This interface is for internal use, as a similar one already exists in the CDK, but we don't want to create a dependency on that for this package.\n */\ninterface ComponentTypeWrapper {\n\tnew (...args: any[]): ComponentType;\n}\n\n/**\n * Generates the necessary providers for a (Data)FormAccessor.\n *\n * @param  component - The component class of the (Data)FormAccessor\n */\nexport const createAccessorProviders = (\n\tcomponent: ComponentTypeWrapper\n): Provider[] => {\n\treturn [\n\t\t// Iben: Generate a provider for the control handling\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: forwardRef(() => component),\n\t\t\tmulti: true,\n\t\t},\n\t\t// Iben: Generate a provider for the validation handling\n\t\t{\n\t\t\tprovide: NG_VALIDATORS,\n\t\t\tuseExisting: forwardRef(() => component),\n\t\t\tmulti: true,\n\t\t},\n\t\t// Iben: Generate a provider for the FormContainer handling\n\t\t{\n\t\t\tprovide: BaseFormAccessor,\n\t\t\tuseExisting: forwardRef(() => component),\n\t\t},\n\t];\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EffectsService.html":{"url":"injectables/EffectsService.html","title":"injectable - EffectsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EffectsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/effects.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fetchChannel\n                            \n                            \n                                    Public\n                                fetchVideos\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchChannel(isPublic: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/effects.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isPublic\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchVideos(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/effects.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DataType } from './store-assets';\nimport { mockChannel, mockPrivateChannel, mockVideos } from './store.spec';\n\n@Injectable()\nexport class EffectsService {\n\tpublic fetchChannel(isPublic: boolean): Observable {\n\t\tif (isPublic) {\n\t\t\treturn of(mockChannel);\n\t\t}\n\n\t\treturn of(mockPrivateChannel);\n\t}\n\n\tpublic fetchVideos(id: string): Observable {\n\t\treturn of(mockVideos);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreActions.html":{"url":"interfaces/EntityStoreActions.html","title":"interface - EntityStoreActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-store-assets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            add\n                                        \n                                \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            effects\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        add\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        add:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:     ActionCreator>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        effects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        effects:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n\tActionReducer,\n\tAction,\n\tMemoizedSelector,\n\tDefaultProjectorFn,\n\tActionCreator,\n} from '@ngrx/store';\n\nimport { EntityStoreEffectsInterface } from './effects';\nimport { BasicEntityState } from './entity-adapter-reducers';\n\nexport interface EntityStoreAssets {\n\treducers: ActionReducer, Action>;\n\tselectors: EntityStoreSelectors;\n\tactions: EntityStoreActions;\n}\n\nexport interface EntityStoreSelectors {\n\tselectAll: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\nexport interface EntityStoreActions {\n\tadd: ActionCreator { payload: StateInterface | StateInterface[] } & Action\n\t>;\n\tset: ActionCreator { payload: StateInterface[] } & Action\n\t>;\n\tupdate: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tdelete: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tadd: ActionCreator { payload: EffectsInterface['add'] } & Action\n\t\t>;\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t\tupdate: ActionCreator { payload: EffectsInterface['update'] } & Action\n\t\t>;\n\t\tdelete: ActionCreator { payload: EffectsInterface['delete'] } & Action\n\t\t>;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreAssets.html":{"url":"interfaces/EntityStoreAssets.html","title":"interface - EntityStoreAssets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreAssets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-store-assets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            reducers\n                                        \n                                \n                                \n                                        \n                                            selectors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:         EntityStoreActions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreActions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reducers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reducers:         ActionReducer | Action>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionReducer | Action>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectors:         EntityStoreSelectors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreSelectors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n\tActionReducer,\n\tAction,\n\tMemoizedSelector,\n\tDefaultProjectorFn,\n\tActionCreator,\n} from '@ngrx/store';\n\nimport { EntityStoreEffectsInterface } from './effects';\nimport { BasicEntityState } from './entity-adapter-reducers';\n\nexport interface EntityStoreAssets {\n\treducers: ActionReducer, Action>;\n\tselectors: EntityStoreSelectors;\n\tactions: EntityStoreActions;\n}\n\nexport interface EntityStoreSelectors {\n\tselectAll: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\nexport interface EntityStoreActions {\n\tadd: ActionCreator { payload: StateInterface | StateInterface[] } & Action\n\t>;\n\tset: ActionCreator { payload: StateInterface[] } & Action\n\t>;\n\tupdate: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tdelete: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tadd: ActionCreator { payload: EffectsInterface['add'] } & Action\n\t\t>;\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t\tupdate: ActionCreator { payload: EffectsInterface['update'] } & Action\n\t\t>;\n\t\tdelete: ActionCreator { payload: EffectsInterface['delete'] } & Action\n\t\t>;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreAssetsGeneratorOptions.html":{"url":"interfaces/EntityStoreAssetsGeneratorOptions.html","title":"interface - EntityStoreAssetsGeneratorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreAssetsGeneratorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-assets-generator-options.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            initialStateValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            selectId\n                                        \n                                \n                                \n                                        \n                                            slice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        initialStateValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialStateValue:     StateInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StateInterface[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectId:     IdSelector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IdSelector\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        slice:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\n\nexport interface EntityStoreAssetsGeneratorOptions {\n\tslice: string;\n\tselectId?: IdSelector;\n\tinitialStateValue?: StateInterface[];\n}\n\nexport interface BaseStoreAssetsGeneratorOptions {\n\tslice: string;\n\tinitialStateValue?: StateInterface;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreSelectors.html":{"url":"interfaces/EntityStoreSelectors.html","title":"interface - EntityStoreSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-store-assets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            selectAll\n                                        \n                                \n                                \n                                        \n                                            selectError\n                                        \n                                \n                                \n                                        \n                                            selectErrorMessage\n                                        \n                                \n                                \n                                        \n                                            selectLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        selectAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectAll:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectError:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectErrorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectErrorMessage:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectLoading:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n\tActionReducer,\n\tAction,\n\tMemoizedSelector,\n\tDefaultProjectorFn,\n\tActionCreator,\n} from '@ngrx/store';\n\nimport { EntityStoreEffectsInterface } from './effects';\nimport { BasicEntityState } from './entity-adapter-reducers';\n\nexport interface EntityStoreAssets {\n\treducers: ActionReducer, Action>;\n\tselectors: EntityStoreSelectors;\n\tactions: EntityStoreActions;\n}\n\nexport interface EntityStoreSelectors {\n\tselectAll: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\nexport interface EntityStoreActions {\n\tadd: ActionCreator { payload: StateInterface | StateInterface[] } & Action\n\t>;\n\tset: ActionCreator { payload: StateInterface[] } & Action\n\t>;\n\tupdate: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tdelete: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tadd: ActionCreator { payload: EffectsInterface['add'] } & Action\n\t\t>;\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t\tupdate: ActionCreator { payload: EffectsInterface['update'] } & Action\n\t\t>;\n\t\tdelete: ActionCreator { payload: EffectsInterface['delete'] } & Action\n\t\t>;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/FocusClickDirective.html":{"url":"directives/FocusClickDirective.html","title":"directive - FocusClickDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  FocusClickDirective\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [focusClick]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                disabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                focusClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                isClicked\n                            \n                            \n                                    \n                                    Public\n                                isEntered\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                keydown.enter\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:12\n                            \n                        \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:28\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.enter\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:37\n                \n            \n\n\n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isClicked\n                        \n                    \n                \n            \n            \n                \n                        \n                    isClicked(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isEntered\n                        \n                    \n                \n            \n            \n                \n                        \n                    isEntered()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.enter')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        focusClick\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:24\n                        \n                    \n\n            \n                \n                    This directive replaces the default click directive and allows the user to execute\nthe click event by clicking the mouse and  by using the enter key on focus.\nA tabindex of 0 gets added to the host.\n\n                \n            \n\n        \n    \n\n\n\n    \n\n    \n        FocusClickDirective\nThe FocusClickDirective provides an a11y friendly click handler.\nThis directive replaces the default click directive and allows the user to execute\nthe click event by clicking the mouse and by using the enter key on focus.\nHow to use\nExample :\n    My Button\n\n    \n\n    \n        import { Directive, HostListener, OutputEmitterRef, input, output } from '@angular/core';\n\n@Directive({\n\tselector: '[focusClick]',\n\tstandalone: true,\n\thost: {\n\t\t'[attr.tabIndex]': '0',\n\t},\n})\nexport class FocusClickDirective {\n\t// Allow the button to ignore click events when set to true\n\tpublic readonly disabled = input(false);\n\n\t// Allow the function passed by the host to be executed\n\t// when the emit() method gets called\n\t/**\n\t * This directive replaces the default `click` directive and allows the user to execute\n\t * the `click` event by clicking the mouse **and**  by using the `enter` key on focus.\n\t *\n\t * A tabindex of `0` gets added to the host.\n\t *\n\t * @memberof FocusClickDirective\n\t */\n\tpublic readonly focusClick: OutputEmitterRef = output();\n\n\t// Add eventhandler to the click event\n\t@HostListener('click', ['$event'])\n\tpublic isClicked(event: Event): void {\n\t\tif (!this.disabled()) {\n\t\t\tthis.focusClick.emit(event);\n\t\t}\n\t}\n\n\t// Add eventhandler to keydown event When enter is pressed and the event\n\t// isn't blocked, execute the click function of the host\n\t@HostListener('keydown.enter')\n\tpublic isEntered(): void {\n\t\tif (!this.disabled()) {\n\t\t\tthis.focusClick.emit();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/FormAccessorContainer.html":{"url":"directives/FormAccessorContainer.html","title":"directive - FormAccessorContainer","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  FormAccessorContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                accessors\n                            \n                            \n                                    Protected\n                                    Readonly\n                                destroyed$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleAccessorsAction\n                            \n                            \n                                    Public\n                                markAllAsDirty\n                            \n                            \n                                    Public\n                                markAllAsTouched\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                updateAllValueAndValidity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleAccessorsAction\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleAccessorsAction(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:85\n                        \n                    \n\n\n            \n                \n                        Handle the accessors action of the FormContainer and throw a warning if no accessors are provided\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAllAsDirty\n                        \n                    \n                \n            \n            \n                \n                    This method should no longer be used, use the markAsDirty on the form itself instead\n\nMarks the form and all the inputs of every subsequent form-accessors as dirty\n                \n            \n            \n                \n                        \n                    markAllAsDirty(form: AbstractControl, options: FormStateOptionsEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:33\n                        \n                    \n\n\n            \n                \n                        Marks the form and all the inputs of every subsequent form-accessors as dirty\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe form used in the component\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FormStateOptionsEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    \nOptions passed to the form state changer\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAllAsTouched\n                        \n                    \n                \n            \n            \n                \n                    This method should no longer be used, use the markAsTouched on the form itself instead\n\nMarks the form and all the inputs of every subsequent form-accessors as touched\n                \n            \n            \n                \n                        \n                    markAllAsTouched(form: AbstractControl, options: FormStateOptionsEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:47\n                        \n                    \n\n\n            \n                \n                        Marks the form and all the inputs of every subsequent form-accessors as touched\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe form used in the component\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FormStateOptionsEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    \nOptions passed to the form state changer\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:75\n                        \n                    \n\n\n            \n                \n                        Handle the destroy state of the component\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateAllValueAndValidity\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAllValueAndValidity(form: AbstractControl, options: FormStateOptionsEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:59\n                        \n                    \n\n\n            \n                \n                        Updates the value and validity of the form and all the inputs of every subsequent form-accessors\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe provided forms\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FormStateOptionsEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    \nOptions passed to the updateValueAndValidity\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        accessors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChildren(BaseFormAccessor)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:18\n                        \n                    \n\n            \n                \n                    A list of all DataFormAccessors en FormAccessors of this component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:23\n                        \n                    \n\n            \n                \n                    Destroyed state of the component\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, OnDestroy, viewChildren } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { FormStateOptionsEntity } from '../../interfaces';\nimport {\n\thandleFormAccessorMarkAsDirty,\n\thandleFormAccessorMarkAsTouched,\n\thandleFormAccessorUpdateValueAndValidity,\n} from '../../utils';\nimport { BaseFormAccessor } from '../base-form/base-form.accessor';\n\n@Directive()\nexport class FormAccessorContainer implements OnDestroy {\n\t/**\n\t * A list of all DataFormAccessors en FormAccessors of this component\n\t */\n\treadonly accessors = viewChildren(BaseFormAccessor);\n\n\t/**\n\t * Destroyed state of the component\n\t */\n\tprotected readonly destroyed$ = new Subject();\n\n\t/**\n\t * @deprecated This method should no longer be used, use the markAsDirty on the form itself instead\n\t *\n\t * Marks the form and all the inputs of every subsequent form-accessors as dirty\n\t *\n\t * @param  form - The form used in the component\n\t * @param options - Options passed to the form state changer\n\t */\n\tpublic markAllAsDirty(form: AbstractControl, options: FormStateOptionsEntity = {}): void {\n\t\tthis.handleAccessorsAction(() => {\n\t\t\thandleFormAccessorMarkAsDirty(form, this.accessors() as any || [], options);\n\t\t});\n\t}\n\n\t/**\n\t * @deprecated This method should no longer be used, use the markAsTouched on the form itself instead\n\t *\n\t * Marks the form and all the inputs of every subsequent form-accessors as touched\n\t *\n\t * @param  form - The form used in the component\n\t * @param options - Options passed to the form state changer\n\t */\n\tpublic markAllAsTouched(form: AbstractControl, options: FormStateOptionsEntity = {}): void {\n\t\tthis.handleAccessorsAction(() => {\n\t\t\thandleFormAccessorMarkAsTouched(form, this.accessors() as any || [], options);\n\t\t});\n\t}\n\n\t/**\n\t * Updates the value and validity of the form and all the inputs of every subsequent form-accessors\n\t *\n\t * @param form - The provided forms\n\t * @param options - Options passed to the updateValueAndValidity\n\t */\n\tpublic updateAllValueAndValidity(\n\t\tform: AbstractControl,\n\t\toptions: FormStateOptionsEntity = {}\n\t): void {\n\t\tthis.handleAccessorsAction(() => {\n\t\t\thandleFormAccessorUpdateValueAndValidity(\n\t\t\t\tform,\n\t\t\t\tthis.accessors() as any || [],\n\t\t\t\toptions\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Handle the destroy state of the component\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.destroyed$.next(undefined);\n\t\tthis.destroyed$.complete();\n\t}\n\n\t/**\n\t * Handle the accessors action of the FormContainer and throw a warning if no accessors are provided\n\t *\n\t * @param  action - The provided action\n\t */\n\tprivate handleAccessorsAction(action: () => void) {\n\t\t// Iben: Throw a warn in case there are no accessors found\n\t\tconst accessors = this.accessors();\n  if (!accessors || accessors.length === 0) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxForms: No (Data)FormAccessors were found in this component. Check if each (Data)FormAccessor also provides the BaseFormAccessor in its providers array. If this is intentional, this warning can be ignored.'\n\t\t\t);\n\t\t}\n\n\t\t// Iben: Handle the provided action\n\t\taction();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormStateOptionsEntity.html":{"url":"interfaces/FormStateOptionsEntity.html","title":"interface - FormStateOptionsEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FormStateOptionsEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/interfaces/form-state-options.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            emitEvent\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onlySelf\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        emitEvent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emitEvent:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onlySelf\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onlySelf:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FormStateOptionsEntity {\n\tonlySelf?: boolean;\n\temitEvent?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/HasObserversPipe.html":{"url":"pipes/HasObserversPipe.html","title":"pipe - HasObserversPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  HasObserversPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/has-observers/has-observers.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        hasObservers\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(output: EventEmitter<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/has-observers/has-observers.pipe.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                output\n                                            \n                                                        EventEmitter<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        HasObserversPipe\nThe HasObserversPipe will check if an Output property has observers.\nHow to use\nExample :\n  {{ somethingHasCompleted | hasObservers }}\nExample :@Component({\n    templateUrl: './my-component.component.html',\n    selector: 'my-component',\n})\nexport class MyComponent {\n    @Ouput() public somethingHasCompleted: EventEmitter = EventEmitter();\n}If a parent subscribes to the EventEmitter, hasObservers will return true\nExample :\n    \n\n    \n        import { Pipe, PipeTransform, EventEmitter } from '@angular/core';\n\n@Pipe({\n\tname: 'hasObservers',\n\tstandalone: true,\n})\nexport class HasObserversPipe implements PipeTransform {\n\tpublic transform(output: EventEmitter): boolean {\n\t\treturn output && output.observers.length > 0;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/IbanPipe.html":{"url":"pipes/IbanPipe.html","title":"pipe - IbanPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  IbanPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        IBAN\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        IbanPipe\nThe IbanPipe will format an IBAN number.\nFor example\nBE62510007547061 will format to BE62 5100 0754 7061.\nHow to use\nExample :\n  {{ ibanNumber | IBAN }}\n\n    \n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n\tname: 'IBAN',\n\tstandalone: true,\n})\nexport class IbanPipe implements PipeTransform {\n\tpublic transform(value = ''): string {\n\t\tvalue = value.replace(/\\s/g, ''); // replace all spaces\n\n\t\tlet reformat = value.replace(/(.{4})/g, function (match) {\n\t\t\treturn match + ' '; // reformat into groups of 4 succeeded with a space\n\t\t});\n\n\t\treformat = reformat.trim(); // remove trailing space\n\n\t\treturn reformat;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MockTourHolderComponent.html":{"url":"components/MockTourHolderComponent.html","title":"component - MockTourHolderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MockTourHolderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                mock-tour-holder\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                data$\n                            \n                            \n                                    Private\n                                    Readonly\n                                dataSourceSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                startTour\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        startTour\n                        \n                    \n                \n            \n            \n                \n                        \n                    startTour()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.dataSourceSubject\n\t\t.asObservable()\n\t\t.pipe(useMockDataDuringTour('World hello!'))\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dataSourceSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('Hello world!')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { useMockDataDuringTour } from '../operators';\nimport { NgxTourService } from '../services';\n\n// Iben: This mock tour holder is used in the test to test the useMockDataDuringTour operator\n@Component({\n\tselector: 'mock-tour-holder',\n\ttemplate: '',\n\tstandalone: true,\n})\nexport class MockTourHolderComponent {\n\tprivate readonly tourService = inject(NgxTourService);\n\n\tprivate readonly dataSourceSubject = new BehaviorSubject('Hello world!');\n\n\tpublic readonly data$ = this.dataSourceSubject\n\t\t.asObservable()\n\t\t.pipe(useMockDataDuringTour('World hello!'));\n\n\tpublic startTour() {\n\t\tthis.tourService.startTour([{ title: 'Mock', content: 'Mock' }]).subscribe();\n\t}\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'MockTourHolderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MockTourStepComponent.html":{"url":"components/MockTourStepComponent.html","title":"component - MockTourStepComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MockTourStepComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/inform/src/lib/mocks/tour-step.component.mock.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxTourStepComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                mock-tour-step-component\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                amountOfSteps\n                            \n                            \n                                    Public\n                                    Readonly\n                                content\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentStep\n                            \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                elementId\n                            \n                            \n                                    Public\n                                handleInteraction\n                            \n                            \n                                    Public\n                                    Readonly\n                                position\n                            \n                            \n                                    \n                                    Protected\n                                rootClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                stepClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                titleElement\n                            \n                            \n                                    Public\n                                titleId\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    \n                                    Public\n                                onEscape\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                amountOfSteps\n                            \n                            \n                                content\n                            \n                            \n                                currentStep\n                            \n                            \n                                data\n                            \n                            \n                                elementId\n                            \n                            \n                                stepClass\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown.escape\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        amountOfSteps\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:83\n\n                            \n                        \n                \n                    \n                        The total amount of steps\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:73\n\n                            \n                        \n                \n                    \n                        The content of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        currentStep\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:78\n\n                            \n                        \n                \n                    \n                        The index of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:88\n\n                            \n                        \n                \n                    \n                        Optional data we wish to use in a step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        elementId\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:53\n\n                            \n                        \n                \n                    \n                        The id of the element that the tour-step describes\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        stepClass\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:93\n\n                            \n                        \n                \n                    \n                        A custom step class we can set\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:68\n\n                            \n                        \n                \n                    \n                        The title of the step\n\n                    \n                \n            \n        \n\n\n    \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:45\n\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:keydown.escape\n                        \n                    \n                \n            \n            \n                \ndocument:keydown.escape()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:38\n\n                        \n                    \n\n\n            \n                \n                        Close the tour on escape pressed\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:112\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:105\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:38\n\n                        \n                    \n\n\n            \n                \n                        Close the tour on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        amountOfSteps\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:83\n\n                        \n                    \n\n            \n                \n                    The total amount of steps\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        content\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:73\n\n                        \n                    \n\n            \n                \n                    The content of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentStep\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:78\n\n                        \n                    \n\n            \n                \n                    The index of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:88\n\n                        \n                    \n\n            \n                \n                    Optional data we wish to use in a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementId\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:53\n\n                        \n                    \n\n            \n                \n                    The id of the element that the tour-step describes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleInteraction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:98\n\n                        \n                    \n\n            \n                \n                    Emits the possible interactions with a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:63\n\n                        \n                    \n\n            \n                \n                    The position of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Protected\n                        rootClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:45\n\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stepClass\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:93\n\n                        \n                    \n\n            \n                \n                    A custom step class we can set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:68\n\n                        \n                    \n\n            \n                \n                    The title of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        titleElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild>('stepTitle')\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:58\n\n                        \n                    \n\n            \n                \n                    The element of the tour-step that is seen as the title\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        titleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal('')\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:103\n\n                        \n                    \n\n            \n                \n                    The aria-labelledby id of the title element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:33\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\nimport { NgxTourStepComponent } from '../abstracts';\n\n// Iben: This mock tour step component can be used where needed\n@Component({\n\tselector: 'mock-tour-step-component',\n\ttemplate: '',\n\tstandalone: true,\n})\nexport class MockTourStepComponent extends NgxTourStepComponent {}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'MockTourStepComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAbstractTableCellDirective.html":{"url":"directives/NgxAbstractTableCellDirective.html","title":"directive - NgxAbstractTableCellDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAbstractTableCellDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/components/cell/cell.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        ngx-abstract-table-cell\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cellClass\n                            \n                            \n                                    Public\n                                cellTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                footerTemplate\n                            \n                            \n                                    Public\n                                headerTemplate\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:31\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:42\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:47\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:36\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:57\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:82\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:91\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:26\n                        \n                    \n\n            \n                \n                    An optional class that can be set for the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:31\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:42\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:47\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:19\n                        \n                    \n\n            \n                \n                    The templates used to set in the table\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:52\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:36\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:14\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, OutputEmitterRef, TemplateRef, input, output } from '@angular/core';\n\nimport { NgxTableSortDirection } from '../../enums/sort-direction.enum';\nimport { NgxTableCypressDataTags, NgxTableSortEvent } from '../../types';\n\n@Directive({\n\tselector: 'ngx-abstract-table-cell',\n\tstandalone: true,\n})\nexport class NgxAbstractTableCellDirective {\n\t/**\n\t * The current sortDirection of the cell\n\t */\n\tpublic sortDirection: NgxTableSortDirection | null = null;\n\n\t/**\n\t * The templates used to set in the table\n\t */\n\tpublic footerTemplate: TemplateRef;\n\tpublic headerTemplate: TemplateRef;\n\tpublic cellTemplate: TemplateRef;\n\n\t/**\n\t * An optional class that can be set for the cell\n\t */\n\tpublic cellClass: string;\n\n\t/**\n\t * The name of the column we want this cell to represent\n\t */\n\tpublic readonly column = input.required();\n\n\t/**\n\t * Whether or not the cell is sortable\n\t */\n\tpublic readonly sortable = input(false);\n\n\t/**\n\t * A tag that can be added to a column in the table, set according to the cypress best practices\n\t * See https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\t */\n\tpublic readonly cypressDataTags = input();\n\n\t/**\n\t * Whether the content of a cell is editable. By default, this is set to false\n\t */\n\tpublic readonly editable = input(false);\n\n\t/**\n\t * Emits the sortable event if a column is sortable\n\t */\n\tpublic sort: OutputEmitterRef = output();\n\n\t/**\n\t * Handles the sorting click events\n\t */\n\tpublic handleSort(): void {\n\t\t// Iben: Setup the sort direction\n\t\tlet newSortDirection = NgxTableSortDirection.ASCENDING;\n\n\t\t// Iben: If a an existing sorting direction exists, we switch based on the ones we have\n\t\tif (this.sortDirection) {\n\t\t\tnewSortDirection =\n\t\t\t\tthis.sortDirection === NgxTableSortDirection.ASCENDING\n\t\t\t\t\t? NgxTableSortDirection.DESCENDING\n\t\t\t\t\t: NgxTableSortDirection.ASCENDING;\n\t\t}\n\n\t\t// Iben: Set the internal sorting direction\n\t\tthis.setSortDirection(newSortDirection);\n\n\t\t// Iben: Emit the sorting event\n\t\tthis.sort.emit({\n\t\t\tdirection: this.sortDirection,\n\t\t\tcolumn: this.column(),\n\t\t});\n\t}\n\n\t/**\n\t * Resets the sort direction back to null\n\t */\n\tpublic resetSortDirection(): void {\n\t\tthis.sortDirection = null;\n\t}\n\n\t/**\n\t * Sets the sorting direction based on the provided direction\n\t *\n\t * @param direction - The provided direction\n\t */\n\tpublic setSortDirection(direction: NgxTableSortDirection): void {\n\t\tthis.sortDirection = direction;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{"url":"directives/NgxAccessibleAbstractDragAndDropItemDirective.html","title":"directive - NgxAccessibleAbstractDragAndDropItemDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAccessibleAbstractDragAndDropItemDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop-item.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class to avoid circular dependency with the ItemDirective and the HostDirective\n\n            \n\n            \n                Extends\n            \n            \n                            NgxHasFocusDragAndDropAbstractDirective\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                itemId\n                            \n                            \n                                    Public\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                markAsActive\n                            \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                    Optional\n                                onBlur\n                            \n                            \n                                    Public\n                                    Optional\n                                onFocus\n                            \n                            \n                                    \n                                    Public\n                                removeFocus\n                            \n                            \n                                    \n                                    Public\n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDragAndDropAbstractDirective:31\n\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDragAndDropAbstractDirective:20\n\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        markAsActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsActive()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop-item.directive.ts:18\n                        \n                    \n\n\n            \n                \n                         Marks the item as focussed and selected\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:41\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:54\n\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onBlur\n                        \n                    \n                \n            \n            \n                \n                        \n                    onBlur()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:45\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    onFocus()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:47\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:31\n\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:20\n\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        itemId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop-item.directive.ts:13\n                        \n                    \n\n            \n                \n                    An unique id of the draggable item\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject( ElementRef )\n                    \n                \n                        \n                            \n                                Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:39\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:15\n\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, Signal } from '@angular/core';\n\nimport { NgxHasFocusDragAndDropAbstractDirective } from './has-focus.directive';\n\n/**\n * An abstract class to avoid circular dependency with the ItemDirective and the HostDirective\n */\n@Directive()\nexport abstract class NgxAccessibleAbstractDragAndDropItemDirective extends NgxHasFocusDragAndDropAbstractDirective {\n\t/**\n\t * An unique id of the draggable item\n\t */\n\tabstract itemId: Signal;\n\n\t/**\n\t *  Marks the item as focussed and selected\n\t */\n\tabstract markAsActive(): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxAccessibleDragAndDropAbstractService.html":{"url":"classes/NgxAccessibleDragAndDropAbstractService.html","title":"class - NgxAccessibleDragAndDropAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxAccessibleDragAndDropAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service that is used to make drag and drop components accessible for assistive technologies\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                customMessages\n                            \n                            \n                                    Private\n                                    Readonly\n                                liveRegionService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setDragAndDropDescription\n                            \n                            \n                                    Public\n                                setMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                                \n                                    messageRecord\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        customMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:32\n                        \n                    \n\n            \n                \n                    A custom set of messages used for the drag and drop events.\n Please check the readme for more information on what is necessary to make these messages accessible.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        liveRegionService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LiveAnnouncer\n\n                    \n                \n                \n                    \n                        Default value : inject(LiveAnnouncer)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:20\n                        \n                    \n\n            \n                \n                    The live region service\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setDragAndDropDescription\n                        \n                    \n                \n            \n            \n                \n                        \n                    setDragAndDropDescription(parent: HTMLElement, description?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:119\n                        \n                    \n\n\n            \n                \n                        Adds a description to the drag and drop host explaining how the drag and drop functions\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                parent\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe drag and drop host\n\n\n                                            \n                                        \n                                        \n                                                description\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional description used to overwrite the default description\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    setMessage(message: NgxAccessibleDragAndDropMessage)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Sets a message to the live region\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            NgxAccessibleDragAndDropMessage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided message\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:25\n                                \n                            \n                    \n                        \n                                A method that passes the current language, can either be a string or an Observable\n\n\n                                \n                                    Returns :     string | Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        messageRecord\n                    \n                \n\n                \n                    \n                        getmessageRecord()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:161\n                                \n                            \n                    \n                        \n                                Returns the custom message record or the default when no custom record was provided\n\n\n                                \n                                    Returns :         Record\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { inject } from '@angular/core';\nimport { filter, map, Observable, of, take, tap } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxAccessibleDragAndDropMessageRecords } from '../../const';\nimport {\n\tNgxAccessibleDragAndDropMessage,\n\tNgxAccessibleDragAndDropMessageRecord,\n} from '../../types';\nimport { hideElement } from '../../utils';\n\n/**\n * An abstract service that is used to make drag and drop components accessible for assistive technologies\n */\nexport abstract class NgxAccessibleDragAndDropAbstractService {\n\t/**\n\t * The live region service\n\t */\n\tprivate readonly liveRegionService: LiveAnnouncer = inject(LiveAnnouncer);\n\n\t/**\n\t * A method that passes the current language, can either be a string or an Observable\n\t */\n\tabstract get currentLanguage(): string | Observable;\n\n\t/**\n\t * A custom set of messages used for the drag and drop events.\n\t *\n\t *  Please check the readme for more information on what is necessary to make these messages accessible.\n\t */\n\tpublic customMessages: Record;\n\n\t/**\n\t * Sets a message to the live region\n\t *\n\t * @param message - The provided message\n\t */\n\tpublic setMessage(message: NgxAccessibleDragAndDropMessage): Observable {\n\t\t// Iben: If no language was set, we early exit\n\t\tif (!this.currentLanguage) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxAccessibleDragAndDropAbstractService: No language was provided, so no message could be set.'\n\t\t\t);\n\n\t\t\treturn of();\n\t\t}\n\n\t\t// Iben: Take the current language to fetch the message\n\t\treturn (\n\t\t\ttypeof this.currentLanguage === 'string'\n\t\t\t\t? of(this.currentLanguage)\n\t\t\t\t: this.currentLanguage\n\t\t).pipe(\n\t\t\tfilter(Boolean),\n\t\t\ttake(1),\n\t\t\ttap((currentLanguage) => {\n\t\t\t\t// Iben: Fetch the necessary data\n\t\t\t\tconst { type, data } = message;\n\n\t\t\t\tlet result: string = this.messageRecord[currentLanguage][type];\n\n\t\t\t\t// Iben: If no message was found, we early exit and throw an error\n\t\t\t\tif (!result) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'NgxAccessibleDragAndDropAbstractService: No message for the corresponding drag and drop event was found.'\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Replace the necessary substrings\n\t\t\t\tif (type === 'selected' || type === 'deselected' || type === 'cancelled') {\n\t\t\t\t\tresult = result.replace(\n\t\t\t\t\t\t'{{#item}}',\n\t\t\t\t\t\tdata.itemLabel || `${this.messageRecord[currentLanguage].item} ${data.item}`\n\t\t\t\t\t);\n\t\t\t\t} else if (type === 'moved') {\n\t\t\t\t\tresult = result\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t'{{#item}}',\n\t\t\t\t\t\t\tdata.itemLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].item} ${data.item}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t`{{#from}}`,\n\t\t\t\t\t\t\tdata.fromLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].container} ${data.from}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t`{{#to}}`,\n\t\t\t\t\t\t\tdata.toLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].container} ${data.to}`\n\t\t\t\t\t\t);\n\t\t\t\t} else if (type === 'reordered') {\n\t\t\t\t\tresult = result\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t'{{#item}}',\n\t\t\t\t\t\t\tdata.itemLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].item} ${data.item}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.replace(`{{#from}}`, data.from)\n\t\t\t\t\t\t.replace(`{{#to}}`, data.to);\n\t\t\t\t}\n\n\t\t\t\t// Iben: Update the message in the live region\n\t\t\t\tthis.liveRegionService.announce(result);\n\t\t\t}),\n\t\t\tmap(() => null)\n\t\t);\n\t}\n\n\t/**\n\t * Adds a description to the drag and drop host explaining how the drag and drop functions\n\t *\n\t * @param  parent - The drag and drop host\n\t * @param description - An optional description used to overwrite the default description\n\t */\n\tpublic setDragAndDropDescription(parent: HTMLElement, description?: string): Observable {\n\t\t// Iben: Create the description element and its id\n\t\tconst element: HTMLParagraphElement = document.createElement('p');\n\t\tconst id: string = uuid();\n\n\t\t// Iben: Take the current language to fetch the message\n\t\treturn (\n\t\t\ttypeof this.currentLanguage === 'string'\n\t\t\t\t? of(this.currentLanguage)\n\t\t\t\t: this.currentLanguage\n\t\t).pipe(\n\t\t\ttap((language: string) => {\n\t\t\t\t// Iben: Get the description text\n\t\t\t\tconst text = description || this.messageRecord[language].description;\n\n\t\t\t\t// Iben: If no description was found, we early exit and throw an error\n\t\t\t\tif (!text) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'NgxAccessibleDragAndDropAbstractService: No description for the drag and drop container was found.'\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Set the description and id of the element\n\t\t\t\telement.innerText = text;\n\t\t\t\telement.setAttribute('id', id);\n\n\t\t\t\t// Iben: Attach the element to the parent and update the aria id\n\t\t\t\tparent.appendChild(element);\n\t\t\t\tparent.setAttribute('aria-describedby', id);\n\n\t\t\t\t// Iben: Hide element\n\t\t\t\thideElement(element);\n\t\t\t}),\n\t\t\tmap(() => null)\n\t\t);\n\t}\n\n\t/**\n\t * Returns the custom message record or the default when no custom record was provided\n\t */\n\tprivate get messageRecord(): Record {\n\t\treturn this.customMessages || NgxAccessibleDragAndDropMessageRecords;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{"url":"interfaces/NgxAccessibleDragAndDropBaseMessage.html","title":"interface - NgxAccessibleDragAndDropBaseMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAccessibleDragAndDropBaseMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     KeyType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type NgxAccessibleDragAndDropFromToMessage =\n\t| `${string}{{#item}}${string}{{#to}}${string}{{#from}}${string}`\n\t| `${string}{{#item}}${string}{{#from}}${string}{{#to}}${string}`\n\t| `${string}{{#to}}${string}{{#item}}${string}{{#from}}${string}`\n\t| `${string}{{#to}}${string}{{#from}}${string}{{#item}}${string}`\n\t| `${string}{{#from}}${string}{{#item}}${string}{{#to}}${string}`\n\t| `${string}{{#from}}${string}{{#to}}${string}{{#item}}${string}`;\n\nexport interface NgxAccessibleDragAndDropMessageRecord {\n\tselected: `${string}{{#item}}${string}`;\n\tdeselected: `${string}{{#item}}${string}`;\n\treordered: NgxAccessibleDragAndDropFromToMessage;\n\tmoved: NgxAccessibleDragAndDropFromToMessage;\n\tcancelled: `${string}{{#item}}${string}`;\n\titem: string;\n\tcontainer: string;\n\tdescription: string;\n}\n\nexport type NgxAccessibleDragAndDropMoveType = 'reordered' | 'moved';\n\ninterface NgxAccessibleDragAndDropBaseMessage {\n\ttype: KeyType;\n\tdata: DataType;\n}\n\nexport type NgxAccessibleDragAndDropMessage =\n\t| NgxAccessibleDragAndDropBaseMessage\n\t| NgxAccessibleDragAndDropBaseMessage;\n\nexport interface NgxAccessibleDragAndDropMoveEvent {\n\tpreviousIndex: number;\n\tnewIndex: number;\n\tpreviousContainer: number;\n\tnewContainer: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAccessibleDragAndDropContainerDirective.html":{"url":"directives/NgxAccessibleDragAndDropContainerDirective.html","title":"directive - NgxAccessibleDragAndDropContainerDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAccessibleDragAndDropContainerDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-container.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to handle accessible drag and drop flows. This directive is meant to be placed on the drag and drop container(s).\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxAccessibleDragAndDropContainer]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxAccessibleDragAndDropContainer\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                index\n                            \n                            \n                                    Public\n                                    Readonly\n                                label\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required({ alias: \"ngxAccessibleDragAndDropContainerIndex\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-container.directive.ts:15\n                        \n                    \n\n            \n                \n                    The index of the container\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(undefined, { alias: \"ngxAccessibleDragAndDropContainerLabel\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-container.directive.ts:20\n                        \n                    \n\n            \n                \n                    An optional label used in the event messages\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\n\n/**\n * A directive to handle accessible drag and drop flows. This directive is meant to be placed on the drag and drop container(s).\n */\n@Directive({\n\tselector: '[ngxAccessibleDragAndDropContainer]',\n\texportAs: 'ngxAccessibleDragAndDropContainer',\n\tstandalone: true,\n})\nexport class NgxAccessibleDragAndDropContainerDirective {\n\t/**\n\t * The index of the container\n\t */\n\tpublic readonly index = input.required({ alias: \"ngxAccessibleDragAndDropContainerIndex\" });\n\n\t/**\n\t * An optional label used in the event messages\n\t */\n\tpublic readonly label = input(undefined, { alias: \"ngxAccessibleDragAndDropContainerLabel\" });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAccessibleDragAndDropHostDirective.html":{"url":"directives/NgxAccessibleDragAndDropHostDirective.html","title":"directive - NgxAccessibleDragAndDropHostDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAccessibleDragAndDropHostDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to handle accessible drag and drop flows. This directive is meant to be placed on the host of the drag and drop container(s).\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxAccessibleDragAndDropHost]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxAccessibleDragAndDropHost\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                containers\n                            \n                            \n                                    Public\n                                    Readonly\n                                description\n                            \n                            \n                                    Private\n                                    Readonly\n                                dragAndDropService\n                            \n                            \n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                items\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getContainer\n                            \n                            \n                                    Public\n                                markAsActive\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                registerDragAndDropItem\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getContainer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContainer(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:51\n                        \n                    \n\n\n            \n                \n                        Returns the container based on the provided index\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the container\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxAccessibleDragAndDropContainerDirective\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAsActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsActive(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:42\n                        \n                    \n\n\n            \n                \n                        Mark a specific drag and drop item as active\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the drag and drop item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:55\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerDragAndDropItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerDragAndDropItem(item: NgxAccessibleAbstractDragAndDropItemDirective)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            NgxAccessibleAbstractDragAndDropItemDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        containers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChildren(NgxAccessibleDragAndDropContainerDirective, { descendants: true })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:30\n                        \n                    \n\n            \n                \n                    A list of all the drag and drop containers\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(undefined, { alias: \"ngxAccessibleDragAndDropHostDescription\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:35\n                        \n                    \n\n            \n                \n                    An optional description describing how the drag and drop works.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dragAndDropService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxAccessibleDragAndDropAbstractService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:25\n                        \n                    \n\n            \n                \n                    A list of all the drag and drop items\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, AfterViewInit, inject, input, contentChildren } from '@angular/core';\n\nimport {\n\tNgxAccessibleAbstractDragAndDropItemDirective,\n\tNgxAccessibleDragAndDropAbstractService,\n} from '../../abstracts';\n\nimport { NgxAccessibleDragAndDropContainerDirective } from './drag-and-drop-container.directive';\n\n/**\n * A directive to handle accessible drag and drop flows. This directive is meant to be placed on the host of the drag and drop container(s).\n */\n@Directive({\n\tselector: '[ngxAccessibleDragAndDropHost]',\n\texportAs: 'ngxAccessibleDragAndDropHost',\n\tstandalone: true,\n})\nexport class NgxAccessibleDragAndDropHostDirective implements AfterViewInit {\n\tprivate readonly dragAndDropService = inject(NgxAccessibleDragAndDropAbstractService);\n\treadonly elementRef = inject>(ElementRef);\n\n\t/**\n\t * A list of all the drag and drop items\n\t */\n\tpublic items: Record = {};\n\n\t/**\n\t * A list of all the drag and drop containers\n\t */\n\tpublic readonly containers = contentChildren(NgxAccessibleDragAndDropContainerDirective, { descendants: true });\n\n\t/**\n\t * An optional description describing how the drag and drop works.\n\t */\n\tpublic readonly description = input(undefined, { alias: \"ngxAccessibleDragAndDropHostDescription\" });\n\n\t/**\n\t * Mark a specific drag and drop item as active\n\t *\n\t * @param  id - The id of the drag and drop item\n\t */\n\tpublic markAsActive(id: string): void {\n\t\tthis.items[id].markAsActive();\n\t}\n\n\t/**\n\t * Returns the container based on the provided index\n\t *\n\t * @param index - The index of the container\n\t */\n\tpublic getContainer(index: number): NgxAccessibleDragAndDropContainerDirective {\n\t\treturn this.containers().find((container) => container.index() === index);\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Add the description tag\n\t\tthis.dragAndDropService\n\t\t\t.setDragAndDropDescription(this.elementRef.nativeElement, this.description())\n\t\t\t.subscribe();\n\t}\n\n\tpublic registerDragAndDropItem(item: NgxAccessibleAbstractDragAndDropItemDirective): void {\n\t\tthis.items[item.itemId()] = item;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{"url":"interfaces/NgxAccessibleDragAndDropMessageRecord.html","title":"interface - NgxAccessibleDragAndDropMessageRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAccessibleDragAndDropMessageRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cancelled\n                                        \n                                \n                                \n                                        \n                                            container\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            deselected\n                                        \n                                \n                                \n                                        \n                                            item\n                                        \n                                \n                                \n                                        \n                                            moved\n                                        \n                                \n                                \n                                        \n                                            reordered\n                                        \n                                \n                                \n                                        \n                                            selected\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cancelled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cancelled:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        container\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        container:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deselected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deselected:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        item:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        moved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        moved:         NgxAccessibleDragAndDropFromToMessage\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxAccessibleDragAndDropFromToMessage\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reordered\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reordered:         NgxAccessibleDragAndDropFromToMessage\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxAccessibleDragAndDropFromToMessage\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selected:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type NgxAccessibleDragAndDropFromToMessage =\n\t| `${string}{{#item}}${string}{{#to}}${string}{{#from}}${string}`\n\t| `${string}{{#item}}${string}{{#from}}${string}{{#to}}${string}`\n\t| `${string}{{#to}}${string}{{#item}}${string}{{#from}}${string}`\n\t| `${string}{{#to}}${string}{{#from}}${string}{{#item}}${string}`\n\t| `${string}{{#from}}${string}{{#item}}${string}{{#to}}${string}`\n\t| `${string}{{#from}}${string}{{#to}}${string}{{#item}}${string}`;\n\nexport interface NgxAccessibleDragAndDropMessageRecord {\n\tselected: `${string}{{#item}}${string}`;\n\tdeselected: `${string}{{#item}}${string}`;\n\treordered: NgxAccessibleDragAndDropFromToMessage;\n\tmoved: NgxAccessibleDragAndDropFromToMessage;\n\tcancelled: `${string}{{#item}}${string}`;\n\titem: string;\n\tcontainer: string;\n\tdescription: string;\n}\n\nexport type NgxAccessibleDragAndDropMoveType = 'reordered' | 'moved';\n\ninterface NgxAccessibleDragAndDropBaseMessage {\n\ttype: KeyType;\n\tdata: DataType;\n}\n\nexport type NgxAccessibleDragAndDropMessage =\n\t| NgxAccessibleDragAndDropBaseMessage\n\t| NgxAccessibleDragAndDropBaseMessage;\n\nexport interface NgxAccessibleDragAndDropMoveEvent {\n\tpreviousIndex: number;\n\tnewIndex: number;\n\tpreviousContainer: number;\n\tnewContainer: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{"url":"interfaces/NgxAccessibleDragAndDropMoveEvent.html","title":"interface - NgxAccessibleDragAndDropMoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAccessibleDragAndDropMoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            newContainer\n                                        \n                                \n                                \n                                        \n                                            newIndex\n                                        \n                                \n                                \n                                        \n                                            previousContainer\n                                        \n                                \n                                \n                                        \n                                            previousIndex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        newContainer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newContainer:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        newIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previousContainer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previousContainer:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previousIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previousIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type NgxAccessibleDragAndDropFromToMessage =\n\t| `${string}{{#item}}${string}{{#to}}${string}{{#from}}${string}`\n\t| `${string}{{#item}}${string}{{#from}}${string}{{#to}}${string}`\n\t| `${string}{{#to}}${string}{{#item}}${string}{{#from}}${string}`\n\t| `${string}{{#to}}${string}{{#from}}${string}{{#item}}${string}`\n\t| `${string}{{#from}}${string}{{#item}}${string}{{#to}}${string}`\n\t| `${string}{{#from}}${string}{{#to}}${string}{{#item}}${string}`;\n\nexport interface NgxAccessibleDragAndDropMessageRecord {\n\tselected: `${string}{{#item}}${string}`;\n\tdeselected: `${string}{{#item}}${string}`;\n\treordered: NgxAccessibleDragAndDropFromToMessage;\n\tmoved: NgxAccessibleDragAndDropFromToMessage;\n\tcancelled: `${string}{{#item}}${string}`;\n\titem: string;\n\tcontainer: string;\n\tdescription: string;\n}\n\nexport type NgxAccessibleDragAndDropMoveType = 'reordered' | 'moved';\n\ninterface NgxAccessibleDragAndDropBaseMessage {\n\ttype: KeyType;\n\tdata: DataType;\n}\n\nexport type NgxAccessibleDragAndDropMessage =\n\t| NgxAccessibleDragAndDropBaseMessage\n\t| NgxAccessibleDragAndDropBaseMessage;\n\nexport interface NgxAccessibleDragAndDropMoveEvent {\n\tpreviousIndex: number;\n\tnewIndex: number;\n\tpreviousContainer: number;\n\tnewContainer: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxAccordionComponent.html":{"url":"components/NgxAccordionComponent.html","title":"component - NgxAccordionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxAccordionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/accordion/accordion.component.ts\n\n\n\n    \n        Description\n    \n    \n        A WCAG/ARIA compliant implementation of the accordion pattern.\nhttps://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-accordion\n            \n\n\n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroyedSubject\n                            \n                            \n                                    Private\n                                itemRegisteredSubject\n                            \n                            \n                                    Public\n                                items\n                            \n                            \n                                    Public\n                                open\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                moveFocus\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                registerItem\n                            \n                            \n                                    Public\n                                removeItem\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                open\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        open\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48\n                            \n                        \n                \n                    \n                        Open the specific items in the accordion\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        moveFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveFocus(id: string, direction: \"up\" | \"down\" | \"first\" | \"last\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:111\n                        \n                    \n\n\n            \n                \n                        Moves the focus to an accordion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the current item\n\n\n                                            \n                                        \n                                        \n                                                direction\n                                            \n                                                        \"up\" | \"down\" | \"first\" | \"last\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe direction we move in\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:128\n                        \n                    \n\n\n            \n                \n                        Handle the destroyed state\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerItem(item: NgxAccordionItemComponent)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:82\n                        \n                    \n\n\n            \n                \n                        Register an accordion item to the container\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            NgxAccordionItemComponent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn accordion item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeItem(item: NgxAccordionItemComponent)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Removes an accordion item from the container\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            NgxAccordionItemComponent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn accordion item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:38\n                        \n                    \n\n            \n                \n                    A subject to hold the destroyed event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        itemRegisteredSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:33\n                        \n                    \n\n            \n                \n                    A subject to hold a registered event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxAccordionItemComponent[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:43\n                        \n                    \n\n            \n                \n                    A list of all accordion items\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        open\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48\n                        \n                    \n\n            \n                \n                    Open the specific items in the accordion\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n\tChangeDetectionStrategy,\n\tComponent,\n\teffect,\n\tinput,\n\tInputSignal,\n\tOnDestroy,\n} from '@angular/core';\nimport { Subject, take, tap } from 'rxjs';\n\nimport { NgxAccordionOpenBehavior } from '../../types';\n\nimport { NgxAccordionItemComponent } from './item/accordion-item.component';\n\n/**\n * A WCAG/ARIA compliant implementation of the accordion pattern.\n *\n * https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n */\n@Component({\n\tselector: 'ngx-accordion',\n\ttemplate: '',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\thost: {\n\t\tclass: 'ngx-accordion',\n\t\trole: 'region',\n\t},\n})\nexport class NgxAccordionComponent implements OnDestroy {\n\t/**\n\t * A subject to hold a registered event\n\t */\n\tprivate itemRegisteredSubject: Subject = new Subject();\n\n\t/**\n\t * A subject to hold the destroyed event\n\t */\n\tprivate destroyedSubject: Subject = new Subject();\n\n\t/**\n\t * A list of all accordion items\n\t */\n\tpublic items: NgxAccordionItemComponent[] = [];\n\n\t/**\n\t * Open the specific items in the accordion\n\t */\n\tpublic open: InputSignal = input();\n\n\tconstructor() {\n\t\teffect(() => {\n\t\t\tconst open = this.open();\n\n\t\t\tthis.itemRegisteredSubject.pipe(\n\t\t\t\ttake(1),\n\t\t\t\ttap(() => {\n\t\t\t\t\t// Iben: Use a setTimeOut so we wait an extra tick\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t// Iben: Open all items\n\t\t\t\t\t\tif (open === 'all') {\n\t\t\t\t\t\t\tthis.items.forEach((item) => item.updateAccordionItemState(true));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Iben: Open specific items\n\t\t\t\t\t\t\tconst indexes =\n\t\t\t\t\t\t\t\topen === 'first' ? [0] : Array.isArray(open) ? open : [open];\n\n\t\t\t\t\t\t\tindexes.forEach((index) => {\n\t\t\t\t\t\t\t\tthis.items[index]?.updateAccordionItemState(true);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Register an accordion item to the container\n\t *\n\t * @param item - An accordion item\n\t */\n\tpublic registerItem(item: NgxAccordionItemComponent): void {\n\t\tthis.itemRegisteredSubject.next();\n\t\tthis.items.push(item);\n\t}\n\n\t/**\n\t * Removes an accordion item from the container\n\t *\n\t * @param item - An accordion item\n\t */\n\tpublic removeItem(item: NgxAccordionItemComponent): void {\n\t\t// Iben: Get the index of the item\n\t\tconst index = this.items.findIndex(({ id }) => id === item.id);\n\n\t\t// Iben: If no item was found, we early exit\n\t\tif (index === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Remove the item\n\t\tthis.items = [...this.items.slice(0, index), ...this.items.slice(index + 1)];\n\t}\n\n\t/**\n\t * Moves the focus to an accordion\n\t *\n\t * @param  id - The id of the current item\n\t * @param  direction - The direction we move in\n\t */\n\tpublic moveFocus(id: string, direction: 'up' | 'down' | 'first' | 'last') {\n\t\t// Iben: If we go to the first or last accordion, we don't need to find the index\n\t\tif (direction === 'first' || direction === 'last') {\n\t\t\tthis.items[direction === 'first' ? 0 : this.items.length - 1].focus();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Find the index and move to the next\n\t\tconst index = this.items.findIndex((item) => id === item.id);\n\n\t\tthis.items[direction === 'down' ? index + 1 : index - 1]?.focus();\n\t}\n\n\t/**\n\t * Handle the destroyed state\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.destroyedSubject.next();\n\t\tthis.destroyedSubject.complete();\n\t}\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxAccordionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxAccordionItemComponent.html":{"url":"components/NgxAccordionItemComponent.html","title":"component - NgxAccordionItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxAccordionItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts\n\n\n\n    \n        Description\n    \n    \n        A WCAG/ARIA compliant implementation of an item in the accordion pattern.\nhttps://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                AfterViewInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-accordion-item\n            \n\n\n            \n                imports\n                \n                            NgTemplateOutlet\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./accordion-item.component.html\n            \n\n\n\n            \n                styleUrl\n                ./accordion-item.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                contentTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                detailsElement\n                            \n                            \n                                    Public\n                                    Readonly\n                                disabled\n                            \n                            \n                                    Private\n                                hasFocus\n                            \n                            \n                                    Public\n                                    Readonly\n                                headerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isOpen\n                            \n                            \n                                    Private\n                                    Readonly\n                                parent\n                            \n                            \n                                    Private\n                                    Readonly\n                                renderer\n                            \n                            \n                                    Public\n                                    Readonly\n                                summaryElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                arrowDown\n                            \n                            \n                                    \n                                arrowUp\n                            \n                            \n                                    \n                                end\n                            \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    Private\n                                handleWhenFocussed\n                            \n                            \n                                    \n                                home\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    Public\n                                setFocus\n                            \n                            \n                                    Public\n                                updateAccordionItemState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                keydown.ArrowDown\n                            \n                            \n                                keydown.ArrowUp\n                            \n                            \n                                keydown.End\n                            \n                            \n                                keydown.Home\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:107\n                            \n                        \n                \n                    \n                        Whether the accordion item is disabled\n\n                    \n                \n            \n        \n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        keydown.ArrowDown\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nkeydown.ArrowDown(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item below the current one\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keydown.ArrowUp\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nkeydown.ArrowUp(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item above the current one\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keydown.End\n                        \n                    \n                \n            \n            \n                \nkeydown.End()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the last accordion item\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keydown.Home\n                        \n                    \n                \n            \n            \n                \nkeydown.Home()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the first accordion item\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        arrowDown\n                        \n                    \n                \n            \n            \n                \n                        \n                    arrowDown(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowDown', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item below the current one\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        arrowUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    arrowUp(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowUp', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item above the current one\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        end\n                        \n                    \n                \n            \n            \n                \n                        \n                    end()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.End')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the last accordion item\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:137\n                        \n                    \n\n\n            \n                \n                        Set the focus on the summary item\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:193\n                        \n                    \n\n\n            \n                \n                        Only perform an action when the item has focus\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        home\n                        \n                    \n                \n            \n            \n                \n                        \n                    home()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.Home')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the first accordion item\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Listen to the default HTML events of the details object\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:184\n                        \n                    \n\n\n            \n                \n                        Remove the item from its parent when destroyed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:153\n                        \n                    \n\n\n            \n                \n                        Register the item to its parent\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus(hasFocus: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:146\n                        \n                    \n\n\n            \n                \n                        Set the focus state of the accordion item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                hasFocus\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether the item has focus\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateAccordionItemState\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAccordionItemState(isOpen: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Updates the current open/closed state of the accordion item, regardless of the disabled state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isOpen\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        contentTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChild>('contentTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:57\n                        \n                    \n\n            \n                \n                    The template for the content\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        detailsElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('details')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:47\n                        \n                    \n\n            \n                \n                    The details element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:107\n                        \n                    \n\n            \n                \n                    Whether the accordion item is disabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:122\n                        \n                    \n\n            \n                \n                    Whether the accordion item is focussed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChild>('headerTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:62\n                        \n                    \n\n            \n                \n                    The template for the header\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : uuid()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:112\n                        \n                    \n\n            \n                \n                    The id of the accordion item\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:117\n                        \n                    \n\n            \n                \n                    Whether the accordion item is open\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxAccordionComponent\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxAccordionComponent)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                \n                    \n                        Default value : inject(Renderer2)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        summaryElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('summary')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:52\n                        \n                    \n\n            \n                \n                    The summary element\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgTemplateOutlet } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostListener,\n  inject,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  TemplateRef,\n  input,\n  viewChild,\n  contentChild,\n  WritableSignal,\n  signal\n} from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxAccordionComponent } from '../accordion.component';\n\n/**\n * A WCAG/ARIA compliant implementation of an item in the accordion pattern.\n *\n * https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n */\n@Component({\n\tselector: 'ngx-accordion-item',\n\ttemplateUrl: './accordion-item.component.html',\n\tstyleUrl: './accordion-item.component.scss',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\timports: [NgTemplateOutlet],\n\thost: {\n\t\tclass: 'ngx-accordion-item',\n\t},\n})\nexport class NgxAccordionItemComponent implements OnInit, AfterViewInit, OnDestroy {\n\tprivate readonly parent: NgxAccordionComponent = inject(NgxAccordionComponent);\n\tprivate readonly cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\tprivate readonly renderer: Renderer2 = inject(Renderer2);\n\n\t/**\n\t * The details element\n\t */\n\tpublic readonly detailsElement = viewChild('details');\n\n\t/**\n\t * The summary element\n\t */\n\tpublic readonly summaryElement = viewChild('summary');\n\n\t/**\n\t * The template for the content\n\t */\n\tpublic readonly contentTemplate = contentChild>('contentTmpl');\n\n\t/**\n\t * The template for the header\n\t */\n\tpublic readonly headerTemplate = contentChild>('headerTmpl');\n\n\t/**\n\t * Moves the focus to the accordion item above the current one\n\t */\n\t@HostListener('keydown.ArrowUp', ['$event']) arrowUp(event: Event) {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopImmediatePropagation();\n\t\t\tthis.parent.moveFocus(this.id, 'up');\n\t\t});\n\t}\n\n\t/**\n\t * Moves the focus to the accordion item below the current one\n\t */\n\t@HostListener('keydown.ArrowDown', ['$event']) arrowDown(event: Event) {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopImmediatePropagation();\n\t\t\tthis.parent.moveFocus(this.id, 'down');\n\t\t});\n\t}\n\n\t/**\n\t * Moves the focus to the first accordion item\n\t */\n\t@HostListener('keydown.Home') home() {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tthis.parent.moveFocus(this.id, 'first');\n\t\t});\n\t}\n\n\t/**\n\t * Moves the focus to the last accordion item\n\t */\n\t@HostListener('keydown.End') end() {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tthis.parent.moveFocus(this.id, 'last');\n\t\t});\n\t}\n\n\t/**\n\t * Whether the accordion item is disabled\n\t */\n\tpublic readonly disabled = input(false);\n\n\t/**\n\t * The id of the accordion item\n\t */\n\tpublic readonly id: string = uuid();\n\n\t/**\n\t * Whether the accordion item is open\n\t */\n\tpublic isOpen: WritableSignal = signal(false);\n\n\t/**\n\t * Whether the accordion item is focussed\n\t */\n\tprivate hasFocus: WritableSignal = signal(false);\n\n\t/**\n\t * Updates the current open/closed state of the accordion item, regardless of the disabled state\n\t */\n\tpublic updateAccordionItemState(isOpen: boolean): void {\n\t\t// Iben: Sets the item to open and updates the parent state\n\t\tthis.isOpen.set(isOpen)\n\n\t\t// Iben: Trigger the visual changes\n\t\tthis.cdRef.detectChanges();\n\t}\n\t/**\n\t * Set the focus on the summary item\n\t */\n\tpublic focus() {\n\t\tthis.summaryElement()?.nativeElement.focus();\n\t}\n\n\t/**\n\t * Set the focus state of the accordion item\n\t *\n\t * @param hasFocus - Whether the item has focus\n\t */\n\tpublic setFocus(hasFocus: boolean) {\n\t\tthis.hasFocus.set(hasFocus);\n\t}\n\n\t/**\n\t * Register the item to its parent\n\t */\n\tpublic ngOnInit(): void {\n\t\tthis.parent.registerItem(this);\n\t}\n\n\t/**\n\t * Listen to the default HTML events of the details object\n\t */\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: If for some reason no accordion item is found, we return\n\t\tconst detailsElement = this.detailsElement();\n\t\tif (!detailsElement?.nativeElement) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Prevent the accordion from being opened if it is disabled\n\t\tthis.renderer.listen(detailsElement.nativeElement, 'click', (event: Event) => {\n\t\t\tif (this.disabled()) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Listen to the open state of details and update the internal one\n\t\tthis.renderer.listen(detailsElement.nativeElement, 'toggle', (event: ToggleEvent) => {\n\t\t\tthis.updateAccordionItemState(event.newState === 'open');\n\t\t});\n\t}\n\n\t/**\n\t * Remove the item from its parent when destroyed\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.parent.removeItem(this);\n\t}\n\n\t/**\n\t * Only perform an action when the item has focus\n\t *\n\t * @param  action - The provided action\n\t */\n\tprivate handleWhenFocussed(action: () => void) {\n\t\t// Iben: Early exit if there's no focus\n\t\tif (!this.hasFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Perform the action\n\t\taction();\n\t}\n}\n\n    \n\n    \n        \n\t\n\t\t\n\t\n\n\t\n\t\t\n\t\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t\t\t\t\t\t\t\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxAccordionItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxAriaSortPipe.html":{"url":"pipes/NgxAriaSortPipe.html","title":"pipe - NgxAriaSortPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxAriaSortPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/aria-sort/aria-sort.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxAriaSort\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/aria-sort/aria-sort.pipe.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     \"none\" | \"ascending\" | \"descending\"\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { NgxAbstractTableCellDirective } from '../../components';\nimport { NgxTableSortEvent } from '../../types';\n\n\n@Pipe({\n\tname: 'ngxAriaSort',\n\tstandalone: true,\n})\nexport class NgxAriaSortPipe implements PipeTransform {\n\ttransform(value: {\n\t\tcurrentSorting: NgxTableSortEvent;\n\t\tcell: NgxAbstractTableCellDirective;\n\t}): 'none' | 'ascending' | 'descending' {\n\t\tconst { cell } = value;\n\n\t\tif (!cell || !cell.sortDirection) {\n\t\t\treturn 'none';\n\t\t}\n\n\t\treturn cell.sortDirection.toLocaleLowerCase() as 'ascending' | 'descending';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxAuthenticatedHttpClient.html":{"url":"injectables/NgxAuthenticatedHttpClient.html","title":"injectable - NgxAuthenticatedHttpClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxAuthenticatedHttpClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An opinionated wrapper of the HttpClient providing easy ways to make authenticated and unauthenticated calls\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                download\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Private\n                                handleUrl\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(url: string, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:99\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a DELETE request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(url: string, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Constructs a GET request tailored to downloading to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(url: string, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:41\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a GET request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUrl(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Adds a base-url to every request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe url of the request\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                        \n                    patch(url: string, body: any, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:166\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a PATCH request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe body we wish to send\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post\n                        \n                    \n                \n            \n            \n                \n                        \n                    post(url: string, body: any, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:120\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a POST request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe body we wish to send\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(url: string, body?: any, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:143\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a PUT request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe body we wish to send\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpClient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable, inject } from '@angular/core';\nimport clean from 'obj-clean';\nimport { map, Observable } from 'rxjs';\n\nimport { NgxAuthenticationUrlHandlerToken } from '../../tokens';\nimport { NgxAuthenticatedHttpClientConfiguration } from '../../types';\n\n/**\n * An opinionated wrapper of the HttpClient providing easy ways to make authenticated and unauthenticated calls\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxAuthenticatedHttpClient {\n\tprivate readonly httpClient = inject(HttpClient);\n\n\tprivate baseUrl: string;\n\n\tconstructor() {\n\t\tconst baseUrlHandler = inject(NgxAuthenticationUrlHandlerToken);\n\n\t\t// Iben: Setup the base url\n\t\tthis.baseUrl = baseUrlHandler ? baseUrlHandler() : '';\n\t}\n\n\t/**\n\t * Adds a base-url to every request\n\t * @param {string} url - The url of the request\n\t */\n\tprivate handleUrl(url: string): string {\n\t\treturn `${this.baseUrl}/${url}`;\n\t}\n\n\t/**\n\t * Constructs a GET request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic get(\n\t\turl: string,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.get(\n\t\t\tthis.handleUrl(url),\n\t\t\tclean({ withCredentials, params, context }) as Parameters[1]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a GET request tailored to downloading to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic download(\n\t\turl: string,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient\n\t\t\t.get(\n\t\t\t\tthis.handleUrl(url),\n\t\t\t\tclean({\n\t\t\t\t\twithCredentials,\n\t\t\t\t\tparams,\n\t\t\t\t\tresponseType: 'blob',\n\t\t\t\t\tobserve: 'response',\n\t\t\t\t\tcontext,\n\t\t\t\t}) as Parameters[1]\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\tmap((response: HttpResponse) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfileType: response.headers.get('content-disposition').split('.')[1],\n\t\t\t\t\t\tblob: response.body as Blob,\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\t/**\n\t * Constructs a DELETE request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic delete(\n\t\turl: string,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.delete(\n\t\t\tthis.handleUrl(url),\n\t\t\tclean({ params, withCredentials, context }) as Parameters[1]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a POST request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param body - The body we wish to send\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic post(\n\t\turl: string,\n\t\tbody: any,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.post(\n\t\t\tthis.handleUrl(url),\n\t\t\tbody,\n\t\t\tclean({ params, withCredentials, context }) as Parameters[2]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a PUT request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param body - The body we wish to send\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic put(\n\t\turl: string,\n\t\tbody?: any,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.put(\n\t\t\tthis.handleUrl(url),\n\t\t\tbody,\n\t\t\tclean({ params, withCredentials, context }) as Parameters[2]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a PATCH request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param body - The body we wish to send\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic patch(\n\t\turl: string,\n\t\tbody: any,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.patch(\n\t\t\tthis.handleUrl(url),\n\t\t\tbody,\n\t\t\tclean({ params, withCredentials, context }) as Parameters[2]\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{"url":"interfaces/NgxAuthenticatedHttpClientConfiguration.html","title":"interface - NgxAuthenticatedHttpClientConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAuthenticatedHttpClientConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/types/authentication-configuration.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            authenticatedCallHandler\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            baseUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            interceptors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authenticatedCallHandler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authenticatedCallHandler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional handler for each authenticated API request made by the NgxAuthenticatedHttpClient\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseUrl:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A base url generator function that will be run at injection time used by any request made by the NgxAuthenticatedHttpClient\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interceptors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        interceptors:     HttpInterceptorFn[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpInterceptorFn[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional list of interceptors that will be provided to the HttpClient\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpInterceptorFn, HttpRequest } from '@angular/common/http';\nimport { Type } from '@angular/core';\n\nimport { NgxAuthenticationAbstractService } from '../abstracts';\n\n/**\n * The configuration of the authentication handlers\n */\nexport interface NgxAuthenticationConfiguration {\n\t/**\n\t * The provided implementation of the NgxAuthenticationAbstractService\n\t */\n\tservice: Type;\n\t/**\n\t * An optional set of configuration to provide when the NgxAuthenticatedHttpClient needs to be used\n\t */\n\thttpClientConfiguration?: NgxAuthenticatedHttpClientConfiguration;\n}\n\nexport interface NgxAuthenticatedHttpClientConfiguration {\n\t/**\n\t * An optional list of interceptors that will be provided to the HttpClient\n\t */\n\tinterceptors?: HttpInterceptorFn[];\n\t/**\n\t * A base url generator function that will be run at injection time used by any request made by the NgxAuthenticatedHttpClient\n\t */\n\tbaseUrl?: () => string;\n\t/**\n\t * An optional handler for each authenticated API request made by the NgxAuthenticatedHttpClient\n\t */\n\tauthenticatedCallHandler?: (request: HttpRequest) => HttpRequest;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAuthenticatedRoute.html":{"url":"interfaces/NgxAuthenticatedRoute.html","title":"interface - NgxAuthenticatedRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAuthenticatedRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/types/authenticated-route.types.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface for the routes used in an application that has uses the NgxAuthenticationAbstractService\n\n            \n\n            \n                Extends\n            \n            \n                        Route\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Route } from '@angular/router';\n\n/**\n * An interface for the routes used in an application that has uses the NgxAuthenticationAbstractService\n */\nexport interface NgxAuthenticatedRoute extends Route {\n\tdata?: {\n\t\t/**\n\t\t * The features for the NgxHasFeatureGuard\n\t\t */\n\t\tfeature?: FeatureType | FeatureType[];\n\t\t/**\n\t\t * Whether all features should be provided, by default true, for the NgxHasFeatureGuard\n\t\t */\n\t\tshouldHaveAllFeatures?: boolean;\n\t\t/**\n\t\t * The permissions for the NgxHasPermissionGuard\n\t\t */\n\t\tpermission?: PermissionType | PermissionType[];\n\t\t/**\n\t\t * Whether all permissions should be provided, by default true, for the NgxHasPermissionGuard\n\t\t */\n\t\tshouldHaveAllPermissions?: boolean;\n\t\t/**\n\t\t * Whether the user should be authenticated, for the NgxIsAuthenticatedGuard\n\t\t */\n\t\tshouldBeAuthenticated?: boolean;\n\t\t/**\n\t\t * The location to redirect to if one of the guards conditions isn't met\n\t\t */\n\t\tredirect?: string[];\n\t\t/**\n\t\t * Remaining additional properties\n\t\t */\n\t\t[key: string]: unknown;\n\t};\n}\n\nexport type NgxAuthenticatedRoutes = NgxAuthenticatedRoute[];\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxAuthenticationAbstractService.html":{"url":"classes/NgxAuthenticationAbstractService.html","title":"class - NgxAuthenticationAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxAuthenticationAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/abstracts/authentication.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service used by the directives, guards and other components of @ibenvandeveire/ngx-auth\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationResponseSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                authenticationStatusSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                globalFeaturesSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                hasAuthenticated$\n                            \n                            \n                                    Public\n                                    Readonly\n                                isAuthenticated$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                getAuthenticationResponse\n                            \n                            \n                                    Private\n                                getSession\n                            \n                            \n                                    Public\n                                hasFeature\n                            \n                            \n                                    Public\n                                hasPermission\n                            \n                            \n                                    Public\n                                setGlobalFeatures\n                            \n                            \n                                    Public\n                                signIn\n                            \n                            \n                                    Protected\n                                    Abstract\n                                signInUser\n                            \n                            \n                                    Public\n                                signOut\n                            \n                            \n                                    Protected\n                                    Abstract\n                                signOutUser\n                            \n                            \n                                    Protected\n                                storeAuthenticationResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    user$\n                                \n                                \n                                    session$\n                                \n                                \n                                    metadata$\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationResponseSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(undefined)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:34\n                        \n                    \n\n            \n                \n                    A subject to store the authentication response if no other state implementation was provided\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationStatusSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject('unset')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:40\n                        \n                    \n\n            \n                \n                    A subject to store whether we've authenticated already\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        globalFeaturesSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject[]>([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:46\n                        \n                    \n\n            \n                \n                    A subject to store global features that are available for all users, regardless of their authenticated state\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        hasAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status !== 'unset')\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:53\n                        \n                    \n\n            \n                \n                    Whether an authentication attempt has been made\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        isAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status === 'signed-in')\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:61\n                        \n                    \n\n            \n                \n                    Whether the user is authenticated\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getAuthenticationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuthenticationResponse()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Returns the authentication response from the state\n\n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:232\n                        \n                    \n\n\n            \n                \n                        Returns a session or an empty session depending on the authenticated state\n\n\n                        \n                            Returns :     Observable<>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasFeature\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasFeature(requiredFeatures: NgxAuthenticationResponseFeature[], shouldHaveAllFeatures: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Returns whether the user has the required features.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                requiredFeatures\n                                            \n                                                            NgxAuthenticationResponseFeature[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn array of required features\n\n\n                                            \n                                        \n                                        \n                                                shouldHaveAllFeatures\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether all features in the array are required, by default true\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasPermission\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasPermission(requiredPermissions, shouldHaveAllPermissions: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:211\n                        \n                    \n\n\n            \n                \n                        Returns whether the user has the required permissions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                requiredPermissions\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn array of required permissions\n\n\n                                            \n                                        \n                                        \n                                                shouldHaveAllPermissions\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether all permissions in the array are required, by default true\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setGlobalFeatures\n                        \n                    \n                \n            \n            \n                \n                        \n                    setGlobalFeatures(features: NgxAuthenticationResponseFeature[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:199\n                        \n                    \n\n\n            \n                \n                        Sets a set of global features that are always present, regardless of the authenticated state of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                features\n                                            \n                                                            NgxAuthenticationResponseFeature[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA list of features\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInData: SignInDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Signs in a user and stores the authentication response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInData\n                                            \n                                                            SignInDataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data needed to sign in a user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        signInUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInUser(signInData: SignInDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:71\n                        \n                    \n\n\n            \n                \n                        The call required to sign in a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInData\n                                            \n                                                            SignInDataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data needed to sign in a user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        signOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOut(signoutDataType?: SignoutDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:158\n                        \n                    \n\n\n            \n                \n                        Signs out a user and removes the stored authentication response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signoutDataType\n                                            \n                                                            SignoutDataType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional data needed to sign out a use\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        signOutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOutUser(signoutDataType?: SignoutDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:80\n                        \n                    \n\n\n            \n                \n                        The call required to sign out a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signoutDataType\n                                            \n                                                            SignoutDataType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional data needed to sign out a user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        storeAuthenticationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeAuthenticationResponse(response: AuthenticationResponseType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Stores the authentication response in the state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                        AuthenticationResponseType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authentication response\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        user$\n                    \n                \n\n                \n                    \n                        getuser$()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:103\n                                \n                            \n                    \n                        \n                                The authenticated user\n\n\n                                \n                                    Returns :     Observable<>\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        session$\n                    \n                \n\n                \n                    \n                        getsession$()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:114\n                                \n                            \n                    \n                        \n                                The session of the authenticated user\n\n\n                                \n                                    Returns :     Observable<>\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        metadata$\n                    \n                \n\n                \n                    \n                        getmetadata$()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:125\n                                \n                            \n                    \n                        \n                                The metadata of the authenticated user\n\n\n                                \n                                    Returns :     Observable<>\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { AuthenticationResponse } from '@ibenvandeveire/types-authentication';\nimport {\n\tBehaviorSubject,\n\tcombineLatest,\n\tdistinctUntilChanged,\n\tfilter,\n\tmap,\n\tObservable,\n\tof,\n\tswitchMap,\n\ttap,\n} from 'rxjs';\n\nimport { NgxAuthenticationResponseFeature, NgxAuthenticationStatus } from '../types';\n\n/**\n * An abstract service used by the directives, guards and other components of @ibenvandeveire/ngx-auth\n *\n * @template AuthenticationResponseType - The type of authentication response\n * @template SignInDataType - The data type used to sign in a user\n * @template SignoutDataType - The data type used to sign out a user\n * @template SignOutResponseType - The data type you get when signing out a user\n */\nexport abstract class NgxAuthenticationAbstractService = AuthenticationResponse,\n\tSignInDataType = any,\n\tSignoutDataType = any,\n\tSignOutResponseType = void,\n> {\n\t/**\n\t * A subject to store the authentication response if no other state implementation was provided\n\t */\n\tprivate readonly authenticationResponseSubject: BehaviorSubject =\n\t\tnew BehaviorSubject(undefined);\n\n\t/**\n\t * A subject to store whether we've authenticated already\n\t */\n\tprivate readonly authenticationStatusSubject: BehaviorSubject =\n\t\tnew BehaviorSubject('unset');\n\n\t/**\n\t * A subject to store global features that are available for all users, regardless of their authenticated state\n\t */\n\tprivate readonly globalFeaturesSubject: BehaviorSubject[]\n\t> = new BehaviorSubject[]>([]);\n\n\t/**\n\t * Whether an authentication attempt has been made\n\t */\n\tpublic readonly hasAuthenticated$: Observable = this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status !== 'unset')\n\t);\n\n\t/**\n\t * Whether the user is authenticated\n\t */\n\tpublic readonly isAuthenticated$: Observable = this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status === 'signed-in')\n\t);\n\n\t/**\n\t * The call required to sign in a user\n\t *\n\t * @param signInData - The data needed to sign in a user\n\t */\n\tprotected abstract signInUser(\n\t\tsignInData: SignInDataType\n\t): Observable;\n\n\t/**\n\t * The call required to sign out a user\n\t *\n\t * @param signoutDataType - Optional data needed to sign out a user\n\t */\n\tprotected abstract signOutUser(\n\t\tsignoutDataType?: SignoutDataType\n\t): Observable;\n\n\t/**\n\t * Stores the authentication response in the state\n\t *\n\t * @param response - The authentication response\n\t */\n\tprotected storeAuthenticationResponse(response: AuthenticationResponseType): void {\n\t\tthis.authenticationResponseSubject.next(response);\n\t}\n\n\t/**\n\t * Returns the authentication response from the state\n\t */\n\tprotected getAuthenticationResponse(): Observable {\n\t\treturn this.authenticationResponseSubject.asObservable();\n\t}\n\n\t/**\n\t * The authenticated user\n\t */\n\tpublic get user$(): Observable {\n\t\treturn this.getAuthenticationResponse().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap((response) => response.user),\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * The session of the authenticated user\n\t */\n\tpublic get session$(): Observable {\n\t\treturn this.getAuthenticationResponse().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap(({ session }: AuthenticationResponseType) => session),\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * The metadata of the authenticated user\n\t */\n\tpublic get metadata$(): Observable {\n\t\treturn this.getAuthenticationResponse().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap(({ metadata }: AuthenticationResponseType) => metadata),\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * Signs in a user and stores the authentication response\n\t *\n\t * @param signInData - The data needed to sign in a user\n\t */\n\tpublic signIn(signInData: SignInDataType): Observable {\n\t\t// Iben: Perform the call to sign in a user\n\t\treturn this.signInUser(signInData).pipe(\n\t\t\ttap((response: AuthenticationResponseType) => {\n\t\t\t\t// Iben: Set the user as signed in\n\t\t\t\tthis.authenticationStatusSubject.next('signed-in');\n\n\t\t\t\t// Iben: Store the authentication response\n\t\t\t\tthis.storeAuthenticationResponse(response);\n\t\t\t}),\n\t\t\t// Iben: Convert to void\n\t\t\tmap(() => undefined)\n\t\t);\n\t}\n\n\t/**\n\t * Signs out a user and removes the stored authentication response\n\t *\n\t * @param signoutDataType - Optional data needed to sign out a use\n\t */\n\tpublic signOut(signoutDataType?: SignoutDataType): Observable {\n\t\t// Iben: Perform the call to sign out a user\n\t\treturn this.signOutUser(signoutDataType).pipe(\n\t\t\ttap(() => {\n\t\t\t\t// Iben: Set the user as signed out\n\t\t\t\tthis.authenticationStatusSubject.next('signed-out');\n\n\t\t\t\t// Iben: Remove the stored authentication response\n\t\t\t\tthis.storeAuthenticationResponse(undefined);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Returns whether the user has the required features.\n\t *\n\t * @param requiredFeatures - An array of required features\n\t * @param shouldHaveAllFeatures - Whether all features in the array are required, by default true\n\t */\n\tpublic hasFeature(\n\t\trequiredFeatures: NgxAuthenticationResponseFeature[],\n\t\tshouldHaveAllFeatures: boolean = true\n\t): Observable {\n\t\t// Iben: Get the session\n\t\treturn combineLatest([this.getSession(), this.globalFeaturesSubject.asObservable()]).pipe(\n\t\t\tmap(([{ features }, globalFeatures]) => {\n\t\t\t\tconst sessionFeatures = new Set([...(features || []), ...(globalFeatures || [])]);\n\t\t\t\t// Iben: Return whether the user has the required features\n\t\t\t\t// We cast to strings here to make the typing work\n\t\t\t\treturn shouldHaveAllFeatures\n\t\t\t\t\t? requiredFeatures.every((feature) => sessionFeatures.has(`${feature}`))\n\t\t\t\t\t: requiredFeatures.some((feature) => sessionFeatures.has(`${feature}`));\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Sets a set of global features that are always present, regardless of the authenticated state of the user\n\t *\n\t * @param  features - A list of features\n\t */\n\tpublic setGlobalFeatures(\n\t\tfeatures: NgxAuthenticationResponseFeature[]\n\t): void {\n\t\tthis.globalFeaturesSubject.next(features);\n\t}\n\n\t/**\n\t * Returns whether the user has the required permissions.\n\t *\n\t * @param requiredPermissions - An array of required permissions\n\t * @param shouldHaveAllPermissions - Whether all permissions in the array are required, by default true\n\t */\n\tpublic hasPermission(\n\t\trequiredPermissions: AuthenticationResponseType['session']['permissions'],\n\t\tshouldHaveAllPermissions: boolean = true\n\t): Observable {\n\t\t// Iben: Get the session\n\t\treturn this.getSession().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap(({ permissions }) => {\n\t\t\t\tconst sessionPermissions = new Set([...permissions]);\n\n\t\t\t\t// Iben: Return whether the user has the required permissions\n\t\t\t\treturn shouldHaveAllPermissions\n\t\t\t\t\t? requiredPermissions.every((permission) => sessionPermissions.has(permission))\n\t\t\t\t\t: requiredPermissions.some((permission) => sessionPermissions.has(permission));\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Returns a session or an empty session depending on the authenticated state\n\t */\n\tprivate getSession(): Observable {\n\t\treturn this.isAuthenticated$.pipe(\n\t\t\tswitchMap((isAuthenticated) => {\n\t\t\t\t// Iben: If the user is authenticated, we return the session, if not, we return an empty version for the hasPermission and hasFeature methods\n\t\t\t\t// This ensures we always get a response\n\t\t\t\treturn isAuthenticated\n\t\t\t\t\t? this.session$\n\t\t\t\t\t: of({\n\t\t\t\t\t\t\tfeatures: [],\n\t\t\t\t\t\t\tpermissions: [],\n\t\t\t\t\t\t});\n\t\t\t})\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAuthenticationConfiguration.html":{"url":"interfaces/NgxAuthenticationConfiguration.html","title":"interface - NgxAuthenticationConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAuthenticationConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/types/authentication-configuration.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration of the authentication handlers\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            httpClientConfiguration\n                                        \n                                \n                                \n                                        \n                                            service\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        httpClientConfiguration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        httpClientConfiguration:         NgxAuthenticatedHttpClientConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxAuthenticatedHttpClientConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional set of configuration to provide when the NgxAuthenticatedHttpClient needs to be used\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        service\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        service:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The provided implementation of the NgxAuthenticationAbstractService\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpInterceptorFn, HttpRequest } from '@angular/common/http';\nimport { Type } from '@angular/core';\n\nimport { NgxAuthenticationAbstractService } from '../abstracts';\n\n/**\n * The configuration of the authentication handlers\n */\nexport interface NgxAuthenticationConfiguration {\n\t/**\n\t * The provided implementation of the NgxAuthenticationAbstractService\n\t */\n\tservice: Type;\n\t/**\n\t * An optional set of configuration to provide when the NgxAuthenticatedHttpClient needs to be used\n\t */\n\thttpClientConfiguration?: NgxAuthenticatedHttpClientConfiguration;\n}\n\nexport interface NgxAuthenticatedHttpClientConfiguration {\n\t/**\n\t * An optional list of interceptors that will be provided to the HttpClient\n\t */\n\tinterceptors?: HttpInterceptorFn[];\n\t/**\n\t * A base url generator function that will be run at injection time used by any request made by the NgxAuthenticatedHttpClient\n\t */\n\tbaseUrl?: () => string;\n\t/**\n\t * An optional handler for each authenticated API request made by the NgxAuthenticatedHttpClient\n\t */\n\tauthenticatedCallHandler?: (request: HttpRequest) => HttpRequest;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxBroadcastChannelService.html":{"url":"injectables/NgxBroadcastChannelService.html","title":"injectable - NgxBroadcastChannelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxBroadcastChannelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that wraps the BroadCastChannel API and provides an Observable based implementation to the channel messages.\nFor more information:\nhttps://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                broadcastChannel\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closeChannel\n                            \n                            \n                                    Public\n                                initChannel\n                            \n                            \n                                    Public\n                                postMessage\n                            \n                            \n                                    Public\n                                selectChannelMessageErrors\n                            \n                            \n                                    Public\n                                selectChannelMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        closeChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeChannel(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:55\n                        \n                    \n\n\n            \n                \n                        closeChannel\nThe closeChannel method closes a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    initChannel(...args: ConstructorParameters<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:29\n                        \n                    \n\n\n            \n                \n                        initChannel\nThe initChannel method initializes a new BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ConstructorParameters<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe arguments to pass to the BroadcastChannel constructor.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        postMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    postMessage(channelName: string, message: MessageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:72\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    MessageType\n                            \n                        \n                    \n\n            \n                \n                        postMessage\nThe postMessage method sends a message to a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                        \n                                                message\n                                            \n                                                        MessageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe payload to send through the channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectChannelMessageErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectChannelMessageErrors(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:115\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    MessageType\n                            \n                        \n                    \n\n            \n                \n                        selectChannelMessageErrors\nThe selectChannelMessageErrors method subscribes to the messageerror (bc.onmessageerror) event of a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                Observable - The messageerror event of the channel wrapped in an observable.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectChannelMessages\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectChannelMessages(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:93\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    MessageType\n                            \n                        \n                    \n\n            \n                \n                        selectChannelMessages\nThe selectChannelMessages method subscribes to the message (bc.onmessage) event of a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                Observable - The message event of the channel wrapped in an observable.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        broadcastChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:20\n                        \n                    \n\n            \n                \n                    A record holding all the broadcast channels\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { EMPTY, fromEvent, Observable } from 'rxjs';\n\n/**\n * A service that wraps the BroadCastChannel API and provides an Observable based implementation to the channel messages.\n *\n * For more information:\n * https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxBroadcastChannelService {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A record holding all the broadcast channels\n\t */\n\tprivate broadcastChannel: Record = {};\n\n\t/**\n\t * initChannel\n\t *\n\t * The initChannel method initializes a new BroadcastChannel instance.\n\t *\n\t * @param args{ConstructorParameters} - The arguments to pass to the BroadcastChannel constructor.\n\t */\n\tpublic initChannel(...args: ConstructorParameters): void {\n\t\t// Iben: Only run when in browser\n\t\tthis.windowService.runInBrowser(() => {\n\t\t\tconst [channelName] = args;\n\n\t\t\tif (!channelName) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t'NgxUtils: There was an attempt to initialize a BroadcastChannel without providing a name.'\n\t\t\t\t);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this.broadcastChannel[channelName]) {\n\t\t\t\tthis.broadcastChannel[channelName] = new BroadcastChannel(...args);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * closeChannel\n\t *\n\t * The closeChannel method closes a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t */\n\tpublic closeChannel(channelName: string): void {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.broadcastChannel[channelName].close();\n\t\tdelete this.broadcastChannel[channelName];\n\t}\n\n\t/**\n\t * postMessage\n\t *\n\t * The postMessage method sends a message to a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t * @param message{any} - The payload to send through the channel.\n\t */\n\tpublic postMessage(channelName: string, message: MessageType): void {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxUtils: There was an attempt to post a message to a channel without providing a name or the selected channel does not exist. The included message was:',\n\t\t\t\tmessage\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.broadcastChannel[channelName].postMessage(message);\n\t}\n\n\t/**\n\t * selectChannelMessages\n\t *\n\t * The selectChannelMessages method subscribes to the `message` (bc.onmessage) event of a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t * @returns Observable - The message event of the channel wrapped in an observable.\n\t */\n\tpublic selectChannelMessages(\n\t\tchannelName: string\n\t): Observable> {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\tconsole.error(\n\t\t\t\t\"NgxUtils: There was an attempt to select a BroadcastChannel's messages without providing a name or the selected channel does not exist.\"\n\t\t\t);\n\n\t\t\treturn EMPTY;\n\t\t}\n\n\t\treturn fromEvent>(this.broadcastChannel[channelName], 'message');\n\t}\n\n\t/**\n\t * selectChannelMessageErrors\n\t *\n\t * The selectChannelMessageErrors method subscribes to the `messageerror` (bc.onmessageerror) event of a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t * @returns Observable - The messageerror event of the channel wrapped in an observable.\n\t */\n\tpublic selectChannelMessageErrors(\n\t\tchannelName: string\n\t): Observable> {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\tconsole.error(\n\t\t\t\t\"NgxUtils: There was an attempt to select a BroadcastChannel's message errors without providing a name or the selected channel does not exist.\"\n\t\t\t);\n\n\t\t\treturn EMPTY;\n\t\t}\n\n\t\treturn fromEvent>(\n\t\t\tthis.broadcastChannel[channelName],\n\t\t\t'messageerror'\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxConfigurableLayoutItemComponent.html":{"url":"components/NgxConfigurableLayoutItemComponent.html","title":"component - NgxConfigurableLayoutItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxConfigurableLayoutItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts\n\n\n\n    \n        Description\n    \n    \n        The layout item pairs with the  container.\nThis component will in itself not be rendered. The key provided in this component\nwill need to be provided in the [keys] input or the formControl of the layout container\nas well. The order in which they are provided there, will define the order in which\nthe items will be rendered.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-configurable-layout-item\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./configurable-layout-item.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                key\n                            \n                            \n                                    Public\n                                    Readonly\n                                label\n                            \n                            \n                                    Public\n                                    Readonly\n                                template\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                key\n                            \n                            \n                                label\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        key\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:19\n                            \n                        \n                \n                    \n                        The unique key of the layout item.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:24\n                            \n                        \n                \n                    \n                        An optional label for the layout item used for WCAG purposes.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        key\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:19\n                        \n                    \n\n            \n                \n                    The unique key of the layout item.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        label\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:24\n                        \n                    \n\n            \n                \n                    An optional label for the layout item used for WCAG purposes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        template\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild>('contentTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:29\n                        \n                    \n\n            \n                \n                    The template reference of the;\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, TemplateRef, input, viewChild } from '@angular/core';\n\n/**\n * The layout item pairs with the `` container.\n * This component will in itself not be rendered. The key provided in this component\n * will need to be provided in the `[keys]` input or the `formControl` of the layout container\n * as well. The order in which they are provided there, will define the order in which\n * the items will be rendered.\n */\n@Component({\n\tselector: 'ngx-configurable-layout-item',\n\ttemplateUrl: './configurable-layout-item.component.html',\n\tstandalone: true,\n})\nexport class NgxConfigurableLayoutItemComponent {\n\t/**\n\t * The unique key of the layout item.\n\t */\n\tpublic readonly key = input.required();\n\n\t/**\n\t * An optional label for the layout item used for WCAG purposes.\n\t */\n\tpublic readonly label = input();\n\n\t/**\n\t * The template reference of the;\n\t */\n\tpublic readonly template = viewChild>('contentTmpl');\n}\n\n    \n\n    \n        \n\t\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxConfigurableLayoutItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{"url":"interfaces/NgxConfigurableLayoutItemDropEvent.html","title":"interface - NgxConfigurableLayoutItemDropEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxConfigurableLayoutItemDropEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/configurable-layout.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentGrid\n                                        \n                                \n                                \n                                        \n                                            element\n                                        \n                                \n                                \n                                        \n                                            eventType\n                                        \n                                \n                                \n                                        \n                                            showInactive\n                                        \n                                \n                                \n                                        \n                                            targetRowIndex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentGrid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentGrid:         NgxConfigurableLayoutGrid\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxConfigurableLayoutGrid\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        element:         NgxConfigurableLayoutItemEntity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxConfigurableLayoutItemEntity\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventType:     \"sorting\" | \"moving\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"sorting\" | \"moving\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showInactive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showInactive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targetRowIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        targetRowIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxConfigurableLayoutItemSizeOption = 'fit-content' | 'fill' | 'equal';\n\nexport type NgxConfigurableLayoutType = 'static' | 'editable';\n\nexport interface NgxConfigurableLayoutItemEntity {\n\tkey: string;\n\tisActive: boolean;\n\tdisabled?: boolean;\n}\n\nexport type NgxConfigurableLayoutGrid = NgxConfigurableLayoutItemEntity[][];\n\nexport interface NgxConfigurableLayoutItemDropEvent {\n\tcurrentGrid: NgxConfigurableLayoutGrid;\n\teventType: 'sorting' | 'moving';\n\telement: NgxConfigurableLayoutItemEntity;\n\tshowInactive: boolean;\n\ttargetRowIndex: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxConfigurableLayoutItemEntity.html":{"url":"interfaces/NgxConfigurableLayoutItemEntity.html","title":"interface - NgxConfigurableLayoutItemEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxConfigurableLayoutItemEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/configurable-layout.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            disabled\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxConfigurableLayoutItemSizeOption = 'fit-content' | 'fill' | 'equal';\n\nexport type NgxConfigurableLayoutType = 'static' | 'editable';\n\nexport interface NgxConfigurableLayoutItemEntity {\n\tkey: string;\n\tisActive: boolean;\n\tdisabled?: boolean;\n}\n\nexport type NgxConfigurableLayoutGrid = NgxConfigurableLayoutItemEntity[][];\n\nexport interface NgxConfigurableLayoutItemDropEvent {\n\tcurrentGrid: NgxConfigurableLayoutGrid;\n\teventType: 'sorting' | 'moving';\n\telement: NgxConfigurableLayoutItemEntity;\n\tshowInactive: boolean;\n\ttargetRowIndex: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxConfigurableLayoutItemSizePipe.html":{"url":"pipes/NgxConfigurableLayoutItemSizePipe.html","title":"pipe - NgxConfigurableLayoutItemSizePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxConfigurableLayoutItemSizePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/item-size/item-size.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxConfigurableLayoutItemSize\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(undefined: literal type, itemSize: NgxConfigurableLayoutItemSizeOption)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/item-size/item-size.pipe.ts:17\n                        \n                    \n\n\n            \n                \n                        Returns the needed styling for the ngx-configurable-layout component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {\n\t\t\tkeys: null,\n\t\t\tshowInactive: true,\n\t\t}\n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                itemSize\n                                            \n                                                            NgxConfigurableLayoutItemSizeOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe itemSize used by the layout\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { NgxConfigurableLayoutItemEntity, NgxConfigurableLayoutItemSizeOption } from '../../types';\n\n@Pipe({\n\tname: 'ngxConfigurableLayoutItemSize',\n\tstandalone: true,\n})\nexport class NgxConfigurableLayoutItemSizePipe implements PipeTransform {\n\t/**\n\t * Returns the needed styling for the ngx-configurable-layout component\n\t *\n\t * @param keys - The keys used in the grid\n\t * @param showInactive - Whether we want to show inactive items\n\t * @param itemSize - The itemSize used by the layout\n\t */\n\ttransform(\n\t\t{\n\t\t\tkeys,\n\t\t\tshowInactive,\n\t\t}: { keys: NgxConfigurableLayoutItemEntity[][]; showInactive: boolean } = {\n\t\t\tkeys: null,\n\t\t\tshowInactive: true,\n\t\t},\n\t\titemSize: NgxConfigurableLayoutItemSizeOption\n\t): Record {\n\t\t// Iben: If non data source is provided or if the itemSize is 'fill',\n\t\t// we can use the default grid size which will result in filling up the available grid space.\n\t\tif (!keys || itemSize === 'fill') {\n\t\t\treturn {};\n\t\t}\n\n\t\t// Iben: If itemSize is 'fit-content', the columns will be based on the content of the template\n\t\tif (itemSize === 'fit-content') {\n\t\t\treturn {\n\t\t\t\t'grid-auto-columns': 'max-content',\n\t\t\t};\n\t\t}\n\n\t\t// Iben: If itemSize is 'equal', all items in the grid need to be of equal size.\n\t\t// For this, we grab the row with the largest amount of items, which will define the amount of columns\n\t\tconst longestRow = Math.max(\n\t\t\t...[...keys].map((item) => {\n\t\t\t\treturn item.filter((key) => {\n\t\t\t\t\tif (!showInactive) {\n\t\t\t\t\t\treturn key.isActive;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}).length;\n\t\t\t})\n\t\t);\n\n\t\treturn {\n\t\t\t'grid-template-columns': `repeat(${longestRow}, minmax(0, 1fr))`,\n\t\t};\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookie.html":{"url":"interfaces/NgxCookie.html","title":"interface - NgxCookie","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookie\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            domain\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresAfterDays\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sameSite\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useLocalStorage\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        domain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresAfterDays\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresAfterDays:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sameSite\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sameSite:     \"Lax\" | \"Strict\" | \"None\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"Lax\" | \"Strict\" | \"None\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useLocalStorage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useLocalStorage:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieChangedEvent.html":{"url":"interfaces/NgxCookieChangedEvent.html","title":"interface - NgxCookieChangedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieChangedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxCookieEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            changedCategories\n                                        \n                                \n                                \n                                        \n                                            changedServices\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        changedCategories\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        changedCategories:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        changedServices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        changedServices:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieConfiguration.html":{"url":"interfaces/NgxCookieConfiguration.html","title":"interface - NgxCookieConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoClearCookies\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            autoShow\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cookie\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            guiOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideFromBots\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lazyHtmlGeneration\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            manageScriptTags\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revision\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            root\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoClearCookies\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoClearCookies:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        autoShow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoShow:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cookie\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cookie:         NgxCookie\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxCookie\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        guiOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        guiOptions:     GuiOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     GuiOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideFromBots\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideFromBots:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lazyHtmlGeneration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lazyHtmlGeneration:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        manageScriptTags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        manageScriptTags:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"opt-in\" | \"opt-out\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"opt-in\" | \"opt-out\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revision\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revision:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        root\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        root:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieEvent.html":{"url":"interfaces/NgxCookieEvent.html","title":"interface - NgxCookieEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cookie\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cookie\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cookie:     CookieValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CookieValue\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieLanguageConfiguration.html":{"url":"interfaces/NgxCookieLanguageConfiguration.html","title":"interface - NgxCookieLanguageConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieLanguageConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoDetect\n                                        \n                                \n                                \n                                        \n                                            default\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            rtl\n                                        \n                                \n                                \n                                        \n                                            translations\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoDetect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoDetect:     \"document\" | \"browser\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"document\" | \"browser\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rtl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rtl:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translations:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxCookieService.html":{"url":"injectables/NgxCookieService.html","title":"injectable - NgxCookieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxCookieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/services/cookie/cookie.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that implements the CookieConsent from https://cookieconsent.orestbida.com and provides the necessary Observables to handle this setup.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                cookiesChanged$\n                            \n                            \n                                    Private\n                                    Readonly\n                                cookiesChangedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                cookiesConsentChanged$\n                            \n                            \n                                    Private\n                                    Readonly\n                                cookiesConsentChangedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                cookiesConsented$\n                            \n                            \n                                    Private\n                                    Readonly\n                                cookiesConsentedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                firstCookiesConsented$\n                            \n                            \n                                    Private\n                                    Readonly\n                                firstCookiesConsentedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                modalVisible$\n                            \n                            \n                                    Private\n                                    Readonly\n                                modalVisibleSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                acceptCategory\n                            \n                            \n                                    Public\n                                acceptService\n                            \n                            \n                                    Public\n                                getCookie\n                            \n                            \n                                    Public\n                                getCookieObservable\n                            \n                            \n                                    Public\n                                hasAcceptedCategory\n                            \n                            \n                                    Public\n                                hasAcceptedService\n                            \n                            \n                                    Public\n                                removeCookie\n                            \n                            \n                                    Public\n                                setCookie\n                            \n                            \n                                    Public\n                                setupCookiesHandler\n                            \n                            \n                                    Public\n                                showModal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        acceptCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    acceptCategory(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:184\n                        \n                    \n\n\n            \n                \n                        Accept a category of cookies\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the categories\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        acceptService\n                        \n                    \n                \n            \n            \n                \n                        \n                    acceptService(category: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:213\n                        \n                    \n\n\n            \n                \n                        Accept a category of cookies\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the category\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the service\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCookie(cookie: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:229\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Get a cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nName of the cookie\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataType | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCookieObservable\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCookieObservable(cookie: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:238\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Get a cookie as an observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nName of the cookie\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasAcceptedCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasAcceptedCategory(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:166\n                        \n                    \n\n\n            \n                \n                        Whether a certain category of cookies was accepted\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the category\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasAcceptedService\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasAcceptedService(category: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:194\n                        \n                    \n\n\n            \n                \n                        Whether a certain service within a category was accepted\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the category\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the service\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeCookie(cookie: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:277\n                        \n                    \n\n\n            \n                \n                        Remove a cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cookie we wish to remove\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    setCookie(cookie: NgxCookieValue)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:256\n                        \n                    \n\n\n            \n                \n                        Set a cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            NgxCookieValue\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cookie we wish to set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setupCookiesHandler\n                        \n                    \n                \n            \n            \n                \n                        \n                    setupCookiesHandler(categories: NgxCookieCategories, language: NgxCookieLanguageConfiguration, configuration?: NgxCookieConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Sets up the CookieConsent.\nFor more information of on this configuration, check the documentation\nhttps://cookieconsent.orestbida.com/essential/getting-started.html\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                categories\n                                            \n                                                            NgxCookieCategories\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe categories of cookies\n\n\n                                            \n                                        \n                                        \n                                                language\n                                            \n                                                            NgxCookieLanguageConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe language settings of the cookies\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxCookieConfiguration\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional set configuration settings\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showModal\n                        \n                    \n                \n            \n            \n                \n                        \n                    showModal()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:220\n                        \n                    \n\n\n            \n                \n                        Show the cookie modal\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cookiesChanged$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable>\n\n                    \n                \n                \n                    \n                        Default value : this.cookiesChangedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:86\n                        \n                    \n\n            \n                \n                    Emits every time the set cookies have been changed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cookiesChangedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject>\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:53\n                        \n                    \n\n            \n                \n                    Subject to hold the cookiesChanged event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cookiesConsentChanged$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.cookiesConsentChangedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:75\n                        \n                    \n\n            \n                \n                    An event triggered when the user modifies their preferences and only if consent has already been provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cookiesConsentChangedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:41\n                        \n                    \n\n            \n                \n                    Subject to hold the consentChanged event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cookiesConsented$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.cookiesConsentedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:69\n                        \n                    \n\n            \n                \n                    An event triggering the choice of consent on every page load.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cookiesConsentedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:36\n                        \n                    \n\n            \n                \n                    Subject to hold the onConsent event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        firstCookiesConsented$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.firstCookiesConsentedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:63\n                        \n                    \n\n            \n                \n                    An event triggered only the very first time that the user expresses their choice of consent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        firstCookiesConsentedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:31\n                        \n                    \n\n            \n                \n                    Subject to hold the onFirstConsent event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        modalVisible$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.modalVisibleSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:81\n                        \n                    \n\n            \n                \n                    Whether the cookies modal is currently visible\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        modalVisibleSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tfalse\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:46\n                        \n                    \n\n            \n                \n                    Subject to hold the modalVisible event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:58\n                        \n                    \n\n            \n                \n                    Instance of the window service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport {\n\tBehaviorSubject,\n\tObservable,\n\tSubject,\n\tcombineLatest,\n\tdistinctUntilChanged,\n\tmap,\n\tstartWith,\n} from 'rxjs';\nimport * as CookieConsent from 'vanilla-cookieconsent';\n\nimport {\n\tNgxCookieCategories,\n\tNgxCookieChangedEvent,\n\tNgxCookieConfiguration,\n\tNgxCookieEvent,\n\tNgxCookieLanguageConfiguration,\n\tNgxCookieValue,\n} from '../../types';\n\n/**\n * A service that implements the CookieConsent from https://cookieconsent.orestbida.com and provides the necessary Observables to handle this setup.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxCookieService {\n\t/**\n\t * Subject to hold the onFirstConsent event\n\t */\n\tprivate readonly firstCookiesConsentedSubject: Subject = new Subject();\n\n\t/**\n\t * Subject to hold the onConsent event\n\t */\n\tprivate readonly cookiesConsentedSubject: Subject = new Subject();\n\n\t/**\n\t * Subject to hold the consentChanged event\n\t */\n\tprivate readonly cookiesConsentChangedSubject: Subject = new Subject();\n\n\t/**\n\t * Subject to hold the modalVisible event\n\t */\n\tprivate readonly modalVisibleSubject: BehaviorSubject = new BehaviorSubject(\n\t\tfalse\n\t);\n\n\t/**\n\t * Subject to hold the cookiesChanged event\n\t */\n\tprivate readonly cookiesChangedSubject: Subject> = new Subject();\n\n\t/**\n\t * Instance of the window service\n\t */\n\tprivate readonly windowService: NgxWindowService = inject(NgxWindowService);\n\n\t/**\n\t * An event triggered only the very first time that the user expresses their choice of consent\n\t */\n\tpublic readonly firstCookiesConsented$: Observable =\n\t\tthis.firstCookiesConsentedSubject.asObservable();\n\n\t/**\n\t * An event triggering the choice of consent on every page load.\n\t */\n\tpublic readonly cookiesConsented$: Observable =\n\t\tthis.cookiesConsentedSubject.asObservable();\n\n\t/**\n\t * An event triggered when the user modifies their preferences and only if consent has already been provided.\n\t */\n\tpublic readonly cookiesConsentChanged$: Observable =\n\t\tthis.cookiesConsentChangedSubject.asObservable();\n\n\t/**\n\t * Whether the cookies modal is currently visible\n\t */\n\tpublic readonly modalVisible$: Observable = this.modalVisibleSubject.asObservable();\n\n\t/**\n\t * Emits every time the set cookies have been changed\n\t */\n\tpublic readonly cookiesChanged$: Observable> =\n\t\tthis.cookiesChangedSubject.asObservable();\n\n\t/**\n\t * Sets up the CookieConsent.\n\t *\n\t * For more information of on this configuration, check the documentation\n\t * https://cookieconsent.orestbida.com/essential/getting-started.html\n\t *\n\t * @param categories - The categories of cookies\n\t * @param language - The language settings of the cookies\n\t * @param configuration - An optional set configuration settings\n\t */\n\tpublic setupCookiesHandler(\n\t\tcategories: NgxCookieCategories,\n\t\tlanguage: NgxCookieLanguageConfiguration,\n\t\tconfiguration?: NgxCookieConfiguration\n\t): void {\n\t\t// Iben: If we're not in the browser, we early exit, so server-side rendering can be enabled\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If no categories were provided, we early exit and throw an error, as the cookie preference cannot be shown without.\n\t\tif (!categories || Object.keys(categories).length === 0) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxCookies: No categories were provided for the cookie handler. At least one category is required.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Setup the onFirstConsent listener\n\t\tconst onFirstConsent = (event) => {\n\t\t\tthis.firstCookiesConsentedSubject.next(event);\n\t\t};\n\t\tonFirstConsent.bind(this);\n\n\t\t// Iben: Setup the onConsent listener\n\t\tconst onConsent = (event) => {\n\t\t\tthis.cookiesConsentedSubject.next(event);\n\t\t};\n\t\tonConsent.bind(this);\n\n\t\t// Iben: Setup the onChange listener\n\t\tconst onChange = (event) => {\n\t\t\tthis.cookiesConsentChangedSubject.next(event);\n\t\t};\n\t\tonChange.bind(this);\n\n\t\t// Iben: Setup the onModalShow listener\n\t\tconst onModalShow = () => {\n\t\t\tthis.modalVisibleSubject.next(true);\n\t\t};\n\t\tonModalShow.bind(this);\n\n\t\t// Iben: Setup the onModalHide listener\n\t\tconst onModalHide = () => {\n\t\t\tthis.modalVisibleSubject.next(false);\n\t\t};\n\t\tonModalHide.bind(this);\n\n\t\t// Iben: Run the CookieConsent handler\n\t\tCookieConsent.run({\n\t\t\t...(configuration || {}),\n\t\t\tonFirstConsent,\n\t\t\tonConsent,\n\t\t\tonChange,\n\t\t\tonModalHide,\n\t\t\tonModalShow,\n\t\t\tcategories,\n\t\t\tlanguage,\n\t\t});\n\t}\n\n\t/**\n\t * Whether a certain category of cookies was accepted\n\t *\n\t * @param name - The name of the category\n\t */\n\tpublic hasAcceptedCategory(name: string): Observable {\n\t\t// Iben: Return every time the cookie consent has changed\n\t\treturn combineLatest([\n\t\t\tthis.cookiesConsented$.pipe(startWith(undefined)),\n\t\t\tthis.cookiesConsentChanged$.pipe(startWith(undefined)),\n\t\t]).pipe(\n\t\t\tmap(() => {\n\t\t\t\t// Iben: Check if the category was accepted\n\t\t\t\treturn CookieConsent.acceptedCategory(name);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Accept a category of cookies\n\t *\n\t * @param name - The name of the categories\n\t */\n\tpublic acceptCategory(name: string): void {\n\t\tCookieConsent.acceptCategory(name);\n\t}\n\n\t/**\n\t * Whether a certain service within a category was accepted\n\t *\n\t * @param category - The name of the category\n\t * @param name - The name of the service\n\t */\n\tpublic hasAcceptedService(category: string, name: string): Observable {\n\t\t// Iben: Return every time the cookie consent has changed\n\t\treturn combineLatest([\n\t\t\tthis.cookiesConsented$.pipe(startWith(undefined)),\n\t\t\tthis.cookiesConsentChanged$.pipe(startWith(undefined)),\n\t\t]).pipe(\n\t\t\tmap(() => {\n\t\t\t\t// Iben: Check if the service within the provided category was accepted\n\t\t\t\treturn CookieConsent.acceptedService(name, category);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Accept a category of cookies\n\t *\n\t * @param category - The name of the category\n\t * @param name - The name of the service\n\t */\n\tpublic acceptService(category: string, name: string): void {\n\t\tCookieConsent.acceptService(name, category);\n\t}\n\n\t/**\n\t * Show the cookie modal\n\t */\n\tpublic showModal(): void {\n\t\tCookieConsent.show(true);\n\t}\n\n\t/**\n\t * Get a cookie\n\t *\n\t * @param cookie - Name of the cookie\n\t */\n\tpublic getCookie(cookie: string): DataType | undefined {\n\t\treturn (CookieConsent.getCookie('data') || {})[cookie];\n\t}\n\n\t/**\n\t * Get a cookie as an observable\n\t *\n\t * @param cookie - Name of the cookie\n\t */\n\tpublic getCookieObservable(cookie: string): Observable {\n\t\t// Iben: Return every time the set cookies are changed\n\t\treturn this.cookiesChanged$.pipe(\n\t\t\tstartWith(CookieConsent.getCookie('data') || {}),\n\t\t\t// Iben: Get the cookie value\n\t\t\tmap(() => {\n\t\t\t\treturn this.getCookie(cookie);\n\t\t\t}),\n\t\t\t// Iben: As the cookiesChanged event emits every time all cookies are rest, we check if the cookie value was really changed\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * Set a cookie\n\t *\n\t * @param cookie - The cookie we wish to set\n\t */\n\tpublic setCookie(cookie: NgxCookieValue): void {\n\t\t// Iben: Set the cookie\n\t\tconst isSet = CookieConsent.setCookieData({\n\t\t\tvalue: { [cookie.name]: cookie.value },\n\t\t\tmode: 'update',\n\t\t});\n\n\t\t// Iben: If the cookie was not set, we return\n\t\tif (!isSet) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Update the subject so we can notify listeners\n\t\tthis.cookiesChangedSubject.next(CookieConsent.getCookie('data'));\n\t}\n\n\t/**\n\t * Remove a cookie\n\t *\n\t * @param cookie - The cookie we wish to remove\n\t */\n\tpublic removeCookie(cookie: string): void {\n\t\t// Iben: Get the current cookies\n\t\tconst currentCookies = CookieConsent.getCookie('data') || {};\n\n\t\t// Iben: Remove the cookie from the currently set cookies\n\t\tconst { [cookie]: _removedValue, ...value } = currentCookies;\n\n\t\t// Iben: Remove the cookie from the cookies holder\n\t\tconst isSet = CookieConsent.setCookieData({ value, mode: 'overwrite' });\n\n\t\t// Iben: If the cookie was not set, we return\n\t\tif (!isSet) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Update the subject so we can notify listeners\n\t\tthis.cookiesChangedSubject.next(CookieConsent.getCookie('data'));\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieValue.html":{"url":"interfaces/NgxCookieValue.html","title":"interface - NgxCookieValue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieValue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/set-cookie.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgxCookieValue {\n\tname: string;\n\tvalue: DataType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxCookiesFallBackComponent.html":{"url":"directives/NgxCookiesFallBackComponent.html","title":"directive - NgxCookiesFallBackComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxCookiesFallBackComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/abstracts/cookie-fallback/cookie-fallback.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component that can optionally be used as a fallback to content that depends on accepted cookies\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                cookies\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        cookies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/abstracts/cookie-fallback/cookie-fallback.component.ts:13\n                        \n                    \n\n            \n                \n                    The cookies that were required to show the original content\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\n\nimport { NgxHasCookieConfiguration } from '../../types';\n\n/**\n *An abstract component that can optionally be used as a fallback to content that depends on accepted cookies\n */\n@Directive()\nexport abstract class NgxCookiesFallBackComponent {\n\t/**\n\t * The cookies that were required to show the original content\n\t */\n\treadonly cookies = input([]);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxCurrencyTableCellComponent.html":{"url":"components/NgxCurrencyTableCellComponent.html","title":"component - NgxCurrencyTableCellComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxCurrencyTableCellComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/cell/currency-cell.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxAbstractTableCellDirective\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NgxAbstractTableCellDirective, useExisting: NgxCurrencyTableCellComponent,\n}\n                \n            \n\n\n            \n                selector\n                ngx-table-currency-cell\n            \n\n\n            \n                imports\n                \n                            CurrencyPipe\n                \n            \n\n\n\n            \n                template\n                \n\t{{ item | currency: currency() }}\n\n\t\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                cellClass\n                            \n                            \n                                    \n                                    Public\n                                    \n                                cellTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                currency\n                            \n                            \n                                    \n                                    Public\n                                    \n                                footerTemplate\n                            \n                            \n                                    \n                                    Public\n                                    \n                                headerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:31\n\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:42\n\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:47\n\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:36\n\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:57\n\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:82\n\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:91\n\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ngx-currency-table-cell'\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:49\n\n                        \n                    \n\n            \n                \n                    A generic class to indicate that this is a currency cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('cellTmpl', {static: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:44\n\n                        \n                    \n\n            \n                \n                    ViewChild that represents the cell template\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('EUR')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/currency-cell.component.ts:25\n                        \n                    \n\n            \n                \n                    The ISO 4217 format of the provided amount, by default EUR\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('footerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:38\n\n                        \n                    \n\n            \n                \n                    A template for the footer of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('headerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:32\n\n                        \n                    \n\n            \n                \n                    A template for the header of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:31\n\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:42\n\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:47\n\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:52\n\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:36\n\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:14\n\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CurrencyPipe } from '@angular/common';\nimport { Component, ContentChild, TemplateRef, ViewChild, input } from '@angular/core';\n\nimport { NgxAbstractTableCellDirective } from './cell.directive';\n\n@Component({\n\tselector: 'ngx-table-currency-cell',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NgxAbstractTableCellDirective,\n\t\t\tuseExisting: NgxCurrencyTableCellComponent,\n\t\t},\n\t],\n\ttemplate: `\n\t\t\n\t\t\t{{ item | currency: currency() }}\n\t\t\n\t`,\n\timports: [CurrencyPipe],\n})\nexport class NgxCurrencyTableCellComponent extends NgxAbstractTableCellDirective {\n\t/**\n\t * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format of the provided amount, by default `EUR`\n\t */\n\tpublic readonly currency = input('EUR');\n\n\t/**\n\t * A template for the header of the cell\n\t */\n\n\t@ContentChild('headerTmpl', { static: false })\n\tpublic override headerTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the footer of the cell\n\t */\n\n\t@ContentChild('footerTmpl', { static: false })\n\tpublic override footerTemplate: TemplateRef = undefined;\n\n\t/**\n\t * ViewChild that represents the cell template\n\t */\n\n\t@ViewChild('cellTmpl', { static: true }) public override cellTemplate: TemplateRef = undefined;\n\n\t/**\n\t * A generic class to indicate that this is a currency cell\n\t */\n\tpublic override cellClass: string = 'ngx-currency-table-cell';\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t{{ item | currency: currency() }}\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxCurrencyTableCellComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxCypressTagDirective.html":{"url":"directives/NgxCypressTagDirective.html","title":"directive - NgxCypressTagDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxCypressTagDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [cypressTag]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cypressTag\n                            \n                            \n                                    Public\n                                tag\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                cypressTag\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        cypressTag\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts:25\n                            \n                        \n                \n                    \n                        Sets the tag for Cypress\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cypressTag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts:25\n                        \n                    \n\n            \n                \n                    Sets the tag for Cypress\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n\t\treturn get({}, this.cypressTag());\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tcomputed,\n\tDirective,\n\tinput,\n\tInputSignal,\n\tSignal,\n} from '@angular/core';\nimport { get } from 'lodash';\n\n@Directive({\n\tselector: '[cypressTag]',\n\tstandalone: true,\n\thost: {\n\t\t'[attr.data-cy]': 'tag()',\n\t},\n})\nexport class NgxCypressTagDirective {\n\tpublic tag: Signal = computed(() => {\n\t\treturn get({}, this.cypressTag());\n\t});\n\n\t/**\n\t * Sets the tag for Cypress\n\t */\n\tpublic cypressTag: InputSignal = input.required();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxDateTableCellComponent.html":{"url":"components/NgxDateTableCellComponent.html","title":"component - NgxDateTableCellComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxDateTableCellComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/cell/date-cell.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxAbstractTableCellDirective\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NgxAbstractTableCellDirective, useExisting: NgxDateTableCellComponent,\n}\n                \n            \n\n\n            \n                selector\n                ngx-table-date-cell\n            \n\n\n            \n                imports\n                \n                            DatePipe\n                                NgxTableGetPipe\n                \n            \n\n\n\n            \n                template\n                \n\t@if (rowKey()) { @if (row | getProp: rowKey(); as rowItem) {\n\t\n\t\t{{ rowItem | date : format() }}\n\t\n\t} @else {\n\t{{ emptyLabel() }}\n\t} } @else { @if (item) {\n\t{{ (itemKey() ? item[itemKey()] : item) | date : format() }}\n\t} @else {\n\t{{ emptyLabel() }}\n\t} }\n\n\t\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                cellClass\n                            \n                            \n                                    \n                                    Public\n                                    \n                                cellTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                emptyLabel\n                            \n                            \n                                    \n                                    Public\n                                    \n                                footerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                format\n                            \n                            \n                                    \n                                    Public\n                                    \n                                headerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                itemKey\n                            \n                            \n                                    Public\n                                    Readonly\n                                rowKey\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                itemKey\n                            \n                            \n                                rowKey\n                            \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        itemKey\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:47\n                            \n                        \n                \n                    \n                        In case the date is nested in an object, we can provide a key to fetch it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        rowKey\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:52\n                            \n                        \n                \n                    \n                        In case the date is nested in the row, we can provide a key to fetch it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:31\n\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:42\n\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:47\n\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:36\n\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:57\n\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:82\n\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:91\n\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ngx-date-table-cell'\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:77\n\n                        \n                    \n\n            \n                \n                    A generic class to indicate that this is a date cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('cellTmpl', {static: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:72\n\n                        \n                    \n\n            \n                \n                    ViewChild that represents the cell template\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        emptyLabel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('Empty date')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:42\n                        \n                    \n\n            \n                \n                    The label to display when date is invalid or empty\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('footerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:65\n\n                        \n                    \n\n            \n                \n                    A template for the footer of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('dd/MM/yyyy')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:37\n                        \n                    \n\n            \n                \n                    The format of the provided date, by default dd/MM/yyyy\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('headerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:59\n\n                        \n                    \n\n            \n                \n                    A template for the header of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        itemKey\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:47\n                        \n                    \n\n            \n                \n                    In case the date is nested in an object, we can provide a key to fetch it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        rowKey\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:52\n                        \n                    \n\n            \n                \n                    In case the date is nested in the row, we can provide a key to fetch it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:31\n\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:42\n\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:47\n\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:52\n\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:36\n\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:14\n\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { DatePipe } from '@angular/common';\nimport { Component, ContentChild, TemplateRef, ViewChild, input } from '@angular/core';\n\nimport { NgxTableGetPipe } from '../../pipes/get-pipe/get.pipe';\n\nimport { NgxAbstractTableCellDirective } from './cell.directive';\n\n@Component({\n\tselector: 'ngx-table-date-cell',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NgxAbstractTableCellDirective,\n\t\t\tuseExisting: NgxDateTableCellComponent,\n\t\t},\n\t],\n\ttemplate: `\n\t\t\n\t\t\t@if (rowKey()) { @if (row | getProp: rowKey(); as rowItem) {\n\t\t\t\n\t\t\t\t{{ rowItem | date : format() }}\n\t\t\t\n\t\t\t} @else {\n\t\t\t{{ emptyLabel() }}\n\t\t\t} } @else { @if (item) {\n\t\t\t{{ (itemKey() ? item[itemKey()] : item) | date : format() }}\n\t\t\t} @else {\n\t\t\t{{ emptyLabel() }}\n\t\t\t} }\n\t\t\n\t`,\n\timports: [DatePipe, NgxTableGetPipe],\n})\nexport class NgxDateTableCellComponent extends NgxAbstractTableCellDirective {\n\t/**\n\t * The format of the provided date, by default `dd/MM/yyyy`\n\t */\n\tpublic readonly format = input('dd/MM/yyyy');\n\n\t/**\n\t * The label to display when date is invalid or empty\n\t */\n\tpublic readonly emptyLabel = input('Empty date');\n\n\t/**\n\t * In case the date is nested in an object, we can provide a key to fetch it\n\t */\n\tpublic readonly itemKey = input();\n\n\t/**\n\t * In case the date is nested in the row, we can provide a key to fetch it\n\t */\n\tpublic readonly rowKey = input();\n\n\t/**\n\t * A template for the header of the cell\n\t */\n\n\t@ContentChild('headerTmpl', { static: false })\n\tpublic override headerTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the footer of the cell\n\t */\n\n\t@ContentChild('footerTmpl', { static: false })\n\tpublic override footerTemplate: TemplateRef = undefined;\n\n\t/**\n\t * ViewChild that represents the cell template\n\t */\n\n\t@ViewChild('cellTmpl', { static: true })\n\tpublic override cellTemplate: TemplateRef = undefined;\n\n\t/**\n\t * A generic class to indicate that this is a date cell\n\t */\n\tpublic override cellClass: string = 'ngx-date-table-cell';\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t@if (rowKey()) { @if (row | getProp: rowKey(); as rowItem) {\t\t\t{{ rowItem | date : format() }}\t\t} @else {\t{{ emptyLabel() }}\t} } @else { @if (item) {\t{{ (itemKey() ? item[itemKey()] : item) | date : format() }}\t} @else {\t{{ emptyLabel() }}\t} }\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxDateTableCellComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxDisplayContentComponent.html":{"url":"directives/NgxDisplayContentComponent.html","title":"directive - NgxDisplayContentComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxDisplayContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class to use when implementing custom fallbacks for the NgxDisplayContentDirective\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts:11\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts:11\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\n\n/**\n * An abstract class to use when implementing custom fallbacks for the NgxDisplayContentDirective\n */\n@Directive()\nexport abstract class NgxDisplayContentComponent {\n\t/**\n\t * An optional data input to provide data to the fallback components. This property is typed as any.\n\t */\n\treadonly data = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxDisplayContentConfiguration.html":{"url":"interfaces/NgxDisplayContentConfiguration.html","title":"interface - NgxDisplayContentConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxDisplayContentConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/display-content.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            components\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideWhenNoTemplateProvided\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            listenToOnlineStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        components\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        components:         NgxDisplayContentComponentConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxDisplayContentComponentConfiguration\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideWhenNoTemplateProvided\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideWhenNoTemplateProvided:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        listenToOnlineStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        listenToOnlineStatus:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TemplateRef, Type } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../abstracts';\n\nexport type NgxDisplayContentStatus = 'loading' | 'error' | 'offline';\n\nexport type NgxDisplayContentAriaLive = 'polite' | 'assertive' | 'off';\n\ntype NgxDisplayContentRecord = Partial>;\n\nexport type NgxDisplayContentConditions = NgxDisplayContentRecord;\n\nexport type NgxDisplayContentComponentConfiguration = NgxDisplayContentRecord\n>;\n\nexport type NgxDisplayContentOverrideConfiguration = NgxDisplayContentRecord;\n\tdata?: any;\n}>;\n\nexport interface NgxDisplayContentConfiguration {\n\tcomponents: NgxDisplayContentComponentConfiguration;\n\thideWhenNoTemplateProvided?: boolean;\n\tlistenToOnlineStatus?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxDisplayContentDirective.html":{"url":"directives/NgxDisplayContentDirective.html","title":"directive - NgxDisplayContentDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxDisplayContentDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                NgxDisplayContentDirective handles whether content should be shown based on a loading, error or offline condition by using provided default components or a provided override template\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [displayContent]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                conditions\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                displayContent\n                            \n                            \n                                    Readonly\n                                displayContentAriaLive\n                            \n                            \n                                    Public\n                                displayContentConfiguration\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                onlineService\n                            \n                            \n                                    Private\n                                overrideConfiguration\n                            \n                            \n                                    Private\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                updateViewSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                renderInitialTemplate\n                            \n                            \n                                    Private\n                                renderTemplate\n                            \n                            \n                                    Private\n                                setAriaBusyTag\n                            \n                            \n                                    Private\n                                setAriaLiveTag\n                            \n                            \n                                    Private\n                                updateConditions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                displayContent\n                            \n                            \n                                displayContentConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:81\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        displayContent\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:68\n                            \n                        \n                \n                    \n                        Renders the item or a default fallback based on the provided conditions\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        displayContentConfiguration\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:73\n                            \n                        \n                \n                    \n                        Override the existing configuration with custom configuration\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:118\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:168\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderInitialTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderInitialTemplate()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:214\n                        \n                    \n\n\n            \n                \n                        Renders the initial template\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderTemplate(status: NgxDisplayContentStatus, component: Type)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:179\n                        \n                    \n\n\n            \n                \n                        Renders the provided component or template\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            NgxDisplayContentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe status we're handling\n\n\n                                            \n                                        \n                                        \n                                                component\n                                            \n                                                            Type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component we're wishing to render\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setAriaBusyTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAriaBusyTag(isLoading: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:277\n                        \n                    \n\n\n            \n                \n                        Sets the aria-busy tag of the item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isLoading\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe loading state of the item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setAriaLiveTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAriaLiveTag(value: \"polite\" | \"assertive\" | \"off\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:237\n                        \n                    \n\n\n            \n                \n                        Sets the aria-live tag of the item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        \"polite\" | \"assertive\" | \"off\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value we wish to set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateConditions\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateConditions(conditions: NgxDisplayContentConditions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:223\n                        \n                    \n\n\n            \n                \n                        Updates the conditions\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                conditions\n                                            \n                                                            NgxDisplayContentConditions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe conditions we want to merge with the current set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        conditions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxDisplayContentConditions\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:63\n                        \n                    \n\n            \n                \n                    Holds the conditions we use to render the component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxDisplayContentConfigurationToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        displayContent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:68\n                        \n                    \n\n            \n                \n                    Renders the item or a default fallback based on the provided conditions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        displayContentAriaLive\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('polite')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:81\n                        \n                    \n\n            \n                \n                    The aria-live label we wish to provide to the parent element. By default, this is 'polite'.\nhttps://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        displayContentConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:73\n                        \n                    \n\n            \n                \n                    Override the existing configuration with custom configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:48\n                        \n                    \n\n            \n                \n                    A subject to handle the destroyed flow\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onlineService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxOnlineService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overrideConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxDisplayContentOverrideConfiguration\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:58\n                        \n                    \n\n            \n                \n                    Holds an optional override configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        updateViewSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:53\n                        \n                    \n\n            \n                \n                    A subject to know when we need to update the view\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tAfterViewInit,\n\tChangeDetectorRef,\n\tDirective,\n\tElementRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tType,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject, distinctUntilChanged, takeUntil, tap } from 'rxjs';\n\nimport { NgxDisplayContentComponent } from '../../abstracts';\nimport { NgxOnlineService } from '../../services';\nimport { NgxDisplayContentConfigurationToken } from '../../tokens';\nimport {\n\tNgxDisplayContentAriaLive,\n\tNgxDisplayContentConditions,\n\tNgxDisplayContentConfiguration,\n\tNgxDisplayContentOverrideConfiguration,\n\tNgxDisplayContentStatus,\n} from '../../types';\n\n/**\n * NgxDisplayContentDirective handles whether content should be shown based on a loading, error or offline condition by using provided default components or a provided override template\n */\n@Directive({\n\tselector: '[displayContent]',\n\tstandalone: true,\n})\nexport class NgxDisplayContentDirective implements AfterViewInit, OnDestroy {\n\tprivate readonly elementRef = inject(ElementRef);\n\tprivate readonly templateRef = inject>(TemplateRef);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\tprivate readonly viewContainer = inject(ViewContainerRef);\n\tprivate readonly onlineService = inject(NgxOnlineService);\n\tprivate readonly configuration = inject(\n\t\tNgxDisplayContentConfigurationToken\n\t);\n\n\t/**\n\t * A subject to handle the destroyed flow\n\t */\n\tprivate readonly onDestroySubject: Subject = new Subject();\n\n\t/**\n\t * A subject to know when we need to update the view\n\t */\n\tprivate readonly updateViewSubject: Subject = new Subject();\n\n\t/**\n\t * Holds an optional override configuration\n\t */\n\tprivate overrideConfiguration: NgxDisplayContentOverrideConfiguration = {};\n\n\t/**\n\t * Holds the conditions we use to render the component\n\t */\n\tprivate conditions: NgxDisplayContentConditions = {};\n\n\t/**\n\t * Renders the item or a default fallback based on the provided conditions\n\t */\n\tpublic displayContent: InputSignal = input.required();\n\n\t/**\n\t * Override the existing configuration with custom configuration\n\t */\n\tpublic displayContentConfiguration: InputSignal =\n\t\tinput();\n\n\t/**\n\t * The aria-live label we wish to provide to the parent element. By default, this is 'polite'.\n\t *\n\t * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n\t */\n\treadonly displayContentAriaLive = input('polite');\n\n\tconstructor() {\n\t\t// Iben: If we want to listen to the online status, we set up a listener to the status of the application\n\t\tif (this.configuration.listenToOnlineStatus) {\n\t\t\tthis.onlineService.online$\n\t\t\t\t.pipe(\n\t\t\t\t\tdistinctUntilChanged(),\n\t\t\t\t\ttap((online) => {\n\t\t\t\t\t\t// Iben: Update the conditions with the new status\n\t\t\t\t\t\tthis.updateConditions({ offline: !online });\n\n\t\t\t\t\t\t// Iben: Notify that the view needs to be updated\n\t\t\t\t\t\tthis.updateViewSubject.next();\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.onDestroySubject)\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\t\t}\n\n\t\teffect(() => {\n\t\t\t// Iben: Update the conditions\n\t\t\tthis.updateConditions(this.displayContent() || {});\n\n\t\t\t// Iben: Notify that the view needs to be updated\n\t\t\tthis.updateViewSubject.next();\n\t\t});\n\n\t\teffect(() => {\n\t\t\t// Iben: Update the override configuration\n\t\t\tthis.overrideConfiguration = this.displayContentConfiguration() || {};\n\n\t\t\t// Iben: Notify that the view needs to be updated\n\t\t\tthis.updateViewSubject.next();\n\t\t});\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Set the aria-live and aria-busy tag of the parent\n\t\tthis.setAriaLiveTag(this.displayContentAriaLive());\n\n\t\t// Iben: Listen to whenever we need to update the view and act accordingly\n\t\tthis.updateViewSubject\n\t\t\t.asObservable()\n\t\t\t.pipe(\n\t\t\t\ttap(() => {\n\t\t\t\t\t// Iben: Clear the current view container\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Update the busy tag\n\t\t\t\t\tthis.setAriaBusyTag(this.conditions.loading);\n\n\t\t\t\t\t// Iben: If we're offline, we render the offline component or template\n\t\t\t\t\tif (this.conditions.offline) {\n\t\t\t\t\t\tthis.renderTemplate('offline', this.configuration.components.offline);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Iben: If we're loading, we render the loading component or template\n\t\t\t\t\tif (this.conditions.loading) {\n\t\t\t\t\t\tthis.renderTemplate('loading', this.configuration.components.loading);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Iben: If we've encountered an error, we render the error component or template\n\t\t\t\t\tif (this.conditions.error) {\n\t\t\t\t\t\tthis.renderTemplate('error', this.configuration.components.error);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t//Iben: Render the initial template\n\t\t\t\t\tthis.renderInitialTemplate();\n\t\t\t\t}),\n\t\t\t\t// Iben: We add a second tap here, so the detectChanges gets run after each outcome we did earlier\n\t\t\t\ttap(() => {\n\t\t\t\t\t// Iben: Detect the changes so this works with (nested) OnPush component\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Run the initial content check\n\t\tthis.updateViewSubject.next();\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.onDestroySubject.next();\n\t\tthis.onDestroySubject.complete();\n\t}\n\n\t/**\n\t * Renders the provided component or template\n\t *\n\t * @param  status - The status we're handling\n\t * @param  component - The component we're wishing to render\n\t */\n\tprivate renderTemplate(\n\t\tstatus: NgxDisplayContentStatus,\n\t\tcomponent: Type\n\t): void {\n\t\t// Iben: If an override for this template exists, we render the override template and early exit\n\t\tif (this.overrideConfiguration[status]?.template) {\n\t\t\tthis.viewContainer.createEmbeddedView(this.overrideConfiguration[status]?.template);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If a component was provided, we render this component and pass along the provided data and early exit\n\t\tif (component) {\n\t\t\t// Iben: Render the component\n\t\t\tconst componentRef =\n\t\t\t\tthis.viewContainer.createComponent(component);\n\n\t\t\t// Iben: Pass the data\n\t\t\tcomponentRef.setInput('data', this.overrideConfiguration[status]?.data);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If we need to hide the template when no template was provided, we early exit\n\t\tif (this.configuration.hideWhenNoTemplateProvided) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: In case we don't need to hide the initial template, we render it\n\t\tthis.renderInitialTemplate();\n\t}\n\n\t/**\n\t * Renders the initial template\n\t */\n\tprivate renderInitialTemplate(): void {\n\t\tthis.viewContainer.createEmbeddedView(this.templateRef);\n\t}\n\n\t/**\n\t * Updates the conditions\n\t *\n\t * @param conditions - The conditions we want to merge with the current set\n\t */\n\tprivate updateConditions(conditions: NgxDisplayContentConditions): void {\n\t\t// Iben: Update the conditions, but use a merge so that the online status can be preserved\n\t\tif (conditions) {\n\t\t\tthis.conditions = {\n\t\t\t\t...this.conditions,\n\t\t\t\t...conditions,\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Sets the aria-live tag of the item\n\t * @param  value - The value we wish to set\n\t */\n\tprivate setAriaLiveTag(value: 'polite' | 'assertive' | 'off'): void {\n\t\t// Iben: Get the parent element and early exit if it isn't found\n\t\tconst parentElement: HTMLElement = this.elementRef.nativeElement.parentElement;\n\n\t\tif (!parentElement) {\n\t\t\t// Iben:\n\t\t\tconsole.error(\n\t\t\t\t'NgxLayout: No parent element was found for NgxDisplayContentDirective. Because of that, the correct aria-live label could not be set.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the value is assertive then we always set it, as it has the highest priority\n\t\tif (value === 'assertive') {\n\t\t\tparentElement.setAttribute('aria-live', value);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Fetch the current aria-live label. If none were found, set it automatically\n\t\tconst currentValue = parentElement.getAttribute('aria-live');\n\n\t\tif (!currentValue) {\n\t\t\tparentElement.setAttribute('aria-live', value);\n\t\t}\n\n\t\t// Iben: If the current value is assertive or if the values are the same, we early exit\n\t\tif (currentValue === 'assertive' || currentValue === value) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Set the value\n\t\tparentElement.setAttribute('aria-live', value);\n\t}\n\n\t/**\n\t * Sets the aria-busy tag of the item\n\t * @param  isLoading - The loading state of the item\n\t */\n\tprivate setAriaBusyTag(isLoading: boolean): void {\n\t\tthis.elementRef.nativeElement.parentElement?.setAttribute('aria-busy', `${isLoading}`);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxFormsErrorAbstractComponent.html":{"url":"directives/NgxFormsErrorAbstractComponent.html","title":"directive - NgxFormsErrorAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxFormsErrorAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                errorKeys\n                            \n                            \n                                    Public\n                                    Readonly\n                                errors\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:17\n                            \n                        \n                \n                    \n                        The error object provided by the control\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:17\n                        \n                    \n\n            \n                \n                    The error object provided by the control\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        errorKeys\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:13\n                        \n                    \n\n            \n                \n                    An array of error keys that can be rendered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:9\n                        \n                    \n\n            \n                \n                    An array of error messages that can be rendered\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\nimport { ValidationErrors } from '@angular/forms';\n\n@Directive()\nexport class NgxFormsErrorAbstractComponent {\n\t/**\n\t * An array of error messages that can be rendered\n\t */\n\tpublic readonly errors = input.required();\n\t/**\n\t * An array of error keys that can be rendered\n\t */\n\tpublic readonly errorKeys = input.required();\n\t/**\n\t * The error object provided by the control\n\t */\n\tpublic readonly data = input.required();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxFormsErrorConfigurationOptions.html":{"url":"interfaces/NgxFormsErrorConfigurationOptions.html","title":"interface - NgxFormsErrorConfigurationOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxFormsErrorConfigurationOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/interfaces/errors.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for the ngx-errors directive\n errors - A record with the error key and the corresponding message we wish to show\n showWhen - A setting to know when an error has to be shown. Either 'touched' or 'dirty'\n component - An optional component to provide, which will be used to render the error. If not provided,\n                it will render a p-tag with class ngx-forms-error\n show - The amount of errors we wish to show at once. By default, only one error is shown at a time.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            errors\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            show\n                                        \n                                \n                                \n                                        \n                                            showWhen\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errors:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        show\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        show:         NgxFormsErrorShowSettings\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxFormsErrorShowSettings\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showWhen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showWhen:         NgxFormsErrorShowWhenSettings\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxFormsErrorShowWhenSettings\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxFormsErrorAbstractComponent } from '../abstracts';\n\nexport type NgxFormsErrorShowWhenSettings = 'touched' | 'dirty';\nexport type NgxFormsErrorShowSettings = 'all' | number;\n\n/**\n * Configuration for the ngx-errors directive\n *\n *  errors - A record with the error key and the corresponding message we wish to show\n *  showWhen - A setting to know when an error has to be shown. Either 'touched' or 'dirty'\n *  component - An optional component to provide, which will be used to render the error. If not provided,\n * \t\t\t\tit will render a p-tag with class `ngx-forms-error`\n *  show - The amount of errors we wish to show at once. By default, only one error is shown at a time.\n */\nexport interface NgxFormsErrorConfigurationOptions {\n\terrors: Record;\n\tshowWhen: NgxFormsErrorShowWhenSettings;\n\tcomponent?: Type;\n\tshow?: NgxFormsErrorShowSettings;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxFormsErrorsDirective.html":{"url":"directives/NgxFormsErrorsDirective.html","title":"directive - NgxFormsErrorsDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxFormsErrorsDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/directives/errors/errors.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxFormsErrors]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                abstractControl\n                            \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                componentRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                config\n                            \n                            \n                                    Public\n                                    Readonly\n                                control\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Private\n                                errorComponent\n                            \n                            \n                                    Private\n                                errorsElement\n                            \n                            \n                                    Private\n                                    Readonly\n                                formGroupDirective\n                            \n                            \n                                    Private\n                                    Readonly\n                                formNameDirective\n                            \n                            \n                                    Private\n                                    Readonly\n                                onDestroy$\n                            \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject$\n                            \n                            \n                                    Private\n                                    Readonly\n                                renderer\n                            \n                            \n                                    Private\n                                template\n                            \n                            \n                                    Private\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getErrors\n                            \n                            \n                                    Private\n                                handleComponentRender\n                            \n                            \n                                    Private\n                                handleNoComponentFlow\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:80\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrors(data: ValidationErrors)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:230\n                        \n                    \n\n\n            \n                \n                        Returns the errors based on the provided settings\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        ValidationErrors\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe error data we wish to use\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleComponentRender\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleComponentRender(shouldShow: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:156\n                        \n                    \n\n\n            \n                \n                        Renders a provided custom component underneath the input component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                shouldShow\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether the error should be shown\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleNoComponentFlow\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNoComponentFlow(shouldShow: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:193\n                        \n                    \n\n\n            \n                \n                        Renders a p tag underneath the input component when no custom component was provided\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                shouldShow\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether the error should be shown\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:93\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        abstractControl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AbstractControl\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:60\n                        \n                    \n\n            \n                \n                    The AbstractControl we wish to listen to when using the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        componentRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:75\n                        \n                    \n\n            \n                \n                    The ref of the component we wish to add error data to\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxFormsErrorConfigurationOptions\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxFormsErrorsConfigurationToken,\n\t\t{ optional: true }\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(undefined, { alias: \"ngxFormsErrors\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:80\n                        \n                    \n\n            \n                \n                    A reference to a control or a string reference to the control\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxFormsErrorAbstractComponent\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:70\n                        \n                    \n\n            \n                \n                    The component to which the error data is added\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorsElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:65\n                        \n                    \n\n            \n                \n                    The p element we add to the dom when no component is provided\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        formGroupDirective\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroupDirective\n\n                    \n                \n                \n                    \n                        Default value : inject(FormGroupDirective, {\n\t\toptional: true,\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        formNameDirective\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroupName\n\n                    \n                \n                \n                    \n                        Default value : inject(FormGroupName, { optional: true })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Observable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                \n                    \n                        Default value : inject(Renderer2)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        template\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:55\n                        \n                    \n\n            \n                \n                     The actual template of the input element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : inject(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ViewContainerRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  inject,\n  Inject,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  TemplateRef,\n  ViewContainerRef,\n  input\n} from '@angular/core';\nimport {\n\tAbstractControl,\n\tFormGroupDirective,\n\tFormGroupName,\n\tValidationErrors,\n} from '@angular/forms';\nimport { Observable, Subject, combineLatest, startWith, takeUntil, tap } from 'rxjs';\n\nimport { NgxFormsErrorAbstractComponent } from '../../abstracts';\nimport { NgxFormsErrorConfigurationOptions } from '../../interfaces';\nimport { NgxFormsErrorsConfigurationToken } from '../../tokens';\nimport { touchedEventListener } from '../../utils';\n\n@Directive({\n\tselector: '[ngxFormsErrors]',\n\tstandalone: true,\n})\nexport class NgxFormsErrorsDirective implements AfterViewInit, OnDestroy {\n\tprivate readonly formGroupDirective: FormGroupDirective = inject(FormGroupDirective, {\n\t\toptional: true,\n\t});\n\tprivate readonly formNameDirective: FormGroupName = inject(FormGroupName, { optional: true });\n\tprivate readonly config: NgxFormsErrorConfigurationOptions = inject(\n\t\tNgxFormsErrorsConfigurationToken,\n\t\t{ optional: true }\n\t);\n\tprivate readonly viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\tprivate readonly elementRef: ElementRef = inject(ElementRef);\n\tprivate readonly renderer: Renderer2 = inject(Renderer2);\n\tprivate readonly templateRef: TemplateRef = inject(TemplateRef);\n\tprivate readonly cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n\t// Iben: Handle the OnDestroy flow\n\tprivate readonly onDestroySubject$ = new Subject();\n\tprivate readonly onDestroy$ = new Observable();\n\n\t/**\n\t *  The actual template of the input element\n\t */\n\tprivate template: TemplateRef;\n\n\t/**\n\t * The AbstractControl we wish to listen to when using the directive\n\t */\n\tprivate abstractControl: AbstractControl;\n\n\t/**\n\t * The p element we add to the dom when no component is provided\n\t */\n\tprivate errorsElement: any;\n\n\t/**\n\t * The component to which the error data is added\n\t */\n\tprivate errorComponent: NgxFormsErrorAbstractComponent;\n\n\t/**\n\t * The ref of the component we wish to add error data to\n\t */\n\tprivate componentRef: ComponentRef;\n\n\t/**\n\t * A reference to a control or a string reference to the control\n\t */\n\tpublic readonly control = input(undefined, { alias: \"ngxFormsErrors\" });\n\n\tconstructor() {\n\t\t// Iben: Set the current template ref at constructor time so we actually have the provided template (as done in the *ngIf directive)\n\t\tthis.template = this.templateRef;\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Handle the on destroy flow\n\t\tthis.onDestroySubject$.next();\n\t\tthis.onDestroySubject$.complete();\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Render the actual input so that it is always visible\n\t\tthis.viewContainer.clear();\n\t\tthis.viewContainer.createEmbeddedView(this.template);\n\n\t\t// Iben: If no control was provided, we early exit and log an error\n\t\tconst control = this.control();\n  if (!control) {\n\t\t\tconsole.error('NgxForms: No control was provided to the NgxFormsErrorDirective');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the control is a string, we check the parent to find the actual control.\n\t\t// If not, we use the provided control\n\t\tif (typeof control === 'string') {\n\t\t\tthis.abstractControl = this.formGroupDirective\n\t\t\t\t? this.formGroupDirective.form.get(control)\n\t\t\t\t: this.formNameDirective?.control.get(control);\n\t\t} else {\n\t\t\tthis.abstractControl = control;\n\t\t}\n\n\t\t// Iben: If no control was found, we early exit and log an error\n\t\tif (!this.abstractControl) {\n\t\t\tconsole.error('NgxForms: No control was provided to the NgxFormsErrorDirective');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Listen to the value changes, status changes and the touched changes of the control\n\t\tcombineLatest([\n\t\t\tthis.abstractControl.valueChanges.pipe(startWith(this.abstractControl.value)),\n\t\t\ttouchedEventListener(this.abstractControl),\n\t\t\tthis.abstractControl.statusChanges.pipe(startWith(this.abstractControl.status)),\n\t\t])\n\t\t\t.pipe(\n\t\t\t\ttap(([, touched]) => {\n\t\t\t\t\t// Iben: Check whether we should show the error based on the provided config\n\t\t\t\t\tconst shouldShow =\n\t\t\t\t\t\tthis.abstractControl.invalid &&\n\t\t\t\t\t\t(this.config.showWhen === 'touched' ? touched : this.abstractControl.dirty);\n\n\t\t\t\t\t// Iben: Show the error based on whether or not a component was provided\n\t\t\t\t\tif (!this.config.component) {\n\t\t\t\t\t\tthis.handleNoComponentFlow(shouldShow);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.handleComponentRender(shouldShow);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so this works with (nested) OnPush components\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.onDestroy$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Renders a provided custom component underneath the input component\n\t *\n\t * @param shouldShow - Whether the error should be shown\n\t */\n\tprivate handleComponentRender(shouldShow: boolean) {\n\t\t// Iben: If the error should not be shown, we check if there's already an error component and destroy it if needed\n\t\tif (!shouldShow) {\n\t\t\tif (this.errorComponent) {\n\t\t\t\tthis.componentRef.destroy();\n\t\t\t\tthis.componentRef = undefined;\n\t\t\t\tthis.errorComponent = undefined;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If there already is a component, destroy it so it can update correctly\n\t\tif (this.componentRef) {\n\t\t\tthis.componentRef.destroy();\n\t\t\tthis.componentRef = undefined;\n\t\t}\n\n\t\t// Iben: Add the new component to the view\n\t\tthis.componentRef = this.viewContainer.createComponent(\n\t\t\tthis.config.component\n\t\t);\n\t\tthis.errorComponent = this.componentRef.instance;\n\n\t\t// Iben: Set the data of the error component\n\t\tconst { errors, errorKeys, data } = this.getErrors(this.abstractControl.errors);\n\n    this.componentRef.setInput( 'errors',errors );\n    this.componentRef.setInput( 'errorKeys',errorKeys );\n    this.componentRef.setInput( 'data',data );\n\t}\n\n\t/**\n\t * Renders a p tag underneath the input component when no custom component was provided\n\t *\n\t * @param shouldShow - Whether the error should be shown\n\t */\n\tprivate handleNoComponentFlow(shouldShow: boolean) {\n\t\t// Iben: We remove the current errors so that we always have a new element to work with\n\t\tif (this.errorsElement) {\n\t\t\tthis.renderer.removeChild(this.elementRef.nativeElement.parentNode, this.errorsElement);\n\n\t\t\tthis.errorsElement = null;\n\t\t}\n\n\t\t// Iben: Early exit in case there's no error to show\n\t\tif (!shouldShow) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Create a new error paragraph\n\t\tthis.errorsElement = this.renderer.createElement('p');\n\t\tthis.renderer.setAttribute(this.errorsElement, 'class', 'ngx-forms-error');\n\n\t\t// Iben: Set the errors based on the keys\n\t\tthis.renderer.setProperty(\n\t\t\tthis.errorsElement,\n\t\t\t'innerHTML',\n\t\t\tthis.getErrors(this.abstractControl.errors).errors.join(', ')\n\t\t);\n\n\t\t// Iben: insert the paragraph underneath the input component\n\t\tthis.renderer.insertBefore(\n\t\t\tthis.elementRef.nativeElement.parentNode,\n\t\t\tthis.errorsElement,\n\t\t\tthis.renderer.nextSibling(this.elementRef.nativeElement)\n\t\t);\n\t}\n\n\t/**\n\t * Returns the errors based on the provided settings\n\t *\n\t * @param data - The error data we wish to use\n\t */\n\tprivate getErrors(data: ValidationErrors): {\n\t\terrors: string[];\n\t\tdata: ValidationErrors;\n\t\terrorKeys: string[];\n\t} {\n\t\t// Iben: Early exit in case the errors object is null\n\t\tif (!data) {\n\t\t\treturn {\n\t\t\t\terrors: [],\n\t\t\t\tdata: null,\n\t\t\t\terrorKeys: [],\n\t\t\t};\n\t\t}\n\n\t\t// Iben: If the config is set to all, we always show all errors\n\t\tif (this.config.show === 'all') {\n\t\t\treturn {\n\t\t\t\terrors: Object.keys(data).map((key) => this.config.errors[key]),\n\t\t\t\terrorKeys: Object.keys(data),\n\t\t\t\tdata,\n\t\t\t};\n\t\t}\n\n\t\t// Iben: If no limit is provided, we default to a single error\n\t\tconst limit = this.config.show === undefined ? 1 : this.config.show;\n\n\t\t// Iben: Slice the errors based on the provided limit\n\t\treturn {\n\t\t\terrors: Object.keys(data)\n\t\t\t\t.map((key) => this.config.errors[key])\n\t\t\t\t.slice(0, limit),\n\t\t\terrorKeys: Object.keys(data).slice(0, limit),\n\t\t\tdata,\n\t\t};\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxHasCookieConfiguration.html":{"url":"interfaces/NgxHasCookieConfiguration.html","title":"interface - NgxHasCookieConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxHasCookieConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/has-cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            services\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        services\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        services:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgxHasCookieConfiguration {\n\tcategory: string;\n\tservices?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasCookieDirective.html":{"url":"directives/NgxHasCookieDirective.html","title":"directive - NgxHasCookieDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasCookieDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A structural directive that provides a way to render UI elements based on whether a (set of) cookie(s) have been accepted by the user.\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hasCookie]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                component\n                            \n                            \n                                    Private\n                                componentRef\n                            \n                            \n                                    Private\n                                cookies\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Public\n                                hasCookie\n                            \n                            \n                                    Public\n                                hasCookieElse\n                            \n                            \n                                    Private\n                                    Readonly\n                                ngxCookieService\n                            \n                            \n                                    Private\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                renderElseTemplate\n                            \n                            \n                                    Private\n                                renderThenTemplate\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hasCookie\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:70\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        hasCookie\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:64\n                            \n                        \n                \n                    \n                        A cookie or list of cookies the item should have\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:148\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:89\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderElseTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderElseTemplate()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:168\n                        \n                    \n\n\n            \n                \n                        Render the fallbackTemplate or fallBackComponent\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderThenTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderThenTemplate()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:158\n                        \n                    \n\n\n            \n                \n                        Render the template on which the directive is set\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:96\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        component\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Type\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxCookiesFallbackComponentToken,\n\t\t{ optional: true }\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        componentRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:54\n                        \n                    \n\n            \n                \n                    The ref of the component we wish to render as a fallback\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cookies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxHasCookieConfiguration[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:59\n                        \n                    \n\n            \n                \n                    The list of cookies we need to check\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:34\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasCookie\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:64\n                        \n                    \n\n            \n                \n                    A cookie or list of cookies the item should have\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasCookieElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                \n                    \n                        Default value : input>()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:70\n                        \n                    \n\n            \n                \n                    The else template in case the cookie is not accepted\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        ngxCookieService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxCookieService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxCookieService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : inject(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:48\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ViewContainerRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tComponentRef,\n\tDirective,\n\tTemplateRef,\n\tType,\n\tViewContainerRef,\n\tOnDestroy,\n\tinject,\n\teffect,\n\tinput,\n\tInputSignal,\n} from '@angular/core';\nimport { flatten } from 'lodash';\nimport { Subject, tap, takeUntil, combineLatest, map } from 'rxjs';\n\nimport { NgxCookiesFallBackComponent } from '../../abstracts';\nimport { NgxCookieService } from '../../services';\nimport { NgxCookiesFallbackComponentToken } from '../../tokens';\nimport { NgxHasCookieConfiguration } from '../../types';\n\n/**\n * A structural directive that provides a way to render UI elements based on whether a (set of) cookie(s) have been accepted by the user.\n */\n@Directive({\n\tselector: '[hasCookie]',\n\tstandalone: true,\n})\nexport class NgxHasCookieDirective implements OnDestroy {\n\t//TODO: Iben: Replace this with the OnDestroyComponent flow once we have a shared lib\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\tprivate readonly templateRef: TemplateRef = inject(TemplateRef);\n\tprivate viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\tprivate readonly ngxCookieService: NgxCookieService = inject(NgxCookieService);\n\tprivate readonly cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\tprivate readonly component: Type = inject(\n\t\tNgxCookiesFallbackComponentToken,\n\t\t{ optional: true }\n\t);\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\n\t/**\n\t * The ref of the component we wish to render as a fallback\n\t */\n\tprivate componentRef: ComponentRef;\n\n\t/**\n\t * The list of cookies we need to check\n\t */\n\tprivate cookies: NgxHasCookieConfiguration[] = [];\n\n\t/**\n\t * A cookie or list of cookies the item should have\n\t */\n\tpublic hasCookie: InputSignal =\n\t\tinput.required();\n\n\t/**\n\t * The else template in case the cookie is not accepted\n\t */\n\tpublic hasCookieElse: InputSignal> = input>();\n\n\tconstructor() {\n\t\tthis.thenTemplateRef = this.templateRef;\n\n\t\teffect(() => {\n\t\t\tconst value = this.hasCookie();\n\t\t\tthis.cookies = Array.isArray(value) ? value : [value];\n\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tif (this.hasCookieElse()) {\n\t\t\t\tthis.updateView();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tcombineLatest(\n\t\t\t// Iben Check for each cookie if it is accepted\n\t\t\tthis.cookies.map((cookie) => {\n\t\t\t\t// Iben: If no specific services were provided, we can just check the category\n\t\t\t\tif (!cookie.services) {\n\t\t\t\t\treturn this.ngxCookieService.hasAcceptedCategory(cookie.category);\n\t\t\t\t}\n\n\t\t\t\t// Iben: If specific services were provided, we can just check each individual category\n\t\t\t\treturn combineLatest(\n\t\t\t\t\tcookie.services.map((service) => {\n\t\t\t\t\t\treturn this.ngxCookieService.hasAcceptedService(cookie.category, service);\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t})\n\t\t)\n\t\t\t.pipe(\n\t\t\t\tmap((hasCookies) => {\n\t\t\t\t\treturn flatten(hasCookies).every((hasCookie) => hasCookie);\n\t\t\t\t}),\n\t\t\t\ttap((hasCookie) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: If there already is a component, destroy it so it can update correctly\n\t\t\t\t\tif (this.componentRef) {\n\t\t\t\t\t\tthis.componentRef.destroy();\n\t\t\t\t\t\tthis.componentRef = undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\thasCookie ? this.renderThenTemplate() : this.renderElseTemplate();\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n\n\t/**\n\t * Render the template on which the directive is set\n\t */\n\tprivate renderThenTemplate(): void {\n\t\t// Iben: If a thenTemplateRef is provided, render the template\n\t\tif (this.thenTemplateRef) {\n\t\t\tthis.viewContainer.createEmbeddedView(this.thenTemplateRef);\n\t\t}\n\t}\n\n\t/**\n\t * Render the fallbackTemplate or fallBackComponent\n\t */\n\tprivate renderElseTemplate(): void {\n\t\t// Iben: If a custom template ref was provided, render the template and early exit\n\t\tif (this.hasCookieElse()) {\n\t\t\tthis.viewContainer.createEmbeddedView(this.hasCookieElse());\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If a component was provided as a fallback, we render that\n\t\tif (this.component) {\n\t\t\t// Iben: Render the provided component\n\t\t\tthis.componentRef = this.viewContainer.createComponent(\n\t\t\t\tthis.component\n\t\t\t);\n\n\t\t\t// Iben: Set the cookies of the component\n\t\t\tthis.componentRef.setInput('cookies', this.cookies);\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasFeatureDirective.html":{"url":"directives/NgxHasFeatureDirective.html","title":"directive - NgxHasFeatureDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasFeatureDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that will render a part of the template based on whether the required feature(s) are provided.\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxHasFeature]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationService\n                            \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Private\n                                feature\n                            \n                            \n                                    Public\n                                ngxHasFeature\n                            \n                            \n                                    Public\n                                ngxHasFeatureElse\n                            \n                            \n                                    Public\n                                ngxHasFeatureShouldHaveAllFeatures\n                            \n                            \n                                    Public\n                                ngxHasFeatureShouldHaveFeature\n                            \n                            \n                                    Private\n                                shouldHaveAllFeatures\n                            \n                            \n                                    Private\n                                shouldHaveFeature\n                            \n                            \n                                templateRef\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxHasFeature\n                            \n                            \n                                ngxHasFeatureElse\n                            \n                            \n                                ngxHasFeatureShouldHaveAllFeatures\n                            \n                            \n                                ngxHasFeatureShouldHaveFeature\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:95\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxHasFeature\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:80\n                            \n                        \n                \n                    \n                        A feature or list of features the item should have\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasFeatureElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:85\n                            \n                        \n                \n                    \n                        The else template in case the feature is not enabled\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasFeatureShouldHaveAllFeatures\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:95\n                            \n                        \n                \n                    \n                        Whether all features should be enabled, by default this is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasFeatureShouldHaveFeature\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:90\n                            \n                        \n                \n                    \n                        Whether the feature should be enabled, by default this is true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:175\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:116\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:123\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxAuthenticationServiceToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:41\n                        \n                    \n\n            \n                \n                    The provided AuthenticationService implementation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:47\n                        \n                    \n\n            \n                \n                    The provided ChangeDetectorRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:52\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        feature\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FeatureType | FeatureType[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:65\n                        \n                    \n\n            \n                \n                    The (list of) feature(s) we need to check\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:80\n                        \n                    \n\n            \n                \n                    A feature or list of features the item should have\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeatureElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:85\n                        \n                    \n\n            \n                \n                    The else template in case the feature is not enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeatureShouldHaveAllFeatures\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:95\n                        \n                    \n\n            \n                \n                    Whether all features should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeatureShouldHaveFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:90\n                        \n                    \n\n            \n                \n                    Whether the feature should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHaveAllFeatures\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:75\n                        \n                    \n\n            \n                \n                    Whether all features should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHaveFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:70\n                        \n                    \n\n            \n                \n                    Whether the feature should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:33\n                        \n                    \n\n            \n                \n                    The provided template ref\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:57\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:37\n                        \n                    \n\n            \n                \n                    The provided ViewContainerRef\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A directive that will render a part of the template based on whether the required feature(s) are provided.\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n\n//TODO: Iben: Implement Cypress/PlayWright tests\n@Directive({\n\tselector: '[ngxHasFeature]',\n})\nexport class NgxHasFeatureDirective implements OnDestroy {\n\t/**\n\t * The provided template ref\n\t */\n\ttemplateRef = inject>(TemplateRef);\n\t/**\n\t * The provided ViewContainerRef\n\t */\n\tprivate viewContainer = inject(ViewContainerRef);\n\t/**\n\t * The provided AuthenticationService implementation\n\t */\n\tprivate readonly authenticationService = inject(\n\t\tNgxAuthenticationServiceToken\n\t);\n\t/**\n\t * The provided ChangeDetectorRef\n\t */\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * The (list of) feature(s) we need to check\n\t */\n\tprivate feature: FeatureType | FeatureType[] = [];\n\n\t/**\n\t * Whether the feature should be enabled\n\t */\n\tprivate shouldHaveFeature: boolean = true;\n\n\t/**\n\t * Whether all features should be enabled\n\t */\n\tprivate shouldHaveAllFeatures: boolean = true;\n\n\t/**\n\t * A feature or list of features the item should have\n\t */\n\tpublic ngxHasFeature: InputSignal = input();\n\n\t/**\n\t * The else template in case the feature is not enabled\n\t */\n\tpublic ngxHasFeatureElse: InputSignal> = input();\n\n\t/**\n\t * Whether the feature should be enabled, by default this is true\n\t */\n\tpublic ngxHasFeatureShouldHaveFeature: InputSignal = input();\n\n\t/**\n\t * Whether all features should be enabled, by default this is true\n\t */\n\tpublic ngxHasFeatureShouldHaveAllFeatures: InputSignal = input();\n\n\tconstructor() {\n\t\tconst templateRef = this.templateRef;\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tthis.shouldHaveAllFeatures = this.ngxHasFeatureShouldHaveAllFeatures();\n\t\t\tthis.shouldHaveFeature = this.ngxHasFeatureShouldHaveFeature();\n\t\t\tthis.feature = this.ngxHasFeature();\n\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxHasFeatureElse();\n\t\t\tthis.elseViewRef = null;\n\t\t});\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.authenticationService\n\t\t\t.hasFeature(convertToArray(this.feature), this.shouldHaveAllFeatures)\n\t\t\t.pipe(\n\t\t\t\ttap((hasFeature) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tconst shouldRender: boolean = this.shouldHaveFeature ? hasFeature : !hasFeature;\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\tif (shouldRender) {\n\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\tthis.elseViewRef = null;\n\n\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxHasFeaturePipe.html":{"url":"pipes/NgxHasFeaturePipe.html","title":"pipe - NgxHasFeaturePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxHasFeaturePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that returns whether a (list of) feature(s) has been provided\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxHasFeature\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:88\n                        \n                    \n\n\n            \n                \n                        Dispose of the feature observable when existing\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribe(observable: Observable)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:64\n                        \n                    \n\n\n            \n                \n                        Handles the changeDetection, latest value and dispose of the hasFeature observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                observable\n                                            \n                                                        Observable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hasFeature observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(feature: FeatureType | FeatureType[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:53\n                        \n                    \n\n\n            \n                \n                        Returns whether or not a feature is provided for the environment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                feature\n                                            \n                                                        FeatureType | FeatureType[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided feature\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxAuthenticationServiceToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        changeDetectorRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef | null\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:31\n                        \n                    \n\n            \n                \n                    Instance of the change detector ref, implemented like this according to the async pipe implementation\nhttps://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:22\n                        \n                    \n\n            \n                \n                    Subject to hold the destroyed state of the current observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:26\n                        \n                    \n\n            \n                \n                    The latest value of the Observable, whether or not the feature is provided\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform, inject } from '@angular/core';\nimport { Observable, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A pipe that returns whether a (list of) feature(s) has been provided\n */\n@Pipe({\n\tname: 'ngxHasFeature',\n\tpure: false,\n})\nexport class NgxHasFeaturePipe implements PipeTransform, OnDestroy {\n\tprivate readonly authenticationService = inject(NgxAuthenticationServiceToken);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * Subject to hold the destroyed state of the current observable\n\t */\n\tprivate destroyed$: Subject;\n\t/**\n\t * The latest value of the Observable, whether or not the feature is provided\n\t */\n\tprivate hasFeature: boolean;\n\t/**\n\t * Instance of the change detector ref, implemented like this according to the async pipe implementation\n\t * https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\t */\n\tprivate changeDetectorRef: ChangeDetectorRef | null;\n\n\tconstructor() {\n\t\tconst cdRef = this.cdRef;\n\n\t\t// Iben: Use instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = cdRef;\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Call the dispose when the component is destroyed so we have no running subscriptions left\n\t\tthis.dispose();\n\n\t\t// Iben: Clear instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = null;\n\t}\n\n\t/**\n\t * Returns whether or not a feature is provided for the environment\n\t *\n\t * @param feature - The provided feature\n\t */\n\tpublic transform(feature: FeatureType | FeatureType[]): boolean {\n\t\tthis.subscribe(this.authenticationService.hasFeature(convertToArray(feature)));\n\n\t\treturn this.hasFeature;\n\t}\n\n\t/**\n\t * Handles the changeDetection, latest value and dispose of the hasFeature observable\n\t *\n\t * @param observable - The hasFeature observable\n\t */\n\tprivate subscribe(observable: Observable): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new destroyed subject to handle the destruction when needed\n\t\tthis.destroyed$ = new Subject();\n\n\t\tobservable\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: Update the latest value when it a new value is provided\n\t\t\t\t\tthis.hasFeature = value;\n\n\t\t\t\t\t// Iben: Mark the component as ready for check\n\t\t\t\t\tthis.changeDetectorRef.markForCheck();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose of the feature observable when existing\n\t */\n\tprivate dispose(): void {\n\t\t// Iben: In case there's a destroyed, we have an observable and we destroy the subscription and reset the observable\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasFocusDirective.html":{"url":"directives/NgxHasFocusDirective.html","title":"directive - NgxHasFocusDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasFocusDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract directive used as a base to handle focussed base actions\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                isFocussedOn\n                            \n                            \n                                    \n                                removeFocus\n                            \n                            \n                                    \n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:25\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:18\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:34\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isFocussedOn\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFocussedOn()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:43\n                        \n                    \n\n\n            \n                \n                        Returns when the item has been focussed on\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:25\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:18\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:13\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener } from '@angular/core';\n\n/**\n * An abstract directive used as a base to handle focussed base actions\n */\n@Directive({\n\tstandalone: true,\n})\nexport abstract class NgxHasFocusDirective {\n\t/**\n\t * Whether the current element is focussed\n\t */\n\tprotected hasFocus: boolean = false;\n\n\t/**\n\t * Set the hasFocus flag\n\t */\n\t@HostListener('focus') setFocus() {\n\t\tthis.hasFocus = true;\n\t}\n\n\t/**\n\t * Remove the hasFocus flag\n\t */\n\t@HostListener('blur') removeFocus() {\n\t\tthis.hasFocus = false;\n\t}\n\n\t/**\n\t * Execute an action when the element has focussed\n\t *\n\t * @param action - The provided action\n\t */\n\tpublic handleWhenFocussed(action: () => void): void {\n\t\tif (this.hasFocus) {\n\t\t\taction();\n\t\t}\n\t}\n\n\t/**\n   * Returns when the item has been focussed on\n   */\n  public isFocussedOn(): boolean {\n\t\treturn this.hasFocus;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{"url":"directives/NgxHasFocusDragAndDropAbstractDirective.html","title":"directive - NgxHasFocusDragAndDropAbstractDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasFocusDragAndDropAbstractDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract directive used as a base to handle focussed base actions\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                    Optional\n                                onBlur\n                            \n                            \n                                    Public\n                                    Optional\n                                onFocus\n                            \n                            \n                                    \n                                    Public\n                                removeFocus\n                            \n                            \n                                    \n                                    Public\n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:31\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:20\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:54\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onBlur\n                        \n                    \n                \n            \n            \n                \n                        \n                    onBlur()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    onFocus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:31\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:20\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject( ElementRef )\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:15\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, inject } from '@angular/core';\n\n//TODO: Iben: Move this copy to a shared lib once we have figured out how to handle that.\n\n/**\n * An abstract directive used as a base to handle focussed base actions\n */\n@Directive({\n\tstandalone: true,\n})\nexport abstract class NgxHasFocusDragAndDropAbstractDirective {\n\t/**\n\t * Whether the current element is focussed\n\t */\n\tprotected hasFocus: boolean = false;\n\n\t/**\n\t * Set the hasFocus flag\n\t */\n\t@HostListener('focus') public setFocus(): void {\n\t\tthis.hasFocus = true;\n\n\t\tif (this.onFocus) {\n\t\t\tthis.onFocus();\n\t\t}\n\t}\n\n\t/**\n\t * Remove the hasFocus flag\n\t */\n\t@HostListener('blur') public removeFocus() {\n\t\tthis.hasFocus = false;\n\n\t\tif (this.onBlur) {\n\t\t\tthis.onBlur();\n\t\t}\n\t}\n\n  public readonly elementRef: ElementRef = inject( ElementRef );\n\n\tpublic focus(): void {\n\t\tthis.elementRef.nativeElement.focus();\n\t}\n\n\tpublic onBlur?(): void;\n\n\tpublic onFocus?(): void;\n\n\t/**\n\t * Execute an action when the element has focussed\n\t *\n\t * @param action - The provided action\n\t */\n\tpublic handleWhenFocussed(action: () => void): void {\n\t\tif (this.hasFocus) {\n\t\t\taction();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasPermissionDirective.html":{"url":"directives/NgxHasPermissionDirective.html","title":"directive - NgxHasPermissionDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasPermissionDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that will render a part of the template based on whether the required permissions(s) are provided.\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxHasPermission]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationService\n                            \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Public\n                                ngxHasPermission\n                            \n                            \n                                    Public\n                                ngxHasPermissionElse\n                            \n                            \n                                    Public\n                                ngxHasPermissionShouldHaveAllPermissions\n                            \n                            \n                                    Public\n                                ngxHasPermissionShouldHavePermission\n                            \n                            \n                                    Private\n                                permission\n                            \n                            \n                                    Private\n                                shouldHaveAllPermissions\n                            \n                            \n                                    Private\n                                shouldHavePermission\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxHasPermission\n                            \n                            \n                                ngxHasPermissionElse\n                            \n                            \n                                ngxHasPermissionShouldHaveAllPermissions\n                            \n                            \n                                ngxHasPermissionShouldHavePermission\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:82\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxHasPermission\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:67\n                            \n                        \n                \n                    \n                        A permission or list of permissions the item should have\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasPermissionElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:72\n                            \n                        \n                \n                    \n                        The else template in case the permission is not enabled\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasPermissionShouldHaveAllPermissions\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:82\n                            \n                        \n                \n                    \n                        Whether all permissions should be enabled, by default this is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasPermissionShouldHavePermission\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:77\n                            \n                        \n                \n                    \n                        Whether the permission should be enabled, by default this is true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:167\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:103\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:110\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxAuthenticationServiceToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:39\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:67\n                        \n                    \n\n            \n                \n                    A permission or list of permissions the item should have\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermissionElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:72\n                        \n                    \n\n            \n                \n                    The else template in case the permission is not enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermissionShouldHaveAllPermissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:82\n                        \n                    \n\n            \n                \n                    Whether all permissions should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermissionShouldHavePermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:77\n                        \n                    \n\n            \n                \n                    Whether the permission should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        permission\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PermissionType | PermissionType[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:52\n                        \n                    \n\n            \n                \n                    The (list of) permission(s) we need to check\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHaveAllPermissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:62\n                        \n                    \n\n            \n                \n                    Whether all permissions should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHavePermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:57\n                        \n                    \n\n            \n                \n                    Whether the permission should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:44\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A directive that will render a part of the template based on whether the required permissions(s) are provided.\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n\n//TODO: Iben: Implement Cypress/PlayWright tests\n@Directive({\n\tselector: '[ngxHasPermission]',\n})\nexport class NgxHasPermissionDirective implements OnDestroy {\n\tprivate viewContainer = inject(ViewContainerRef);\n\tprivate readonly authenticationService = inject(\n\t\tNgxAuthenticationServiceToken\n\t);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * The (list of) permission(s) we need to check\n\t */\n\tprivate permission: PermissionType | PermissionType[] = [];\n\n\t/**\n\t * Whether the permission should be enabled\n\t */\n\tprivate shouldHavePermission: boolean = true;\n\n\t/**\n\t * Whether all permissions should be enabled\n\t */\n\tprivate shouldHaveAllPermissions: boolean = true;\n\n\t/**\n\t * A permission or list of permissions the item should have\n\t */\n\tpublic ngxHasPermission: InputSignal = input();\n\n\t/**\n\t * The else template in case the permission is not enabled\n\t */\n\tpublic ngxHasPermissionElse: InputSignal> = input();\n\n\t/**\n\t * Whether the permission should be enabled, by default this is true\n\t */\n\tpublic ngxHasPermissionShouldHavePermission: InputSignal = input();\n\n\t/**\n\t * Whether all permissions should be enabled, by default this is true\n\t */\n\tpublic ngxHasPermissionShouldHaveAllPermissions: InputSignal = input();\n\n\tconstructor() {\n\t\tconst templateRef = inject>(TemplateRef);\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tthis.shouldHaveAllPermissions = this.ngxHasPermissionShouldHaveAllPermissions();\n\t\t\tthis.shouldHavePermission = this.ngxHasPermissionShouldHavePermission();\n\t\t\tthis.permission = this.ngxHasPermission();\n\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxHasPermissionElse();\n\t\t\tthis.elseViewRef = null;\n\t\t});\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.authenticationService\n\t\t\t.hasPermission(\n\t\t\t\tconvertToArray(this.permission),\n\t\t\t\tthis.shouldHaveAllPermissions\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\ttap((hasPermission) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tconst shouldRender: boolean = this.shouldHavePermission\n\t\t\t\t\t\t? hasPermission\n\t\t\t\t\t\t: !hasPermission;\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\tif (shouldRender) {\n\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\tthis.elseViewRef = null;\n\n\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxHasPermissionPipe.html":{"url":"pipes/NgxHasPermissionPipe.html","title":"pipe - NgxHasPermissionPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxHasPermissionPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that returns whether a (list of) permission(s) has been provided\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxHasPermission\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:92\n                        \n                    \n\n\n            \n                \n                        Dispose of the permission observable when existing\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribe(observable: Observable)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:68\n                        \n                    \n\n\n            \n                \n                        Handles the changeDetection, latest value and dispose of the hasPermission observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                observable\n                                            \n                                                        Observable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hasPermission observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(permission: PermissionType | PermissionType[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:55\n                        \n                    \n\n\n            \n                \n                        Returns whether or not a permission is provided for the environment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                permission\n                                            \n                                                        PermissionType | PermissionType[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided permission\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxAuthenticationServiceToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        changeDetectorRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef | null\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:33\n                        \n                    \n\n            \n                \n                    Instance of the change detector ref, implemented like this according to the async pipe implementation\nhttps://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:24\n                        \n                    \n\n            \n                \n                    Subject to hold the destroyed state of the current observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasPermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:28\n                        \n                    \n\n            \n                \n                    The latest value of the Observable, whether or not the permission is provided\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform, inject } from '@angular/core';\nimport { Observable, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A pipe that returns whether a (list of) permission(s) has been provided\n */\n@Pipe({\n\tname: 'ngxHasPermission',\n\tpure: false,\n})\nexport class NgxHasPermissionPipe\n\timplements PipeTransform, OnDestroy\n{\n\tprivate readonly authenticationService = inject(NgxAuthenticationServiceToken);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * Subject to hold the destroyed state of the current observable\n\t */\n\tprivate destroyed$: Subject;\n\t/**\n\t * The latest value of the Observable, whether or not the permission is provided\n\t */\n\tprivate hasPermission: boolean;\n\t/**\n\t * Instance of the change detector ref, implemented like this according to the async pipe implementation\n\t * https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\t */\n\tprivate changeDetectorRef: ChangeDetectorRef | null;\n\n\tconstructor() {\n\t\tconst cdRef = this.cdRef;\n\n\t\t// Iben: Use instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = cdRef;\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Call the dispose when the component is destroyed so we have no running subscriptions left\n\t\tthis.dispose();\n\n\t\t// Iben: Clear instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = null;\n\t}\n\n\t/**\n\t * Returns whether or not a permission is provided for the environment\n\t *\n\t * @param permission - The provided permission\n\t */\n\tpublic transform(permission: PermissionType | PermissionType[]): boolean {\n\t\tthis.subscribe(\n\t\t\tthis.authenticationService.hasPermission(convertToArray(permission))\n\t\t);\n\n\t\treturn this.hasPermission;\n\t}\n\n\t/**\n\t * Handles the changeDetection, latest value and dispose of the hasPermission observable\n\t *\n\t * @param observable - The hasPermission observable\n\t */\n\tprivate subscribe(observable: Observable): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new destroyed subject to handle the destruction when needed\n\t\tthis.destroyed$ = new Subject();\n\n\t\tobservable\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: Update the latest value when it a new value is provided\n\t\t\t\t\tthis.hasPermission = value;\n\n\t\t\t\t\t// Iben: Mark the component as ready for check\n\t\t\t\t\tthis.changeDetectorRef.markForCheck();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose of the permission observable when existing\n\t */\n\tprivate dispose(): void {\n\t\t// Iben: In case there's a destroyed, we have an observable and we destroy the subscription and reset the observable\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxI18nAbstractService.html":{"url":"classes/NgxI18nAbstractService.html","title":"class - NgxI18nAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxI18nAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/abstracts/i18n-service.abstract.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service used to fetch the current language\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/abstracts/i18n-service.abstract.ts:9\n                                \n                            \n                    \n                        \n                                A method to return the current language\n\n\n                                \n                                    Returns :     Language\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export abstract class NgxI18nAbstractService {\n\n\t/**\n   * A method to return the current language\n   */\n  public abstract get currentLanguage(): Language;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxI18nConfiguration.html":{"url":"interfaces/NgxI18nConfiguration.html","title":"interface - NgxI18nConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxI18nConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/i18n.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration we can pass to the translation system\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            availableLanguages\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cacheBust\n                                        \n                                \n                                \n                                        \n                                            defaultAssetPaths\n                                        \n                                \n                                \n                                        \n                                            defaultLanguage\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            languageRouteParam\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        availableLanguages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        availableLanguages:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A list of languages the application has translations for\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cacheBust\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheBust:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The cache busting parameter to append to the translation file requests.\nThis can be useful when you want to force the browser to fetch the latest\nversion of the translation files by appending this value to the v query\nparameter.\nWhen not provided, no query parameter will be added to the request.\nExample :`?v=1` when `cacheBust: '' + 1`\n`?v=1.0.0` when `cacheBust: '1.0.0'`\n`?v=1743428073628` when `cacheBust: String(Date.now())`\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultAssetPaths\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultAssetPaths:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A list of default translation files we want to load in if we don't provide a custom loader\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultLanguage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultLanguage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The default language the application should be in\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        languageRouteParam\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        languageRouteParam:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The param name we use for the language, by default this is language\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface NgxI18nConfiguration {\n\t/**\n\t * The default language the application should be in\n\t */\n\tdefaultLanguage: string;\n\t/**\n\t * A list of languages the application has translations for\n\t */\n\tavailableLanguages?: string[];\n\t/**\n\t * A list of default translation files we want to load in if we don't provide a custom loader\n\t */\n\tdefaultAssetPaths: string[];\n\t/**\n\t * The param name we use for the language, by default this is `language`\n\t */\n\tlanguageRouteParam?: string;\n\t/**\n\t * The cache busting parameter to append to the translation file requests.\n\t * This can be useful when you want to force the browser to fetch the latest\n\t * version of the translation files by appending this value to the `v` query\n\t * parameter.\n\t *\n\t * When not provided, no query parameter will be added to the request.\n\t *\n\t * @example\n\t * `?v=1` when `cacheBust: '' + 1`\n\t * `?v=1.0.0` when `cacheBust: '1.0.0'`\n\t * `?v=1743428073628` when `cacheBust: String(Date.now())`\n\t */\n\tcacheBust?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxI18nEmptyComponent.html":{"url":"components/NgxI18nEmptyComponent.html","title":"component - NgxI18nEmptyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxI18nEmptyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/i18n/src/lib/components/empty-component/empty.component.ts\n\n\n\n    \n        Description\n    \n    \n        This is an empty dummy component that can be used in combination with the NgxI18nSetLanguageGuard when needed\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-i18n-empty\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/**\n * This is an empty dummy component that can be used in combination with the NgxI18nSetLanguageGuard when needed\n */\n@Component({\n\tselector: 'ngx-i18n-empty',\n\tstandalone: true,\n\ttemplate: '',\n})\nexport class NgxI18nEmptyComponent {}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxI18nEmptyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nLoadingService.html":{"url":"injectables/NgxI18nLoadingService.html","title":"injectable - NgxI18nLoadingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nLoadingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that holds whether there currently are translation files being loaded into the application\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                translationLoaderActionsSubject$\n                            \n                            \n                                    Public\n                                    Readonly\n                                translationsFailed$\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationsFailedSubject$\n                            \n                            \n                                    Public\n                                    Readonly\n                                translationsLoaded$\n                            \n                            \n                                    Private\n                                translationsLoading\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationsSubject$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLoadedTranslations\n                            \n                            \n                                    Public\n                                dispatchTranslationLoaderAction\n                            \n                            \n                                    Public\n                                getTranslations\n                            \n                            \n                                    Public\n                                loadTranslations\n                            \n                            \n                                    Public\n                                markTranslationsLoadedAsFailed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addLoadedTranslations\n                        \n                    \n                \n            \n            \n                \n                        \n                    addLoadedTranslations(translations: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Add loaded translations to the loaded translations record\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                translations\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe newly loaded translations\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dispatchTranslationLoaderAction\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispatchTranslationLoaderAction(action: TranslationLoaderActionEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Dispatch the loading state of a set of translations\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            TranslationLoaderActionEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe loading state of a set of translations\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslations()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Fetches all the currently loaded translations\n\n\n                        \n                            Returns :     Record\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loadTranslations\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadTranslations(paths: string, observable: Observable<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Groups all the requests for a series of paths and ensures we only have a single observable to subscribe to\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paths\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe paths of we're loading translations for\n\n\n                                            \n                                        \n                                        \n                                                observable\n                                            \n                                                        Observable<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe translations loading observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markTranslationsLoadedAsFailed\n                        \n                    \n                \n            \n            \n                \n                        \n                    markTranslationsLoadedAsFailed()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Mark the loading of the translations as failed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationLoaderActionsSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        translationsFailed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.translationsFailedSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationsFailedSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        translationsLoaded$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.translationLoaderActionsSubject$.pipe(\n\t\t// Iben: Hold a list of all actions and only add those that have a loading state\n\t\t// If the action is not loading, remove it from the actions array\n\t\tscan((actions: string[], action: TranslationLoaderActionEntity) => {\n\t\t\treturn action.state === 'LOADING'\n\t\t\t\t? actions.concat(action.id)\n\t\t\t\t: actions.filter((actionFromResult) => actionFromResult !== action.id);\n\t\t}, []),\n\t\t// Iben: If no more actions are loading, we return true\n\t\tmap((result) => result.length === 0)\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        translationsLoading\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record>\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationsSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject>({})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:21\n                        \n                    \n\n            \n                \n                    A subject to store all the currently loaded translation files in\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { scan, map, shareReplay } from 'rxjs/operators';\n\nimport { TranslationLoaderActionEntity } from './i18n-loading.types';\n\n/**\n * A service that holds whether there currently are translation files being loaded into the application\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxI18nLoadingService {\n\t// Iben: Keep a subject to store all the translation loading actions\n\tprivate readonly translationLoaderActionsSubject$ =\n\t\tnew Subject();\n\n\t/**\n\t * A subject to store all the currently loaded translation files in\n\t */\n\tprivate readonly translationsSubject$ = new BehaviorSubject>({});\n\n\tprivate readonly translationsFailedSubject$ = new BehaviorSubject(false);\n\n\tprivate translationsLoading: Record> = {};\n\n\t// Iben: Check if all translations actions have completed\n\tpublic readonly translationsLoaded$ = this.translationLoaderActionsSubject$.pipe(\n\t\t// Iben: Hold a list of all actions and only add those that have a loading state\n\t\t// If the action is not loading, remove it from the actions array\n\t\tscan((actions: string[], action: TranslationLoaderActionEntity) => {\n\t\t\treturn action.state === 'LOADING'\n\t\t\t\t? actions.concat(action.id)\n\t\t\t\t: actions.filter((actionFromResult) => actionFromResult !== action.id);\n\t\t}, []),\n\t\t// Iben: If no more actions are loading, we return true\n\t\tmap((result) => result.length === 0)\n\t);\n\n\tpublic readonly translationsFailed$: Observable =\n\t\tthis.translationsFailedSubject$.asObservable();\n\n\t/**\n\t * Dispatch the loading state of a set of translations\n\t *\n\t * @param action - The loading state of a set of translations\n\t */\n\tpublic dispatchTranslationLoaderAction(action: TranslationLoaderActionEntity) {\n\t\tthis.translationLoaderActionsSubject$.next(action);\n\t}\n\n\t/**\n\t * Add loaded translations to the loaded translations record\n\t *\n\t * @param translations - The newly loaded translations\n\t */\n\tpublic addLoadedTranslations(translations: Record) {\n\t\tthis.translationsSubject$.next({\n\t\t\t...this.translationsSubject$.getValue(),\n\t\t\t...translations,\n\t\t});\n\t}\n\n\t/**\n\t * Fetches all the currently loaded translations\n\t */\n\tpublic getTranslations(): Record {\n\t\treturn this.translationsSubject$.getValue();\n\t}\n\n\t/**\n\t * Groups all the requests for a series of paths and ensures we only have a single observable to subscribe to\n\t *\n\t * @param paths - The paths of we're loading translations for\n\t * @param observable - The translations loading observable\n\t */\n\tpublic loadTranslations(paths: string, observable: Observable) {\n\t\t// Iben: If loading of the translations has not been added to the array yet, we set it so we return a single observable\n\t\tif (!this.translationsLoading[paths]) {\n\t\t\t// Iben: Add shareReplay so the result is passed over each subscription\n\t\t\tthis.translationsLoading[paths] = observable.pipe(shareReplay());\n\t\t}\n\n\t\t// Iben: Return the observable\n\t\treturn this.translationsLoading[paths];\n\t}\n\n\t/**\n\t * Mark the loading of the translations as failed\n\t */\n\tpublic markTranslationsLoadedAsFailed() {\n\t\tconsole.error('Something went wrong whilst fetching the translations.');\n\n\t\tthis.translationsFailedSubject$.next(false);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxI18nModule.html":{"url":"modules/NgxI18nModule.html","title":"module - NgxI18nModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxI18nModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/i18n.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forChild\n                        \n                    \n                \n            \n            \n                \n                        \n                    forChild(translationLoader?: (http?: HttpBackend) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/i18n.module.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                translationLoader\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ModuleWithProviders\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot(config: NgxI18nConfiguration, translationLoader?: (http?: HttpBackend) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/i18n.module.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            NgxI18nConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                translationLoader\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ModuleWithProviders\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { HttpBackend } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule, inject } from '@angular/core';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\n\nimport { NgxI18nConfiguration } from './i18n.types';\nimport { NgxI18nMultiTranslationHttpLoader } from './loader';\nimport { NgxI18nTranslationLoaderResolver } from './resolvers';\nimport { NgxI18nService } from './services';\nimport { NgxI18nConfigurationToken } from './tokens/i18n.token';\n\n/**\n * A fallback loader in case no translation loader has been provided\n *\n * @param http - The HttpBackend\n */\nfunction FallBackTranslationLoader(http: HttpBackend) {\n\t// Iben: Inject the config\n\tconst config = inject(NgxI18nConfigurationToken);\n\n\t// Iben: Return a default loader\n\treturn new NgxI18nMultiTranslationHttpLoader(http, config.defaultAssetPaths || []);\n}\n\n@NgModule({\n\timports: [TranslateModule],\n\texports: [TranslateModule],\n})\nexport class NgxI18nModule {\n\tpublic static forRoot(\n\t\tconfig: NgxI18nConfiguration,\n\t\ttranslationLoader?: (http: HttpBackend) => NgxI18nMultiTranslationHttpLoader\n\t): ModuleWithProviders {\n\t\tconst providers = [\n\t\t\t...TranslateModule.forRoot({\n\t\t\t\tloader: {\n\t\t\t\t\tprovide: TranslateLoader,\n\t\t\t\t\tuseFactory: translationLoader || FallBackTranslationLoader,\n\t\t\t\t\tdeps: [HttpBackend],\n\t\t\t\t},\n\t\t\t\tuseDefaultLang: true,\n\t\t\t}).providers,\n\t\t\t{\n\t\t\t\tprovide: NgxI18nConfigurationToken,\n\t\t\t\tuseValue: config,\n\t\t\t},\n\t\t\tNgxI18nService,\n\t\t];\n\n\t\treturn {\n\t\t\tngModule: NgxI18nModule,\n\t\t\tproviders,\n\t\t};\n\t}\n\n\tpublic static forChild(\n\t\ttranslationLoader?: (http: HttpBackend) => NgxI18nMultiTranslationHttpLoader\n\t): ModuleWithProviders {\n\t\tconst providers = [\n\t\t\t...TranslateModule.forChild({\n\t\t\t\tloader: {\n\t\t\t\t\tprovide: TranslateLoader,\n\t\t\t\t\tuseFactory: translationLoader || FallBackTranslationLoader,\n\t\t\t\t\tdeps: [HttpBackend],\n\t\t\t\t},\n\t\t\t\tisolate: true,\n\t\t\t}).providers,\n\t\t\tNgxI18nService,\n\t\t\tNgxI18nTranslationLoaderResolver,\n\t\t];\n\n\t\treturn {\n\t\t\tngModule: NgxI18nModule,\n\t\t\tproviders,\n\t\t};\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxI18nMultiTranslationHttpLoader.html":{"url":"classes/NgxI18nMultiTranslationHttpLoader.html","title":"class - NgxI18nMultiTranslationHttpLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxI18nMultiTranslationHttpLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts\n        \n\n\n            \n                Description\n            \n            \n                A loader that allows to load in multiple translation JSON files at the same time\n\n            \n\n\n            \n                Implements\n            \n            \n                        TranslateLoader\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                config\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationLoadingService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getTranslation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpBackend: HttpBackend, translationsPaths: string[])\n                    \n                \n                        \n                            \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpBackend\n                                                  \n                                                        \n                                                                    HttpBackend\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        translationsPaths\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject( NgxI18nConfigurationToken )\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:25\n                        \n                    \n\n            \n                \n                    The configuration for the NgxI18nModule.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationLoadingService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nLoadingService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nLoadingService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:19\n                        \n                    \n\n            \n                \n                    The instance of the translation loading service\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslation(lang: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:37\n                        \n                    \n\n\n            \n                \n                        Fetches the provided translation files and saves them to the translation store\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                lang\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currently used language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpBackend, HttpClient } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { TranslateLoader } from '@ngx-translate/core';\nimport { deepmerge } from 'deepmerge-ts';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { NgxI18nConfiguration } from '../../i18n.types';\nimport { NgxI18nLoadingService } from '../../services';\nimport { NgxI18nConfigurationToken } from '../../tokens';\n\n/**\n * A loader that allows to load in multiple translation JSON files at the same time\n */\nexport class NgxI18nMultiTranslationHttpLoader implements TranslateLoader {\n\t/**\n   * The instance of the translation loading service\n   */\n  private readonly translationLoadingService: NgxI18nLoadingService =\n\t\tinject(NgxI18nLoadingService);\n\n\t/**\n\t * The configuration for the NgxI18nModule.\n\t */\n  private readonly config: NgxI18nConfiguration = inject( NgxI18nConfigurationToken );\n\n\tconstructor(\n\t\tprivate readonly httpBackend: HttpBackend,\n\t\tprivate readonly translationsPaths: string[]\n\t) {}\n\n\t/**\n\t * Fetches the provided translation files and saves them to the translation store\n\t *\n\t * @param  lang - The currently used language\n\t */\n\tpublic getTranslation(lang: string): Observable {\n\t\t// Iben: Fetch the currently existing translations, so we can see if they already exist in the loading service\n\t\tconst availableTranslations = this.translationLoadingService.getTranslations();\n\n\t\t// Iben: Convert the translation paths to a combination of calls to get the translations or from the translations store\n\t\tconst requestedTranslations = this.translationsPaths.map((path) => {\n\t\t\tconst fromStore = Boolean(availableTranslations[path]);\n\t\t\tif (fromStore) {\n\t\t\t\t// Iben: If the translations came from the store, mark them as such\n\t\t\t\treturn of({\n\t\t\t\t\ttranslations: availableTranslations[path],\n\t\t\t\t\tfromStore,\n\t\t\t\t\tpath,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Iben: If the translations aren't available in the store, we fetch them from the server\n\t\t\t\t// Wouter: When provided, add a cache busting param so that each request is fetched from the server instead of the browser cache\n\t\t\t\tconst fetchPath = `${path}${lang}.json${this.config.cacheBust ? '?v=' + this.config.cacheBust : ''}`;\n\n\t\t\t\treturn new HttpClient(this.httpBackend).get(fetchPath).pipe(\n\t\t\t\t\t// Iben: Map this to an object so we can track which results corresponds with which path\n\t\t\t\t\tmap((translations) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttranslations,\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\tfromStore,\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t\t// Iben: In case the translation is not loaded, we log an error\n\t\t\t\t\tcatchError((res) => {\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t'Something went wrong for the following translation file:',\n\t\t\t\t\t\t\tfetchPath\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconsole.error(res.message);\n\n\t\t\t\t\t\t// Iben: If we get a not-authorized error from the server, we redirect to the resources not found page\n\t\t\t\t\t\tif (res.status === 401) {\n\t\t\t\t\t\t\tthis.translationLoadingService.markTranslationsLoadedAsFailed();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Iben: Return a translation loaded object so the translations service isn't broken\n\t\t\t\t\t\treturn of({\n\t\t\t\t\t\t\ttranslations: {},\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\tfromStore,\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Join all the requests and merge them\n\t\treturn this.translationLoadingService.loadTranslations(\n\t\t\tthis.translationsPaths.toString(),\n\t\t\tforkJoin(requestedTranslations).pipe(\n\t\t\t\ttap((translations) => {\n\t\t\t\t\t// Iben: Filter out the newly requested translations, and add them to the loaded translations store\n\t\t\t\t\tthis.translationLoadingService.addLoadedTranslations(\n\t\t\t\t\t\ttranslations\n\t\t\t\t\t\t\t.filter((translation) => !translation.fromStore)\n\t\t\t\t\t\t\t.reduce((previous, next) => {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t...previous,\n\t\t\t\t\t\t\t\t\t[next.path]: next.translations,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}, {})\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t\t// Iben: Merge all the translations in a single object for the translation service\n\t\t\t\tmap((response) => deepmerge(...response.map((item) => item.translations)))\n\t\t\t)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nRootService.html":{"url":"injectables/NgxI18nRootService.html","title":"injectable - NgxI18nRootService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nRootService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The single root instance of the translation service, in charge of holding the current language, the available languages and allows for the language to be changed.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                availableLanguages$\n                            \n                            \n                                    Private\n                                    Readonly\n                                availableLanguagesSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentLanguage$\n                            \n                            \n                                    Private\n                                    Readonly\n                                currentLanguageSubject\n                            \n                            \n                                    Public\n                                defaultLanguage\n                            \n                            \n                                    Public\n                                languageRouteParam\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getNewLanguage\n                            \n                            \n                                    Public\n                                initializeLanguage\n                            \n                            \n                                    Public\n                                setAvailableLanguages\n                            \n                            \n                                    Public\n                                setCurrentLanguage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:53\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getNewLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNewLanguage(language: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Checks if the newly proposed language can be set, if not we return either the current language or the default language\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe newly proposed language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initializeLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeLanguage()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Sets the initial language of the application when no language is set yet.\nIf a previous language was set in the local storage, said language is used. If not, the default language gets used.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setAvailableLanguages\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAvailableLanguages(languages: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:120\n                        \n                    \n\n\n            \n                \n                        Set the list of available languages\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                languages\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of available languages\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setCurrentLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    setCurrentLanguage(language: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Sets the current language of the application and saves it to the local storage. Returns true if the language was set\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        availableLanguages$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.availableLanguagesSubject\n\t\t.asObservable()\n\t\t.pipe(filter((languages) => languages?.length > 0))\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:41\n                        \n                    \n\n            \n                \n                    The available languages\nOnly emits once the list contains at least one language\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        availableLanguagesSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:34\n                        \n                    \n\n            \n                \n                    A subject to hold the available languages\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:17\n                        \n                    \n\n            \n                \n                    Instance of the configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentLanguage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentLanguageSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:65\n                        \n                    \n\n            \n                \n                    The current language of the application, as an Observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        currentLanguageSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tundefined\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:27\n                        \n                    \n\n            \n                \n                    A subject to hold the current language\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        defaultLanguage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:48\n                        \n                    \n\n            \n                \n                    The default language of the application\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        languageRouteParam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:53\n                        \n                    \n\n            \n                \n                    The route param we use to set the language, by default this is language\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:22\n                        \n                    \n\n            \n                \n                    Instance of the @ibenvandeveire/ngx-core NgxWindowService\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:71\n                                \n                            \n                    \n                        \n                                The current language of the application\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { BehaviorSubject, filter, Observable } from 'rxjs';\n\nimport { NgxI18nConfiguration } from '../../i18n.types';\nimport { NgxI18nConfigurationToken } from '../../tokens';\n\n//TODO: Iben: Once we have a shared lib we should replace the storage and the browser approaches with their corresponding implementations\n/**\n * The single root instance of the translation service, in charge of holding the current language, the available languages and allows for the language to be changed.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxI18nRootService {\n\t/**\n\t * Instance of the configuration\n\t */\n\tprivate readonly configuration: NgxI18nConfiguration = inject(NgxI18nConfigurationToken);\n\n\t/**\n\t * Instance of the @ibenvandeveire/ngx-core NgxWindowService\n\t */\n\tprivate readonly windowsService: NgxWindowService = inject(NgxWindowService);\n\n\t/**\n\t * A subject to hold the current language\n\t */\n\tprivate readonly currentLanguageSubject: BehaviorSubject = new BehaviorSubject(\n\t\tundefined\n\t);\n\n\t/**\n\t * A subject to hold the available languages\n\t */\n\tprivate readonly availableLanguagesSubject: BehaviorSubject = new BehaviorSubject([]);\n\n\t/**\n\t * The available languages\n\t *\n\t * Only emits once the list contains at least one language\n\t */\n\tpublic readonly availableLanguages$: Observable = this.availableLanguagesSubject\n\t\t.asObservable()\n\t\t.pipe(filter((languages) => languages?.length > 0));\n\n\t/**\n\t * The default language of the application\n\t */\n\tpublic defaultLanguage: string;\n\n\t/**\n\t * The route param we use to set the language, by default this is `language`\n\t */\n\tpublic languageRouteParam: string;\n\n\tconstructor() {\n\t\t// Iben: Set the initial values so that we can refer to the services as the source of truth\n\t\tthis.defaultLanguage = this.configuration.defaultLanguage;\n\t\tthis.languageRouteParam = this.configuration.languageRouteParam || 'language';\n\t\tthis.availableLanguagesSubject.next(this.configuration.availableLanguages || []);\n\t}\n\n\t/**\n\t * The current language of the application, as an Observable\n\t */\n\tpublic readonly currentLanguage$: Observable =\n\t\tthis.currentLanguageSubject.asObservable();\n\n\t/**\n\t * The current language of the application\n\t */\n\tpublic get currentLanguage(): string {\n\t\treturn this.currentLanguageSubject.getValue();\n\t}\n\n\t/**\n\t * Sets the current language of the application and saves it to the local storage. Returns true if the language was set\n\t *\n\t * @param language - The provided language\n\t */\n\tpublic setCurrentLanguage(language: string): void {\n\t\t// Iben: get the new language\n\t\tconst newLanguage = this.getNewLanguage(language);\n\n\t\t// Iben: Save the current language to the localStorage when we're in the browser\n\t\tthis.windowsService.runInBrowser(() => {\n\t\t\tlocalStorage.setItem('ngx-i18n-language', newLanguage);\n\t\t});\n\n\t\t// Iben: Update the subject\n\t\tthis.currentLanguageSubject.next(newLanguage);\n\t}\n\n\t/**\n\t * Sets the initial language of the application when no language is set yet.\n\t *\n\t * If a previous language was set in the local storage, said language is used. If not, the default language gets used.\n\t */\n\tpublic initializeLanguage(): void {\n\t\t// Iben: If the current language already exists, we early exit\n\t\tif (this.currentLanguage) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the current language does not exist, we check if it exists in the local storage, if not, we use the default config\n\t\tlet language = this.defaultLanguage;\n\n\t\tthis.windowsService.runInBrowser(() => {\n\t\t\tlanguage = localStorage.getItem('ngx-i18n-language') || this.defaultLanguage;\n\t\t});\n\n\t\t// Iben: We set the new language\n\t\tthis.setCurrentLanguage(language);\n\t}\n\n\t/**\n\t * Set the list of available languages\n\t *\n\t * @param languages - The list of available languages\n\t */\n\tpublic setAvailableLanguages(languages: string[]): void {\n\t\tthis.availableLanguagesSubject.next(languages);\n\t}\n\n\t/**\n\t * Checks if the newly proposed language can be set, if not we return either the current language or the default language\n\t *\n\t * @param {string} language - The newly proposed language\n\t */\n\tprivate getNewLanguage(language: string): string {\n\t\t// Iben: Save the currently being set language\n\t\tlet newLanguage = language;\n\n\t\t// Iben: Check if the new language is part of the available languages\n\t\tif (!this.availableLanguagesSubject.getValue().includes(language)) {\n\t\t\t// Iben: If a language is set that's not part of the available languages, we return a warn\n\t\t\tconsole.warn(\n\t\t\t\t`NgxI18n: A language, ${language}, was attempted to be set that was not part of the available languages (${this.availableLanguagesSubject\n\t\t\t\t\t.getValue()\n\t\t\t\t\t.join(', ')})`\n\t\t\t);\n\n\t\t\t// Iben: If there is already a language set, we early exit and keep the remaining language\n\t\t\tif (this.currentLanguage) {\n\t\t\t\treturn this.currentLanguage;\n\t\t\t}\n\n\t\t\t// Iben: If no language exists, we use the default language\n\t\t\tnewLanguage = this.defaultLanguage;\n\t\t}\n\n\t\treturn newLanguage;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nService.html":{"url":"injectables/NgxI18nService.html","title":"injectable - NgxI18nService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/i18n/i18n.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that holds the translations for an individual feature. Multiple instances of this service will exist throughout your application.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                rootI18nService\n                            \n                            \n                                    Public\n                                setLanguage\n                            \n                            \n                                    Private\n                                    Readonly\n                                translateService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getTranslation\n                            \n                            \n                                    Public\n                                getTranslationObservable\n                            \n                            \n                                    Public\n                                initI18n\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                                \n                                    availableLanguages\n                                \n                                \n                                    defaultLanguage\n                                \n                                \n                                    translations\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslation(key: string, params?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:76\n                        \n                    \n\n\n            \n                \n                        Returns an instant translation based on a provided key and params\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the translation\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional set of params\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslationObservable\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslationObservable(key: string, params?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:87\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TranslationType\n                            \n                        \n                    \n\n            \n                \n                        Returns a observable based translation based on a provided key and params\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the translation\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional set of params\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initI18n\n                        \n                    \n                \n            \n            \n                \n                        \n                    initI18n(language: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Initializes the translations based on the provided language\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        rootI18nService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nRootService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nRootService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:21\n                        \n                    \n\n            \n                \n                    Instance of the NgxI8nRootService\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setLanguage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:65\n                        \n                    \n\n            \n                \n                    Set the current language of the application\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    language\n                                                    \n                                                            \nThe provided language\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translateService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TranslateService\n\n                    \n                \n                \n                    \n                        Default value : inject(TranslateService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:16\n                        \n                    \n\n            \n                \n                    Instance of the ngx-translate TranslateService\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:26\n                                \n                            \n                    \n                        \n                                Returns the current language of the application\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        availableLanguages\n                    \n                \n\n                \n                    \n                        getavailableLanguages()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:33\n                                \n                            \n                    \n                        \n                                Returns the available languages of the application\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        defaultLanguage\n                    \n                \n\n                \n                    \n                        getdefaultLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:40\n                                \n                            \n                    \n                        \n                                Returns the default language of the application\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        translations\n                    \n                \n\n                \n                    \n                        gettranslations()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:97\n                                \n                            \n                    \n                        \n                                Returns the currently loaded translations\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\n\nimport { NgxI18nAbstractService } from '../../abstracts';\nimport { NgxI18nRootService } from '../root-i18n/root-i18n.service';\n\n/**\n * A service that holds the translations for an individual feature. Multiple instances of this service will exist throughout your application.\n */\n@Injectable()\nexport class NgxI18nService implements NgxI18nAbstractService {\n\t/**\n\t * Instance of the ngx-translate TranslateService\n\t */\n\tprivate readonly translateService: TranslateService = inject(TranslateService);\n\n\t/**\n\t * Instance of the NgxI8nRootService\n\t */\n\tprivate readonly rootI18nService: NgxI18nRootService = inject(NgxI18nRootService);\n\n\t/**\n\t * Returns the current language of the application\n\t */\n\tpublic get currentLanguage(): string {\n\t\treturn this.rootI18nService.currentLanguage;\n\t}\n\n\t/**\n\t * Returns the available languages of the application\n\t */\n\tpublic get availableLanguages(): string[] {\n\t\treturn this.translateService.langs;\n\t}\n\n\t/**\n\t * Returns the default language of the application\n\t */\n\tpublic get defaultLanguage(): string {\n\t\treturn this.translateService.getDefaultLang();\n\t}\n\n\t/**\n\t * Initializes the translations based on the provided language\n\t *\n\t * @param language - The provided language\n\t */\n\tpublic initI18n(language: string): Observable {\n\t\t// Iben: If the language is provided, set it in the root service\n\t\tif (language) {\n\t\t\tthis.rootI18nService.setCurrentLanguage(language);\n\t\t}\n\n\t\tthis.translateService.use(this.rootI18nService.currentLanguage);\n\n\t\treturn this.translateService.reloadLang(language);\n\t}\n\n\t/**\n\t * Set the current language of the application\n\t *\n\t * @param language - The provided language\n\t */\n\tpublic setLanguage = (language: string): void => {\n\t\tthis.rootI18nService.setCurrentLanguage(language);\n\t\tthis.translateService.use(this.rootI18nService.currentLanguage);\n\t};\n\n\t/**\n\t * Returns an instant translation based on a provided key and params\n\t *\n\t * @param key - The key of the translation\n\t * @param params - An optional set of params\n\t */\n\tpublic getTranslation(key: string, params?: any): string {\n\t\treturn this.translateService.instant(key, params);\n\t}\n\n\t// Denis: Set the default to string but allow for others.\n\t/**\n\t * Returns a observable based translation based on a provided key and params\n\t *\n\t * @param key - The key of the translation\n\t * @param params - An optional set of params\n\t */\n\tpublic getTranslationObservable(\n\t\tkey: string,\n\t\tparams?: any\n\t): Observable {\n\t\treturn this.translateService.get(key, params);\n\t}\n\n\t/**\n\t * Returns the currently loaded translations\n\t */\n\tpublic get translations() {\n\t\treturn this.translateService.translations;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nTranslationLoaderResolver.html":{"url":"injectables/NgxI18nTranslationLoaderResolver.html","title":"injectable - NgxI18nTranslationLoaderResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nTranslationLoaderResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts\n        \n\n\n            \n                Description\n            \n            \n                This NgxI18nTranslationLoaderResolver will make sure that the translations are loaded from the moment you route to a detail module\nIt is essential you put this resolver at the root of your modules, whether it be lazy loaded through the guard or calling the resolver in the constructor\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                i18nLoadingService\n                            \n                            \n                                    Private\n                                    Readonly\n                                i18nService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resolve\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolve()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        i18nLoadingService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nLoadingService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nLoadingService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:20\n                        \n                    \n\n            \n                \n                    The NgxI18nLoadingService instance\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        i18nService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:16\n                        \n                    \n\n            \n                \n                    The NgxI18nService instance\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { finalize, map, Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxI18nLoadingService, NgxI18nService } from '../../services';\n\n/**\n * This NgxI18nTranslationLoaderResolver will make sure that the translations are loaded from the moment you route to a detail module\n * It is essential you put this resolver at the root of your modules, whether it be lazy loaded through the guard or calling the resolver in the constructor\n */\n@Injectable()\nexport class NgxI18nTranslationLoaderResolver {\n\t/**\n\t * The NgxI18nService instance\n\t */\n\tprivate readonly i18nService: NgxI18nService = inject(NgxI18nService);\n\t/**\n\t * The NgxI18nLoadingService instance\n\t */\n\tprivate readonly i18nLoadingService: NgxI18nLoadingService = inject(NgxI18nLoadingService);\n\n\tpublic resolve(): Observable {\n\t\t// Iben: Generate an id for the translations we're about to load\n\t\tconst id = uuid();\n\n\t\t// Iben: Dispatch to the loader service that we're about to load a set of translations\n\t\tthis.i18nLoadingService.dispatchTranslationLoaderAction({ id, state: 'LOADING' });\n\n\t\t// Iben: This will reload the translations, and fetch the newly needed lazy loaded translations\n\t\treturn this.i18nService.initI18n(this.i18nService.currentLanguage).pipe(\n\t\t\t// Iben: Map to true for the guard\n\t\t\tmap(() => true),\n\t\t\tfinalize(() => {\n\t\t\t\t// Iben: Dispatch to the loader service that the translations have been loaded\n\t\t\t\tthis.i18nLoadingService.dispatchTranslationLoaderAction({ id, state: 'LOADED' });\n\t\t\t})\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerBase.html":{"url":"interfaces/NgxImageMarkerBase.html","title":"interface - NgxImageMarkerBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            close\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        close\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        close:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"view\" | \"edit\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"view\" | \"edit\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxImageMarkerComponent.html":{"url":"components/NgxImageMarkerComponent.html","title":"component - NgxImageMarkerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxImageMarkerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts\n\n\n\n    \n        Description\n    \n    \n        A component wrapper for MarkerJs views\nhttps://markerjs.com/\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnChanges\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-image-marker\n            \n\n\n\n\n\n            \n                template\n                \n            \n\n\n\n\n            \n                styleUrl\n                ./image-marker.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                canEdit\n                            \n                            \n                                    Private\n                                currentMarker\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentZoomLevel\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                image\n                            \n                            \n                                    Public\n                                    Readonly\n                                imageDescription\n                            \n                            \n                                    Public\n                                    Readonly\n                                imageElement\n                            \n                            \n                                    Private\n                                    Readonly\n                                imageMarkerService\n                            \n                            \n                                    Public\n                                markerClicked\n                            \n                            \n                                    Private\n                                    Readonly\n                                markerDestroyedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                markerTypes\n                            \n                            \n                                    Public\n                                    Readonly\n                                startState\n                            \n                            \n                                    Public\n                                stateUpdated\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                            \n                                    Public\n                                    Readonly\n                                zoomLevels\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createMarker\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                canEdit\n                            \n                            \n                                currentZoomLevel\n                            \n                            \n                                image\n                            \n                            \n                                imageDescription\n                            \n                            \n                                markerTypes\n                            \n                            \n                                startState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                markerClicked\n                            \n                            \n                                stateUpdated\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        canEdit\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:84\n                            \n                        \n                \n                    \n                        Whether we can edit the view, by default this is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        currentZoomLevel\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:89\n                            \n                        \n                \n                    \n                        An optional current zoom level\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        image\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:69\n                            \n                        \n                \n                    \n                        The url to the image we wish to render\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        imageDescription\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:74\n                            \n                        \n                \n                    \n                        A WCAG/WAI-ARIA compliant description of the image\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        markerTypes\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:99\n                            \n                        \n                \n                    \n                        An optional record of types of Markerjs markers we wish to render\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        startState\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:79\n                            \n                        \n                \n                    \n                        The start data we wish to render\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        markerClicked\n                    \n                \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:109\n                            \n                        \n                \n                    \n                        Emits when a marker is clicked when the view is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        stateUpdated\n                    \n                \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:104\n                            \n                        \n                \n                    \n                        Emits when the state has been updated\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarker()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:149\n                        \n                    \n\n\n            \n                \n                        Creates a MarkerJs view based on the provided configuration\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:111\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:137\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        canEdit\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:84\n                        \n                    \n\n            \n                \n                    Whether we can edit the view, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentMarker\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxImageMarker\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:54\n                        \n                    \n\n            \n                \n                    The currently created marker\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentZoomLevel\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:89\n                        \n                    \n\n            \n                \n                    An optional current zoom level\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        image\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:69\n                        \n                    \n\n            \n                \n                    The url to the image we wish to render\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        imageDescription\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:74\n                        \n                    \n\n            \n                \n                    A WCAG/WAI-ARIA compliant description of the image\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        imageElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('imageElement')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:64\n                        \n                    \n\n            \n                \n                    The rendered image element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        imageMarkerService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxImageMarkerService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxImageMarkerService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markerClicked\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:109\n                        \n                    \n\n            \n                \n                    Emits when a marker is clicked when the view is in readonly mode\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        markerDestroyedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:59\n                        \n                    \n\n            \n                \n                    A subject holding the destroy state of the marker\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        markerTypes\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:99\n                        \n                    \n\n            \n                \n                    An optional record of types of Markerjs markers we wish to render\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        startState\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:79\n                        \n                    \n\n            \n                \n                    The start data we wish to render\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stateUpdated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:104\n                        \n                    \n\n            \n                \n                    Emits when the state has been updated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        zoomLevels\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:94\n                        \n                    \n\n            \n                \n                    An optional amount of times we can zoom in and out\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  inject,\n  OnChanges,\n  OnDestroy,\n  input,\n  OutputEmitterRef,\n  output,\n  viewChild\n} from '@angular/core';\nimport { NgxWindowService, simpleChangeHasChanged } from '@ibenvandeveire/ngx-core';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxImageMarkerService } from '../../services';\nimport {\n\tNgxImageMarker,\n\tNgxImageMarkerItem,\n\tNgxImageMarkerState,\n\tNgxImageMarkerTypes,\n} from '../../types';\n\n/**\n * A component wrapper for MarkerJs views\n *\n * https://markerjs.com/\n */\n\n// TODO: Iben: Once we figured out how we'll share the FormAccessors with other packages, we should make this a ControlValueAccessor\n@Component({\n\tselector: 'ngx-image-marker',\n\ttemplate: ``,\n\tstyleUrl: './image-marker.component.scss',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\thost: {\n\t\tclass: 'ngx-image-marker',\n\t},\n})\nexport class NgxImageMarkerComponent implements AfterViewInit, OnChanges, OnDestroy {\n\tprivate readonly imageMarkerService: NgxImageMarkerService = inject(NgxImageMarkerService);\n\tprivate readonly windowService: NgxWindowService = inject(NgxWindowService);\n\tprivate readonly elementRef: ElementRef = inject(ElementRef);\n\n\t/**\n\t * The currently created marker\n\t */\n\tprivate currentMarker: NgxImageMarker;\n\n\t/**\n\t * A subject holding the destroy state of the marker\n\t */\n\tprivate readonly markerDestroyedSubject: Subject = new Subject();\n\n\t/**\n\t * The rendered image element\n\t */\n\tpublic readonly imageElement = viewChild('imageElement');\n\n\t/**\n\t * The url to the image we wish to render\n\t */\n\tpublic readonly image = input.required();\n\n\t/**\n\t * A WCAG/WAI-ARIA compliant description of the image\n\t */\n\tpublic readonly imageDescription = input.required();\n\n\t/**\n\t * The start data we wish to render\n\t */\n\tpublic readonly startState = input();\n\n\t/**\n\t * Whether we can edit the view, by default this is true\n\t */\n\tpublic readonly canEdit = input(true);\n\n\t/**\n\t * An optional current zoom level\n\t */\n\tpublic readonly currentZoomLevel = input();\n\n\t/**\n\t * An optional amount of times we can zoom in and out\n\t */\n\tpublic readonly zoomLevels = input();\n\n\t/**\n\t * An optional record of types of Markerjs markers we wish to render\n\t */\n\tpublic readonly markerTypes = input();\n\n\t/**\n\t * Emits when the state has been updated\n\t */\n\tpublic stateUpdated: OutputEmitterRef = output();\n\n\t/**\n\t * Emits when a marker is clicked when the view is in readonly mode\n\t */\n\tpublic markerClicked: OutputEmitterRef = output();\n\n\tngAfterViewInit(): void {\n\t\t// Iben: Create the initial marker\n\t\tthis.createMarker();\n\t}\n\n\tngOnChanges(changes: any): void {\n\t\t// Iben: If no marker exists or if the image has not rendered, early exit\n\t\tif (!this.currentMarker || !this.imageElement()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Check if there are changes to the state or the configuration when there is a marker\n\t\tconst hasChanges =\n\t\t\tthis.currentMarker &&\n\t\t\t(simpleChangeHasChanged(changes.startState) ||\n\t\t\t\tsimpleChangeHasChanged(changes.canEdit) ||\n\t\t\t\tsimpleChangeHasChanged(changes.markerTypes) ||\n\t\t\t\tsimpleChangeHasChanged(changes.currentZoomLevel) ||\n\t\t\t\tsimpleChangeHasChanged(changes.zoomLevels));\n\n\t\t// Iben: Recreate the marker whenever the configuration is adjusted\n\t\tif (!this.currentMarker || hasChanges) {\n\t\t\tthis.createMarker();\n\t\t}\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Close the marker\n\t\tthis.currentMarker.close();\n\n\t\t// Iben: Complete the destroy subject\n\t\tthis.markerDestroyedSubject.next();\n\t\tthis.markerDestroyedSubject.complete();\n\t}\n\n\t/**\n\t * Creates a MarkerJs view based on the provided configuration\n\t */\n\tprivate createMarker() {\n\t\t// Iben: Only create the image when we're in the browser\n\t\tthis.windowService.runInBrowser(() => {\n\t\t\t// Iben: Close the existing marker if needed\n\t\t\tif (this.currentMarker) {\n\t\t\t\tthis.currentMarker.close();\n\t\t\t\tthis.markerDestroyedSubject.next();\n\t\t\t}\n\n\t\t\t// Iben: Create a new marker view based on the provided configuration\n\t\t\tconst currentZoomLevel = this.currentZoomLevel();\n\t\t\tconst zoomLevels = this.zoomLevels();\n\t\t\tthis.currentMarker = this.imageMarkerService.createImageMarker(\n\t\t\t\tthis.imageElement().nativeElement,\n\t\t\t\tthis.elementRef.nativeElement,\n\t\t\t\t{\n\t\t\t\t\tmode: this.canEdit() ? 'edit' : 'view',\n\t\t\t\t\tallowZoom: true,\n\t\t\t\t\tdefaultState: this.startState() || undefined,\n\t\t\t\t\tmarkerTypes: this.markerTypes(),\n\t\t\t\t\tzoom:\n\t\t\t\t\t\tcurrentZoomLevel !== undefined && zoomLevels\n\t\t\t\t\t\t\t? { current: currentZoomLevel, levels: zoomLevels }\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Iben: Listen to the valueChanges based on the provided type.\n\t\t\tif (this.currentMarker.mode === 'edit') {\n\t\t\t\tthis.currentMarker.valueChanges\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\ttap((value) => {\n\t\t\t\t\t\t\tthis.stateUpdated.emit(value);\n\t\t\t\t\t\t}),\n\t\t\t\t\t\ttakeUntil(this.markerDestroyedSubject)\n\t\t\t\t\t)\n\t\t\t\t\t.subscribe();\n\t\t\t} else {\n\t\t\t\tthis.currentMarker.valueChanges\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\ttap((value) => {\n\t\t\t\t\t\t\tthis.markerClicked.emit(value);\n\t\t\t\t\t\t}),\n\t\t\t\t\t\ttakeUntil(this.markerDestroyedSubject)\n\t\t\t\t\t)\n\t\t\t\t\t.subscribe();\n\t\t\t}\n\t\t});\n\t}\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxImageMarkerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerConfiguration.html":{"url":"interfaces/NgxImageMarkerConfiguration.html","title":"interface - NgxImageMarkerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for the marker view\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowClear\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            allowZoom\n                                        \n                                \n                                \n                                        \n                                            defaultState\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            markerTypes\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            zoom\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowClear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowClear:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether clearing the marker view is allowed, by default false\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowZoom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowZoom:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether zooming in is allowed, by default false\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultState\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultState:         NgxImageMarkerState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxImageMarkerState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state the view has to start from\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        markerTypes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        markerTypes:         NgxImageMarkerTypes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxImageMarkerTypes\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional set of allowed marker types, by default all\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"view\" | \"edit\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"view\" | \"edit\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the record is readonly or not\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zoom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zoom:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerEdit.html":{"url":"interfaces/NgxImageMarkerEdit.html","title":"interface - NgxImageMarkerEdit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerEdit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxImageMarkerBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                        \n                                            valueChanges\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valueChanges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        valueChanges:     Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Observable\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxImageMarkerService.html":{"url":"injectables/NgxImageMarkerService.html","title":"injectable - NgxImageMarkerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxImageMarkerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that serves as a wrapper for MarkerJs2 and MarkerJs-live\nhttps://markerjs.com/\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                markers\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createImageMakerEdit\n                            \n                            \n                                    Public\n                                createImageMarker\n                            \n                            \n                                    Private\n                                createMarkerClickedListener\n                            \n                            \n                                    Private\n                                createMarkerValueChanges\n                            \n                            \n                                    Private\n                                createReadonlyImageMarker\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createImageMakerEdit\n                        \n                    \n                \n            \n            \n                \n                        \n                    createImageMakerEdit(id: string, image: HTMLImageElement | HTMLElement, rootTarget: HTMLElement, configuration: NgxImageMarkerConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:117\n                        \n                    \n\n\n            \n                \n                        Creates an editable marker view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                image\n                                            \n                                                        HTMLImageElement | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe image element we wish to draw markers on\n\n\n                                            \n                                        \n                                        \n                                                rootTarget\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we render the image in\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxImageMarkerConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration we wish to pass to the image markers\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxImageMarkerEdit\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createImageMarker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createImageMarker(image: HTMLImageElement | HTMLElement, rootTarget: HTMLElement, configuration: NgxImageMarkerConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Create an image with markers\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                image\n                                            \n                                                        HTMLImageElement | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe image element we wish to draw markers on\n\n\n                                            \n                                        \n                                        \n                                                rootTarget\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we render the image in\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxImageMarkerConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration we wish to pass to the image markers\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxImageMarker\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarkerClickedListener\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarkerClickedListener(marker: MarkerView)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:207\n                        \n                    \n\n\n            \n                \n                        Listen to the marker clicks in the readonly view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                marker\n                                            \n                                                        MarkerView\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe marker view\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarkerValueChanges\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarkerValueChanges(marker: MarkerArea)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:188\n                        \n                    \n\n\n            \n                \n                        Listen to the value changes in the editable view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                marker\n                                            \n                                                        MarkerArea\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe marker view\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createReadonlyImageMarker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReadonlyImageMarker(id: string, image: HTMLImageElement | HTMLElement, rootTarget: HTMLElement, configuration: NgxImageMarkerConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Creates a readonly marker view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                image\n                                            \n                                                        HTMLImageElement | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe image element we wish to draw markers on\n\n\n                                            \n                                        \n                                        \n                                                rootTarget\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we render the image in\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxImageMarkerConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration we wish to pass to the image markers\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxImageMarkerView\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:221\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        markers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:31\n                        \n                    \n\n            \n                \n                    A record with all markers\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { MarkerView } from 'markerjs-live';\nimport { MarkerArea, MarkerAreaState } from 'markerjs2';\nimport { Observable, Subject } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport {\n\tNgxImageMarker,\n\tNgxImageMarkerConfiguration,\n\tNgxImageMarkerEdit,\n\tNgxImageMarkerItem,\n\tNgxImageMarkerView,\n} from '../../types';\n\n/**\n * A service that serves as a wrapper for MarkerJs2 and MarkerJs-live\n *\n * https://markerjs.com/\n */\n// TODO: Iben: To avoid essentially only testing a mocked version of this package, we need to test this through Cypress/Playwrite/... tests\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxImageMarkerService implements OnDestroy {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A record with all markers\n\t */\n\tprivate readonly markers: Record = {};\n\n\t/**\n\t * Create an image with markers\n\t *\n\t * @param image - The image element we wish to draw markers on\n\t * @param rootTarget - The element we render the image in\n\t * @param configuration - The configuration we wish to pass to the image markers\n\t */\n\tpublic createImageMarker(\n\t\timage: HTMLImageElement | HTMLElement,\n\t\trootTarget: HTMLElement,\n\t\tconfiguration: NgxImageMarkerConfiguration\n\t): NgxImageMarker {\n\t\t// Iben: Return undefined if we're not in the browser\n\t\tif (!this.windowService.isBrowser) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Create an id for the marker\n\t\tconst id = uuid();\n\n\t\t// Iben: Depending on the provided mode, we create a edit view or a non editable view\n\t\treturn configuration.mode === 'edit'\n\t\t\t? this.createImageMakerEdit(id, image, rootTarget, configuration)\n\t\t\t: this.createReadonlyImageMarker(id, image, rootTarget, configuration);\n\t}\n\n\t/**\n\t * Creates a readonly marker view\n\t *\n\t * @param image - The image element we wish to draw markers on\n\t * @param rootTarget - The element we render the image in\n\t * @param configuration - The configuration we wish to pass to the image markers\n\t */\n\tprivate createReadonlyImageMarker(\n\t\tid: string,\n\t\timage: HTMLImageElement | HTMLElement,\n\t\trootTarget: HTMLElement,\n\t\tconfiguration: NgxImageMarkerConfiguration\n\t): NgxImageMarkerView {\n\t\t// Iben: Create the new marker view\n\t\tconst marker = new MarkerView(image);\n\n\t\t// Iben: Set the root element so the marker layer is rendered in the same element\n\t\tmarker.targetRoot = rootTarget;\n\n\t\t// Iben: Create the Angular marker view\n\t\tconst result: NgxImageMarkerView = {\n\t\t\tmode: 'view',\n\t\t\tclose: (() => {\n\t\t\t\t// Iben: Remove the event listener and close the marker\n\t\t\t\tmarker.removeEventListener('select', () => {});\n\t\t\t\tmarker.close();\n\n\t\t\t\t// Iben: Remove the marker from the record\n\t\t\t\tthis.markers[id] = undefined;\n\t\t\t}).bind(this),\n\t\t\tvalueChanges: this.createMarkerClickedListener(marker),\n\t\t};\n\n\t\t// Iben: Create a clicked listener for the currently clicked item\n\t\tthis.createMarkerClickedListener(marker);\n\n\t\t// Iben: If custom marker types were provided, set them as the available types\n\t\tif (configuration.markerTypes?.view) {\n\t\t\tmarker.availableMarkerTypes = configuration.markerTypes.view;\n\t\t}\n\n\t\t// Iben: Show the marker once all settings are set\n\t\tmarker.show(configuration.defaultState);\n\n\t\t// Iben: Add the marker to the record\n\t\tthis.markers[id] = result;\n\n\t\t// Iben: Return the Angular view\n\t\treturn result;\n\t}\n\n\t/**\n\t * Creates an editable marker view\n\t *\n\t * @param image - The image element we wish to draw markers on\n\t * @param rootTarget - The element we render the image in\n\t * @param configuration - The configuration we wish to pass to the image markers\n\t */\n\tprivate createImageMakerEdit(\n\t\tid: string,\n\t\timage: HTMLImageElement | HTMLElement,\n\t\trootTarget: HTMLElement,\n\t\tconfiguration: NgxImageMarkerConfiguration\n\t): NgxImageMarkerEdit {\n\t\t// Iben: Create a new marker view\n\t\tconst marker = new MarkerArea(image);\n\n\t\t// Iben: Set the root element so the marker layer is rendered in the same element\n\t\tmarker.targetRoot = rootTarget;\n\n\t\t// Iben: Create the Angular based view\n\t\tconst result: NgxImageMarkerEdit = {\n\t\t\tmode: 'edit',\n\t\t\tclose: (() => {\n\t\t\t\t// Iben: Remove the event listener and close the marker\n\t\t\t\tmarker.removeEventListener('statechange', () => {});\n\t\t\t\tmarker.close();\n\n\t\t\t\t// Iben: Remove the marker from the record\n\t\t\t\tthis.markers[id] = undefined;\n\t\t\t}).bind(this),\n\t\t\tvalueChanges: this.createMarkerValueChanges(marker),\n\t\t};\n\n\t\t// Iben: Set the configuration settings\n\t\t// These can later on be extended when needed\n\t\tmarker.uiStyleSettings.zoomButtonVisible = configuration.allowZoom;\n\t\tmarker.uiStyleSettings.zoomOutButtonVisible = configuration.allowZoom;\n\t\tmarker.zoomSteps = configuration.zoom?.levels || [1, 2, 3, 4];\n\t\tmarker.zoomLevel = configuration.zoom?.current ?? 1;\n\t\tmarker.uiStyleSettings.clearButtonVisible = configuration.allowClear;\n\n\t\t// Iben: Set the available marker types\n\t\tmarker.availableMarkerTypes =\n\t\t\t(configuration.markerTypes?.edit as any) || marker.ALL_MARKER_TYPES;\n\n\t\t// Iben: Set the class names of the items\n\t\tmarker.uiStyleSettings.notesAreaStyleClassName = 'ngx-image-marker-notes-area';\n\t\tmarker.uiStyleSettings.toolbarStyleColorsClassName = 'ngx-image-marker-toolbar';\n\t\tmarker.uiStyleSettings.toolboxStyleColorsClassName = 'ngx-image-marker-toolbox';\n\t\tmarker.uiStyleSettings.toolbarButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbar-button';\n\t\tmarker.uiStyleSettings.toolbarActiveButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbar-button-active';\n\t\tmarker.uiStyleSettings.toolboxButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbox-button';\n\t\tmarker.uiStyleSettings.toolboxActiveButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbox-button-active';\n\n\t\t// Iben: Show the marker once all settings are set\n\t\tmarker.show();\n\n\t\t// Iben: If there was state before, set it accordingly\n\t\tif (configuration.defaultState) {\n\t\t\tmarker.restoreState(configuration.defaultState);\n\t\t}\n\n\t\t// Iben: Add the marker to the record\n\t\tthis.markers[id] = result;\n\n\t\t// Iben: Return the Angular view\n\t\treturn result;\n\t}\n\n\t/**\n\t * Listen to the value changes in the editable view\n\t *\n\t * @param {MarkerArea} marker - The marker view\n\t */\n\tprivate createMarkerValueChanges(marker: MarkerArea): Observable {\n\t\t// Iben: Setup valueChanges\n\t\tconst valueChanges = new Subject();\n\n\t\t// Iben: Update the subject whenever a new item was added to the marker view\n\t\tmarker.addEventListener('statechange', (event) => {\n\t\t\tvalueChanges.next(event?.markerArea?.getState());\n\t\t});\n\n\t\t// Iben: Return changes observable\n\t\t// This Observable gets closed in the NgxImageMarkerComponent and therefor do not require a takeUntil here\n\t\treturn valueChanges.asObservable();\n\t}\n\n\t/**\n\t * Listen to the marker clicks in the readonly view\n\t *\n\t * @param {MarkerArea} marker - The marker view\n\t */\n\tprivate createMarkerClickedListener(marker: MarkerView): Observable {\n\t\t// Iben: Setup valueChanges\n\t\tconst valueChanges = new Subject();\n\n\t\t// Iben: Update the subject whenever a marker was clicked\n\t\tmarker.addEventListener('select', (_, marker) => {\n\t\t\tvalueChanges.next(marker);\n\t\t});\n\n\t\t// Iben: Return changes observable\n\t\t// This Observable gets closed in the NgxImageMarkerComponent and therefor do not require a takeUntil here\n\t\treturn valueChanges.asObservable();\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Close all existing markers, removing the listeners where needed\n\t\tObject.values(this.markers)\n\t\t\t.filter(Boolean)\n\t\t\t.forEach((marker) => {\n\t\t\t\tmarker.close();\n\t\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerTypes.html":{"url":"interfaces/NgxImageMarkerTypes.html","title":"interface - NgxImageMarkerTypes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerTypes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n            \n                Description\n            \n            \n                A record with the marker types we wish to show, both for the view and the edit mode\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edit\n                                        \n                                \n                                \n                                        \n                                            view\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edit:     ()[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ()[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        view\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        view:     ()[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ()[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerView.html":{"url":"interfaces/NgxImageMarkerView.html","title":"interface - NgxImageMarkerView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxImageMarkerBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                        \n                                            valueChanges\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valueChanges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        valueChanges:     Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Observable\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxIsAuthenticatedDirective.html":{"url":"directives/NgxIsAuthenticatedDirective.html","title":"directive - NgxIsAuthenticatedDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxIsAuthenticatedDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                \nA directive that will render a part of the template based on whether the user is authenticated.\n\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxIsAuthenticated]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationService\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Public\n                                ngxIsAuthenticated\n                            \n                            \n                                    Public\n                                ngxIsAuthenticatedElse\n                            \n                            \n                                    Private\n                                shouldBeAuthenticated\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxIsAuthenticated\n                            \n                            \n                                ngxIsAuthenticatedElse\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:48\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxIsAuthenticated\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:70\n                            \n                        \n                \n                    \n                        Whether the user has to be authenticated\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxIsAuthenticatedElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:74\n                            \n                        \n                \n                    \n                        The else template in case the condition is not matched\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:125\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:76\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:80\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxAuthenticationServiceToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:35\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxIsAuthenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:70\n                        \n                    \n\n            \n                \n                    Whether the user has to be authenticated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxIsAuthenticatedElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:74\n                        \n                    \n\n            \n                \n                    The else template in case the condition is not matched\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldBeAuthenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:48\n                        \n                    \n\n            \n                \n                    Whether the user has to be authenticated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:40\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\n\n/**\n *  * A directive that will render a part of the template based on whether the user is authenticated.\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n@Directive({\n\tselector: '[ngxIsAuthenticated]',\n})\nexport class NgxIsAuthenticatedDirective implements OnDestroy {\n\tprivate readonly authenticationService = inject(\n\t\tNgxAuthenticationServiceToken\n\t);\n\tprivate viewContainer = inject(ViewContainerRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * Whether the user has to be authenticated\n\t */\n\tprivate shouldBeAuthenticated: boolean = true;\n\n\tconstructor() {\n\t\tconst templateRef = inject>(TemplateRef);\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tthis.shouldBeAuthenticated = this.ngxIsAuthenticated();\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxIsAuthenticatedElse();\n\t\t\tthis.elseViewRef = null;\n\t\t\tthis.updateView();\n\t\t});\n\t}\n\n\t/**\n\t * Whether the user has to be authenticated\n\t */\n\tpublic ngxIsAuthenticated: InputSignal = input();\n\t/**\n\t * The else template in case the condition is not matched\n\t */\n\tpublic ngxIsAuthenticatedElse: InputSignal> = input();\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.authenticationService.isAuthenticated$\n\t\t\t.pipe(\n\t\t\t\ttap((isAuthenticated) => {\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tif (\n\t\t\t\t\t\t(isAuthenticated && this.shouldBeAuthenticated) ||\n\t\t\t\t\t\t(!isAuthenticated && !this.shouldBeAuthenticated)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.thenViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.elseViewRef = null;\n\t\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxMediaQueryService.html":{"url":"injectables/NgxMediaQueryService.html","title":"injectable - NgxMediaQueryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxMediaQueryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that can be used to track media queries and their changes. It exposes a method\nto register media queries, which takes an array of tuples with the id of the media query\nand the query itself. The service will then emit the id of the media query that has\nchanged when subscribed to the getMatchingQuery$ method.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                mediaQueryListenerMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                queryChangedSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                queryIdMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                queryListMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getMatchingQuery$\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                registerMediaQueries\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getMatchingQuery$\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMatchingQuery$(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Pass the id of the query whose changes need to be listened to.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the media query that should be checked.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits a boolean value whenever the requested media query changes.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:121\n                        \n                    \n\n\n            \n                \n                        Unregister all media query subscriptions from the service.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerMediaQueries\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerMediaQueries(...queries: [])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Register a list of media queries that need to be tracked by the service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                        []\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA list of media queries that should be registered with the service.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        mediaQueryListenerMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queryChangedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReplaySubject\n\n                    \n                \n                \n                    \n                        Default value : new ReplaySubject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:37\n                        \n                    \n\n            \n                \n                    A subject that emits the id of the media query that has changed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queryIdMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:23\n                        \n                    \n\n            \n                \n                    A map of the registered media queries with their id.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queryListMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:18\n                        \n                    \n\n            \n                \n                    A map of media queries that are registered with the service.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { filter, map, Observable, ReplaySubject } from 'rxjs';\n\n/**\n * A service that can be used to track media queries and their changes. It exposes a method\n * to register media queries, which takes an array of tuples with the id of the media query\n * and the query itself. The service will then emit the id of the media query that has\n * changed when subscribed to the `getMatchingQuery$` method.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxMediaQueryService implements OnDestroy {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A map of media queries that are registered with the service.\n\t */\n\tprivate readonly queryListMap: Map = new Map();\n\n\t/**\n\t * A map of the registered media queries with their id.\n\t */\n\tprivate readonly queryIdMap: Map = new Map();\n\n\t/*\n\t * A map of listeners that are registered with the service.\n\t * They are saved to be able to remove them when the service is destroyed.\n\t */\n\tprivate readonly mediaQueryListenerMap: Map void\n\t> = new Map();\n\n\t/**\n\t * A subject that emits the id of the media query that has changed.\n\t */\n\tprivate readonly queryChangedSubject: ReplaySubject = new ReplaySubject();\n\n\t/**\n\t * Register a list of media queries that need to be tracked by the service.\n\t *\n\t * @param queries - A list of media queries that should be registered with the service.\n\t */\n\tpublic registerMediaQueries(...queries: [id: string, query: string][]): void {\n\t\tthis.windowService.runInBrowser(({ browserWindow }) => {\n\t\t\tfor (const [id, query] of queries) {\n\t\t\t\t// Wouter: Warn if the id has already been registered.\n\t\t\t\tif (this.queryIdMap.get(id)) {\n\t\t\t\t\treturn console.warn(\n\t\t\t\t\t\t`NgxMediaQueryService: Media query with id '${id}' already exists and is defined by '${this.queryIdMap.get(\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t)}'`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Wouter: If the query has already been registered, throw an error to prevent duplicate subscriptions\n\t\t\t\tif ([...this.queryIdMap].some(([_, value]) => value === query)) {\n\t\t\t\t\tconst duplicateQuery = [...this.queryIdMap].find(\n\t\t\t\t\t\t([_, value]) => value === query\n\t\t\t\t\t);\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`NgxMediaQueryService: Query of ['${id}', ${query}] already exists and is defined by ['${duplicateQuery[0]}', ${duplicateQuery[1]}]`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Wouter: save the id and query\n\t\t\t\tthis.queryIdMap.set(id, query);\n\n\t\t\t\t// Wouter: For each query, create a MediaQueryList object\n\t\t\t\tconst matchedQuery = browserWindow.matchMedia(query);\n\n\t\t\t\t// Wouter: Save the query\n\t\t\t\tthis.queryListMap.set(id, matchedQuery);\n\n\t\t\t\t// Wouter: Emit the id of the query that has changed\n\t\t\t\tthis.queryChangedSubject.next(id);\n\n\t\t\t\t// Wouter: Create a listener for the query. This is done separately to be\n\t\t\t\t// able to remove the listener when the service is destroyed\n\t\t\t\tconst listener = (queryChangedEvent: MediaQueryListEvent) => {\n\t\t\t\t\tthis.queryListMap.set(id, queryChangedEvent.currentTarget as MediaQueryList);\n\n\t\t\t\t\t// Wouter: Emit the id of the query that has changed\n\t\t\t\t\tthis.queryChangedSubject.next(id);\n\t\t\t\t};\n\n\t\t\t\t// Wouter: Register the listener to the query\n\t\t\t\tmatchedQuery.addEventListener('change', listener);\n\n\t\t\t\t// Wouter: Save the listener\n\t\t\t\tthis.mediaQueryListenerMap.set(id, listener);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Pass the id of the query whose changes need to be listened to.\n\t *\n\t * @param id - The id of the media query that should be checked.\n\t * @returns An observable that emits a boolean value whenever the requested media query changes.\n\t */\n\tpublic getMatchingQuery$(id: string): Observable {\n\t\t// Wouter: Throw an error if the query has not been registered\n\t\tif (!this.queryIdMap.has(id)) {\n\t\t\tthrow new Error(\n\t\t\t\t`NgxMediaQueryService: No media query with id '${id}' has been registered. Please register the media query first using the 'registerMediaQueries' method.`\n\t\t\t);\n\t\t}\n\n\t\treturn this.queryChangedSubject.asObservable().pipe(\n\t\t\t// Wouter: Filter the query that has changed.\n\t\t\t// This will make sure only the [id] streams are triggered.\n\t\t\tfilter((queryId) => queryId === id),\n\t\t\tmap(() => this.queryListMap.get(id).matches)\n\t\t);\n\t}\n\n\t/**\n\t * Unregister all media query subscriptions from the service.\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.windowService.runInBrowser(() => {\n\t\t\t// Wouter: Remove all eventListeners\n\t\t\tfor (const [id, query] of this.queryListMap) {\n\t\t\t\tquery.removeEventListener('change', this.mediaQueryListenerMap.get(id));\n\t\t\t}\n\n\t\t\t// Wouter: Complete subscriptions\n\t\t\tthis.queryChangedSubject.next(null);\n\t\t\tthis.queryChangedSubject.complete();\n\n\t\t\t// Wouter: Clear maps\n\t\t\tthis.queryListMap.clear();\n\t\t\tthis.mediaQueryListenerMap.clear();\n\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxMobileLayout.html":{"url":"interfaces/NgxMobileLayout.html","title":"interface - NgxMobileLayout","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxMobileLayout\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/mobile-layout.types.ts\n        \n\n\n            \n                Description\n            \n            \n                A layout configuration for the NgxMobileLayoutService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            flyout\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            header\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            navigation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flyout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flyout:         ComponentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional flyout we wish to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footer:         ComponentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The footer we wish to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        header\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        header:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The header we wish to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        navigation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        navigation:         ComponentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional navigation we wish to render\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nexport type ComponentType = Type | null;\n\n/**\n * A layout configuration for the `NgxMobileLayoutService`\n */\nexport interface NgxMobileLayout {\n\t/**\n\t * The header we wish to render\n\t */\n\theader?: {\n\t\t/**\n\t\t * The center part of the header we wish to render\n\t\t */\n\t\tmain?: ComponentType;\n\t\t/**\n\t\t * The left part of the header we wish to render\n\t\t */\n\t\tleft?: ComponentType;\n\t\t/**\n\t\t * The right part of the header we wish to render\n\t\t */\n\t\tright?: ComponentType;\n\t};\n\t/**\n\t * An optional flyout we wish to render\n\t */\n\tflyout?: ComponentType;\n\t/**\n\t * An optional navigation we wish to render\n\t */\n\tnavigation?: ComponentType;\n\t/**\n\t * The footer we wish to render\n\t */\n\tfooter?: ComponentType;\n}\n\n/**\n * An optional configuration for the `NgxMobileLayoutService`\n */\nexport interface NgxMobileLayoutConfiguration {\n\t/**\n\t * An optional default layout we always wish to show\n\t */\n\tlayout?: Omit;\n\t/**\n\t * The amount of time it takes (in milliseconds) for the flyout animation to be played\n\t */\n\tflyoutAnimationDuration?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxMobileLayoutComponent.html":{"url":"components/NgxMobileLayoutComponent.html","title":"component - NgxMobileLayoutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxMobileLayoutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts\n\n\n\n    \n        Description\n    \n    \n        A component used to render a mobile-first layout\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-mobile-layout\n            \n\n\n            \n                imports\n                \n                            NgComponentOutlet\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./mobile-layout.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                flyoutClass\n                            \n                            \n                                    Public\n                                layout\n                            \n                            \n                                    Private\n                                    Readonly\n                                layoutService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        flyoutClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : toSignal(\n\t\tthis.layoutService.flyoutState$.pipe(\n\t\t\tmap((state) =>\n\t\t\t\tstate === 'IN' ? 'ngx-mobile-layout-flyout-in' : 'ngx-mobile-layout-flyout-out'\n\t\t\t)\n\t\t)\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:32\n                        \n                    \n\n            \n                \n                    A class added to the flyout element when it gets added or removed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        layout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : toSignal(this.layoutService.layout$)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:27\n                        \n                    \n\n            \n                \n                    The currently displayed layout\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        layoutService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxMobileLayoutService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxMobileLayoutService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:22\n                        \n                    \n\n            \n                \n                    The instance of the NgxMobileLayoutService\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgComponentOutlet } from '@angular/common';\nimport { Component, inject, OnInit, Signal } from '@angular/core';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { RouterModule } from '@angular/router';\nimport { map } from 'rxjs';\n\nimport { NgxMobileLayoutService } from '../../services';\nimport { NgxMobileLayout } from '../../types';\n\n/**\n * A component used to render a mobile-first layout\n */\n@Component({\n\tselector: 'ngx-mobile-layout',\n\timports: [NgComponentOutlet, RouterModule],\n\ttemplateUrl: './mobile-layout.component.html',\n})\nexport class NgxMobileLayoutComponent implements OnInit {\n\t/**\n\t * The instance of the NgxMobileLayoutService\n\t */\n\tprivate readonly layoutService: NgxMobileLayoutService = inject(NgxMobileLayoutService);\n\n\t/**\n\t * The currently displayed layout\n\t */\n\tpublic layout: Signal = toSignal(this.layoutService.layout$);\n\n\t/**\n\t * A class added to the flyout element when it gets added or removed\n\t */\n\tpublic flyoutClass: Signal = toSignal(\n\t\tthis.layoutService.flyoutState$.pipe(\n\t\t\tmap((state) =>\n\t\t\t\tstate === 'IN' ? 'ngx-mobile-layout-flyout-in' : 'ngx-mobile-layout-flyout-out'\n\t\t\t)\n\t\t)\n\t);\n\n\tngOnInit(): void {\n\t\t// Iben: Sets up the initial layout if one was provided\n\t\tthis.layoutService.setUpInitialLayout();\n\t}\n}\n\n    \n\n    \n        @if(layout()) {\n\n\t@if(layout().header) {\n\t\n\t\t@if(layout().header.left) {\n\t\t\n\t\t}\n\t\t\n\n\t\t@if(layout().header.right) {\n\t\t\n\t\t}\n\t\n\t} @if(layout().navigation) {\n\t\n\t\t\n\t\n\t}\n\n\t\n\t\t\n\t\n\n\t@if(layout().flyout) {\n\t\n\t\t\n\t\n\t} @if(layout().footer) {\n\t\n\t\t\n\t\n\t}\n\n\n}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if(layout()) {\t@if(layout().header) {\t\t\t@if(layout().header.left) {\t\t\t\t}\t\t\t\t@if(layout().header.right) {\t\t\t\t}\t\t} @if(layout().navigation) {\t\t\t\t\t}\t\t\t\t\t@if(layout().flyout) {\t\t\t\t\t} @if(layout().footer) {\t\t\t\t\t}}'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxMobileLayoutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxMobileLayoutConfiguration.html":{"url":"interfaces/NgxMobileLayoutConfiguration.html","title":"interface - NgxMobileLayoutConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxMobileLayoutConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/mobile-layout.types.ts\n        \n\n\n            \n                Description\n            \n            \n                An optional configuration for the NgxMobileLayoutService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            flyoutAnimationDuration\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            layout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flyoutAnimationDuration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flyoutAnimationDuration:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The amount of time it takes (in milliseconds) for the flyout animation to be played\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        layout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        layout:         Omit\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Omit\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional default layout we always wish to show\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nexport type ComponentType = Type | null;\n\n/**\n * A layout configuration for the `NgxMobileLayoutService`\n */\nexport interface NgxMobileLayout {\n\t/**\n\t * The header we wish to render\n\t */\n\theader?: {\n\t\t/**\n\t\t * The center part of the header we wish to render\n\t\t */\n\t\tmain?: ComponentType;\n\t\t/**\n\t\t * The left part of the header we wish to render\n\t\t */\n\t\tleft?: ComponentType;\n\t\t/**\n\t\t * The right part of the header we wish to render\n\t\t */\n\t\tright?: ComponentType;\n\t};\n\t/**\n\t * An optional flyout we wish to render\n\t */\n\tflyout?: ComponentType;\n\t/**\n\t * An optional navigation we wish to render\n\t */\n\tnavigation?: ComponentType;\n\t/**\n\t * The footer we wish to render\n\t */\n\tfooter?: ComponentType;\n}\n\n/**\n * An optional configuration for the `NgxMobileLayoutService`\n */\nexport interface NgxMobileLayoutConfiguration {\n\t/**\n\t * An optional default layout we always wish to show\n\t */\n\tlayout?: Omit;\n\t/**\n\t * The amount of time it takes (in milliseconds) for the flyout animation to be played\n\t */\n\tflyoutAnimationDuration?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxMobileLayoutService.html":{"url":"injectables/NgxMobileLayoutService.html","title":"injectable - NgxMobileLayoutService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxMobileLayoutService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The NgxMobileLayoutService allows us to configure an entire layout based on routing rather than on HTML. This allows for an easier use for mobile-first applications.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                defaultLayout\n                            \n                            \n                                    Public\n                                    Readonly\n                                flyoutState$\n                            \n                            \n                                    Private\n                                    Readonly\n                                flyoutStateSubject$\n                            \n                            \n                                    Private\n                                    Readonly\n                                initialLayoutSet$\n                            \n                            \n                                    Private\n                                    Readonly\n                                initialLayoutSetSubject$\n                            \n                            \n                                    Public\n                                    Readonly\n                                layout$\n                            \n                            \n                                    Private\n                                    Readonly\n                                layoutSubject$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closeFlyout\n                            \n                            \n                                    Private\n                                getComponent\n                            \n                            \n                                    Public\n                                openFlyout\n                            \n                            \n                                    Public\n                                setLayout\n                            \n                            \n                                    Public\n                                setUpInitialLayout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        closeFlyout\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeFlyout()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:134\n                        \n                    \n\n\n            \n                \n                        Close the currently open flyout\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getComponent\n                        \n                    \n                \n            \n            \n                \n                        \n                    getComponent(component: ComponentType, fallback: ComponentType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:166\n                        \n                    \n\n\n            \n                \n                        Returns either the component or the fallback we wish to render\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                component\n                                            \n                                                            ComponentType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component\n\n\n                                            \n                                        \n                                        \n                                                fallback\n                                            \n                                                            ComponentType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe fallback\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ComponentType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        openFlyout\n                        \n                    \n                \n            \n            \n                \n                        \n                    openFlyout(flyout: ComponentType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:120\n                        \n                    \n\n\n            \n                \n                        Open a provided flyout\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                flyout\n                                            \n                                                            ComponentType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided flyout\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setLayout\n                        \n                    \n                \n            \n            \n                \n                        \n                    setLayout(layout: NgxMobileLayout)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Sets the provided layout for the\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                layout\n                                            \n                                                            NgxMobileLayout\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe layout we wish to set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setUpInitialLayout\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUpInitialLayout()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:150\n                        \n                    \n\n\n            \n                \n                        Provides an initial layout if one was provided\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        defaultLayout\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NgxMobileLayoutConfiguration | undefined\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxMobileLayoutConfigurationToken,\n\t\t{ optional: true }\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:30\n                        \n                    \n\n            \n                \n                    An optional default layout that was provided\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        flyoutState$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.flyoutStateSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:45\n                        \n                    \n\n            \n                \n                    Whether the flyout is being added or removed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        flyoutStateSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tundefined\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:38\n                        \n                    \n\n            \n                \n                    A subject holding whether the flyout is being added or not\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        initialLayoutSet$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.initialLayoutSetSubject$.pipe(\n\t\tshareReplay()\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:23\n                        \n                    \n\n            \n                \n                    Whether the initial layout has been set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        initialLayoutSetSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:18\n                        \n                    \n\n            \n                \n                    A subject holding whether the initial layout has been set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layout$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.layoutSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:57\n                        \n                    \n\n            \n                \n                    The current layout of the application as an Observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        layoutSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(undefined)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:51\n                        \n                    \n\n            \n                \n                    A subject holding the current layout of the application\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport clean from 'obj-clean';\nimport { BehaviorSubject, filter, Observable, shareReplay, Subject, take, tap } from 'rxjs';\n\nimport { NgxMobileLayoutConfigurationToken } from '../../tokens';\nimport { ComponentType, NgxMobileLayout, NgxMobileLayoutConfiguration } from '../../types';\n\n/**\n * The `NgxMobileLayoutService` allows us to configure an entire layout based on routing rather than on HTML. This allows for an easier use for mobile-first applications.\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxMobileLayoutService {\n\t/**\n\t * A subject holding whether the initial layout has been set\n\t */\n\tprivate readonly initialLayoutSetSubject$: Subject = new Subject();\n\n\t/**\n\t * Whether the initial layout has been set\n\t */\n\tprivate readonly initialLayoutSet$: Observable = this.initialLayoutSetSubject$.pipe(\n\t\tshareReplay()\n\t);\n\n\t/**\n\t * An optional default layout that was provided\n\t */\n\tprivate readonly defaultLayout: NgxMobileLayoutConfiguration | undefined = inject(\n\t\tNgxMobileLayoutConfigurationToken,\n\t\t{ optional: true }\n\t);\n\n\t/**\n\t * A subject holding whether the flyout is being added or not\n\t */\n\tprivate readonly flyoutStateSubject$: BehaviorSubject = new BehaviorSubject(\n\t\tundefined\n\t);\n\n\t/**\n\t * Whether the flyout is being added or removed\n\t */\n\tpublic readonly flyoutState$: Observable =\n\t\tthis.flyoutStateSubject$.asObservable();\n\n\t/**\n\t * A subject holding the current layout of the application\n\t */\n\tprivate readonly layoutSubject$: BehaviorSubject =\n\t\tnew BehaviorSubject(undefined);\n\n\t/**\n\t * The current layout of the application as an Observable\n\t */\n\tpublic readonly layout$: Observable = this.layoutSubject$.asObservable();\n\n\t/**\n\t * Sets the provided layout for the\n\t *\n\t * @param layout - The layout we wish to set\n\t */\n\tpublic setLayout(layout: NgxMobileLayout): Observable {\n\t\t// Iben: To prevent timing issues, we wait until the initial layout has been set\n\t\treturn this.initialLayoutSet$.pipe(\n\t\t\tfilter(Boolean),\n\t\t\ttake(1),\n\t\t\ttap(() => {\n\t\t\t\tconst defaultLayout = this.defaultLayout.layout;\n\n\t\t\t\t// Iben: If no default layout is provided, we set the layout as is\n\t\t\t\tif (!this.defaultLayout && layout) {\n\t\t\t\t\tthis.layoutSubject$.next(clean(layout) as NgxMobileLayout);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: If layout is provided, we set the default layout\n\t\t\t\tif (!layout && this.defaultLayout) {\n\t\t\t\t\tthis.layoutSubject$.next(\n\t\t\t\t\t\tclean(defaultLayout) as NgxMobileLayout\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: If a default layout is provided, we want to only replace the layout elements that weren't part of the original default\n\t\t\t\tthis.layoutSubject$.next(\n\t\t\t\t\tclean({\n\t\t\t\t\t\theader: {\n\t\t\t\t\t\t\tleft: this.getComponent(\n\t\t\t\t\t\t\t\tlayout.header?.left,\n\t\t\t\t\t\t\t\tdefaultLayout.header?.left\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tmain: this.getComponent(\n\t\t\t\t\t\t\t\tlayout.header?.main,\n\t\t\t\t\t\t\t\tdefaultLayout.header?.main\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tright: this.getComponent(\n\t\t\t\t\t\t\t\tlayout.header?.right,\n\t\t\t\t\t\t\t\tdefaultLayout.header?.right\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnavigation: this.getComponent(layout.navigation, defaultLayout.navigation),\n\t\t\t\t\t\t// Iben: The flyout is the only item that does not have a default element, so we don't have to fetch it using getComponent\n\t\t\t\t\t\tflyout: layout.flyout,\n\t\t\t\t\t\tfooter: this.getComponent(layout.footer, defaultLayout.footer),\n\t\t\t\t\t}) as NgxMobileLayout\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Open a provided flyout\n\t *\n\t * @param flyout - The provided flyout\n\t */\n\tpublic openFlyout(flyout: ComponentType) {\n\t\t// Iben: Notify the component that a flyout is about to be added\n\t\tthis.flyoutStateSubject$.next('IN');\n\n\t\t// Iben: Add the flyout\n\t\tthis.layoutSubject$.next({\n\t\t\t...this.layoutSubject$.getValue(),\n\t\t\tflyout,\n\t\t});\n\t}\n\n\t/**\n\t * Close the currently open flyout\n\t */\n\tpublic closeFlyout() {\n\t\t// Iben: Notify the component that a flyout is about to be removed\n\t\tthis.flyoutStateSubject$.next('OUT');\n\n\t\t// Iben: Remove the flyout after the specified time\n\t\tsetTimeout(() => {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\tconst { flyout, ...rest } = this.layoutSubject$.getValue();\n\n\t\t\tthis.layoutSubject$.next(rest);\n\t\t}, this.defaultLayout?.flyoutAnimationDuration || 300);\n\t}\n\n\t/**\n\t * Provides an initial layout if one was provided\n\t */\n\tpublic setUpInitialLayout(): void {\n\t\t// Iben: Set initial layout\n\t\tthis.layoutSubject$.next(\n\t\t\tclean(this.defaultLayout?.layout) as NgxMobileLayout\n\t\t);\n\n\t\t// Iben: Mark the initial layout set as true\n\t\tthis.initialLayoutSetSubject$.next(true);\n\t}\n\n\t/**\n\t * Returns either the component or the fallback we wish to render\n\t *\n\t * @param component - The component\n\t * @param fallback - The fallback\n\t */\n\tprivate getComponent(component: ComponentType, fallback: ComponentType): ComponentType {\n\t\t// Iben: If the component was explicitly set to `null`, we know we need to remove the current component and not fall back to the fallback\n\t\tif (component === null) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Either return the component, or the fallback\n\t\treturn component || fallback;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxModalAbstractComponent.html":{"url":"directives/NgxModalAbstractComponent.html","title":"directive - NgxModalAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxModalAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract for the NgxModalService\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                            \n                                    Public\n                                    Readonly\n                                ariaDescribedBy\n                            \n                            \n                                    Public\n                                    Readonly\n                                ariaLabelledBy\n                            \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    \n                                    Public\n                                onEscape\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ariaDescribedBy\n                            \n                            \n                                ariaLabelledBy\n                            \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown.escape\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ariaDescribedBy\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:31\n                            \n                        \n                \n                    \n                        An optional aria-describedBy property\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ariaLabelledBy\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:26\n                            \n                        \n                \n                    \n                        An optional aria-labelledby property\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:36\n                            \n                        \n                \n                    \n                        Optional data that can be passed to the modal\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            document:keydown.escape\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:19\n                \n            \n\n\n            \n                \n                    Remove the modal on escape pressed\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:19\n                        \n                    \n\n\n            \n                \n                        Remove the modal on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:41\n                        \n                    \n\n            \n                \n                    An emitter that will emit an action we can later respond to\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ariaDescribedBy\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:31\n                        \n                    \n\n            \n                \n                    An optional aria-describedBy property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ariaLabelledBy\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:26\n                        \n                    \n\n            \n                \n                    An optional aria-labelledby property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        close\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:47\n                        \n                    \n\n            \n                \n                    An emitter that will emit if the modal is closed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:36\n                        \n                    \n\n            \n                \n                    Optional data that can be passed to the modal\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { AfterViewInit, Directive, ElementRef, HostListener, OutputEmitterRef, inject, input, output } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nimport { NgxModalActionType } from '../../types';\n\n/**\n * An abstract for the NgxModalService\n */\n@Directive()\nexport class NgxModalAbstractComponent\n\timplements AfterViewInit\n{\n\tprivate readonly windowService = inject(NgxWindowService);\n\tprivate readonly elementRef = inject>(ElementRef);\n\n\t/**\n\t * Remove the modal on escape pressed\n\t */\n\t@HostListener('document:keydown.escape') public onEscape() {\n\t\tthis.close.emit();\n\t}\n\n\t/**\n\t * An optional aria-labelledby property\n\t */\n\tpublic readonly ariaLabelledBy = input();\n\n\t/**\n\t * An optional aria-describedBy property\n\t */\n\tpublic readonly ariaDescribedBy = input();\n\n\t/**\n\t * Optional data that can be passed to the modal\n\t */\n\tpublic readonly data = input();\n\n\t/**\n\t * An emitter that will emit an action we can later respond to\n\t */\n\tpublic action: OutputEmitterRef = output();\n\n\t/**\n\t * An emitter that will emit if the modal is closed\n\t */\n\t// eslint-disable-next-line @angular-eslint/no-output-native\n\tpublic close: OutputEmitterRef = output();\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: If we are in the browser, check if either of the two accessibility labels are set\n\t\tconst ariaLabelledBy = this.ariaLabelledBy();\n\t\tconst ariaDescribedBy = this.ariaDescribedBy();\n\t\tif (this.windowService.isBrowser() && (ariaLabelledBy || ariaDescribedBy)) {\n\t\t\t// Iben: Find the element with the id and the parent\n\t\t\tconst element = document.getElementById(ariaLabelledBy || ariaDescribedBy);\n\t\t\tconst parent = this.elementRef.nativeElement;\n\n\t\t\t// Iben: If no corresponding element was found or if it isn't part of the modal, throw an error\n\t\t\tif (!element || !parent.contains(element)) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`NgxModalAbstractComponent: The ${\n\t\t\t\t\t\tariaLabelledBy ? '\"aria-labelledBy\"' : 'aria-describedBy'\n\t\t\t\t\t} property was passed to the modal but no element with said id was found. Because of that, the necessary accessibility attributes could not be set. Please add an id with the value \"${\n\t\t\t\t\t\tariaLabelledBy || ariaDescribedBy\n\t\t\t\t\t}\" to an element of the modal.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalAriaLabelBaseOptions.html":{"url":"interfaces/NgxModalAriaLabelBaseOptions.html","title":"interface - NgxModalAriaLabelBaseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalAriaLabelBaseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            labelledById\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The label passed to the modal.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelledById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelledById:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The ID of the element that labels the modal.\nFrom the Mozilla docs:\nIt should reference brief text that provides the element with an accessible name.\n[...] a label describes the essence of an object.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalAriaLabelOptions.html":{"url":"interfaces/NgxModalAriaLabelOptions.html","title":"interface - NgxModalAriaLabelOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalAriaLabelOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalAriaLabelBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            labelledById\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelledById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelledById:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalAriaLabelledOptions.html":{"url":"interfaces/NgxModalAriaLabelledOptions.html","title":"interface - NgxModalAriaLabelledOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalAriaLabelledOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalAriaLabelBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            labelledById\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelledById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelledById:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalBaseConfiguration.html":{"url":"interfaces/NgxModalBaseConfiguration.html","title":"interface - NgxModalBaseConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalBaseConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            modals\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        modals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        modals:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The global modals that were configured in the root of the application.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalBaseOptions.html":{"url":"interfaces/NgxModalBaseOptions.html","title":"interface - NgxModalBaseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalBaseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            describedById\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onClose\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The component that should be rendered as the modal. This component must extend the\nNgxModalAbstractComponent.\nThis property will take precedence over the type property.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data that will be passed to the modal. This data will be accessible in the\nprovided component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        describedById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        describedById:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The ID of the element that describes the dialog.\nFrom the Mozilla docs:\n[...] [it] lists the ids of the descriptions or elements providing more information\nthat the user might need.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onClose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onClose:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The method that should be called when the modal is closed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The name of a config object defined in the global config at the root of\nthe project.\nIf a component value is provided alongside a type in the local config, the\ncomponent value will take precedence.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalCDKModalConfiguration.html":{"url":"interfaces/NgxModalCDKModalConfiguration.html","title":"interface - NgxModalCDKModalConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalCDKModalConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoFocus\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            injector\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            restoreFocus\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            viewContainerRef\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoFocus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoFocus:     AutoFocusTarget | string | boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AutoFocusTarget | string | boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Where (or whether) the dialog should focus after it is opened.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        injector\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        injector:     Injector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Injector\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                     The Injector used for the instantiation of the component to be attached.\nIf provided, takes precedence over the injector indirectly provided by\nthe ViewContainerRef. This will allow for host-service injection to\nthe component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        restoreFocus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        restoreFocus:     boolean | string | HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | string | HTMLElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the dialog should restore focus to the previously-focused element\nupon closing.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewContainerRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewContainerRef:     ViewContainerRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ViewContainerRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Where the attached component should live in Angular's logical component tree.\nThis affects what is available for injection and the change detection order\nfor the component instantiated inside of the dialog. This does not affect\nwhere the dialog content will be rendered in the DOM.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalComponentConfiguration.html":{"url":"interfaces/NgxModalComponentConfiguration.html","title":"interface - NgxModalComponentConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalComponentConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The component that should be rendered as the modal. This component must extend the\nNgxModalAbstractComponent.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data that will be passed to the modal. This data will be accessible in the\nprovided component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         NgxModalRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxModalRole\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The role that should be applied to the modal.\nIf the role is set to alertdialog, the modal indicates an alert or a message that\nrequires user interaction (e.g. a dismiss / proceed dialog).\nIf the role is set to dialog, the modal indicates a dialog that requires user\nattention, but no interaction. (e.g. an advertisement).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalComponentOptions.html":{"url":"interfaces/NgxModalComponentOptions.html","title":"interface - NgxModalComponentOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalComponentOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         NgxModalRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxModalRole\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The role that should be applied to the modal.\nIf the role is set to alertdialog, the modal indicates an alert or a message that\nrequires user interaction (e.g. a dismiss / proceed dialog).\nIf the role is set to dialog, the modal indicates a dialog that requires user\nattention, but no interaction. (e.g. an advertisement).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalGlobalCDKConfiguration.html":{"url":"interfaces/NgxModalGlobalCDKConfiguration.html","title":"interface - NgxModalGlobalCDKConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalGlobalCDKConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoClose\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            closeOnNavigation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            direction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hasBackdrop\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            panelClass\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoClose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoClose:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the modal should close when an event is fired.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        closeOnNavigation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        closeOnNavigation:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the modal should close on navigation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        direction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        direction:     Direction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Direction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The direction of the modal.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hasBackdrop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hasBackdrop:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the modal has a backdrop.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        panelClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        panelClass:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The class that should be applied to the modal.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxModalService.html":{"url":"injectables/NgxModalService.html","title":"injectable - NgxModalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxModalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/services/modal/modal.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A wrapper service to Angular CDK Dialog that provides a WCAG/ARIA compliant implementation of modals\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Private\n                                    Readonly\n                                dialogService\n                            \n                            \n                                    Public\n                                    Readonly\n                                hasActiveModal$\n                            \n                            \n                                    Private\n                                hasModalSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Private\n                                createModalComponent\n                            \n                            \n                                    Private\n                                getValue\n                            \n                            \n                                    Private\n                                hasRequiredDescription\n                            \n                            \n                                    Public\n                                open\n                            \n                            \n                                    Private\n                                runARIAChecks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        close\n                        \n                    \n                \n            \n            \n                \n                        \n                    close(onClose?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Closes the currently active modal\n\n@param onClose - An optional onClose function\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                onClose\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional onClose function\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createModalComponent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createModalComponent(options: NgxModalOptions, component: Type>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:177\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Creates the modal component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe options of the modal\n\n\n                                            \n                                        \n                                        \n                                                component\n                                            \n                                                            Type>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component we wish to render\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxModalAbstractComponent\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    getValue(configurationValue: any, optionsValue: any, defaultValue: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:244\n                        \n                    \n\n\n            \n                \n                        Returns a value based on whether one of the overwrites is defined\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                configurationValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe overwrite on configuration level\n\n\n                                            \n                                        \n                                        \n                                                optionsValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe overwrite on options level\n\n\n                                            \n                                        \n                                        \n                                                defaultValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe default value if no overwrite was defined\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasRequiredDescription\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasRequiredDescription(options: NgxModalOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:222\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                            \n                        \n                    \n\n            \n                \n                        Checks if the description is provided when the role requires it\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe options of the modal\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        open\n                        \n                    \n                \n            \n            \n                \n                        \n                    open(options: NgxModalOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:49\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Opens a modal based on the provided options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe modal options\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        runARIAChecks\n                        \n                    \n                \n            \n            \n                \n                        \n                    runARIAChecks(options: NgxModalOptions, component: Type>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:146\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                            \n                        \n                    \n\n            \n                \n                        Checks if all the necessary preconditions are met\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe options of the modal\n\n\n                                            \n                                        \n                                        \n                                                component\n                                            \n                                                            Type>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component we wish to render\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxModalConfigurationToken, {\n\t\toptional: true,\n\t})!\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dialogService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Dialog)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        hasActiveModal$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.hasModalSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:42\n                        \n                    \n\n            \n                \n                    An observable that keeps track of whether a modal is currently active.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasModalSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:37\n                        \n                    \n\n            \n                \n                    A subject that keeps track of whether a modal is currently active\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Dialog } from '@angular/cdk/dialog';\nimport { Injectable, Type, inject } from '@angular/core';\nimport { outputToObservable } from '@angular/core/rxjs-interop';\nimport {\n\tBehaviorSubject,\n\tcombineLatest,\n\tfilter,\n\tfinalize,\n\tmap,\n\tNEVER,\n\tObservable,\n\tstartWith,\n\ttakeUntil,\n\ttap,\n} from 'rxjs';\n\nimport { NgxModalAbstractComponent } from '../../abstracts';\nimport { NgxModalConfigurationToken } from '../../tokens';\nimport { NgxModalActionType, NgxModalConfiguration, NgxModalOptions } from '../../types';\n\n/**\n * A wrapper service to Angular CDK Dialog that provides a WCAG/ARIA compliant implementation of modals\n *\n * @export\n * @class NgxModalService\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxModalService {\n\tprivate readonly configuration = inject(NgxModalConfigurationToken, {\n\t\toptional: true,\n\t})!;\n\tprivate readonly dialogService = inject(Dialog);\n\n\t/**\n\t * A subject that keeps track of whether a modal is currently active\n\t */\n\tprivate hasModalSubject: BehaviorSubject = new BehaviorSubject(false);\n\n\t/**\n\t * An observable that keeps track of whether a modal is currently active.\n\t */\n\tpublic readonly hasActiveModal$: Observable = this.hasModalSubject.asObservable();\n\n\t/**\n\t * Opens a modal based on the provided options\n\t *\n\t * @param {NgxModalOptions} options - The modal options\n\t */\n\tpublic open(\n\t\toptions: NgxModalOptions\n\t): Observable {\n\t\t// Iben: If a previous modal is still active, we early exit.\n\t\tif (this.hasModalSubject.value) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxInform: An active modal is currently displayed, close the active modal before opening a new one'\n\t\t\t);\n\n\t\t\treturn NEVER;\n\t\t}\n\n\t\t// Iben: Declare the modal as active\n\t\tthis.hasModalSubject.next(true);\n\n\t\t// Iben: Fetch the type of component we wish to show\n\t\tconst configuration = this.configuration?.modals?.[options.type];\n\t\tconst component: Type> =\n\t\t\toptions.component ||\n\t\t\t(configuration.component as Type>);\n\n\t\t// Iben: Check if all the correct parameters are set and return NEVER when they're not correctly set\n\t\tif (!this.runARIAChecks(options, component)) {\n\t\t\treturn NEVER;\n\t\t}\n\n\t\t// Iben: Render the modal\n\t\tconst modal = this.createModalComponent(options, component);\n\n\t\t// Iben: Return the modal action\n\t\treturn combineLatest([\n\t\t\t// Iben: Set the start value to undefined so both actions at least emit once\n\t\t\toutputToObservable(modal.action).pipe(startWith(undefined)),\n\t\t\toutputToObservable(modal.close).pipe(\n\t\t\t\t// Iben: Map so we can keep the emit value void, but can work with the filter later down the line\n\t\t\t\tmap(() => 'NgxModalClose'),\n\t\t\t\t// Iben: Set the start value to undefined so both actions at least emit once\n\t\t\t\tstartWith(undefined)\n\t\t\t),\n\t\t]).pipe(\n\t\t\t// Iben: Only emit if one of the two actions actually has an emit\n\t\t\tfilter(([action, closed]: [ActionType, 'NgxModalClose']) => {\n\t\t\t\treturn Boolean(action) || Boolean(closed);\n\t\t\t}),\n\t\t\tmap(([action, closed]: [ActionType, 'NgxModalClose']) => {\n\t\t\t\treturn closed || action;\n\t\t\t}),\n\t\t\ttap((action: ActionType | 'NgxModalClose') => {\n\t\t\t\t// Iben: If the autoClose is specifically set to false, we early exit unless we're running in a close event\n\t\t\t\tif (\n\t\t\t\t\taction !== 'NgxModalClose' &&\n\t\t\t\t\t((options.autoClose !== undefined && options.autoClose === false) ||\n\t\t\t\t\t\t(configuration?.autoClose !== undefined &&\n\t\t\t\t\t\t\tconfiguration.autoClose === false))\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Close the modal\n\t\t\t\tthis.close(options.onClose);\n\t\t\t}),\n\t\t\t// Iben: Map the action back to the ActionType\n\t\t\tmap((action: ActionType | 'NgxModalClose') => {\n\t\t\t\treturn action === 'NgxModalClose' ? undefined : (action as ActionType);\n\t\t\t}),\n\t\t\t// Wouter: Unsubscribe wen no modal is open\n\t\t\ttakeUntil(this.hasModalSubject.pipe(filter((hasModal) => !hasModal)))\n\t\t);\n\t}\n\n\t/**\n\t * Closes the currently active modal\n\t *\n\t * * @param onClose - An optional onClose function\n\t */\n\tpublic close(onClose?: () => void): void {\n\t\t// Wouter: The setTimeout delay is needed, so that the `open` method can emit before its subscription end gets triggered\n\t\tsetTimeout(() => {\n\t\t\t// Iben: Close the modal\n\t\t\tthis.dialogService.closeAll();\n\n\t\t\t// Iben: Mark the modal as closed\n\t\t\tthis.hasModalSubject.next(false);\n\n\t\t\t// Iben: Run an optional onClose function\n\t\t\tif (onClose) {\n\t\t\t\tonClose();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Checks if all the necessary preconditions are met\n\t *\n\t * @param options - The options of the modal\n\t * @param  component - The component we wish to render\n\t */\n\tprivate runARIAChecks(\n\t\toptions: NgxModalOptions,\n\t\tcomponent: Type>\n\t): boolean {\n\t\t// Iben: If no component was found, we return NEVER and throw an error\n\t\tif (!component) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxInform: No component was provided or found in the configuration to render.'\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Iben: If no description was provided when required, we return NEVER and throw an error\n\t\tif (!this.hasRequiredDescription(options)) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxInform: The role of the modal was set to \"alertdialog\" but no \"describedById\" was provided.'\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Creates the modal component\n\t *\n\t * @param options - The options of the modal\n\t * @param  component - The component we wish to render\n\t */\n\tprivate createModalComponent(\n\t\toptions: NgxModalOptions,\n\t\tcomponent: Type>\n\t): NgxModalAbstractComponent {\n\t\tconst configuration = this.configuration?.modals?.[options.type];\n\n\t\t// Iben: Create the modal and render it\n\t\tconst dialogRef = this.dialogService.open(component, {\n\t\t\trole: configuration?.role || options.role,\n\t\t\tariaLabel: options.label,\n\t\t\tariaLabelledBy: options.labelledById,\n\t\t\tariaDescribedBy: options.describedById,\n\t\t\tdisableClose: true,\n\t\t\trestoreFocus: this.getValue(undefined, options.restoreFocus, true),\n\t\t\tautoFocus: this.getValue(undefined, options.autoFocus, true),\n\t\t\tviewContainerRef: options.viewContainerRef,\n\t\t\tdirection: configuration?.direction || options.direction,\n\t\t\thasBackdrop: this.getValue(configuration?.hasBackdrop, options.hasBackdrop, true),\n\t\t\tpanelClass: this.getValue(configuration?.panelClass, options.panelClass, []),\n\t\t\tcloseOnNavigation: this.getValue(\n\t\t\t\tconfiguration?.closeOnNavigation,\n\t\t\t\toptions.closeOnNavigation,\n\t\t\t\ttrue\n\t\t\t),\n\t\t\tcloseOnDestroy: true,\n\t\t\tcloseOnOverlayDetachments: true,\n\t\t});\n\t\tconst modal = dialogRef.componentInstance;\n\n\t\t// Iben: Set the data of the modal\n\t\tdialogRef.componentRef.setInput(\n\t\t\t'data',\n\t\t\tthis.getValue(configuration?.data, options.data, undefined)\n\t\t);\n\t\tdialogRef.componentRef.setInput('ariaDescribedBy', options.describedById);\n\t\tdialogRef.componentRef.setInput('ariaLabelledBy', options.labelledById);\n\n\t\treturn modal;\n\t}\n\n\t/**\n\t * Checks if the description is provided when the role requires it\n\t *\n\t * @param options - The options of the modal\n\t */\n\tprivate hasRequiredDescription(\n\t\toptions: NgxModalOptions\n\t): boolean {\n\t\t// Iben: If the options has provided a default type, we check based on the configuration role\n\t\tif (options.type) {\n\t\t\tconst configuration = this.configuration?.modals[options.type];\n\n\t\t\treturn !(configuration.role === 'alertdialog' && !options.describedById);\n\t\t}\n\n\t\t//  Iben: Check based on the options role\n\t\treturn !(options.role === 'alertdialog' && !options.describedById);\n\t}\n\n\t/**\n\t * Returns a value based on whether one of the overwrites is defined\n\t *\n\t * @private\n\t * @param configurationValue - The overwrite on configuration level\n\t * @param optionsValue - The overwrite on options level\n\t * @param defaultValue - The default value if no overwrite was defined\n\t */\n\tprivate getValue(configurationValue: any, optionsValue: any, defaultValue: any): any {\n\t\tif (configurationValue === undefined && optionsValue === undefined) {\n\t\t\treturn defaultValue;\n\t\t}\n\n\t\tif (optionsValue !== undefined) {\n\t\t\treturn optionsValue;\n\t\t}\n\n\t\treturn configurationValue;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalTypeOptions.html":{"url":"interfaces/NgxModalTypeOptions.html","title":"interface - NgxModalTypeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalTypeOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxOnlineService.html":{"url":"injectables/NgxOnlineService.html","title":"injectable - NgxOnlineService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxOnlineService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/online-service/online.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that provides the currently online status of the application\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                online$\n                            \n                            \n                                    Private\n                                    Readonly\n                                onlineSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:25\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:20\n                        \n                    \n\n            \n                \n                    A subject to handle the destroyed flow\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        online$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.onlineSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:25\n                        \n                    \n\n            \n                \n                    An observable that emits whenever the application is on or offline\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onlineSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:15\n                        \n                    \n\n            \n                \n                    A subject that emits whenever the application is on or offline\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { Observable, Subject, fromEvent, takeUntil, tap } from 'rxjs';\n\n/**\n * A service that provides the currently online status of the application\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxOnlineService implements OnDestroy {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A subject that emits whenever the application is on or offline\n\t */\n\tprivate readonly onlineSubject: Subject = new Subject();\n\n\t/**\n\t * A subject to handle the destroyed flow\n\t */\n\tprivate readonly onDestroySubject: Subject = new Subject();\n\n\t/**\n\t * An observable that emits whenever the application is on or offline\n\t */\n\tpublic readonly online$: Observable = this.onlineSubject.asObservable();\n\n\tconstructor() {\n\t\t// Iben: When we're in the browser, listen to the online and offline status of the application\n\t\tif (this.windowService.isBrowser()) {\n\t\t\t// Iben: Handle the on and offline status of the application\n\t\t\tfromEvent(window, 'online')\n\t\t\t\t.pipe(\n\t\t\t\t\ttap(() => {\n\t\t\t\t\t\tthis.onlineSubject.next(true);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\n\t\t\tfromEvent(window, 'offline')\n\t\t\t\t.pipe(\n\t\t\t\t\ttap(() => {\n\t\t\t\t\t\tthis.onlineSubject.next(false);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\t\t}\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Complete the destroyed subject\n\t\tthis.onDestroySubject.next();\n\t\tthis.onDestroySubject.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxQueryParamFormSyncComponent.html":{"url":"directives/NgxQueryParamFormSyncComponent.html","title":"directive - NgxQueryParamFormSyncComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxQueryParamFormSyncComponent\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnDestroy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                destroyed$\n                            \n                            \n                                    Public\n                                form\n                            \n                            \n                                    Protected\n                                queryParams$\n                            \n                            \n                                    Protected\n                                    Readonly\n                                route\n                            \n                            \n                                    Protected\n                                    Readonly\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clearData\n                            \n                            \n                                    Protected\n                                    Abstract\n                                    Optional\n                                handleDataChanges\n                            \n                            \n                                    Protected\n                                    Abstract\n                                initForm\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    Protected\n                                    Optional\n                                scrambleParams\n                            \n                            \n                                    Private\n                                setDataInRoute\n                            \n                            \n                                    Protected\n                                    Optional\n                                unscrambleParams\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearData\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearData()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:110\n                        \n                    \n\n\n            \n                \n                        Clears the data in the form\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                            Optional\n                        handleDataChanges\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDataChanges(data: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:161\n                        \n                    \n\n\n            \n                \n                        An optional method that will handle what happens when the data have been updated. Do NOT subscribe to an Observable in this method.\nThis method is useful in case you wish to save your currently selected data to a global state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data provided by the form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        initForm\n                        \n                    \n                \n            \n            \n                \n                        \n                    initForm()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:152\n                        \n                    \n\n\n            \n                \n                        A method that that will provide a form that will be used to store the current data\n\n\n                        \n                            Returns :     FormType\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:100\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        scrambleParams\n                        \n                    \n                \n            \n            \n                \n                        \n                    scrambleParams(params: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:168\n                        \n                    \n\n\n            \n                \n                        An optional method to scramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided params we wish to set in the route\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     QueryParamsType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setDataInRoute\n                        \n                    \n                \n            \n            \n                \n                        \n                    setDataInRoute(data: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:119\n                        \n                    \n\n\n            \n                \n                        Sets the provided data in the route, so the filtered view can be shared by url\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided data\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        unscrambleParams\n                        \n                    \n                \n            \n            \n                \n                        \n                    unscrambleParams(params: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:174\n                        \n                    \n\n\n            \n                \n                        An optional method to unscramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided params we wish to patch in the form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     QueryParamsType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormType\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:25\n                        \n                    \n\n            \n                \n                    The form in which we will save the queryParam data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        queryParams$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable>\n\n                    \n                \n                \n                    \n                        Default value : this.route\n\t\t.queryParams as Observable>\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:30\n                        \n                    \n\n            \n                \n                    The query params we wish to form\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        route\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ActivatedRoute)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Router)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n    \n        NgxQueryParamFormSyncComponent\nThe NgxQueryParamFormSyncComponent allows you to sync queryParams with a form provided in the component.\nAn ideal use-case for this component is filtered views that keep the selected filters in queryParams. This abstraction ensures that both the visual filters and the url stay in sync. This way the url can be shared, and the view will be filtered as shared.\nMethods\nWhen implementing the NgxQueryParamFormSyncComponent, there is only one method that requires implementation, being the initForm method. This method should return a form that will be used to store the queryParams in the component.\nThe component also provides a clearData method that will automatically clear the form.\nOptional methods\nOptionally, you want to interact with the changes in the form, like dispatching the data to a store. By implementing the optional handleDataChanges method, you can listen to these changes and handle them accordingly. It is very important to not subscribe to an Observable in this method, as it within itself is already used within a subscription.\nSometimes, certain data cannot be put in the queryParams without being scrambled first. This can be useful in situations in which some of the items in the queryParams are protected by GDPR, but you still wish to be able to share the url to a filtered view. In order to handle these situations, we provide the optional methods scrambleParams and the unscrambleParams, in which you can provide an implementation to scramble these items before sending them to the url.\nExample\nExample :import { scrambler, unscrambler } from 'ngx-random-package';\n\ninterface Filters {\n    searchQuery: string;\n    sorting: string;\n}\n\ninterface FiltersForm {\n    searchQuery: FormControl;\n    sorting: FormControl;\n}\n\n@Component({\n    selector: 'table-view',\n    templateUrl: './survey.component.html',\n})\nexport class TableViewComponent extends NgxQueryParamFormSyncComponent\n> {\n    constructor(\n        readonly route: ActivatedRoute,\n        readonly router: Router,\n        readonly storeService: NgxStoreService\n    ) {\n        super(route, router);\n    }\n\n    initForm(): FormGroup {\n        return new FormGroup({\n            searchQuery: new FormControl(),\n            sorting: new FormControl(),\n        });\n    }\n\n    handleDataChanges(value: Filters) {\n        this.storeService.setFilters(value);\n    }\n\n    scrambleParams(value: Filters) {\n        return {\n            ...value,\n            sorting: scrambler(value.sorting),\n        };\n    }\n\n    unscrambleParams(value: Filters) {\n        return {\n            ...value,\n            sorting: unscrambler(value.sorting),\n        };\n    }\n}\n    \n\n    \n        import { Directive, OnDestroy, OnInit, inject } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, Subject, filter, take, takeUntil, tap } from 'rxjs';\n\nexport type StringifiedQueryParamsType = {\n\t[key in keyof QueryParamsType]: string;\n};\n\n@Directive()\nexport abstract class NgxQueryParamFormSyncComponent\n\timplements OnInit, OnDestroy\n{\n\tprotected readonly route = inject(ActivatedRoute);\n\tprotected readonly router = inject(Router);\n\n\tprotected readonly destroyed$: Subject = new Subject();\n\n\t/**\n\t * The form in which we will save the queryParam data\n\t */\n\tpublic form: FormType;\n\n\t/**\n\t * The query params we wish to form\n\t */\n\tprotected queryParams$: Observable> = this.route\n\t\t.queryParams as Observable>;\n\n\tpublic ngOnInit(): void {\n\t\t//Iben: Warn the user if one of the two methods isn't provided\n\t\tif (\n\t\t\t(!this.scrambleParams && this.unscrambleParams) ||\n\t\t\t(this.scrambleParams && !this.unscrambleParams)\n\t\t) {\n\t\t\tconsole.error(\n\t\t\t\t`NgxUtils: NgxQueryParamFormSyncComponent detected the use of the parameter scrambling but is missing an implementation for the ${\n\t\t\t\t\tthis.scrambleParams ? 'unscrambleParams' : 'scrambleParams'\n\t\t\t\t} method. Please provide this method in order for this flow to work correctly.`\n\t\t\t);\n\t\t}\n\n\t\t// Iben: Setup the form for the data\n\t\tthis.form = this.initForm();\n\n\t\t// Iben: Listen to the form changes\n\t\tthis.form.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((data) => {\n\t\t\t\t\t// Iben: Update the route params\n\t\t\t\t\tthis.setDataInRoute(data);\n\n\t\t\t\t\t// Iben: Handle the route data changes\n\t\t\t\t\tif (this.handleDataChanges) {\n\t\t\t\t\t\tthis.handleDataChanges(data);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Listen to the initial query param update so we can set the data in the form if we navigate to a link with the params\n\t\tthis.queryParams$\n\t\t\t.pipe(\n\t\t\t\ttake(1),\n\t\t\t\tfilter(Boolean),\n\t\t\t\ttap((data) => {\n\t\t\t\t\t// Iben: Convert the route data properties to the actual data\n\t\t\t\t\tlet value: QueryParamsType = Object.keys(data || {}).reduce(\n\t\t\t\t\t\t(previous, current) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...previous,\n\t\t\t\t\t\t\t\t[current]: data[current] ? JSON.parse(data[current]) : undefined,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as QueryParamsType;\n\n\t\t\t\t\t// Iben: In case the unscrambleParams method is provided, we unscramble the data\n\t\t\t\t\tif (this.unscrambleParams) {\n\t\t\t\t\t\tvalue = this.unscrambleParams(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t//Iben: If the entire object is empty, we early exit and do not set the form\n\t\t\t\t\tif (Object.keys(value).length === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Set the current form value\n\t\t\t\t\tthis.form.setValue(value);\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.destroyed$.next();\n\t\tthis.destroyed$.complete();\n\n\t\tthis.clearData();\n\t}\n\n\t/**\n\t * Clears the data in the form\n\t */\n\tpublic clearData(): void {\n\t\tthis.form.reset();\n\t}\n\n\t/**\n\t * Sets the provided data in the route, so the filtered view can be shared by url\n\t *\n\t * @param  data - The provided data\n\t */\n\tprivate setDataInRoute(data: QueryParamsType): void {\n\t\t// Iben: If no data was provided, we simply unset the current params\n\t\tif (Object.keys(data || {}).length === 0) {\n\t\t\tthis.router.navigate([], {\n\t\t\t\trelativeTo: this.route,\n\t\t\t\tqueryParams: {},\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: In case a scrambleParams function was provided, we scramble the params first\n\t\tconst parsedData = this.scrambleParams ? this.scrambleParams(data) : data;\n\n\t\t// Iben: Stringify all properties of the data\n\t\tconst queryParams = Object.keys(parsedData || {}).reduce((previous, current) => {\n\t\t\treturn {\n\t\t\t\t...previous,\n\t\t\t\t[current]: JSON.stringify(parsedData[current]),\n\t\t\t};\n\t\t}, {});\n\n\t\t// Iben: Add the queryParams to the route\n\t\tthis.router.navigate([], {\n\t\t\trelativeTo: this.route,\n\t\t\tqueryParamsHandling: 'merge',\n\t\t\tqueryParams,\n\t\t});\n\t}\n\n\t/**\n\t * A method that that will provide a form that will be used to store the current data\n\t */\n\tprotected abstract initForm(): FormType;\n\n\t/**\n\t * An optional method that will handle what happens when the data have been updated. Do NOT subscribe to an Observable in this method.\n\t *\n\t * This method is useful in case you wish to save your currently selected data to a global state.\n\t *\n\t * @param data - The data provided by the form\n\t */\n\tprotected abstract handleDataChanges?(data: QueryParamsType): void;\n\n\t/**\n\t * An optional method to scramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\t *\n\t * @param params - The provided params we wish to set in the route\n\t */\n\tprotected scrambleParams?(params: QueryParamsType): QueryParamsType;\n\t/**\n\t * An optional method to unscramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\t *\n\t * @param params - The provided params we wish to patch in the form\n\t */\n\tprotected unscrambleParams?(params: QueryParamsType): QueryParamsType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxReplaceElementsConfigurationElement.html":{"url":"interfaces/NgxReplaceElementsConfigurationElement.html","title":"interface - NgxReplaceElementsConfigurationElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxReplaceElementsConfigurationElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/replace-elements.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            element\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            includeInnerHtml\n                                        \n                                \n                                \n                                        \n                                            selector\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        element:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        includeInnerHtml\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        includeInnerHtml:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selector\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selector:         NgxReplaceElementsSelector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxReplaceElementsSelector\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxReplaceElementsSelector = `${string}{{id}}${string}`;\n\nexport interface NgxReplaceElementsConfigurationElement {\n\telement: string;\n\tselector: NgxReplaceElementsSelector;\n\tincludeInnerHtml?: boolean;\n}\n\nexport type NgxReplaceElementsConfiguration = Record;\n\nexport interface NgxReplaceElementsItem {\n\tid: string;\n\telementId: string;\n\tdata?: Record, string>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxReplaceElementsItem.html":{"url":"interfaces/NgxReplaceElementsItem.html","title":"interface - NgxReplaceElementsItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxReplaceElementsItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/replace-elements.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            elementId\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     Record | string>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record | string>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxReplaceElementsSelector = `${string}{{id}}${string}`;\n\nexport interface NgxReplaceElementsConfigurationElement {\n\telement: string;\n\tselector: NgxReplaceElementsSelector;\n\tincludeInnerHtml?: boolean;\n}\n\nexport type NgxReplaceElementsConfiguration = Record;\n\nexport interface NgxReplaceElementsItem {\n\tid: string;\n\telementId: string;\n\tdata?: Record, string>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxReplaceElementsPipe.html":{"url":"pipes/NgxReplaceElementsPipe.html","title":"pipe - NgxReplaceElementsPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxReplaceElementsPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that allows to replace text elements with a WebComponent\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxReplaceElements\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string, items: NgxReplaceElementsItem[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts:24\n                        \n                    \n\n\n            \n                \n                        Replaces all matches of a specific selector with provided WebComponents\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe original string value\n\n\n                                            \n                                        \n                                        \n                                                items\n                                            \n                                                            NgxReplaceElementsItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe items we wish to replace\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SafeHtml\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxReplaceElementsConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sanitizer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DomSanitizer)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n    \n        ngxReplaceElements\nThe ngxReplaceElements pipe will provide a way to transform a string that contains one or more parts that need an Angular component by taking advantage of Angular web components.\nThis can be useful in combination with translation strings that require in-app links or WYSIWYG content from an external source.\nHow to use\nSet up\nThe pipe requires a couple of things to be provided before it can be used.\nFirst, create a component that will be used to replace your target:\nExample :@Component({\n    selector: 'link',\n    template: '',\n})\nexport class LinkComponent {\n    // Keep in mind that Angular's innerHTML & outerHTML will convert attributes to lower casing.\n    // This input property will need to be lowercased to make this work.\n    public link: InputSignal: input();\n}Then register it as a web component in your app.component.ts:\nExample :@Component({\n    //...\n})\nexport class AppComponent {\n    constructor(\n        // ...\n        private readonly windowService: NgxWindowService,\n        private readonly injector: Injector\n    ) {\n        // Note that we are using our NgxWindowService (ngx-core) to avoid SSR issues.\n        if (this.windowService.isBrowser) {\n            const linkComponent = createCustomElement(LinkComponent, { injector: this.injector });\n\n            customElements.define('ngx-link', linkComponent);\n        }\n    }\n}Lastly set up the global config in your root provider array:\nExample :providers: [\n    //...\n    provideNgxReplaceElementsConfiguration({\n        link: {\n            element: 'ngx-link',\n            selector: 'a[data-link-id={{id}}]',\n            includeInnerHtml: true,\n        },\n        image: {\n            element: 'ngx-image',\n            selector: 'img[data-link-id={{id}}]',\n        },\n    }),\n];For each element we want to register, we define the WebComponent name using the element property. In order to be able to select an item to replace later on in the text, we create a selector. This selector should always include a part to identify the id, being {{id}}.\nIf we wish to use the original innerText of the element whilst replacing, we can do so by setting includeInnerHtml to true.\nUsing the pipe\nWhen the web component is set up, you can start using the pipe.\nFirst set up anchors in your input string:\nExample :\"This is a text with a link.\"The someUniqueId will be used by the pipe to find and replace your link element so make sure that each anchor within your translation has a unique identifier.\nWithin the template you can now provide the string and transform it like this:\nExample :Whilst id refers to the id in the string, elementId refers to the element we have configured in the configuration.\nThe data property can be used to set the inputs of our provided WebComponent. We once again want to stress that due to the nature of WebComponents, these properties can only have lowercase keys.\n\n    \n\n    \n        import { Pipe, PipeTransform, inject } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\nimport { NgxReplaceElementsConfigurationToken } from '../../tokens';\nimport { NgxReplaceElementsConfiguration, NgxReplaceElementsItem } from '../../types';\n\n/**\n * A pipe that allows to replace text elements with a WebComponent\n */\n@Pipe({\n\tname: 'ngxReplaceElements',\n\tstandalone: true,\n})\nexport class NgxReplaceElementsPipe implements PipeTransform {\n\tprivate readonly configuration = inject(NgxReplaceElementsConfigurationToken);\n\tprivate readonly sanitizer = inject(DomSanitizer);\n\n\t/**\n\t * Replaces all matches of a specific selector with provided WebComponents\n\t *\n\t * @param value - The original string value\n\t * @param items - The items we wish to replace\n\t */\n\ttransform(value: string, items: NgxReplaceElementsItem[]): SafeHtml {\n\t\t// Iben: If the value isn't a string we early exit and warn the user\n\t\tif (typeof value !== 'string') {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxReplaceElements: A non string-value was provided to the NgxReplaceElementsPipe'\n\t\t\t);\n\t\t\treturn '';\n\t\t}\n\n\t\t// Iben: If no items were provided to replace, we just return the value\n\t\tif (!items || items.length === 0) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: set up a new instance of the DOMParser and parse the value as text/html.\n\t\t// This will return a Document which we can work with to find/replace elements.\n\t\tconst parser: DOMParser = new DOMParser();\n\t\tconst body: Document = parser.parseFromString(value, 'text/html');\n\n\t\t// Iben: Loop over all items we wish to replace\n\t\titems.forEach((item) => {\n\t\t\t// Iben: Get the selector and the element we want to replace the target with\n\t\t\tconst { selector, element, includeInnerHtml } = this.configuration[item.elementId];\n\n\t\t\t// Iben: Select the target\n\t\t\tconst target: HTMLElement = body.querySelector(selector.replace('{{id}}', item.id));\n\n\t\t\t// Iben: If no target was found, early exit\n\t\t\tif (!target) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Iben: Create a new element within the Document based on the provided selector.\n\t\t\t// The selector can be any native or custom web component (not an Angular component).\n\t\t\t// Keep in mind that the element will need to have a lowercase input prop for the reference.\n\t\t\tconst replacement: HTMLElement = body.createElement(element);\n\n\t\t\t// Iben: If the item included data, we set these attributes\n\t\t\tif (item.data) {\n\t\t\t\tObject.entries(item.data).forEach(([key, value]) => {\n\t\t\t\t\treplacement.setAttribute(key, value);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Iben: Copy the innerHtml of the target element to the new element if needed.\n      if (includeInnerHtml) {\n\t\t\treplacement.innerHTML = target.innerHTML;\n\t\t}\n\n\t\t\t// Iben: Replace the target with the new element within the Document.\n\t\t\ttarget.replaceWith(replacement);\n\t\t});\n\n\t\t// Iben: sanitize the document and mark it as trusted HTML before returning it to the template.\n\t\treturn this.sanitizer.bypassSecurityTrustHtml(body.documentElement.innerHTML);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxSaveOnExitAbstractService.html":{"url":"classes/NgxSaveOnExitAbstractService.html","title":"class - NgxSaveOnExitAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxSaveOnExitAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.service.abstract.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bypassSaveOnExit\n                            \n                            \n                                    Public\n                                    Abstract\n                                handleDirtyState\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bypassSaveOnExit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.service.abstract.ts:15\n                        \n                    \n\n            \n                \n                    An optional method that, if implemented, provides the ability to bypass the guard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        handleDirtyState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.service.abstract.ts:10\n                        \n                    \n\n            \n                \n                    Take action when the component is dirty\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxSaveOnExitComponent } from './save-on-exit.component.abstract';\n\nexport abstract class NgxSaveOnExitAbstractService {\n\t/**\n\t * Take action when the component is dirty\n\t */\n\tpublic abstract handleDirtyState: (component: NgxSaveOnExitComponent) => Observable;\n\n\t/**\n\t * An optional method that, if implemented, provides the ability to bypass the guard\n\t */\n\tpublic bypassSaveOnExit?: (\n\t\tcurrentRoute: ActivatedRouteSnapshot,\n\t\tnextState: RouterStateSnapshot\n\t) => boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxSaveOnExitComponent.html":{"url":"directives/NgxSaveOnExitComponent.html","title":"directive - NgxSaveOnExitComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxSaveOnExitComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                allowBeforeUnloadHandler\n                            \n                            \n                                    Public\n                                    Readonly\n                                destroyed$\n                            \n                            \n                                    Private\n                                    Readonly\n                                destroyedSubject$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleUnloadEvent\n                            \n                            \n                                    Public\n                                    Abstract\n                                isDirty\n                            \n                            \n                                    Public\n                                    Abstract\n                                isValid\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:beforeunload\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            window:beforeunload\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:12\n                \n            \n\n\n            \n                \n                    Handles the unload event of the browser and will warn the user that the application prevented the user from closing the browser\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe unload event from the browser\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUnloadEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUnloadEvent(event: BeforeUnloadEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:beforeunload', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:12\n                        \n                    \n\n\n            \n                \n                        Handles the unload event of the browser and will warn the user that the application prevented the user from closing the browser\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        BeforeUnloadEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unload event from the browser\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        isDirty\n                        \n                    \n                \n            \n            \n                \n                        \n                    isDirty()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:38\n                        \n                    \n\n\n            \n                \n                        Return whether or not the component is dirty\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        isValid\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValid()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:43\n                        \n                    \n\n\n            \n                \n                        Return whether or not the component is valid\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        allowBeforeUnloadHandler\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:33\n                        \n                    \n\n            \n                \n                    Whether or not the beforeUnload event should be intercepted or not. By default, this behavior is set to false\nIf set to true, closing a tab or the browser will be interrupted and a message will be displayed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.destroyedSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:27\n                        \n                    \n\n            \n                \n                    An observable that emits the onDestroy event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        destroyedSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:22\n                        \n                    \n\n            \n                \n                    A subject to handle the onDestroy flow\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Directive()\nexport abstract class NgxSaveOnExitComponent implements OnDestroy {\n\t/**\n\t * Handles the unload event of the browser and will warn the user that the application prevented the user from closing the browser\n\t *\n\t * @param event - The unload event from the browser\n\t */\n\t@HostListener('window:beforeunload', ['$event'])\n\thandleUnloadEvent(event: BeforeUnloadEvent) {\n\t\t// Iben: If the component is dirty, we prevent the browser from closing the window or tab\n\t\tif (this.allowBeforeUnloadHandler && this.isDirty()) {\n\t\t\tevent.returnValue = true;\n\t\t}\n\t}\n\n\t/**\n\t * A subject to handle the onDestroy flow\n\t */\n\tprivate readonly destroyedSubject$ = new Subject();\n\n\t/**\n\t * An observable that emits the onDestroy event\n\t */\n\tpublic readonly destroyed$ = this.destroyedSubject$.asObservable();\n\n\t/**\n\t * Whether or not the beforeUnload event should be intercepted or not. By default, this behavior is set to false\n\t * If set to true, closing a tab or the browser will be interrupted and a message will be displayed\n\t */\n\tpublic readonly allowBeforeUnloadHandler: boolean = false;\n\n\t/**\n\t * Return whether or not the component is dirty\n\t */\n\tpublic abstract isDirty(): boolean;\n\n\t/**\n\t * Return whether or not the component is valid\n\t */\n\tpublic abstract isValid(): boolean;\n\n\tngOnDestroy() {\n\t\t// Iben: Emit if the component gets destroyed\n\t\tthis.destroyedSubject$.next(undefined);\n\t\tthis.destroyedSubject$.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxSignalStoreService.html":{"url":"injectables/NgxSignalStoreService.html","title":"injectable - NgxSignalStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxSignalStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/abstracts/store.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service that can be used to store handle a NgxSignalStore\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createdStore: NgxSignalStoreRecord)\n                    \n                \n                        \n                            \n                                Defined in libs/angular/store/src/lib/signal/abstracts/store.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createdStore\n                                                  \n                                                        \n                                                                        NgxSignalStoreRecord\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxSignalStore\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/signal/abstracts/store.service.ts:19\n                        \n                    \n\n            \n                \n                    The store we preserve the state in\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/store/src/lib/signal/abstracts/store.service.ts:30\n                                \n                            \n                    \n                        \n                                Returns a read only version of the state\n\n\n                                \n                                    Returns :         NgxSignalStoreViewState\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Inject, Injectable } from '@angular/core';\n\nimport {\n\tNgxSignalStore,\n\tNgxSignalStoreRecord,\n\tNgxSignalStoreState,\n\tNgxSignalStoreViewState,\n} from '../types';\nimport { injectNgxSignalStore } from '../utils';\n\n/**\n * An abstract service that can be used to store handle a NgxSignalStore\n */\n@Injectable()\nexport abstract class NgxSignalStoreService {\n\t/**\n\t * The store we preserve the state in\n\t */\n\tprotected store: NgxSignalStore;\n\n\t// eslint-disable-next-line @angular-eslint/prefer-inject\n\tconstructor(@Inject('store') createdStore: NgxSignalStoreRecord) {\n\t\t// Iben: Inject the created store\n\t\tthis.store = injectNgxSignalStore(createdStore);\n\t}\n\n\t/**\n\t * Returns a read only version of the state\n\t */\n\tpublic get state(): NgxSignalStoreViewState {\n\t\t// Iben: If no initial created store was passed to the service, we early exit\n\t\tif (!this.store) {\n\t\t\tconsole.error(\n\t\t\t\t'@ibenvandeveire/ngx-store: No created store was provided to the NgxSignalStoreService in the constructor, so no state could be generated.'\n\t\t\t);\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Return the store\n\t\treturn this.store;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxSignalStoreSlice.html":{"url":"interfaces/NgxSignalStoreSlice.html","title":"interface - NgxSignalStoreSlice","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxSignalStoreSlice\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/types/signal-store.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Data of an individual slice within an NgxSignalStore\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Signal } from '@angular/core';\nimport { SignalStoreFeature } from '@ngrx/signals';\nimport { MethodsDictionary } from 'node_modules/@ngrx/signals/src/signal-store-models';\n\nimport {\n\tArrayElementType,\n\tNgxSignalStoreSelectFunction,\n\tNgxSignalStoreSliceArrayGenerator,\n\tNgxSignalStoreSliceGenerator,\n} from './signal-store-generator.types';\n\n/**\n * Data of an individual slice within an NgxSignalStore\n * @template DataType - The type of the data, by default unknown\n */\nexport interface NgxSignalStoreSlice {\n\tdata: DataType;\n\tloading: boolean;\n\terror: boolean;\n}\n\n/**\n * The configuration to setup a slice in the NgxSignalStore\n */\nexport type NgxSignalStoreConfiguration = {\n\t[Key in keyof StateType]: NgxSignalStoreSliceConfiguration\n\t>;\n};\n\n/**\n * The configuration of a slice in the NgxSignalStore\n */\ntype NgxSignalStoreSliceConfiguration = DataType extends unknown[]\n\t? DataType extends { id: string | number }[]\n\t\t? {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t  }\n\t\t: {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t\t\tselectId: NgxSignalStoreSelectFunction;\n\t\t  }\n\t: DataType extends string | boolean | number | object\n\t? {\n\t\t\tgenerator: NgxSignalStoreSliceGenerator;\n\t\t\tinitialData?: DataType;\n\t  }\n\t: any;\n\n/**\n * The state of a store\n */\nexport type NgxSignalStoreState = Record;\n\n/**\n * Extracts the data type out of a NgxSignalStoreSlice\n */\ntype NgxSignalStoreSliceDataType = Type extends NgxSignalStoreSlice\n\t? DataType\n\t: never;\n\n/**\n * The methods that are available in the store\n */\ntype NgxSignalStoreSliceMethods = DataType extends unknown[]\n\t? NgxSignalStoreSliceArrayMethods\n\t: NgxSignalStoreSliceBaseMethods;\n\n/**\n * The methods that are available in the store for all slices\n */\nexport interface NgxSignalStoreSliceBaseMethods extends MethodsDictionary {\n\tset: (data: DataType) => void;\n\treset: () => void;\n\tclear: () => void;\n\tsetError: (error: boolean) => void;\n\tsetLoading: (loading: boolean) => void;\n}\n\n/**\n * Extra methods that are available in the store for array slices\n */\nexport interface NgxSignalStoreSliceArrayMethods\n\textends NgxSignalStoreSliceBaseMethods {\n\tadd: (data: DataType | ArrayElementType) => void;\n\tprepend: (data: DataType | ArrayElementType) => void;\n\tupdate: (data: ArrayElementType) => void;\n\tremove: (data: ArrayElementType) => void;\n}\n\n/**\n * The methods that are available to the dispatchDataToSignalStore method\n */\nexport type NgxSignalStoreDispatchActions = keyof Omit,\n\t'reset' | 'clear' | 'setError' | 'setLoading'\n>;\n\n/**\n * A record of the NgxSignalStore slices\n */\nexport type NgxSignalStoreRecord = {\n\t[Key in keyof StateType]: SignalStoreFeature>;\n\t\tprops: undefined;\n\t\tmethods: NgxSignalStoreSliceMethods>;\n\t}>;\n};\n\n/**\n * A readonly version of the NgxSignalStore\n */\nexport type NgxSignalStoreViewState = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t};\n};\n\n/**\n * A writable version of the NgxSignalStore\n */\nexport type NgxSignalStore = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t} & NgxSignalStoreSliceMethods>;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxSignalStoreSliceArrayMethods.html":{"url":"interfaces/NgxSignalStoreSliceArrayMethods.html","title":"interface - NgxSignalStoreSliceArrayMethods","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxSignalStoreSliceArrayMethods\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/types/signal-store.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Extra methods that are available in the store for array slices\n\n            \n\n            \n                Extends\n            \n            \n                            NgxSignalStoreSliceBaseMethods\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            add\n                                        \n                                \n                                \n                                        \n                                            prepend\n                                        \n                                \n                                \n                                        \n                                            remove\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        add\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        add:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prepend\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prepend:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        remove\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        remove:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Signal } from '@angular/core';\nimport { SignalStoreFeature } from '@ngrx/signals';\nimport { MethodsDictionary } from 'node_modules/@ngrx/signals/src/signal-store-models';\n\nimport {\n\tArrayElementType,\n\tNgxSignalStoreSelectFunction,\n\tNgxSignalStoreSliceArrayGenerator,\n\tNgxSignalStoreSliceGenerator,\n} from './signal-store-generator.types';\n\n/**\n * Data of an individual slice within an NgxSignalStore\n * @template DataType - The type of the data, by default unknown\n */\nexport interface NgxSignalStoreSlice {\n\tdata: DataType;\n\tloading: boolean;\n\terror: boolean;\n}\n\n/**\n * The configuration to setup a slice in the NgxSignalStore\n */\nexport type NgxSignalStoreConfiguration = {\n\t[Key in keyof StateType]: NgxSignalStoreSliceConfiguration\n\t>;\n};\n\n/**\n * The configuration of a slice in the NgxSignalStore\n */\ntype NgxSignalStoreSliceConfiguration = DataType extends unknown[]\n\t? DataType extends { id: string | number }[]\n\t\t? {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t  }\n\t\t: {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t\t\tselectId: NgxSignalStoreSelectFunction;\n\t\t  }\n\t: DataType extends string | boolean | number | object\n\t? {\n\t\t\tgenerator: NgxSignalStoreSliceGenerator;\n\t\t\tinitialData?: DataType;\n\t  }\n\t: any;\n\n/**\n * The state of a store\n */\nexport type NgxSignalStoreState = Record;\n\n/**\n * Extracts the data type out of a NgxSignalStoreSlice\n */\ntype NgxSignalStoreSliceDataType = Type extends NgxSignalStoreSlice\n\t? DataType\n\t: never;\n\n/**\n * The methods that are available in the store\n */\ntype NgxSignalStoreSliceMethods = DataType extends unknown[]\n\t? NgxSignalStoreSliceArrayMethods\n\t: NgxSignalStoreSliceBaseMethods;\n\n/**\n * The methods that are available in the store for all slices\n */\nexport interface NgxSignalStoreSliceBaseMethods extends MethodsDictionary {\n\tset: (data: DataType) => void;\n\treset: () => void;\n\tclear: () => void;\n\tsetError: (error: boolean) => void;\n\tsetLoading: (loading: boolean) => void;\n}\n\n/**\n * Extra methods that are available in the store for array slices\n */\nexport interface NgxSignalStoreSliceArrayMethods\n\textends NgxSignalStoreSliceBaseMethods {\n\tadd: (data: DataType | ArrayElementType) => void;\n\tprepend: (data: DataType | ArrayElementType) => void;\n\tupdate: (data: ArrayElementType) => void;\n\tremove: (data: ArrayElementType) => void;\n}\n\n/**\n * The methods that are available to the dispatchDataToSignalStore method\n */\nexport type NgxSignalStoreDispatchActions = keyof Omit,\n\t'reset' | 'clear' | 'setError' | 'setLoading'\n>;\n\n/**\n * A record of the NgxSignalStore slices\n */\nexport type NgxSignalStoreRecord = {\n\t[Key in keyof StateType]: SignalStoreFeature>;\n\t\tprops: undefined;\n\t\tmethods: NgxSignalStoreSliceMethods>;\n\t}>;\n};\n\n/**\n * A readonly version of the NgxSignalStore\n */\nexport type NgxSignalStoreViewState = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t};\n};\n\n/**\n * A writable version of the NgxSignalStore\n */\nexport type NgxSignalStore = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t} & NgxSignalStoreSliceMethods>;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxSignalStoreSliceBaseMethods.html":{"url":"interfaces/NgxSignalStoreSliceBaseMethods.html","title":"interface - NgxSignalStoreSliceBaseMethods","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxSignalStoreSliceBaseMethods\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/types/signal-store.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The methods that are available in the store for all slices\n\n            \n\n            \n                Extends\n            \n            \n                        MethodsDictionary\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                        \n                                            reset\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                                \n                                        \n                                            setError\n                                        \n                                \n                                \n                                        \n                                            setLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reset:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setError:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setLoading:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Signal } from '@angular/core';\nimport { SignalStoreFeature } from '@ngrx/signals';\nimport { MethodsDictionary } from 'node_modules/@ngrx/signals/src/signal-store-models';\n\nimport {\n\tArrayElementType,\n\tNgxSignalStoreSelectFunction,\n\tNgxSignalStoreSliceArrayGenerator,\n\tNgxSignalStoreSliceGenerator,\n} from './signal-store-generator.types';\n\n/**\n * Data of an individual slice within an NgxSignalStore\n * @template DataType - The type of the data, by default unknown\n */\nexport interface NgxSignalStoreSlice {\n\tdata: DataType;\n\tloading: boolean;\n\terror: boolean;\n}\n\n/**\n * The configuration to setup a slice in the NgxSignalStore\n */\nexport type NgxSignalStoreConfiguration = {\n\t[Key in keyof StateType]: NgxSignalStoreSliceConfiguration\n\t>;\n};\n\n/**\n * The configuration of a slice in the NgxSignalStore\n */\ntype NgxSignalStoreSliceConfiguration = DataType extends unknown[]\n\t? DataType extends { id: string | number }[]\n\t\t? {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t  }\n\t\t: {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t\t\tselectId: NgxSignalStoreSelectFunction;\n\t\t  }\n\t: DataType extends string | boolean | number | object\n\t? {\n\t\t\tgenerator: NgxSignalStoreSliceGenerator;\n\t\t\tinitialData?: DataType;\n\t  }\n\t: any;\n\n/**\n * The state of a store\n */\nexport type NgxSignalStoreState = Record;\n\n/**\n * Extracts the data type out of a NgxSignalStoreSlice\n */\ntype NgxSignalStoreSliceDataType = Type extends NgxSignalStoreSlice\n\t? DataType\n\t: never;\n\n/**\n * The methods that are available in the store\n */\ntype NgxSignalStoreSliceMethods = DataType extends unknown[]\n\t? NgxSignalStoreSliceArrayMethods\n\t: NgxSignalStoreSliceBaseMethods;\n\n/**\n * The methods that are available in the store for all slices\n */\nexport interface NgxSignalStoreSliceBaseMethods extends MethodsDictionary {\n\tset: (data: DataType) => void;\n\treset: () => void;\n\tclear: () => void;\n\tsetError: (error: boolean) => void;\n\tsetLoading: (loading: boolean) => void;\n}\n\n/**\n * Extra methods that are available in the store for array slices\n */\nexport interface NgxSignalStoreSliceArrayMethods\n\textends NgxSignalStoreSliceBaseMethods {\n\tadd: (data: DataType | ArrayElementType) => void;\n\tprepend: (data: DataType | ArrayElementType) => void;\n\tupdate: (data: ArrayElementType) => void;\n\tremove: (data: ArrayElementType) => void;\n}\n\n/**\n * The methods that are available to the dispatchDataToSignalStore method\n */\nexport type NgxSignalStoreDispatchActions = keyof Omit,\n\t'reset' | 'clear' | 'setError' | 'setLoading'\n>;\n\n/**\n * A record of the NgxSignalStore slices\n */\nexport type NgxSignalStoreRecord = {\n\t[Key in keyof StateType]: SignalStoreFeature>;\n\t\tprops: undefined;\n\t\tmethods: NgxSignalStoreSliceMethods>;\n\t}>;\n};\n\n/**\n * A readonly version of the NgxSignalStore\n */\nexport type NgxSignalStoreViewState = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t};\n};\n\n/**\n * A writable version of the NgxSignalStore\n */\nexport type NgxSignalStore = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t} & NgxSignalStoreSliceMethods>;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorage.html":{"url":"interfaces/NgxStorage.html","title":"interface - NgxStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                        \n                                            getItem\n                                        \n                                \n                                \n                                        \n                                            getItemObservable\n                                        \n                                \n                                \n                                        \n                                            removeItem\n                                        \n                                \n                                \n                                        \n                                            setItem\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItemObservable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getItemObservable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        removeItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        removeItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageBaseEvent.html":{"url":"interfaces/NgxStorageBaseEvent.html","title":"interface - NgxStorageBaseEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageBaseEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            storage\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        storage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        storage:         NgxStorageType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxStorageType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"set\" | \"clear\" | \"remove\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"set\" | \"clear\" | \"remove\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageClearEvent.html":{"url":"interfaces/NgxStorageClearEvent.html","title":"interface - NgxStorageClearEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageClearEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStorageBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageRemoveEvent.html":{"url":"interfaces/NgxStorageRemoveEvent.html","title":"interface - NgxStorageRemoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageRemoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStorageBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            oldValue\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oldValue:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxStorageService.html":{"url":"injectables/NgxStorageService.html","title":"injectable - NgxStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxStorageService\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/services/storage-service/storage.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that provides a SSR-proof Observable based approach to the session- and localStorage.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                localStorageRecord\n                            \n                            \n                                    Private\n                                    Readonly\n                                sessionStorageRecord\n                            \n                            \n                                    Public\n                                    Readonly\n                                storageEvents$\n                            \n                            \n                                    Private\n                                    Readonly\n                                storageEventSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clearStorage\n                            \n                            \n                                    Private\n                                getItem\n                            \n                            \n                                    Private\n                                getItemObservable\n                            \n                            \n                                    Private\n                                parseValue\n                            \n                            \n                                    Private\n                                removeItem\n                            \n                            \n                                    Private\n                                setItem\n                            \n                            \n                                    Private\n                                setupStorage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    localStorage\n                                \n                                \n                                    sessionStorage\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:39\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clearStorage\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearStorage(storage: Storage, record: NgxStorageRecord, type: NgxStorageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:214\n                        \n                    \n\n\n            \n                \n                        Clears the storage, completes all subjects and emits a clear event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage we wish to clear\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe record with the subjects\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            NgxStorageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of storage\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     NgxStorageClearEvent | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItem(key: string, storage: Storage)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:83\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getItemObservable\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItemObservable(key: string, record: NgxStorageRecord)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:93\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Returns an observable version of the storage value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the storage value\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage record\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseValue(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:265\n                        \n                    \n\n\n            \n                \n                        Parses a string value from the storage to an actual value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided string value\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        removeItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeItem(key: string, storage: Storage, record: NgxStorageRecord, type: NgxStorageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Remove an item from the storage and emit a remove event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the item\n\n\n                                            \n                                        \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage we wish to remove the item from\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe record with the subject\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            NgxStorageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of storage\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     NgxStorageRemoveEvent | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    setItem(key: string, item: DataType, storage: Storage, record: NgxStorageRecord, type: NgxStorageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:122\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Sets an item in the storage\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the item\n\n\n                                            \n                                        \n                                        \n                                                item\n                                            \n                                                            DataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe item in the storage\n\n\n                                            \n                                        \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage in which we want to save the item\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe corresponding storage record\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            NgxStorageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     NgxStorageSetEvent | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setupStorage\n                        \n                    \n                \n            \n            \n                \n                        \n                    setupStorage(storage: Storage, record: NgxStorageRecord)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:254\n                        \n                    \n\n\n            \n                \n                        Grabs the existing storage and updates the record\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current state of the storage\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        localStorageRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxStorageRecord\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:29\n                        \n                    \n\n            \n                \n                    A record to hold the properties in the localStorage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sessionStorageRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxStorageRecord\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:25\n                        \n                    \n\n            \n                \n                    A record to hold the properties in the sessionStorage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        storageEvents$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.storageEventSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:38\n                        \n                    \n\n            \n                \n                    An observable that emits whenever the session- or the localStorage was updated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        storageEventSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:33\n                        \n                    \n\n            \n                \n                    A subject to hold the events of the storage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        localStorage\n                    \n                \n\n                \n                    \n                        getlocalStorage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:54\n                                \n                            \n                    \n                        \n                                A localStorage implementation using observables\n\n\n                                \n                                    Returns :         NgxStorage\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        sessionStorage\n                    \n                \n\n                \n                    \n                        getsessionStorage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:70\n                                \n                            \n                    \n                        \n                                A sessionStorage implementation using observables\n\n\n                                \n                                    Returns :         NgxStorage\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n    \n        NgxStorageService\nThe NgxStorageService provides a SSR proof Observable approach to both session- and localStorage. It allows for listing to change events on specific properties or on the entire storage.\nApproach\nIn order to provide an Observable based approach to both the session- and localStorage, the session provides a localStorage and a sessionStorage object that offer custom methods that will also emit to the corresponding Observables. Data that was set to the session- or localStorage on the window directly will not be represented in the Observable.\nOn top of an Observable based approach, the new localStorage and sessionStorage implementations will automatically parse the data to a string when saving it to the window session- or localStorage, and will return the parsed value back when calling either getItem or getItemObservable.\nThe service is also SSR proof, and will prevent any actions from occurring when not in the browser.\nProperties\nlocalStorage/sessionStorage\nThe localStorage and sessionStorage objects of the NgxStorageService provide an Observable based approach to storage.\nIf we want to get an item from the storage, we can either use getItem or getItemObservable if we want the real time value vs an Observable respectively.\nUsing setItem and removeItem will set and remove an item in/from the storage respectively, and will emit an event on the storageEvents$ Observable.\nWhen using clear, the entire storage will be cleared, the Observables that were fetched using getItemObservable will be completed and an event will be emitted on the storageEvents$ observable.\nExample :import { NgxStorageService } from '@ibenvandeveire/ngx-utils';\n\nexport class YourComponent {\n    constructor(private storageService: NgxStorageService) {\n        storageService.localStorage.setItem('Hello', { world: true });\n        storageService.sessionStorage.setItem('Hello', { world: true });\n    }\n}storageEvents$\nThe storageEvents$ property is an Observable that will emit a NgxStorageEvent whenever the session- or localStorage was updated (set or remove) or cleared.\nExample :import { NgxStorageService } from '@ibenvandeveire/ngx-utils';\n\nexport class YourComponent {\n    constructor(private storageService: NgxStorageService) {\n        storageService.storageEvent$.subscribe(console.log);\n        // logs: {type: 'update', oldValue: undefined, newValue: {world: true}, key: 'Hello', storage: 'local'}\n        storageService.localStorage.setItem('Hello', { world: true });\n    }\n}\n    \n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { BehaviorSubject, NEVER, Observable, Subject } from 'rxjs';\n\nimport {\n\tNgxStorage,\n\tNgxStorageClearEvent,\n\tNgxStorageEvent,\n\tNgxStorageRecord,\n\tNgxStorageRemoveEvent,\n\tNgxStorageSetEvent,\n\tNgxStorageType,\n} from '../../types';\n\n/**\n * A service that provides a SSR-proof Observable based approach to the session- and localStorage.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxStorageService {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A record to hold the properties in the sessionStorage\n\t */\n\tprivate readonly sessionStorageRecord: NgxStorageRecord = {};\n\t/**\n\t * A record to hold the properties in the localStorage\n\t */\n\tprivate readonly localStorageRecord: NgxStorageRecord = {};\n\t/**\n\t * A subject to hold the events of the storage\n\t */\n\tprivate readonly storageEventSubject: Subject = new Subject();\n\n\t/**\n\t * An observable that emits whenever the session- or the localStorage was updated\n\t */\n\tpublic readonly storageEvents$: Observable =\n\t\tthis.storageEventSubject.asObservable();\n\n\tconstructor() {\n\t\tconst windowService = this.windowService;\n\n\t\t// Iben: Get the initial values of the session and the local storage\n\t\twindowService.runInBrowser(() => {\n\t\t\tthis.setupStorage(sessionStorage, this.sessionStorageRecord);\n\t\t\tthis.setupStorage(localStorage, this.localStorageRecord);\n\t\t});\n\t}\n\n\t/**\n\t * A localStorage implementation using observables\n\t */\n\tpublic get localStorage(): NgxStorage {\n\t\treturn {\n\t\t\tgetItem: (key: string) => this.getItem(key, localStorage),\n\t\t\tgetItemObservable: (key: string) =>\n\t\t\t\tthis.getItemObservable(key, this.localStorageRecord),\n\t\t\tremoveItem: (key: string) =>\n\t\t\t\tthis.removeItem(key, localStorage, this.localStorageRecord, 'local'),\n\t\t\tsetItem: (key: string, item: DataType) =>\n\t\t\t\tthis.setItem(key, item, localStorage, this.localStorageRecord, 'local'),\n\t\t\tclear: () => this.clearStorage(localStorage, this.localStorageRecord, 'local'),\n\t\t};\n\t}\n\n\t/**\n\t * A sessionStorage implementation using observables\n\t */\n\tpublic get sessionStorage(): NgxStorage {\n\t\treturn {\n\t\t\tgetItem: (key: string) => this.getItem(key, sessionStorage),\n\t\t\tgetItemObservable: (key: string) =>\n\t\t\t\tthis.getItemObservable(key, this.sessionStorageRecord),\n\t\t\tremoveItem: (key: string) =>\n\t\t\t\tthis.removeItem(key, sessionStorage, this.sessionStorageRecord, 'session'),\n\t\t\tsetItem: (key: string, item: DataType) =>\n\t\t\t\tthis.setItem(key, item, sessionStorage, this.sessionStorageRecord, 'session'),\n\t\t\tclear: () => this.clearStorage(sessionStorage, this.sessionStorageRecord, 'session'),\n\t\t};\n\t}\n\n\tprivate getItem(key: string, storage: Storage): DataType {\n\t\treturn this.parseValue(storage.getItem(key));\n\t}\n\n\t/**\n\t * Returns an observable version of the storage value\n\t *\n\t * @param key - The key of the storage value\n\t * @param record  - The storage record\n\t */\n\tprivate getItemObservable(\n\t\tkey: string,\n\t\trecord: NgxStorageRecord\n\t): Observable {\n\t\t// Iben: Return NEVER when not in browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn NEVER;\n\t\t}\n\n\t\t// Iben: If the subject already exists, we return the observable\n\t\tif (record[key]) {\n\t\t\treturn record[key].asObservable();\n\t\t}\n\n\t\t// Iben: If no subject exits, we create a new one\n\t\trecord[key] = new BehaviorSubject(undefined);\n\n\t\t// Iben: Return the observable\n\t\treturn this.getItemObservable(key, record);\n\t}\n\n\t/**\n\t * Sets an item in the storage\n\t *\n\t * @param key - The key of the item\n\t * @param item - The item in the storage\n\t * @param storage - The storage in which we want to save the item\n\t * @param record - The corresponding storage record\n\t */\n\tprivate setItem(\n\t\tkey: string,\n\t\titem: DataType,\n\t\tstorage: Storage,\n\t\trecord: NgxStorageRecord,\n\t\ttype: NgxStorageType\n\t): NgxStorageSetEvent | undefined {\n\t\t// Iben: Early exit when we're in the browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Check if there's already a subject for this item. If not, we create one\n\t\tlet subject = record[key];\n\n\t\tif (!subject) {\n\t\t\tsubject = new BehaviorSubject(undefined);\n\t\t\tstorage[key] = subject;\n\t\t}\n\n\t\t// Iben: Store the current value of the subject\n\t\tconst oldValue = subject.getValue();\n\n\t\t// Iben: Set the item in the storage\n\t\tstorage.setItem(key, typeof item === 'string' ? item : JSON.stringify(item));\n\n\t\t// Iben: Update the subject in the record\n\t\tsubject.next(item);\n\n\t\t// Iben: Create the storage event\n\t\tconst event: NgxStorageSetEvent = {\n\t\t\tkey,\n\t\t\tnewValue: item,\n\t\t\toldValue,\n\t\t\tstorage: type,\n\t\t\ttype: 'set',\n\t\t};\n\n\t\t// Iben: Emit the storage event\n\t\tthis.storageEventSubject.next(event);\n\n\t\t// Iben: Return the storage event\n\t\treturn event;\n\t}\n\n\t/**\n\t * Remove an item from the storage and emit a remove event\n\t *\n\t * @param  key - The key of the item\n\t * @param storage - The storage we wish to remove the item from\n\t * @param record - The record with the subject\n\t * @param type - The type of storage\n\t */\n\tprivate removeItem(\n\t\tkey: string,\n\t\tstorage: Storage,\n\t\trecord: NgxStorageRecord,\n\t\ttype: NgxStorageType\n\t): NgxStorageRemoveEvent | undefined {\n\t\t// Iben: Early exit when we're not in the browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Get the old item\n\t\tconst oldValue = this.parseValue(storage.getItem(key));\n\n\t\t// Iben: Remove the item from the storage\n\t\tstorage.removeItem(key);\n\n\t\t// Iben Update the subject if it exists\n\t\trecord[key]?.next(undefined);\n\n\t\t// Iben: Create the event and return and emit it\n\t\tconst event: NgxStorageRemoveEvent = {\n\t\t\toldValue,\n\t\t\tstorage: type,\n\t\t\tkey,\n\t\t\ttype: 'remove',\n\t\t};\n\n\t\tthis.storageEventSubject.next(event);\n\t\treturn event;\n\t}\n\n\t/**\n\t * Clears the storage, completes all subjects and emits a clear event\n\t *\n\t * @param storage - The storage we wish to clear\n\t * @param record - The record with the subjects\n\t * @param type - The type of storage\n\t */\n\tprivate clearStorage(\n\t\tstorage: Storage,\n\t\trecord: NgxStorageRecord,\n\t\ttype: NgxStorageType\n\t): NgxStorageClearEvent | undefined {\n\t\t// Iben: Early exit when we're not in the browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Clear the storage\n\t\tstorage.clear();\n\n\t\t// Iben: Clear the record and complete all subjects\n\t\tObject.entries(record).forEach(([key, subject]) => {\n\t\t\tsubject.next(undefined);\n\t\t\tsubject.complete();\n\n\t\t\trecord[key] = undefined;\n\t\t});\n\n\t\t// Iben: Create and emit event\n\t\tconst event: NgxStorageClearEvent = {\n\t\t\ttype: 'clear',\n\t\t\tstorage: type,\n\t\t};\n\n\t\tthis.storageEventSubject.next(event);\n\n\t\treturn event;\n\t}\n\n\t/**\n\t * Grabs the existing storage and updates the record\n\t *\n\t * @private\n\t * @param {Storage} storage - The current state of the storage\n\t * @param {NgxStorageRecord} record\n\t * @memberof NgxStorageService\n\t */\n\tprivate setupStorage(storage: Storage, record: NgxStorageRecord) {\n\t\tObject.entries(storage).forEach(([key, value]) => {\n\t\t\trecord[key] = new BehaviorSubject(this.parseValue(value));\n\t\t});\n\t}\n\n\t/**\n\t * Parses a string value from the storage to an actual value\n\t *\n\t * @param value - The provided string value\n\t */\n\tprivate parseValue(value: string): any {\n\t\t// Iben: If the value does not exist, return the value\n\t\tif (!value) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: If the value is either true or false, return a boolean version of the value\n\t\tif (value === 'true' || value === 'false') {\n\t\t\treturn value === 'true';\n\t\t}\n\n\t\t// Iben: If the value is a number, return the parsed number\n\t\tif (value.match(/^[0-9]*[,.]{0,1}[0-9]*$/)) {\n\t\t\treturn Number(value);\n\t\t}\n\n\t\t// Iben: If the value is an object, return the parsed object\n\t\tif (value.match(/{(.*:.*[,]{0,1})*}/)) {\n\t\t\treturn JSON.parse(value);\n\t\t}\n\n\t\t// Iben: Return the string value as is\n\t\treturn value;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageSetEvent.html":{"url":"interfaces/NgxStorageSetEvent.html","title":"interface - NgxStorageSetEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageSetEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStorageBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            newValue\n                                        \n                                \n                                \n                                        \n                                            oldValue\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        newValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newValue:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oldValue:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStore.html":{"url":"interfaces/NgxStore.html","title":"interface - NgxStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-generator.ts\n        \n\n\n            \n                Description\n            \n            \n                The typing of the store of all sub slices\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            reducers\n                                        \n                                \n                                \n                                        \n                                            selectors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:         NgxStoreActions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxStoreActions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reducers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reducers:     ActionReducer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionReducer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectors:         NgxStoreSelectors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxStoreSelectors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\nimport { ActionReducer, Action } from '@ngrx/store';\n\nimport { BaseStoreAssets } from './base-store';\nimport { EntityStoreAssets } from './entity-store-assets';\nimport {\n\tBaseStoreAssetsGeneratorOptions,\n\tEntityStoreAssetsGeneratorOptions,\n} from './store-assets-generator-options';\n\n/**\n * These objects will be used as a blueprint for our store slices\n *\n * @template SliceKey - The keys of our store\n */\nexport interface StoreAssetsOptions {\n\tsubSlice: SliceKey;\n\tgenerator:\n\t\t| ((options: EntityStoreAssetsGeneratorOptions) => EntityStoreAssets)\n\t\t| ((options: BaseStoreAssetsGeneratorOptions) => BaseStoreAssets);\n\n\tselectId?: IdSelector;\n\tinitialValue?: any;\n}\n\n// Iben: The base type for our flow assets which we'll pass to the create generator\nexport type StoreFlowAssets = Record | BaseStoreAssets>;\n\n// Iben: Type to extract the selectors from the provided ResultType, so that we know if we have a BaseStoreSelector or an EntityStoreSelector, this way\n// we get correct typing in our services\nexport type NgxStoreSelectors = {\n\t[Key in keyof ResultType]: ResultType[Key]['selectors'];\n};\n\n// Iben: Type to extract the actions from the provided ResultType, so that we know if we have a BaseStoreAction or an EntityStoreAction, this way\n// we get correct typing in our services\ntype NgxStoreActions = {\n\t[Key in keyof ResultType]: ResultType[Key]['actions'];\n};\n\n/**\n * The typing of the store of all sub slices\n *\n * @template ResultType - The typing we wish to see for our actions, reducers and selectors\n */\nexport interface NgxStore {\n\tselectors: NgxStoreSelectors;\n\tactions: NgxStoreActions;\n\treducers: ActionReducer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxStoreService.html":{"url":"injectables/NgxStoreService.html","title":"injectable - NgxStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/abstracts/store.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stateWrapper\n                            \n                            \n                                    Protected\n                                    Readonly\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                selectErrorFromStore\n                            \n                            \n                                    Public\n                                selectErrorMessageFromStore\n                            \n                            \n                                    Public\n                                selectFromStore\n                            \n                            \n                                    Public\n                                selectLoadingFromStore\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(selectors?: NgxStoreSelectors)\n                    \n                \n                        \n                            \n                                Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        selectors\n                                                  \n                                                        \n                                                                        NgxStoreSelectors\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Select the error state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorMessageFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorMessageFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:69\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ErrorMessage\n                            \n                        \n                    \n\n            \n                \n                        Select the error message state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:42\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    StoreItem\n                            \n                        \n                    \n\n            \n                \n                        Select the data of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectLoadingFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectLoadingFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Select the loading state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StoreState\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:13\n                        \n                    \n\n            \n                \n                    A wrapper object for the store state selectors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:78\n                                \n                            \n                    \n                        \n                                An object that holds all the state selectors of the provided store slice.\nThe generated selectors need to be provided to the constructor of the service in order for this object not to be undefined.\n\n\n                                \n                                    Returns :         StoreState\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Inject, inject, Injectable, Optional } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { NgxStoreSelectors, StoreFlowAssets, StoreState } from '../interfaces';\n\n@Injectable()\nexport class NgxStoreService {\n\t/**\n\t * A wrapper object for the store state selectors\n\t */\n\tprivate stateWrapper: StoreState;\n\n\tprotected readonly store: Store = inject(Store);\n\n\tconstructor(\n\t\t@Optional()\n\t\t@Inject('selectors')\n\t\tselectors?: NgxStoreSelectors\n\t) {\n\t\t// Iben: If the selectors are provided, we create an object that will create an object with selectors for each slice in the state\n\t\tif (selectors) {\n\t\t\tthis.stateWrapper = Object.keys(selectors).reduce((previous, key) => {\n\t\t\t\treturn {\n\t\t\t\t\t...previous,\n\t\t\t\t\t[`${key}$`]: this.selectFromStore(selectors[key]),\n\t\t\t\t\t[`${key}Loading$`]: this.selectLoadingFromStore(selectors[key]),\n\t\t\t\t\t[`${key}Error$`]: this.selectErrorFromStore(selectors[key]),\n\t\t\t\t\t[`${key}ErrorMessage$`]: this.selectErrorMessageFromStore(selectors[key]),\n\t\t\t\t};\n\t\t\t}, {}) as StoreState;\n\t\t}\n\t}\n\n\t/**\n\t * Select the data of a store slice\n\t *\n\t * @template StoreItem - The interface of the selected item/items\n\t * @param selector - The selector object\n\t */\n\tpublic selectFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.select || selector.selectAll));\n\t}\n\n\t/**\n\t * Select the loading state of a store slice\n\t *\n\t * @param selector - The selector object\n\t */\n\tpublic selectLoadingFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.loading || selector.selectLoading));\n\t}\n\n\t/**\n\t * Select the error state of a store slice\n\t *\n\t * @param selector - The selector object\n\t */\n\tpublic selectErrorFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.error || selector.selectError));\n\t}\n\n\t/**\n\t * Select the error message state of a store slice\n\t *\n\t * @param selector - The selector object\n\t */\n\tpublic selectErrorMessageFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.errorMessage || selector.selectErrorMessage));\n\t}\n\n\t/**\n\t * An object that holds all the state selectors of the provided store slice.\n\t *\n\t * The generated selectors need to be provided to the constructor of the service in order for this object not to be undefined.\n\t */\n\tpublic get state(): StoreState {\n\t\t// Iben: If no selectors were provided, we throw an error informing the user\n\t\tif (!this.stateWrapper) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxStore: No selectors were provided to the constructor of the NgxStoreService extender. Without it, the state object cannot be created and will result in an error.'\n\t\t\t);\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Return the stateWrapper\n\t\treturn this.stateWrapper;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableCellDirective.html":{"url":"directives/NgxTableCellDirective.html","title":"directive - NgxTableCellDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableCellDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/components/cell/generic-cell.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxAbstractTableCellDirective\n            \n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Providers\n                        \n                            \n                                {\n    provide: NgxAbstractTableCellDirective, useExisting: NgxTableCellDirective,\n}\n                            \n                        \n                    \n\n                    \n                        Selector\n                        ngx-table-cell\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    \n                                cellTemplate\n                            \n                            \n                                    \n                                    Public\n                                    \n                                footerTemplate\n                            \n                            \n                                    \n                                    Public\n                                    \n                                headerTemplate\n                            \n                            \n                                    Public\n                                cellClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:31\n\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:42\n\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:47\n\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:36\n\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:57\n\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:82\n\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:91\n\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('cellTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:27\n\n                        \n                    \n\n            \n                \n                    A template for the body of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('footerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:33\n\n                        \n                    \n\n            \n                \n                    A template for the footer of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('headerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:21\n\n                        \n                    \n\n            \n                \n                    A template for the header of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:26\n\n                        \n                    \n\n            \n                \n                    An optional class that can be set for the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:31\n\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:42\n\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:47\n\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:52\n\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:36\n\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:14\n\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { ContentChild, Directive, TemplateRef } from '@angular/core';\n\nimport { NgxAbstractTableCellDirective } from './cell.directive';\n\n@Directive({\n\tselector: 'ngx-table-cell',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NgxAbstractTableCellDirective,\n\t\t\tuseExisting: NgxTableCellDirective,\n\t\t},\n\t],\n\tstandalone: true,\n})\nexport class NgxTableCellDirective extends NgxAbstractTableCellDirective {\n\t/**\n\t * A template for the header of the cell\n\t */\n\n\t@ContentChild('headerTmpl', { static: false })\n\tpublic override headerTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the body of the cell\n\t */\n\n\t@ContentChild('cellTmpl', { static: false })\n\tpublic override cellTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the footer of the cell\n\t */\n\n\t@ContentChild('footerTmpl', { static: false })\n\tpublic override footerTemplate: TemplateRef = undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableConfiguration.html":{"url":"interfaces/NgxTableConfiguration.html","title":"interface - NgxTableConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/tokens/ngx-table-config.token.ts\n        \n\n\n            \n                Description\n            \n            \n                A configuration we can provide to set properties of the table globally\nshowDetailRow - Defines the default open behavior of detail rows. 'always' will open all rows by default, 'on-click' will only open them on click, 'on-single-item' will open the row on click and when there's only one item in the table.\nngxTableClass - A default class that will be set on the ngx-table component itself\nshowOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\nallowMultipleRowsOpen - Defines whether multiple rows can be open at once.\nshowOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\nshowSelectedOpenRow - Defines whether we want a class to be added to the currently opened row\nemitValueOnSingleItem - Defines whether we want to emit the rowClicked when there's only one item in the table and the showDetailRow is set to 'on-single-item'\nhideHeaderWhen - Defines whether we want to show the header when the table is empty or loading\ncomponents - A set of components we can use as defaults for the loading, error and empty state of the\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowMultipleRowsOpen\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            components\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            emitValueOnSingleItem\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideHeaderWhen\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            highlightKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ngxTableClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showDetailRow\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showOpenRowState\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showSelectedOpenRow\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowMultipleRowsOpen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowMultipleRowsOpen:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        components\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        components:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emitValueOnSingleItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emitValueOnSingleItem:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideHeaderWhen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideHeaderWhen:         HideHeaderRowOption\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HideHeaderRowOption\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        highlightKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        highlightKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ngxTableClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ngxTableClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showDetailRow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showDetailRow:         ShowDetailRowOption\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ShowDetailRowOption\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showOpenRowState\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showOpenRowState:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showSelectedOpenRow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showSelectedOpenRow:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken, Type } from '@angular/core';\n\nimport {\n\tNgxDisplayContentComponent,\n\tNgxTableOpenRowStateTemplateAbstractComponent,\n\tNgxTableSelectTemplateAbstractComponent,\n\tNgxTableSortTemplateAbstractComponent,\n} from '../abstracts';\n\ntype HideHeaderRowOptions = 'when-loading' | 'when-empty';\nexport type HideHeaderRowOption =\n\t| 'never'\n\t| [HideHeaderRowOptions]\n\t| [HideHeaderRowOptions, HideHeaderRowOptions];\nexport type ShowDetailRowOption = 'always' | 'on-click' | 'on-single-item';\n\n/**\n * A configuration we can provide to set properties of the table globally\n *\n * showDetailRow - Defines the default open behavior of detail rows. 'always' will open all rows by default, 'on-click' will only open them on click, 'on-single-item' will open the row on click and when there's only one item in the table.\n * ngxTableClass - A default class that will be set on the ngx-table component itself\n * showOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\n * allowMultipleRowsOpen - Defines whether multiple rows can be open at once.\n * showOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\n * showSelectedOpenRow - Defines whether we want a class to be added to the currently opened row\n * emitValueOnSingleItem - Defines whether we want to emit the rowClicked when there's only one item in the table and the showDetailRow is set to 'on-single-item'\n * hideHeaderWhen - Defines whether we want to show the header when the table is empty or loading\n * components - A set of components we can use as defaults for the loading, error and empty state of the\n */\nexport interface NgxTableConfiguration {\n\tshowDetailRow?: ShowDetailRowOption;\n\tngxTableClass?: string;\n\tshowOpenRowState?: boolean;\n\tallowMultipleRowsOpen?: boolean;\n\thighlightKey?: string;\n\tshowSelectedOpenRow?: boolean;\n\temitValueOnSingleItem?: boolean;\n\thideHeaderWhen?: HideHeaderRowOption;\n\tcomponents?: {\n\t\tloading?: Type;\n\t\tempty?: Type;\n\t\tradio?: Type;\n\t\tcheckbox?: Type;\n\t\topenRowState?: Type;\n\t\tsort?: Type;\n\t};\n}\n\nexport const NgxTableConfigurationToken = new InjectionToken(\n\t'NgxTableConfiguration'\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableCypressDataTagsBase.html":{"url":"interfaces/NgxTableCypressDataTagsBase.html","title":"interface - NgxTableCypressDataTagsBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableCypressDataTagsBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/show-header-requirements.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cell\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            header\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cell\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cell:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        header\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        header:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequireAtLeastOne } from './internal-helpers';\n\nexport interface NgxTableShowHeaderRequirements {\n\tisLoading: boolean;\n\tisEmpty: boolean;\n}\n\ninterface NgxTableCypressDataTagsBase {\n\theader?: string;\n\tcell?: string;\n\tfooter?: string;\n}\n\nexport type NgxTableCypressDataTags = RequireAtLeastOne;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableGetPipe.html":{"url":"pipes/NgxTableGetPipe.html","title":"pipe - NgxTableGetPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableGetPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/get-pipe/get.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                This pipe returns a value based on a provided path\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        getProp\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value, path: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/get-pipe/get.pipe.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { getProperty } from 'dot-prop';\n\n/**\n * This pipe returns a value based on a provided path\n *\n * @export\n * @class NgxTableGetPipe\n * @implements {PipeTransform}\n */\n@Pipe({\n\tname: 'getProp',\n\tstandalone: true,\n})\nexport class NgxTableGetPipe implements PipeTransform {\n\tpublic transform(value: unknown, path: string): any {\n\t\t// Iben: Check if the value is not an object and return an empty string so the frontend doesn't break and warn the user\n\t\tif (typeof value !== 'object' || Array.isArray(value) || value === null) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxTableGetPipe encountered a value that was not an object and returned an empty string instead.'\n\t\t\t);\n\n\t\t\treturn '';\n\t\t}\n\n\t\t// Iben: If no path was provided, we return the value and warn the user\n\t\tif (!path) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxTableGetPipe did not receive a path to a property and returned an empty string instead.'\n\t\t\t);\n\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: Return the property using dot-prop\n\t\treturn getProperty(value, path);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableHasObserversPipe.html":{"url":"pipes/NgxTableHasObserversPipe.html","title":"pipe - NgxTableHasObserversPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableHasObserversPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/has-observers/has-observers.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxTableHasObservers\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(output: OutputEmitterRef<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/has-observers/has-observers.pipe.ts:13\n                        \n                    \n\n\n            \n                \n                        Returns true in case an observer was set to an EventEmitter\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                output\n                                            \n                                                        OutputEmitterRef<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided EventEmitter\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe,PipeTransform,OutputEmitterRef } from '@angular/core';\n\n@Pipe({\n\tname: 'ngxTableHasObservers',\n\tstandalone: true,\n})\nexport class NgxTableHasObserversPipe implements PipeTransform {\n\t/**\n\t * Returns true in case an observer was set to an EventEmitter\n\t *\n\t * @param output - The provided EventEmitter\n\t */\n  public transform ( output: OutputEmitterRef ): boolean {\n\t\treturn output && output['listeners']?.length > 0;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{"url":"directives/NgxTableOpenRowStateTemplateAbstractComponent.html","title":"directive - NgxTableOpenRowStateTemplateAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableOpenRowStateTemplateAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component provided for the NgxTableComponent, allowing to user to set a default open row state template for all tables\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                index\n                            \n                            \n                                    Public\n                                isOpen\n                            \n                            \n                                    Public\n                                row\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                index\n                            \n                            \n                                isOpen\n                            \n                            \n                                row\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:22\n                            \n                        \n                \n                    \n                        The index of the row\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isOpen\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:12\n                            \n                        \n                \n                    \n                        The current open state the component has to visualize\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        row\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:17\n                            \n                        \n                \n                    \n                        The row data\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:22\n                        \n                    \n\n            \n                \n                    The index of the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:12\n                        \n                    \n\n            \n                \n                    The current open state the component has to visualize\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        row\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:17\n                        \n                    \n\n            \n                \n                    The row data\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input, InputSignal } from '@angular/core';\n\n/**\n * An abstract component provided for the NgxTableComponent, allowing to user to set a default open row state template for all tables\n *\n */\n@Directive()\nexport abstract class NgxTableOpenRowStateTemplateAbstractComponent {\n\t/**\n\t * The current open state the component has to visualize\n\t */\n\tpublic isOpen: InputSignal = input();\n\n\t/**\n\t * The row data\n\t */\n\tpublic row: InputSignal = input();\n\n\t/**\n\t * The index of the row\n\t */\n\tpublic index: InputSignal = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableSelectTemplateAbstractComponent.html":{"url":"directives/NgxTableSelectTemplateAbstractComponent.html","title":"directive - NgxTableSelectTemplateAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableSelectTemplateAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/table/select-template.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component provided for the NgxTableComponent, allowing to user to set a default select template for all tables\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                control\n                            \n                            \n                                    Public\n                                index\n                            \n                            \n                                    Public\n                                row\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                control\n                            \n                            \n                                index\n                            \n                            \n                                row\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        control\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:13\n                            \n                        \n                \n                    \n                        The control we wish to pass to the input\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:23\n                            \n                        \n                \n                    \n                        The index of the row\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        row\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:18\n                            \n                        \n                \n                    \n                        The row that is visualized\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:13\n                        \n                    \n\n            \n                \n                    The control we wish to pass to the input\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:23\n                        \n                    \n\n            \n                \n                    The index of the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        row\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:18\n                        \n                    \n\n            \n                \n                    The row that is visualized\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input, InputSignal } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n/**\n * An abstract component provided for the NgxTableComponent, allowing to user to set a default select template for all tables\n *\n */\n@Directive()\nexport abstract class NgxTableSelectTemplateAbstractComponent {\n\t/**\n\t * The control we wish to pass to the input\n\t */\n\tpublic control: InputSignal> = input();\n\n\t/**\n\t * The row that is visualized\n\t */\n\tpublic row: InputSignal = input();\n\n\t/**\n\t * The index of the row\n\t */\n\tpublic index: InputSignal = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableShowHeaderPipe.html":{"url":"pipes/NgxTableShowHeaderPipe.html","title":"pipe - NgxTableShowHeaderPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableShowHeaderPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/show-header/show-header.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                This pipe returns whether we want to show the header\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxTableShowHeader\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: NgxTableShowHeaderRequirements, hideHeaderRowWhen: HideHeaderRowOption)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/show-header/show-header.pipe.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            NgxTableShowHeaderRequirements\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hideHeaderRowWhen\n                                            \n                                                            HideHeaderRowOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { HideHeaderRowOption } from '../../tokens';\nimport { NgxTableShowHeaderRequirements } from '../../types';\n\n/**\n * This pipe returns whether we want to show the header\n *\n * @export\n * @class NgxTableShowHeaderPipe\n * @implements {PipeTransform}\n */\n@Pipe({\n\tname: 'ngxTableShowHeader',\n\tstandalone: true,\n})\nexport class NgxTableShowHeaderPipe implements PipeTransform {\n\tpublic transform(\n\t\tvalue: NgxTableShowHeaderRequirements,\n\t\thideHeaderRowWhen: HideHeaderRowOption\n\t): boolean {\n\t\t// Iben: If we never want to hide the header row, we return true\n\t\tif (hideHeaderRowWhen === 'never') {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Iben: Check if the value is not an object and return an empty string so the frontend doesn't break and warn the user\n\t\tif (typeof value !== 'object' || !value) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxTableShowHeaderPipe encountered a value that was not an object and showed the header.'\n\t\t\t);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Iben: Add to set for better performance\n\t\tconst options = new Set(hideHeaderRowWhen);\n\n\t\t// Iben: Check which cases need the header to be hidden, and then flip it\n\t\treturn !(\n\t\t\t(options.has('when-empty') && value.isEmpty) ||\n\t\t\t(options.has('when-loading') && value.isLoading)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableShowHeaderRequirements.html":{"url":"interfaces/NgxTableShowHeaderRequirements.html","title":"interface - NgxTableShowHeaderRequirements","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableShowHeaderRequirements\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/show-header-requirements.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isEmpty\n                                        \n                                \n                                \n                                        \n                                            isLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isEmpty\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isEmpty:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequireAtLeastOne } from './internal-helpers';\n\nexport interface NgxTableShowHeaderRequirements {\n\tisLoading: boolean;\n\tisEmpty: boolean;\n}\n\ninterface NgxTableCypressDataTagsBase {\n\theader?: string;\n\tcell?: string;\n\tfooter?: string;\n}\n\nexport type NgxTableCypressDataTags = RequireAtLeastOne;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableSortEvent.html":{"url":"interfaces/NgxTableSortEvent.html","title":"interface - NgxTableSortEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableSortEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/sort-event.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            column\n                                        \n                                \n                                \n                                        \n                                            direction\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        column:     ColumnKey\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ColumnKey\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        direction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        direction:         NgxTableSortDirection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTableSortDirection\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NgxTableSortDirection } from '../enums/sort-direction.enum';\n\nexport interface NgxTableSortEvent {\n\tdirection: NgxTableSortDirection;\n\tcolumn: ColumnKey;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableSortIconPipe.html":{"url":"pipes/NgxTableSortIconPipe.html","title":"pipe - NgxTableSortIconPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableSortIconPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/sort-icon/sort-icon.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxTableSortIcon\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(direction: null | NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/sort-icon/sort-icon.pipe.ts:15\n                        \n                    \n\n\n            \n                \n                        Returns a icon based on the provided sort direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            null | NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided sort direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { NgxTableSortDirection } from '../../enums';\n\n@Pipe({\n\tname: 'ngxTableSortIcon',\n\tstandalone: true,\n})\nexport class NgxTableSortIconPipe implements PipeTransform {\n\t/**\n\t * Returns a icon based on the provided sort direction\n\t *\n\t * @param direction - The provided sort direction\n\t */\n\tpublic transform(direction: null | NgxTableSortDirection): string {\n\t\tif (!direction) {\n\t\t\treturn '&equiv;';\n\t\t}\n\n\t\treturn direction === NgxTableSortDirection.ASCENDING ? '&uArr;' : '&dArr;';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableSortTemplateAbstractComponent.html":{"url":"directives/NgxTableSortTemplateAbstractComponent.html","title":"directive - NgxTableSortTemplateAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableSortTemplateAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/table/sort-template.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component provided for the NgxTableComponent, allowing to user to set a default sort template for all tables\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                direction\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                direction\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        direction\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/sort-template.component.ts:14\n                            \n                        \n                \n                    \n                        The current sort direction the component has to visualize\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/sort-template.component.ts:14\n                        \n                    \n\n            \n                \n                    The current sort direction the component has to visualize\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input, InputSignal} from '@angular/core';\n\nimport { NgxTableSortDirection } from '../../enums';\n\n/**\n * An abstract component provided for the NgxTableComponent, allowing to user to set a default sort template for all tables\n *\n */\n@Directive()\nexport abstract class NgxTableSortTemplateAbstractComponent {\n\t/**\n\t * The current sort direction the component has to visualize\n\t */\n\tpublic direction: InputSignal = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTooltipAbstractComponent.html":{"url":"directives/NgxTooltipAbstractComponent.html","title":"directive - NgxTooltipAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTooltipAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract for the NgxTooltipDirective\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Private\n                                    Readonly\n                                ngxTooltipService\n                            \n                            \n                                    Public\n                                    Readonly\n                                position\n                            \n                            \n                                    Public\n                                    Readonly\n                                positionClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                text\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                removeOnMouseOut\n                            \n                            \n                                    \n                                showOnMouseEnter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                position\n                            \n                            \n                                positionClass\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                mouseenter\n                            \n                            \n                                mouseleave\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:55\n                            \n                        \n                \n                    \n                        The id of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        position\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:60\n                            \n                        \n                \n                    \n                        The current position of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        positionClass\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:47\n                            \n                        \n                \n                    \n                        The position class of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        text\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:65\n                            \n                        \n                \n                    \n                        The text of the tooltip\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            mouseenter\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:22\n                \n            \n\n\n            \n                \n                    Set tooltip as active\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseleave\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:33\n                \n            \n\n\n            \n                \n                    Set the tooltip as inactive\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeOnMouseOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOnMouseOut()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseleave')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:33\n                        \n                    \n\n\n            \n                \n                        Set the tooltip as inactive\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        showOnMouseEnter\n                        \n                    \n                \n            \n            \n                \n                        \n                    showOnMouseEnter()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseenter')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:22\n                        \n                    \n\n\n            \n                \n                        Set tooltip as active\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:55\n                        \n                    \n\n            \n                \n                    The id of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        ngxTooltipService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTooltipService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        position\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:60\n                        \n                    \n\n            \n                \n                    The current position of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        positionClass\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:47\n                        \n                    \n\n            \n                \n                    The position class of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        text\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:65\n                        \n                    \n\n            \n                \n                    The text of the tooltip\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener, inject, input } from '@angular/core';\n\nimport { NgxTooltipService } from '../../services';\nimport { NgxTooltipPosition, NgxTooltipPositionClass } from '../../types';\n\n/**\n * An abstract for the NgxTooltipDirective\n */\n@Directive({\n\thost: {\n\t\tid: 'id()',\n    class: 'positionClass()',\n    'attr.role': 'tooltip'\n\t},\n})\nexport abstract class NgxTooltipAbstractComponent {\n\tprivate readonly ngxTooltipService = inject(NgxTooltipService);\n\n\t/**\n\t * Set tooltip as active\n\t */\n\t@HostListener('mouseenter') showOnMouseEnter() {\n\t\tthis.ngxTooltipService.setToolTipEvent({\n\t\t\tid: this.id(),\n\t\t\tsource: 'tooltip',\n\t\t\tactive: true,\n\t\t});\n\t}\n\n\t/**\n\t * Set the tooltip as inactive\n\t */\n\t@HostListener('mouseleave') removeOnMouseOut() {\n\t\tthis.ngxTooltipService.setToolTipEvent({\n\t\t\tid: this.id(),\n\t\t\tsource: 'tooltip',\n\t\t\tactive: false,\n\t\t});\n\t}\n\n\t/**\n\t * The position class of the tooltip\n\t */\n\t/**\n\t * The position class of the tooltip\n\t */\n\tpublic readonly positionClass = input();\n\n\t/**\n\t * The id of the tooltip\n\t */\n\t/**\n\t * The id of the tooltip\n\t */\n\tpublic readonly id = input.required();\n\n\t/**\n\t * The current position of the tooltip\n\t */\n\tpublic readonly position = input.required();\n\n\t/**\n\t * The text of the tooltip\n\t */\n\tpublic readonly text = input.required();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipActiveElementEvent.html":{"url":"interfaces/NgxTooltipActiveElementEvent.html","title":"interface - NgxTooltipActiveElementEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipActiveElementEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxTooltipBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            elementRef\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementRef:     ElementRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ElementRef\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxTooltipPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTooltipPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipActiveTooltipEvent.html":{"url":"interfaces/NgxTooltipActiveTooltipEvent.html","title":"interface - NgxTooltipActiveTooltipEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipActiveTooltipEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxTooltipBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipBaseEvent.html":{"url":"interfaces/NgxTooltipBaseEvent.html","title":"interface - NgxTooltipBaseEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipBaseEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:     \"tooltip\" | \"element\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"tooltip\" | \"element\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipConfiguration.html":{"url":"interfaces/NgxTooltipConfiguration.html","title":"interface - NgxTooltipConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultPosition\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultPosition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultPosition:         NgxTooltipPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTooltipPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTooltipDirective.html":{"url":"directives/NgxTooltipDirective.html","title":"directive - NgxTooltipDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTooltipDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that adds a ARIA compliant tooltip to a component\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTooltip]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltip\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipComponent\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipDisabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipId\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipPosition\n                            \n                            \n                                    Private\n                                    Readonly\n                                tooltipService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onEscape\n                            \n                            \n                                    \n                                removeOnBlur\n                            \n                            \n                                    \n                                removeOnMouseOut\n                            \n                            \n                                    Private\n                                removeTooltip\n                            \n                            \n                                    \n                                showOnFocus\n                            \n                            \n                                    \n                                showOnMouseEnter\n                            \n                            \n                                    Private\n                                showTooltip\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTooltip\n                            \n                            \n                                ngxTooltipDisabled\n                            \n                            \n                                ngxTooltipPosition\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                document:keydown.escape\n                            \n                            \n                                focus\n                            \n                            \n                                mouseenter\n                            \n                            \n                                mouseleave\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTooltip\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:72\n                            \n                        \n                \n                    \n                        The text of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTooltipDisabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:88\n                            \n                        \n                \n                    \n                        Prevent the tooltip from being shown, by default this is false.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTooltipPosition\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:83\n                            \n                        \n                \n                    \n                        An optional position we can pass to tooltip, by default this is 'above'.\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:50\n                \n            \n\n\n            \n                \n                    Remove the tooltip on blur\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            document:keydown.escape\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:57\n                \n            \n\n\n            \n                \n                    Remove the tooltip on escape pressed\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:36\n                \n            \n\n\n            \n                \n                    Show the tooltip on focus\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseenter\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:29\n                \n            \n\n\n            \n                \n                    Show the tooltip on hover\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseleave\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:43\n                \n            \n\n\n            \n                \n                    Remove the tooltip on leaving hover\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:57\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeOnBlur\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOnBlur()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:50\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip on blur\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeOnMouseOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOnMouseOut()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseleave')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:43\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip on leaving hover\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        removeTooltip\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeTooltip()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:114\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        showOnFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    showOnFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:36\n                        \n                    \n\n\n            \n                \n                        Show the tooltip on focus\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        showOnMouseEnter\n                        \n                    \n                \n            \n            \n                \n                        \n                    showOnMouseEnter()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseenter')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:29\n                        \n                    \n\n\n            \n                \n                        Show the tooltip on hover\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showTooltip\n                        \n                    \n                \n            \n            \n                \n                        \n                    showTooltip()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:93\n                        \n                    \n\n\n            \n                \n                        Show the tooltip if it is not visible yet\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltip\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:72\n                        \n                    \n\n            \n                \n                    The text of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipComponent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input>()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:77\n                        \n                    \n\n            \n                \n                    An optional component we can pass to replace the default configured component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:88\n                        \n                    \n\n            \n                \n                    Prevent the tooltip from being shown, by default this is false.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(uuid())\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:67\n                        \n                    \n\n            \n                \n                    The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipPosition\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:83\n                        \n                    \n\n            \n                \n                    An optional position we can pass to tooltip, by default this is 'above'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tooltipService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTooltipService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, Type, inject, input } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxTooltipAbstractComponent } from '../../abstracts';\nimport { NgxTooltipService } from '../../services';\nimport { NgxTooltipPosition } from '../../types';\n\n/**\n * A directive that adds a ARIA compliant tooltip to a component\n *\n * @export\n * @class NgxTooltipDirective\n */\n@Directive({\n\tselector: '[ngxTooltip]',\n\tstandalone: true,\n\thost: {\n\t\t'[attr.aria-describedby]': 'ngxTooltipId()',\n\t\ttabIndex: '0',\n\t},\n})\nexport class NgxTooltipDirective {\n\tprivate readonly tooltipService = inject(NgxTooltipService);\n\tprivate readonly elementRef = inject(ElementRef);\n\n\t/**\n\t * Show the tooltip on hover\n\t */\n\t@HostListener('mouseenter') showOnMouseEnter() {\n\t\tthis.showTooltip();\n\t}\n\n\t/**\n\t * Show the tooltip on focus\n\t */\n\t@HostListener('focus') showOnFocus() {\n\t\tthis.showTooltip();\n\t}\n\n\t/**\n\t * Remove the tooltip on leaving hover\n\t */\n\t@HostListener('mouseleave') removeOnMouseOut() {\n\t\tthis.removeTooltip();\n\t}\n\n\t/**\n\t * Remove the tooltip on blur\n\t */\n\t@HostListener('blur') removeOnBlur() {\n\t\tthis.removeTooltip();\n\t}\n\n\t/**\n\t * Remove the tooltip on escape pressed\n\t */\n\t@HostListener('document:keydown.escape') onEscape() {\n\t\tthis.tooltipService.removeToolTip();\n\t}\n\n\t/**\n\t * The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.\n\t */\n\t/**\n\t * The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.\n\t */\n\tpublic readonly ngxTooltipId = input(uuid());\n\n\t/**\n\t * The text of the tooltip\n\t */\n\tpublic readonly ngxTooltip = input.required();\n\n\t/**\n\t * An optional component we can pass to replace the default configured component\n\t */\n\tpublic readonly ngxTooltipComponent = input>();\n\n\t/**\n\t * An optional position we can pass to tooltip, by default this is 'above'.\n\t */\n\t// Iben: The default is set in the NgxTooltipService\n\tpublic readonly ngxTooltipPosition = input();\n\n\t/**\n\t * Prevent the tooltip from being shown, by default this is false.\n\t */\n\tpublic readonly ngxTooltipDisabled = input(false);\n\n\t/**\n\t * Show the tooltip if it is not visible yet\n\t */\n\tprivate showTooltip(): void {\n\t\t// Iben: Early exit when the tooltip is disabled\n\t\tif (this.ngxTooltipDisabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Show the tooltip\n\t\tthis.tooltipService.setToolTipEvent({\n\t\t\ttext: this.ngxTooltip(),\n\t\t\tposition: this.ngxTooltipPosition(),\n\t\t\tcomponent: this.ngxTooltipComponent(),\n\t\t\telementRef: this.elementRef,\n\t\t\tid: this.ngxTooltipId(),\n\t\t\tsource: 'element',\n\t\t\tactive: true,\n\t\t});\n\t}\n\n\t/**\n\t * Remove the tooltip\n\t */\n\tprivate removeTooltip(): void {\n\t\t// Iben: Early exit when the tooltip is disabled\n\t\tif (this.ngxTooltipDisabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Emit a remove event\n\t\tthis.tooltipService.setToolTipEvent({\n\t\t\tid: this.ngxTooltipId(),\n\t\t\tsource: 'element',\n\t\t\tactive: false,\n\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipInactiveEvent.html":{"url":"interfaces/NgxTooltipInactiveEvent.html","title":"interface - NgxTooltipInactiveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipInactiveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxTooltipBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipItem.html":{"url":"interfaces/NgxTooltipItem.html","title":"interface - NgxTooltipItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            elementRef\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementRef:     ElementRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ElementRef\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxTooltipPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTooltipPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxTooltipService.html":{"url":"injectables/NgxTooltipService.html","title":"injectable - NgxTooltipService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxTooltipService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeTooltip\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                overlayPositionBuilder\n                            \n                            \n                                    Private\n                                overlayRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                overlayService\n                            \n                            \n                                    Private\n                                    Readonly\n                                positionRecord\n                            \n                            \n                                    Private\n                                    Readonly\n                                tooltipEventsSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                removeToolTip\n                            \n                            \n                                    Public\n                                setToolTipEvent\n                            \n                            \n                                    Public\n                                showToolTip\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:54\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:197\n                        \n                    \n\n\n            \n                \n                        Emit the destroy event\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeToolTip\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeToolTip()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:169\n                        \n                    \n\n\n            \n                \n                        Removes the tooltip.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setToolTipEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    setToolTipEvent(event: NgxTooltipEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:184\n                        \n                    \n\n\n            \n                \n                        Dispatches the tooltip event to the subject\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            NgxTooltipEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA tooltip event\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showToolTip\n                        \n                    \n                \n            \n            \n                \n                        \n                    showToolTip(tooltip: NgxTooltipItem)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Show a tooltip\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tooltip\n                                            \n                                                            NgxTooltipItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration of the tooltip\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        activeTooltip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTooltipConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:39\n                        \n                    \n\n            \n                \n                    A subject to hold the destroy event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        overlayPositionBuilder\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(OverlayPositionBuilder)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overlayRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OverlayRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:44\n                        \n                    \n\n            \n                \n                    The overlayRef used to attach the tooltip too\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        overlayService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Overlay)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        positionRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {\n\t\tbelow: { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n\t\tabove: { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n\t\tleft: { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center' },\n\t\tright: { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n\t}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:49\n                        \n                    \n\n            \n                \n                    The position record for the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tooltipEventsSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(undefined)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:33\n                        \n                    \n\n            \n                \n                    A subject to hold the tooltip events\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n\tConnectedPosition,\n\tOverlay,\n\tOverlayPositionBuilder,\n\tOverlayRef,\n} from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Injectable, OnDestroy, inject } from '@angular/core';\nimport { BehaviorSubject, pairwise, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxTooltipConfigurationToken } from '../../tokens';\nimport {\n\tNgxTooltipConfiguration,\n\tNgxTooltipEvent,\n\tNgxTooltipItem,\n\tNgxTooltipPosition,\n} from '../../types';\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxTooltipService implements OnDestroy {\n\tprivate readonly configuration = inject(NgxTooltipConfigurationToken);\n\tprivate readonly overlayService = inject(Overlay);\n\tprivate readonly overlayPositionBuilder = inject(OverlayPositionBuilder);\n\n\t// Iben: The id of the active tooltip\n\tprivate activeTooltip: string = undefined;\n\n\t/**\n\t * A subject to hold the tooltip events\n\t */\n\tprivate readonly tooltipEventsSubject: BehaviorSubject =\n\t\tnew BehaviorSubject(undefined);\n\n\t/**\n\t * A subject to hold the destroy event\n\t */\n\tprivate readonly onDestroySubject: Subject = new Subject();\n\n\t/**\n\t * The overlayRef used to attach the tooltip too\n\t */\n\tprivate overlayRef: OverlayRef;\n\n\t/**\n\t * The position record for the tooltip\n\t */\n\tprivate readonly positionRecord: Record = {\n\t\tbelow: { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n\t\tabove: { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n\t\tleft: { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center' },\n\t\tright: { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n\t};\n\n\tconstructor() {\n\t\t// Iben: Listen to the tooltip events and handle accordingly\n\t\tthis.tooltipEventsSubject\n\t\t\t.pipe(\n\t\t\t\tpairwise(),\n\t\t\t\ttap(([previous, next]) => {\n\t\t\t\t\t// Iben: When we enter an element, we show the tooltip\n\t\t\t\t\tif (next.active && next.source === 'element') {\n\t\t\t\t\t\t// Iben: Check if we have a previous element, and if so, if we have to remove it\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tprevious &&\n\t\t\t\t\t\t\tthis.overlayRef?.hasAttached() &&\n\t\t\t\t\t\t\tthis.activeTooltip !== next.id\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.removeToolTip();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Iben: Add the new tooltip\n\t\t\t\t\t\tconst { component, text, position, elementRef, id } = next;\n\n\t\t\t\t\t\tthis.showToolTip({\n\t\t\t\t\t\t\tcomponent: component,\n\t\t\t\t\t\t\ttext: text,\n\t\t\t\t\t\t\tposition: position,\n\t\t\t\t\t\t\telementRef: elementRef,\n\t\t\t\t\t\t\tid: id,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: We do a check on previous here so we can continue safely in the upcoming checks\n\t\t\t\t\tif (!previous) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: If we're entering a new element, we early exit\n\t\t\t\t\tif (previous.id !== next.id) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: If the sources are the same, we check if we need to remove the tooltip\n\t\t\t\t\t// In this case we either leave the tooltip or leave the element\n\t\t\t\t\tif (previous.source === next.source) {\n\t\t\t\t\t\tif (!next.active) {\n\t\t\t\t\t\t\tthis.removeToolTip();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: If both actives are false (element => tooltip => outside or tooltip => element => outside), we remove the tooltip\n\t\t\t\t\tif (!next.active && !previous.active) {\n\t\t\t\t\t\tthis.removeToolTip();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Show a tooltip\n\t *\n\t * @param tooltip - The configuration of the tooltip\n\t */\n\tpublic showToolTip(tooltip: NgxTooltipItem): void {\n\t\t// Iben: If no tooltip was provided or if we already have a tooltip attached, we early exit\n\t\tif (!tooltip || this.overlayRef?.hasAttached()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Get the configuration of the tooltip\n\t\tconst { text, component, position, elementRef, id } = tooltip;\n\n\t\t// Iben: Set the active tooltip\n\t\tthis.activeTooltip = id;\n\n\t\t// Iben: Get the tooltip position. If no position was provided by the tooltip, we use the configured default, if none is configured we use 'above'\n\t\tconst tooltipPosition = position || this.configuration.defaultPosition || 'above';\n\n\t\t// Iben: If the previous overlayRef still exists, we remove it\n\t\tif (!this.overlayRef) {\n\t\t\tthis.overlayRef = this.overlayService.create({\n\t\t\t\t// Iben: Set the scroll strategy to reposition so that whenever the user scrolls, the tooltip is still near the element\n\t\t\t\tscrollStrategy: this.overlayService.scrollStrategies.reposition(),\n\t\t\t});\n\t\t}\n\n\t\t// Iben: Create the position of the overlay\n\t\tconst positionStrategy = this.overlayPositionBuilder\n\t\t\t.flexibleConnectedTo(elementRef)\n\t\t\t.withPositions([this.positionRecord[tooltipPosition]]);\n\n\t\t// Iben: Update the position of the current overlayRef\n\t\tthis.overlayRef.updatePositionStrategy(positionStrategy);\n\n\t\t// Iben: Create a new component portal\n\t\tconst tooltipPortal = new ComponentPortal(component || this.configuration.component);\n\n\t\t// Iben: Attach the tooltipPortal to the overlayRef\n    const tooltipRef = this.overlayRef.attach( tooltipPortal );\n\n\t\t// Iben: Pass the data to the component\n\t\ttooltipRef.setInput('text', text);\n\t\ttooltipRef.setInput('position', tooltipPosition);\n\t\ttooltipRef.setInput('positionClass', `ngx-tooltip-position-${tooltipPosition}`);\n\t\ttooltipRef.setInput('id', id);\n\t}\n\n\t/**\n\t * Removes the tooltip.\n\t */\n\tpublic removeToolTip(): void {\n\t\tif (this.activeTooltip) {\n\t\t\t// Iben: Unset the active tooltip\n\t\t\tthis.activeTooltip = undefined;\n\n\t\t\t// Iben: Remove the active tooltip from view\n\t\t\tthis.overlayRef.detach();\n\t\t}\n\t}\n\n\t/**\n\t * Dispatches the tooltip event to the subject\n\t *\n\t * @param event - A tooltip event\n\t */\n\tpublic setToolTipEvent(event: NgxTooltipEvent): void {\n\t\t// Iben: We add a delay so that the user can navigate between the tooltip and the element\n\t\tsetTimeout(\n\t\t\t() => {\n\t\t\t\tthis.tooltipEventsSubject.next(event);\n\t\t\t},\n\t\t\tevent.active ? 0 : 100\n\t\t);\n\t}\n\n\t/**\n\t * Emit the destroy event\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.onDestroySubject.next();\n\t\tthis.onDestroySubject.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourBackdropClipEvent.html":{"url":"interfaces/NgxTourBackdropClipEvent.html","title":"interface - NgxTourBackdropClipEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourBackdropClipEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            backdrop\n                                        \n                                \n                                \n                                        \n                                            cutoutMargin\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            item\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backdrop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backdrop:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cutoutMargin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cutoutMargin:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        item:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxTourStepComponent } from '../abstracts';\nimport { NgxTourItemDirective } from '../directives';\n\nexport type NgxTourDirection = 'next' | 'back';\n\nexport type NgxTourInteraction = NgxTourDirection | 'close';\n\nexport type NgxTourStepPosition = 'above' | 'below' | 'right' | 'left';\n\nexport type NgxTourRegistrationEvent = {\n\ttourItem: string;\n\telement?: NgxTourItemDirective;\n\ttype: 'register' | 'unregister';\n};\n\nexport interface NgxTourRouteOptions {\n\troute: string[];\n\textras: NavigationExtras;\n}\nexport interface NgxTourBackdropClipEvent {\n\tbackdrop: HTMLElement;\n\tcutoutMargin: number;\n\titem?: HTMLElement;\n}\n\nexport type NgxTourAction = (step: NgxTourStep, index: number) => void | Observable;\n\nexport interface NgxTourStep {\n\t/**\n\t * The title we wish to display on the step.\n\t */\n\ttitle: string;\n\n\t/**\n\t * The content we wish to display on the step.\n\t */\n\tcontent: string;\n\n\t/**\n\t * Optional corresponding id of the element we wish to highlight. This is the string we pass to the `tourItem` directive.\n\t */\n\ttourItem?: string;\n\n\t/**\n\t * Optional position where we wish to render the tour step.\n\t *\n\t * By default, this is `below`.\n\t */\n\tposition?: NgxTourStepPosition;\n\n\t/**\n\t * Optional extra data we wish to provide to the step\n\t */\n\tdata?: DataType;\n\n\t/**\n\t * An optional amount of time we want to wait before showing the next step.\n\t *\n\t * By default this is 100 ms.\n\t */\n\tdelay?: number;\n\n\t/**\n\t * An optional function that will be run right before a step becomes visible.\n\t */\n\tbeforeVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run right when a step becomes visible.\n\t */\n\tonVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run when a step is no longer visible\n\t */\n\tafterVisible?: NgxTourAction;\n\n\t/**\n\t * An optional component to replace the default provided component within the tour step configuration.\n\t */\n\tcomponent?: Type;\n\n\t/**\n\t * Whether we want to disable the backdrop\n\t */\n\tdisableBackDrop?: boolean;\n\n\t/**\n\t * An optional padding we can set for the cutout around an element. By default, this is set to 5px.\n\t * This will add some additional whitespace **within** the cutout.\n\t *\n\t * This is not the same as the `offset`, which is the whitespace **around** the highlighted element.\n\t */\n\tcutoutMargin?: number;\n\n\t/**\n\t * An optional class we can attach to the step\n\t */\n\tstepClass?: string;\n\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t */\n\toffset?: NgxTourStepOffset;\n}\n\nexport type NgxTourStepOffset = {\n\ttop?: number;\n\tbottom?: number;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTourItemDirective.html":{"url":"directives/NgxTourItemDirective.html","title":"directive - NgxTourItemDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTourItemDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to mark elements in the DOM to be highlighted during a tour\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [tourItem]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Readonly\n                                elementRef\n                            \n                            \n                                    \n                                    Public\n                                isActive\n                            \n                            \n                                    Public\n                                    Readonly\n                                tourItem\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                setActive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                tourItem\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.ngx-tour-item-active\n                            \n                        \n                    \n                \n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    elementId\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        tourItem\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:26\n                            \n                        \n                \n                    \n                        The id of the item that corresponds with the step\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class.ngx-tour-item-active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:21\n                        \n                    \n\n            \n                \n                    A class added to the currently active item\n\n                \n            \n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    setActive(isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:33\n                        \n                    \n\n\n            \n                \n                        Mark an element as active or inactive\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether or not the element should be active\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class.ngx-tour-item-active')\n                        \n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:21\n                        \n                    \n\n            \n                \n                    A class added to the currently active item\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        tourItem\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:26\n                        \n                    \n\n            \n                \n                    The id of the item that corresponds with the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        elementId\n                    \n                \n\n                \n                    \n                        getelementId()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:44\n                                \n                            \n                    \n                        \n                                Returns the id of the element. Uses for the aria-details on the tour-item component\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Directive, ElementRef, HostBinding, OnDestroy, inject, input } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxTourService } from '../../services';\n\n/**\n * A directive to mark elements in the DOM to be highlighted during a tour\n */\n@Directive({\n\tselector: '[tourItem]',\n  standalone: true,\n})\nexport class NgxTourItemDirective implements AfterViewInit, OnDestroy {\n\treadonly elementRef = inject>(ElementRef);\n\tprivate readonly tourService = inject(NgxTourService);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * A class added to the currently active item\n\t */\n\t@HostBinding('class.ngx-tour-item-active') public isActive: boolean = false;\n\n\t/**\n\t * The id of the item that corresponds with the step\n\t */\n\tpublic readonly tourItem = input();\n\n\t/**\n\t * Mark an element as active or inactive\n\t *\n\t * @param isActive - Whether or not the element should be active\n\t */\n\tpublic setActive(isActive: boolean): void {\n\t\t// Iben: Mark the current item as active or inactive\n\t\tthis.isActive = isActive;\n\n\t\t// Iben: Detect the changes on the component\n\t\tthis.cdRef.detectChanges();\n\t}\n\n\t/**\n\t * Returns the id of the element. Uses for the `aria-details` on the tour-item component\n\t */\n\tpublic get elementId(): string {\n\t\treturn this.elementRef.nativeElement.getAttribute('id');\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Register the element when rendered\n\t\tthis.tourService.registerElement(this);\n\n\t\t// Iben: Check if the element has an id, if not, give it a new id for accessibility\n\t\tif (!this.elementRef.nativeElement.getAttribute('id')) {\n\t\t\tthis.elementRef.nativeElement.setAttribute('id', uuid());\n\t\t}\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Unregister the element when the element gets destroyed\n\t\tthis.tourService.unregisterElement(this.tourItem());\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourRouteOptions.html":{"url":"interfaces/NgxTourRouteOptions.html","title":"interface - NgxTourRouteOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourRouteOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            extras\n                                        \n                                \n                                \n                                        \n                                            route\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        extras\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extras:     NavigationExtras\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     NavigationExtras\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        route\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        route:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxTourStepComponent } from '../abstracts';\nimport { NgxTourItemDirective } from '../directives';\n\nexport type NgxTourDirection = 'next' | 'back';\n\nexport type NgxTourInteraction = NgxTourDirection | 'close';\n\nexport type NgxTourStepPosition = 'above' | 'below' | 'right' | 'left';\n\nexport type NgxTourRegistrationEvent = {\n\ttourItem: string;\n\telement?: NgxTourItemDirective;\n\ttype: 'register' | 'unregister';\n};\n\nexport interface NgxTourRouteOptions {\n\troute: string[];\n\textras: NavigationExtras;\n}\nexport interface NgxTourBackdropClipEvent {\n\tbackdrop: HTMLElement;\n\tcutoutMargin: number;\n\titem?: HTMLElement;\n}\n\nexport type NgxTourAction = (step: NgxTourStep, index: number) => void | Observable;\n\nexport interface NgxTourStep {\n\t/**\n\t * The title we wish to display on the step.\n\t */\n\ttitle: string;\n\n\t/**\n\t * The content we wish to display on the step.\n\t */\n\tcontent: string;\n\n\t/**\n\t * Optional corresponding id of the element we wish to highlight. This is the string we pass to the `tourItem` directive.\n\t */\n\ttourItem?: string;\n\n\t/**\n\t * Optional position where we wish to render the tour step.\n\t *\n\t * By default, this is `below`.\n\t */\n\tposition?: NgxTourStepPosition;\n\n\t/**\n\t * Optional extra data we wish to provide to the step\n\t */\n\tdata?: DataType;\n\n\t/**\n\t * An optional amount of time we want to wait before showing the next step.\n\t *\n\t * By default this is 100 ms.\n\t */\n\tdelay?: number;\n\n\t/**\n\t * An optional function that will be run right before a step becomes visible.\n\t */\n\tbeforeVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run right when a step becomes visible.\n\t */\n\tonVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run when a step is no longer visible\n\t */\n\tafterVisible?: NgxTourAction;\n\n\t/**\n\t * An optional component to replace the default provided component within the tour step configuration.\n\t */\n\tcomponent?: Type;\n\n\t/**\n\t * Whether we want to disable the backdrop\n\t */\n\tdisableBackDrop?: boolean;\n\n\t/**\n\t * An optional padding we can set for the cutout around an element. By default, this is set to 5px.\n\t * This will add some additional whitespace **within** the cutout.\n\t *\n\t * This is not the same as the `offset`, which is the whitespace **around** the highlighted element.\n\t */\n\tcutoutMargin?: number;\n\n\t/**\n\t * An optional class we can attach to the step\n\t */\n\tstepClass?: string;\n\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t */\n\toffset?: NgxTourStepOffset;\n}\n\nexport type NgxTourStepOffset = {\n\ttop?: number;\n\tbottom?: number;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTourShowWhenDirective.html":{"url":"directives/NgxTourShowWhenDirective.html","title":"directive - NgxTourShowWhenDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTourShowWhenDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                \nA directive that will render a part of the template based on the condition and the currently active tour\n\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTourShowWhen]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Public\n                                ngxTourShowWhen\n                            \n                            \n                                    Public\n                                ngxTourShowWhenElse\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTourShowWhen\n                            \n                            \n                                ngxTourShowWhenElse\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:40\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTourShowWhen\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:63\n                            \n                        \n                \n                    \n                        Under which condition the item should be shown whilst the tour is active\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTourShowWhenElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:68\n                            \n                        \n                \n                    \n                        The else template in case the condition is not matched\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:123\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:32\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxTourShowWhen\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:63\n                        \n                    \n\n            \n                \n                    Under which condition the item should be shown whilst the tour is active\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxTourShowWhenElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:68\n                        \n                    \n\n            \n                \n                    The else template in case the condition is not matched\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:37\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { combineLatest, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil, tap, withLatestFrom } from 'rxjs/operators';\n\nimport { NgxTourService } from '../../services';\n\n/**\n *  * A directive that will render a part of the template based on the condition and the currently active tour\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n@Directive({\n\tselector: '[ngxTourShowWhen]',\n})\nexport class NgxTourShowWhenDirective implements OnDestroy {\n\tprivate readonly tourService = inject(NgxTourService);\n\tprivate viewContainer = inject(ViewContainerRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\tconstructor() {\n\t\tconst templateRef = inject>(TemplateRef);\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tif (this.ngxTourShowWhen()) {\n\t\t\t\tthis.updateView();\n\t\t\t}\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxTourShowWhenElse();\n\t\t\tthis.elseViewRef = null;\n\t\t\tthis.updateView();\n\t\t});\n\t}\n\n\t/**\n\t * Under which condition the item should be shown whilst the tour is active\n\t */\n\tpublic ngxTourShowWhen: InputSignal =\n\t\tinput();\n\t/**\n\t * The else template in case the condition is not matched\n\t */\n\tpublic ngxTourShowWhenElse: InputSignal> = input();\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.tourService.currentIndex$\n\t\t\t.pipe(\n\t\t\t\tdistinctUntilChanged(),\n        withLatestFrom( this.tourService.currentTour$ ),\n\t\t\t\ttap(([index, tour]) => {\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tif (\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'whenInactive' && index === undefined) ||\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'whenActive' && index !== undefined) ||\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'hasPrevious' && Boolean(tour?.[index - 1])) ||\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'hasNext' && Boolean(tour?.[index + 1]))\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.thenViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.elseViewRef = null;\n\t\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourStep.html":{"url":"interfaces/NgxTourStep.html","title":"interface - NgxTourStep","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourStep\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            afterVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            beforeVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cutoutMargin\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            delay\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableBackDrop\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            offset\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stepClass\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tourItem\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        afterVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        afterVisible:         NgxTourAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourAction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional function that will be run when a step is no longer visible\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        beforeVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        beforeVisible:         NgxTourAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourAction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional function that will be run right before a step becomes visible.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional component to replace the default provided component within the tour step configuration.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The content we wish to display on the step.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cutoutMargin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cutoutMargin:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional padding we can set for the cutout around an element. By default, this is set to 5px.\nThis will add some additional whitespace within the cutout.\nThis is not the same as the offset, which is the whitespace around the highlighted element.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional extra data we wish to provide to the step\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delay:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional amount of time we want to wait before showing the next step.\nBy default this is 100 ms.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableBackDrop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableBackDrop:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether we want to disable the backdrop\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         NgxTourStepOffset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourStepOffset\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Allow the highlighted element to have additional whitespace around the cutout on the y-axis.\nThis is useful when the highlighted element is under a header or a footer.\nEven though it is possible to provide both a top and bottom offset, only one will be taken into\naccount. If the vertical center of the cutout is closer to the top, the top offset will be used. If\nthe vertical center of the cutout is closer to the bottom, the bottom offset will be used.\nNegative values are allowed. The step(card) will always be displayed within the viewport, even if\nthe offset makes the cutout go out of the viewport.\nThis is not the same as the cutoutMargin, which is the whitespace within the highlighted element.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onVisible:         NgxTourAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourAction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional function that will be run right when a step becomes visible.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxTourStepPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourStepPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional position where we wish to render the tour step.\nBy default, this is below.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stepClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stepClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional class we can attach to the step\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The title we wish to display on the step.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tourItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tourItem:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional corresponding id of the element we wish to highlight. This is the string we pass to the tourItem directive.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxTourStepComponent } from '../abstracts';\nimport { NgxTourItemDirective } from '../directives';\n\nexport type NgxTourDirection = 'next' | 'back';\n\nexport type NgxTourInteraction = NgxTourDirection | 'close';\n\nexport type NgxTourStepPosition = 'above' | 'below' | 'right' | 'left';\n\nexport type NgxTourRegistrationEvent = {\n\ttourItem: string;\n\telement?: NgxTourItemDirective;\n\ttype: 'register' | 'unregister';\n};\n\nexport interface NgxTourRouteOptions {\n\troute: string[];\n\textras: NavigationExtras;\n}\nexport interface NgxTourBackdropClipEvent {\n\tbackdrop: HTMLElement;\n\tcutoutMargin: number;\n\titem?: HTMLElement;\n}\n\nexport type NgxTourAction = (step: NgxTourStep, index: number) => void | Observable;\n\nexport interface NgxTourStep {\n\t/**\n\t * The title we wish to display on the step.\n\t */\n\ttitle: string;\n\n\t/**\n\t * The content we wish to display on the step.\n\t */\n\tcontent: string;\n\n\t/**\n\t * Optional corresponding id of the element we wish to highlight. This is the string we pass to the `tourItem` directive.\n\t */\n\ttourItem?: string;\n\n\t/**\n\t * Optional position where we wish to render the tour step.\n\t *\n\t * By default, this is `below`.\n\t */\n\tposition?: NgxTourStepPosition;\n\n\t/**\n\t * Optional extra data we wish to provide to the step\n\t */\n\tdata?: DataType;\n\n\t/**\n\t * An optional amount of time we want to wait before showing the next step.\n\t *\n\t * By default this is 100 ms.\n\t */\n\tdelay?: number;\n\n\t/**\n\t * An optional function that will be run right before a step becomes visible.\n\t */\n\tbeforeVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run right when a step becomes visible.\n\t */\n\tonVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run when a step is no longer visible\n\t */\n\tafterVisible?: NgxTourAction;\n\n\t/**\n\t * An optional component to replace the default provided component within the tour step configuration.\n\t */\n\tcomponent?: Type;\n\n\t/**\n\t * Whether we want to disable the backdrop\n\t */\n\tdisableBackDrop?: boolean;\n\n\t/**\n\t * An optional padding we can set for the cutout around an element. By default, this is set to 5px.\n\t * This will add some additional whitespace **within** the cutout.\n\t *\n\t * This is not the same as the `offset`, which is the whitespace **around** the highlighted element.\n\t */\n\tcutoutMargin?: number;\n\n\t/**\n\t * An optional class we can attach to the step\n\t */\n\tstepClass?: string;\n\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t */\n\toffset?: NgxTourStepOffset;\n}\n\nexport type NgxTourStepOffset = {\n\ttop?: number;\n\tbottom?: number;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTourStepComponent.html":{"url":"directives/NgxTourStepComponent.html","title":"directive - NgxTourStepComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTourStepComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class that defines the minimum properties needed for the step component to be rendered\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        AfterViewInit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                amountOfSteps\n                            \n                            \n                                    Public\n                                    Readonly\n                                content\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentStep\n                            \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                elementId\n                            \n                            \n                                    Public\n                                handleInteraction\n                            \n                            \n                                    Public\n                                    Readonly\n                                position\n                            \n                            \n                                    \n                                    Protected\n                                rootClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                stepClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                titleElement\n                            \n                            \n                                    Public\n                                titleId\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    \n                                    Public\n                                onEscape\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                amountOfSteps\n                            \n                            \n                                content\n                            \n                            \n                                currentStep\n                            \n                            \n                                data\n                            \n                            \n                                elementId\n                            \n                            \n                                stepClass\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown.escape\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        amountOfSteps\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:83\n                            \n                        \n                \n                    \n                        The total amount of steps\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:73\n                            \n                        \n                \n                    \n                        The content of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        currentStep\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:78\n                            \n                        \n                \n                    \n                        The index of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:88\n                            \n                        \n                \n                    \n                        Optional data we wish to use in a step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        elementId\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:53\n                            \n                        \n                \n                    \n                        The id of the element that the tour-step describes\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        stepClass\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:93\n                            \n                        \n                \n                    \n                        A custom step class we can set\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:68\n                            \n                        \n                \n                    \n                        The title of the step\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:45\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            document:keydown.escape\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:38\n                \n            \n\n\n            \n                \n                    Close the tour on escape pressed\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:112\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:105\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:38\n                        \n                    \n\n\n            \n                \n                        Close the tour on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        amountOfSteps\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:83\n                        \n                    \n\n            \n                \n                    The total amount of steps\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        content\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:73\n                        \n                    \n\n            \n                \n                    The content of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentStep\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:78\n                        \n                    \n\n            \n                \n                    The index of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:88\n                        \n                    \n\n            \n                \n                    Optional data we wish to use in a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementId\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:53\n                        \n                    \n\n            \n                \n                    The id of the element that the tour-step describes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleInteraction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:98\n                        \n                    \n\n            \n                \n                    Emits the possible interactions with a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:63\n                        \n                    \n\n            \n                \n                    The position of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Protected\n                        rootClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class')\n                        \n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:45\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stepClass\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:93\n                        \n                    \n\n            \n                \n                    A custom step class we can set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:68\n                        \n                    \n\n            \n                \n                    The title of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        titleElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild>('stepTitle')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:58\n                        \n                    \n\n            \n                \n                    The element of the tour-step that is seen as the title\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        titleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal('')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:103\n                        \n                    \n\n            \n                \n                    The aria-labelledby id of the title element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n  signal,\n  WritableSignal,\n  inject,\n  input,\n  OutputEmitterRef,\n  output,\n  viewChild\n} from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxTourService } from '../../services';\nimport { NgxTourInteraction, NgxTourStepPosition } from '../../types';\n\n/**\n * An abstract class that defines the minimum properties needed for the step component to be rendered\n */\n@Directive({\n\thost: {\n\t\trole: 'dialog',\n\t\t'[attr.aria-modal]': 'true',\n    '[attr.aria-labelledby]': 'titleId()',\n    '[attr.aria-details]': 'elementId()'\n\t},\n})\nexport abstract class NgxTourStepComponent implements OnInit, AfterViewInit {\n\tprivate readonly tourService = inject(NgxTourService);\n\n\t/**\n\t * Close the tour on escape pressed\n\t */\n\t@HostListener('document:keydown.escape') public onEscape() {\n\t\tthis.tourService.closeTour().subscribe();\n\t}\n\n\t/**\n\t * The ngx-tour-step class of the component\n\t */\n\t@HostBinding('class') protected rootClass: string;\n\n\t/**\n\t * The id of the element that the tour-step describes\n\t */\n\t/**\n\t * The id of the element that the tour-step describes\n\t */\n\tpublic readonly elementId = input.required();\n\n\t/**\n\t * The element of the tour-step that is seen as the title\n\t */\n\tpublic readonly titleElement = viewChild>('stepTitle');\n\n\t/**\n\t * The position of the step\n\t */\n\tpublic readonly position = input.required();\n\n\t/**\n\t * The title of the step\n\t */\n\tpublic readonly title = input.required();\n\n\t/**\n\t * The content of the step\n\t */\n\tpublic readonly content = input.required();\n\n\t/**\n\t * The index of the step\n\t */\n\tpublic readonly currentStep = input.required();\n\n\t/**\n\t * The total amount of steps\n\t */\n\tpublic readonly amountOfSteps = input.required();\n\n\t/**\n\t * Optional data we wish to use in a step\n\t */\n\tpublic readonly data = input();\n\n\t/**\n\t * A custom step class we can set\n\t */\n\tpublic readonly stepClass = input();\n\n\t/**\n\t * Emits the possible interactions with a step\n\t */\n\tpublic handleInteraction: OutputEmitterRef = output();\n\n\t/**\n\t * The aria-labelledby id of the title element\n\t */\n\tpublic titleId: WritableSignal = signal('');\n\n\tpublic ngOnInit(): void {\n\t\t// Iben: We set the correct host class. As this step is rendered and not changed afterwards, we do not have to adjust this in the onChanges\n\t\tconst position = this.position();\n\t\tconst positionClass = position ? `ngx-tour-step-position-${position}` : '';\n\t\tthis.rootClass = `ngx-tour-step ${positionClass} ${this.stepClass() || ''}`;\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: If no title element was found, we throw an error\n\t\tconst titleElement = this.titleElement();\n  if (!titleElement) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxTourService: The tour step component does not have an element marked with `stepTitle`. Because of that, the necessary accessibility attributes could not be set. Please add the `stepTitle` tag to the element that represents the title of the step.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Connect the aria-labbledby tag to the title element\n\t\tlet id = titleElement.nativeElement.getAttribute('id');\n\n\t\t// Iben: If the title element does not have an id, we generate one\n\t\tif (!id) {\n\t\t\tid = uuid();\n\t\t\ttitleElement.nativeElement.setAttribute('id', id);\n\t\t}\n\n\t\t// Iben: To prevent issues with changeDetection, we use a signal here to update the id\n\t\tthis.titleId.set(id);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourTokenConfiguration.html":{"url":"interfaces/NgxTourTokenConfiguration.html","title":"interface - NgxTourTokenConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourTokenConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.token.type.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration object to be passed as token to the tour provider\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            offset\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The component to be used as the tour step.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         NgxTourStepOffset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourStepOffset\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Allow the highlighted element to have additional whitespace around the cutout on the y-axis.\nThis is useful when the highlighted element is under a header or a footer.\nEven though it is possible to provide both a top and bottom offset, only one will be taken into\naccount. If the vertical center of the cutout is closer to the top, the top offset will be used. If\nthe vertical center of the cutout is closer to the bottom, the bottom offset will be used.\nNegative values are allowed. The step(card) will always be displayed within the viewport, even if\nthe offset makes the cutout go out of the viewport.\nThis is not the same as the cutoutMargin, which is the whitespace within the highlighted element.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxTourStepComponent } from '../abstracts';\n\nimport { NgxTourStepOffset } from './tour.types';\n\n/**\n * The token type for the tour provider\n */\nexport type NgxTourTokenType = Type | NgxTourTokenConfiguration;\n\n/**\n * The configuration object to be passed as token to the tour provider\n */\nexport interface NgxTourTokenConfiguration {\n\t/**\n\t * The component to be used as the tour step.\n\t */\n\tcomponent: Type;\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t *\n\t * @inheritdoc NgxTourStep.offset\n\t */\n\toffset: NgxTourStepOffset;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTreeGridCellDirective.html":{"url":"directives/NgxTreeGridCellDirective.html","title":"directive - NgxTreeGridCellDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTreeGridCellDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A cell directive to handle navigation according to the WCAG treegrid pattern\nSee https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n\n            \n\n            \n                Extends\n            \n            \n                            NgxHasFocusDirective\n            \n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTreeGridCell]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGridCell\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGridCellRow\n                            \n                            \n                                    Private\n                                    Readonly\n                                parent\n                            \n                            \n                                    Private\n                                row\n                            \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                findFocusableElement\n                            \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    \n                                moveDown\n                            \n                            \n                                    \n                                moveLeft\n                            \n                            \n                                    \n                                moveRight\n                            \n                            \n                                    \n                                moveToBottomControlEnd\n                            \n                            \n                                    \n                                moveToBottomEnd\n                            \n                            \n                                    Private\n                                moveToCell\n                            \n                            \n                                    \n                                moveToFirstCellOfGrid\n                            \n                            \n                                    \n                                moveToFirstColumnOfGrid\n                            \n                            \n                                    \n                                moveToFirstOfRow\n                            \n                            \n                                    \n                                moveToLastCellOfGrid\n                            \n                            \n                                    \n                                moveUp\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                isFocussedOn\n                            \n                            \n                                    \n                                removeFocus\n                            \n                            \n                                    \n                                setFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTreeGridCell\n                            \n                            \n                                ngxTreeGridCellRow\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                keydown.ArrowDown\n                            \n                            \n                                keydown.ArrowLeft\n                            \n                            \n                                keydown.ArrowRight\n                            \n                            \n                                keydown.ArrowUp\n                            \n                            \n                                keydown.control.End\n                            \n                            \n                                keydown.control.Home\n                            \n                            \n                                keydown.End\n                            \n                            \n                                keydown.Home\n                            \n                            \n                                keydown.PageDown\n                            \n                            \n                                keydown.PageUp\n                            \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTreeGridCell\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:116\n                            \n                        \n                \n                    \n                        The index of the cell in the row\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTreeGridCellRow\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:121\n                            \n                        \n                \n                    \n                        The index of the row\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowDown\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:67\n                \n            \n\n\n            \n                \n                    Set focus on the cell below\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowLeft\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:37\n                \n            \n\n\n            \n                \n                    Set focus on the previous cell to the left\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowRight\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:53\n                \n            \n\n\n            \n                \n                    Set focus on the next cell to the right\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowUp\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:60\n                \n            \n\n\n            \n                \n                    Set focus on the cell above\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.control.End\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:109\n                \n            \n\n\n            \n                \n                    Set focus on the last cell of the same column of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.control.Home\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:88\n                \n            \n\n\n            \n                \n                    Set focus on the first cell of the same column of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.End\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:102\n                \n            \n\n\n            \n                \n                    Set focus on the last cell of the row\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.Home\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:81\n                \n            \n\n\n            \n                \n                    Set focus on the first cell of the row\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.PageDown\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:95\n                \n            \n\n\n            \n                \n                    Set focus on the last cell of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.PageUp\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:74\n                \n            \n\n\n            \n                \n                    Set focus on the first cell of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDirective:25\n\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDirective:18\n\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        findFocusableElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    findFocusableElement()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:152\n                        \n                    \n\n\n            \n                \n                        Searches for a focusable element in the cell\n\n\n                        \n                            Returns :     HTMLElement | undefined\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:126\n                        \n                    \n\n\n            \n                \n                        Sets focus on the cell or on the first focusable item in the cell\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveDown\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveDown()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowDown')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:67\n                        \n                    \n\n\n            \n                \n                        Set focus on the cell below\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveLeft\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveLeft(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowLeft', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:37\n                        \n                    \n\n\n            \n                \n                        Set focus on the previous cell to the left\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveRight\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveRight()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowRight')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:53\n                        \n                    \n\n\n            \n                \n                        Set focus on the next cell to the right\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToBottomControlEnd\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToBottomControlEnd()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.control.End')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:109\n                        \n                    \n\n\n            \n                \n                        Set focus on the last cell of the same column of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToBottomEnd\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToBottomEnd()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.End')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:102\n                        \n                    \n\n\n            \n                \n                        Set focus on the last cell of the row\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        moveToCell\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToCell(cell: NgxTreeGridCellTarget, row: NgxTreeGridRowTarget)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:143\n                        \n                    \n\n\n            \n                \n                        Moves focus to a provided cell in a provided row\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cell\n                                            \n                                                            NgxTreeGridCellTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cell we wish to put focus on\n\n\n                                            \n                                        \n                                        \n                                                row\n                                            \n                                                            NgxTreeGridRowTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe row in which the cell is\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToFirstCellOfGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToFirstCellOfGrid()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.PageUp')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:74\n                        \n                    \n\n\n            \n                \n                        Set focus on the first cell of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToFirstColumnOfGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToFirstColumnOfGrid()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.control.Home')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:88\n                        \n                    \n\n\n            \n                \n                        Set focus on the first cell of the same column of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToFirstOfRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToFirstOfRow()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.Home')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:81\n                        \n                    \n\n\n            \n                \n                        Set focus on the first cell of the row\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToLastCellOfGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToLastCellOfGrid()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.PageDown')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:95\n                        \n                    \n\n\n            \n                \n                        Set focus on the last cell of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveUp()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowUp')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:60\n                        \n                    \n\n\n            \n                \n                        Set focus on the cell above\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:174\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:34\n\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isFocussedOn\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFocussedOn()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:43\n\n                        \n                    \n\n\n            \n                \n                        Returns when the item has been focussed on\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:25\n\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:18\n\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGridCell\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:116\n                        \n                    \n\n            \n                \n                    The index of the cell in the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGridCellRow\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:121\n                        \n                    \n\n            \n                \n                    The index of the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTreeGridDirective\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxTreeGridDirective, {\n\t\toptional: true,\n\t})!\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        row\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTreeGridRowDirective\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:32\n                        \n                    \n\n            \n                \n                    The parent row of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxHasFocusDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxHasFocusDirective:13\n\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, AfterViewInit, inject, input } from '@angular/core';\n\nimport { NgxTreeGridCellTarget, NgxTreeGridRowTarget } from '../../types';\nimport { NgxHasFocusDirective } from '../has-focus-action';\n\nimport { NgxTreeGridRowDirective } from './tree-grid-row.directive';\nimport { NgxTreeGridDirective } from './tree-grid.directive';\n\n/**\n * A cell directive to handle navigation according to the WCAG treegrid pattern\n *\n * See https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n */\n@Directive({\n\tselector: '[ngxTreeGridCell]',\n\tstandalone: true,\n\thost: {\n\t\t// Iben: Marks the cell as focusable, but only by setting its focus programmatically, not by the tab key\n\t\t'[attr.tabIndex]': '-1',\n\t},\n})\nexport class NgxTreeGridCellDirective extends NgxHasFocusDirective implements AfterViewInit {\n\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\tprivate readonly parent: NgxTreeGridDirective = inject(NgxTreeGridDirective, {\n\t\toptional: true,\n\t})!;\n\tprivate readonly elementRef = inject(ElementRef);\n\n\t/**\n\t * The parent row of the cell\n\t */\n\tprivate row: NgxTreeGridRowDirective;\n\n\t/**\n\t * Set focus on the previous cell to the left\n\t */\n\t@HostListener('keydown.ArrowLeft', ['$event']) moveLeft(event: Event): void {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\t// Iben: Stop the event from bubbling so that the row does not open when navigating through the row (see arrowLeft in the NgxTreeGridRowDirective )\n\t\t\tconst ngxTreeGridCell = this.ngxTreeGridCell();\n   if (ngxTreeGridCell === 0) {\n\t\t\t\tevent.stopPropagation();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.moveToCell(ngxTreeGridCell - 1, 'current');\n\t\t});\n\t}\n\n\t/**\n\t * Set focus on the next cell to the right\n\t */\n\t@HostListener('keydown.ArrowRight') moveRight(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell() + 1, 'current');\n\t}\n\n\t/**\n\t * Set focus on the cell above\n\t */\n\t@HostListener('keydown.ArrowUp') moveUp(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'above');\n\t}\n\n\t/**\n\t * Set focus on the cell below\n\t */\n\t@HostListener('keydown.ArrowDown') moveDown(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'below');\n\t}\n\n\t/**\n\t * Set focus on the first cell of the grid\n\t */\n\t@HostListener('keydown.PageUp') moveToFirstCellOfGrid(): void {\n\t\tthis.moveToCell('first', 'first');\n\t}\n\n\t/**\n\t * Set focus on the first cell of the row\n\t */\n\t@HostListener('keydown.Home') moveToFirstOfRow(): void {\n\t\tthis.moveToCell('first', 'current');\n\t}\n\n\t/**\n\t * Set focus on the first cell of the same column of the grid\n\t */\n\t@HostListener('keydown.control.Home') moveToFirstColumnOfGrid(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'first');\n\t}\n\n\t/**\n\t * Set focus on the last cell of the grid\n\t */\n\t@HostListener('keydown.PageDown') moveToLastCellOfGrid(): void {\n\t\tthis.moveToCell('last', 'last');\n\t}\n\n\t/**\n\t * Set focus on the last cell of the row\n\t */\n\t@HostListener('keydown.End') moveToBottomEnd(): void {\n\t\tthis.moveToCell('last', 'current');\n\t}\n\n\t/**\n\t * Set focus on the last cell of the same column of the grid\n\t */\n\t@HostListener('keydown.control.End') moveToBottomControlEnd(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'last');\n\t}\n\n\t/**\n\t * The index of the cell in the row\n\t */\n\tpublic readonly ngxTreeGridCell = input.required();\n\n\t/**\n\t * The index of the row\n\t */\n\tpublic readonly ngxTreeGridCellRow = input.required();\n\n\t/**\n\t * Sets focus on the cell or on the first focusable item in the cell\n\t */\n\tpublic focus(): void {\n\t\t// Iben: Check if any of the child elements are focusable\n\t\tconst focusableElement = this.findFocusableElement();\n\n\t\t// Iben: If no element was focusable, focus on the current element\n\t\tif (!focusableElement) {\n\t\t\tthis.elementRef.nativeElement.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Moves focus to a provided cell in a provided row\n\t *\n\t * @private\n\t * @param cell - The cell we wish to put focus on\n\t * @param row - The row in which the cell is\n\t */\n\tprivate moveToCell(cell: NgxTreeGridCellTarget, row: NgxTreeGridRowTarget): void {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tthis.row.getCell(cell, row)?.focus();\n\t\t});\n\t}\n\n\t/**\n\t * Searches for a focusable element in the cell\n\t */\n\tprivate findFocusableElement(): HTMLElement | undefined {\n\t\tlet result: HTMLElement;\n\n\t\t// Iben: Loop over each first-level element of the children\n\t\tfor (const element of [...this.elementRef.nativeElement.children]) {\n\t\t\tif (!result) {\n\t\t\t\t// Iben: Check if we can focus on the element\n        element.focus();\n\n\t\t\t\t// Iben: If the current active element is the same as the element we focussed, on, we break\n\t\t\t\tif (element === document?.activeElement) {\n\t\t\t\t\tresult = element;\n\t\t\t\t\tthis.hasFocus = true;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: We register the cell and the row through the parent, as the td elements are not rendered within the row initially.\n\t\tconst ngxTreeGridCellRow = this.ngxTreeGridCellRow();\n  this.parent?.registerCell(ngxTreeGridCellRow, this);\n\t\tthis.row = this.parent.getRow(ngxTreeGridCellRow);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTreeGridDirective.html":{"url":"directives/NgxTreeGridDirective.html","title":"directive - NgxTreeGridDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTreeGridDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An overarching directive to handle navigation according to the WCAG treegrid pattern\nSee https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTreeGrid]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGrid\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGridExpandable\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    Private\n                                rows\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getFirstRow\n                            \n                            \n                                    Public\n                                getLastRow\n                            \n                            \n                                    Public\n                                getRow\n                            \n                            \n                                    Public\n                                moveTo\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                    Public\n                                registerCell\n                            \n                            \n                                    Public\n                                registerRow\n                            \n                            \n                                    Public\n                                removeRow\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTreeGrid\n                            \n                            \n                                ngxTreeGridExpandable\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                attr.role\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTreeGrid\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:26\n                            \n                        \n                \n                    \n                        Whether the current item is a treegrid\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTreeGridExpandable\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:31\n                            \n                        \n                \n                    \n                        Whether the treegrid has expandableRows\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        attr.role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"table\" | \"treegrid\"\n\n                    \n                \n                \n                    \n                        Default value : 'table'\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getFirstRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFirstRow()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:69\n                        \n                    \n\n\n            \n                \n                        Returns the first row of the grid\n\n\n                        \n                            Returns :         NgxTreeGridRowDirective\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getLastRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLastRow()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:76\n                        \n                    \n\n\n            \n                \n                        Returns the last row of the grid\n\n\n                        \n                            Returns :         NgxTreeGridRowDirective\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRow(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:56\n                        \n                    \n\n\n            \n                \n                        Returns a row from the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the row\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxTreeGridRowDirective\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        moveTo\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveTo(direction: \"top\" | \"bottom\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:85\n                        \n                    \n\n\n            \n                \n                        Moves the row focus to either the top or the bottom row of the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                        \"top\" | \"bottom\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether we want to go to the top or the bottom of the grid\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:98\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerCell\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerCell(index: number, cell: NgxTreeGridCellDirective)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:94\n                        \n                    \n\n\n            \n                \n                        Registers a a cell to a row of the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                cell\n                                            \n                                                            NgxTreeGridCellDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided cell\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerRow(row: NgxTreeGridRowDirective)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:38\n                        \n                    \n\n\n            \n                \n                        Registers a row to the rows array\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                row\n                                            \n                                                            NgxTreeGridRowDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided row\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeRow(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:47\n                        \n                    \n\n\n            \n                \n                        Removes a registered row from the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the provided row\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGrid\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:26\n                        \n                    \n\n            \n                \n                    Whether the current item is a treegrid\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGridExpandable\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:31\n                        \n                    \n\n            \n                \n                    Whether the treegrid has expandableRows\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"table\" | \"treegrid\"\n\n                    \n                \n                \n                    \n                        Default value : 'table'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.role')\n                        \n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        rows\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTreeGridRowDirective[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:19\n                        \n                    \n\n            \n                \n                    An array of all rows in the treegrid\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostBinding, OnChanges, input } from '@angular/core';\n\nimport { NgxTreeGridRowDirective } from './tree-grid-row.directive';\nimport { NgxTreeGridCellDirective } from './tree-grid.cell.directive';\n\n/**\n * An overarching directive to handle navigation according to the WCAG treegrid pattern\n *\n * See https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n */\n@Directive({\n\tselector: '[ngxTreeGrid]',\n\tstandalone: true,\n})\nexport class NgxTreeGridDirective implements OnChanges {\n\t/**\n\t * An array of all rows in the treegrid\n\t */\n\tprivate rows: NgxTreeGridRowDirective[] = [];\n\n\t@HostBinding('attr.role') role: 'table' | 'treegrid' = 'table';\n\n\t/**\n\t * Whether the current item is a treegrid\n\t */\n\tpublic readonly ngxTreeGrid = input.required();\n\n\t/**\n\t * Whether the treegrid has expandableRows\n\t */\n\tpublic readonly ngxTreeGridExpandable = input.required();\n\n\t/**\n\t * Registers a row to the rows array\n\t *\n\t * @param row - The provided row\n\t */\n\tpublic registerRow(row: NgxTreeGridRowDirective): void {\n\t\tthis.rows.push(row);\n\t}\n\n\t/**\n\t * Removes a registered row from the grid\n\t *\n\t * @param index - The index of the provided row\n\t */\n\tpublic removeRow(index: number): void {\n\t\tthis.rows = this.rows.slice(0, index).concat(this.rows.slice(index + 1));\n\t}\n\n\t/**\n\t * Returns a row from the grid\n\t *\n\t * @param index - The index of the row\n\t */\n\tpublic getRow(index: number): NgxTreeGridRowDirective {\n\t\t// Iben: Early exit if the row is not found\n\t\tif (!this.ngxTreeGrid()) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Iben: Return the row\n\t\treturn this.rows[index];\n\t}\n\n\t/**\n\t * Returns the first row of the grid\n\t */\n\tpublic getFirstRow(): NgxTreeGridRowDirective {\n\t\treturn this.getRow(0);\n\t}\n\n\t/**\n\t * Returns the last row of the grid\n\t */\n\tpublic getLastRow(): NgxTreeGridRowDirective {\n\t\treturn this.getRow(this.rows.length - 1);\n\t}\n\n\t/**\n\t * Moves the row focus to either the top or the bottom row of the grid\n\t *\n\t * @param direction - Whether we want to go to the top or the bottom of the grid\n\t */\n\tpublic moveTo(direction: 'top' | 'bottom') {\n\t\tthis.rows[direction === 'top' ? 0 : this.rows.length - 1]?.focus();\n\t}\n\n\t/**\n\t * Registers a a cell to a row of the grid\n\t *\n\t * @param cell - The provided cell\n\t */\n\tpublic registerCell(index: number, cell: NgxTreeGridCellDirective) {\n\t\tthis.getRow(index)?.registerCell(cell);\n\t}\n\n\tngOnChanges() {\n\t\t// Iben: Set the role based on the tree grid\n\t\tthis.role = this.ngxTreeGrid() ? 'treegrid' : 'table';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxValidators.html":{"url":"classes/NgxValidators.html","title":"class - NgxValidators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxValidators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/validators/validators.ts\n        \n\n\n            \n                Description\n            \n            \n                Exported Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                allOrNothingRequired\n                            \n                            \n                                    Static\n                                atLeastOneRequired\n                            \n                            \n                                    Static\n                                chronologicalDates\n                            \n                            \n                                    Static\n                                dateRangeValidator\n                            \n                            \n                                    Static\n                                decimalsAfterComma\n                            \n                            \n                                    Static\n                                dependedRequired\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        allOrNothingRequired\n                        \n                    \n                \n            \n            \n                \n                        \n                    allOrNothingRequired(control: FormGroup)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:27\n                        \n                    \n\n\n            \n                \n                        A validator to check if all or none of the values of a form group are filled in.\nParticularly useful in situations where a form group field within itself is optional,\nbut all fields are required in case it does get filled in\nReturns an allOrNothingRequiredError error on the provided FormGroup and a required error on the individual controls\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                        FormGroup\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA form group control\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        atLeastOneRequired\n                        \n                    \n                \n            \n            \n                \n                        \n                    atLeastOneRequired(options?: AtLeastOneRequiredValidatorOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:40\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    KeyType\n                            \n                        \n                    \n\n            \n                \n                        A validator to check if at least one of the provided controls of the form group are filled in\nReturns an atLeastOneRequiredError error on the provided FormGroup and a required error on the individual controls\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            AtLeastOneRequiredValidatorOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional object with configuration options, see below params for more info\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        chronologicalDates\n                        \n                    \n                \n            \n            \n                \n                        \n                    chronologicalDates(startControlKey: string, endControlKey: string, format: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:83\n                        \n                    \n\n\n            \n                \n                        A FormGroup validator to check whether a start and end date are chronologically correct\nReturns an incorrectChronologicalDates error on the provided FormGroup and a incorrectChronologicalDate on the endControl\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                startControlKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe key of the control containing the start date value\n\n\n                                            \n                                        \n                                        \n                                                endControlKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe key of the control containing the end date value\n\n\n                                            \n                                        \n                                        \n                                                format\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'yyyy-MM-dd'\n                                            \n\n                                            \n                                                    \nOptional format of the dates provided by the controls, by default yyyy-MM-dd\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        dateRangeValidator\n                        \n                    \n                \n            \n            \n                \n                        \n                    dateRangeValidator(min: string, max: string, format: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:100\n                        \n                    \n\n\n            \n                \n                        Form control validator which validates if a date is between a provided range\nReturns an invalidRange error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                min\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                max\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                format\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'yyyy-MM-dd'\n                                            \n\n                                            \n                                                    \nOptional format used for all 3 dates, by default yyyy-MM-dd\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        decimalsAfterComma\n                        \n                    \n                \n            \n            \n                \n                        \n                    decimalsAfterComma(max: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:70\n                        \n                    \n\n\n            \n                \n                        Validates whether the inputted value has exceeded the maximum amount of decimals after the comma\nReturns an invalidDecimalsAfterComma error on the provided control\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                max\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe maximum number of decimals after the comma\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        dependedRequired\n                        \n                    \n                \n            \n            \n                \n                        \n                    dependedRequired(controls: KeyType[], dependedControlKey: KeyType, matchFunction?: (data?: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:55\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    KeyType\n                            \n                        \n                    \n\n            \n                \n                        FormGroup validator which checks if an array of controls in the control are filled in if the depended control is filled in\nReturns a hasDependedRequiredError error on the provided FormGroup and a required error on the individual controls\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                controls\n                                            \n                                                        KeyType[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn array of controls.\n\n\n                                            \n                                        \n                                        \n                                                dependedControlKey\n                                            \n                                                        KeyType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA control within the group which the other controls depend on.\n\n\n                                            \n                                        \n                                        \n                                                matchFunction\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional function the dependedControl should check\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nimport { allOrNothingRequiredValidator } from './all-or-nothing-required/all-or-nothing-required.validator';\nimport {\n\tAtLeastOneRequiredValidatorOptions,\n\tatLeastOneRequiredValidator,\n} from './at-least-one-required/at-least-one-required.validator';\nimport { chronologicalDatesValidator } from './chronological-dates/chronological-dates.validator';\nimport { dateRangeValidator } from './date-range/date-range.validator';\nimport { decimalsAfterCommaValidator } from './decimals-after-comma/decimals-after-comma.validator';\nimport { dependedRequiredValidator } from './depended-required/depended-required.validator';\n\n/**\n * Exported Class\n */\n\nexport class NgxValidators {\n\t/**\n\t * A validator to check if all or none of the values of a form group are filled in.\n\t * Particularly useful in situations where a form group field within itself is optional,\n\t * but all fields are required in case it does get filled in\n\t *\n\t * Returns an `allOrNothingRequiredError` error on the provided FormGroup and a `required` error on the individual controls\n\t *\n\t * @param control - A form group control\n\t */\n\tstatic allOrNothingRequired(control: FormGroup): ValidationErrors | null {\n\t\treturn allOrNothingRequiredValidator(control);\n\t}\n\n\t/**\n\t * A validator to check if at least one of the provided controls of the form group are filled in\n\t *\n\t * Returns an `atLeastOneRequiredError` error on the provided FormGroup and a `required` error on the individual controls\n\t *\n\t * @param options - An optional object with configuration options, see below params for more info\n\t * @param controlNames - Optional list of controls, if not provided the validator is applied to all controls of the group\n\t * @param conditionalFunction - Optional function the form value needs to return true to for the required to be se\n\t */\n\tstatic atLeastOneRequired(\n\t\toptions?: AtLeastOneRequiredValidatorOptions\n\t): ValidatorFn {\n\t\treturn atLeastOneRequiredValidator(options);\n\t}\n\n\t/**\n\t * FormGroup validator which checks if an array of controls in the control are filled in if the depended control is filled in\n\t *\n\t * Returns a `hasDependedRequiredError` error on the provided FormGroup and a `required` error on the individual controls\n\t *\n\t * @param controls - An array of controls.\n\t * @param dependedControlKey - A control within the group which the other controls depend on.\n\t * @param matchFunction - Optional function the dependedControl should check\n\t */\n\tstatic dependedRequired(\n\t\tcontrols: KeyType[],\n\t\tdependedControlKey: KeyType,\n\t\tmatchFunction?: (data: any) => boolean\n\t): ValidatorFn {\n\t\treturn dependedRequiredValidator(controls, dependedControlKey, matchFunction);\n\t}\n\n\t/**\n\t * Validates whether the inputted value has exceeded the maximum amount of decimals after the comma\n\t *\n\t * Returns an `invalidDecimalsAfterComma` error on the provided control\n\t *\n\t * @param max - The maximum number of decimals after the comma\n\t */\n\tstatic decimalsAfterComma(max: number): ValidatorFn {\n\t\treturn decimalsAfterCommaValidator(max);\n\t}\n\n\t/**\n\t * A FormGroup validator to check whether a start and end date are chronologically correct\n\t *\n\t * Returns an `incorrectChronologicalDates` error on the provided FormGroup and a `incorrectChronologicalDate` on the endControl\n\t *\n\t * @param startControlKey - The key of the control containing the start date value\n\t * @param endControlKey - The key of the control containing the end date value\n\t * @param format - Optional format of the dates provided by the controls, by default yyyy-MM-dd\n\t */\n\tstatic chronologicalDates(\n\t\tstartControlKey: string,\n\t\tendControlKey: string,\n\t\tformat = 'yyyy-MM-dd'\n\t): ValidatorFn {\n\t\treturn chronologicalDatesValidator(startControlKey, endControlKey, format);\n\t}\n\n\t/**\n\t * Form control validator which validates if a date is between a provided range\n\t *\n\t * Returns an `invalidRange` error\n\t *\n\t * @param minDate - Minimum valid date\n\t * @param maxDate - Maximum valid date\n\t * @param format - Optional format used for all 3 dates, by default yyyy-MM-dd\n\t */\n\tstatic dateRangeValidator(min: string, max: string, format = 'yyyy-MM-dd'): ValidatorFn {\n\t\treturn dateRangeValidator(min, max, format);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxWindowService.html":{"url":"injectables/NgxWindowService.html","title":"injectable - NgxWindowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxWindowService\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/core/src/lib/services/window/window.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service used to access the document and window in a SSR safe way\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                currentScrollPosition\n                            \n                            \n                                    Public\n                                currentScrollPosition$\n                            \n                            \n                                    Private\n                                currentScrollPositionSubject$\n                            \n                            \n                                    Private\n                                    Readonly\n                                document\n                            \n                            \n                                    Private\n                                    Readonly\n                                platformId\n                            \n                            \n                                    Public\n                                scrollingUp$\n                            \n                            \n                                    Private\n                                scrollingUpSubject$\n                            \n                            \n                                    Public\n                                width$\n                            \n                            \n                                    Private\n                                widthSubject$\n                            \n                            \n                                    Public\n                                window\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleContentScroll\n                            \n                            \n                                    Public\n                                hasDocument\n                            \n                            \n                                    Public\n                                isBrowser\n                            \n                            \n                                    Public\n                                runInBrowser\n                            \n                            \n                                    Public\n                                scrollTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:61\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleContentScroll\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleContentScroll()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasDocument()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Returns whether there is a document present\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isBrowser\n                        \n                    \n                \n            \n            \n                \n                        \n                    isBrowser()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Returns whether the current platform is a browser\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        runInBrowser\n                        \n                    \n                \n            \n            \n                \n                        \n                    runInBrowser(action: (data: literal type) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:115\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ReturnType\n                            \n                        \n                    \n\n            \n                \n                        Run a provided function only when we're in the browser and not in a server side rendered application\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFunction we want to run in the browser\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ReturnType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        scrollTo\n                        \n                    \n                \n            \n            \n                \n                        \n                    scrollTo(offset: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Scrolls to the provided position of the page\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                offset\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    0\n                                            \n\n                                            \n                                                    \nOffset to which we want to scroll, scrolls to top when no offset is provided\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentScrollPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:56\n                        \n                    \n\n            \n                \n                    Current scroll position after the scroll has ended\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentScrollPosition$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentScrollPositionSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:50\n                        \n                    \n\n            \n                \n                    Observable of the current scroll position after the scroll has ended\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentScrollPositionSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(0)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:35\n                        \n                    \n\n            \n                \n                    Subject to hold the current scroll position\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Document\n\n                    \n                \n                \n                    \n                        Default value : inject(DOCUMENT)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:15\n                        \n                    \n\n            \n                \n                    Instance of the document if exists\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        platformId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(PLATFORM_ID)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:20\n                        \n                    \n\n            \n                \n                    Instance of the platform detector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        scrollingUp$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.scrollingUpSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:45\n                        \n                    \n\n            \n                \n                    Observable to track when the scroll has ended\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scrollingUpSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(true)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:30\n                        \n                    \n\n            \n                \n                    Subject to hold the scroll up event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        width$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.widthSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:40\n                        \n                    \n\n            \n                \n                    Observable to get the window-width, defaults to 1200 when no window is defined\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        widthSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(1200)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:25\n                        \n                    \n\n            \n                \n                    Subject to hold the window-width, defaults to 1200 when no window is defined\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        window\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Window\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:61\n                        \n                    \n\n            \n                \n                    The platforms Window object\n\n                \n            \n\n        \n    \n\n\n    \n\n    \n        NgxNgxWindowService\nThis service uses the DOCUMENT injection-token to provide several methods to access both document and window and related information.\nIt is convenient for using the document or window without breaking SSR.\nProperties\nwidth$\nThe window-service exposes a width$ observable to get the window-width. It defaults to 1200 when no window is defined.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public windowWidth$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.windowWidth$ = this.windowService.width$;\n    }\n}scrollingUp$\nThe window-service exposes a scrollingUp$ observable to know when the scroll has ended.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public scrollingUp$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.scrollingUp$ = this.windowService.scrollingUp$;\n    }\n}currentScrollPosition\nThe window-service exposes a currentScrollPosition property that contains the currentScrollPosition after handleContentScroll has been called.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public currentScrollPosition: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.currentScrollPosition = this.windowService.currentScrollPosition;\n    }\n}window\nThe window-service exposes the window property which is a link to the Window object.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public window$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.window = this.windowService.window;\n    }\n}document\nThe window-service also exposes the document property which is a link to the Document object.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public document$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.document = this.windowService.document;\n    }\n}Methods\nscrollTo\nA scrollTo method is provided to scroll to a position on the page. When there is no window, it will do nothing.\nThe offset is set to 0 by default so triggering the method without a value will scroll to the top of the page.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public somethingHappened(): void {\n        this.windowService.scrollTo(500);\n    }\n}hasDocument\nThe hasDocument-method is provided to check if there is a document.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public aCoolMethod(): void {\n        if (this.windowService.hasDocument()) {\n            // do something that depends on the document.\n        }\n    }\n}isBrowser\nThe isBrowser-method is provided to check if the current platform is a browser.\nIt uses the isPlatformBrowser method with the PLATFORM_ID injection-token internally.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public aCoolMethod(): void {\n        if (this.windowService.isBrowser()) {\n            // do something that depends on the browser.\n        }\n    }\n}runInBrowser\nThe runInBrowser-method is provided to run a specific callback only when in the browser.\nThe callback has access to the window and the document elements provided in its parameters.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public aCoolMethod(): void {\n        this.windowService.runInBrowser(({ browserWindow, browserDocument }) => {\n            // Do something with the browser window or document\n        });\n    }\n}\n    \n\n    \n        import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * A service used to access the document and window in a SSR safe way\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxWindowService {\n\t/**\n\t * Instance of the document if exists\n\t */\n\tprivate readonly document: Document = inject(DOCUMENT);\n\n\t/**\n\t * Instance of the platform detector\n\t */\n\tprivate readonly platformId = inject(PLATFORM_ID);\n\n\t/**\n\t * Subject to hold the window-width, defaults to 1200 when no window is defined\n\t */\n\tprivate widthSubject$: BehaviorSubject = new BehaviorSubject(1200);\n\n\t/**\n\t * Subject to hold the scroll up event\n\t */\n\tprivate scrollingUpSubject$: BehaviorSubject = new BehaviorSubject(true);\n\n\t/**\n\t * Subject to hold the current scroll position\n\t */\n\tprivate currentScrollPositionSubject$: BehaviorSubject = new BehaviorSubject(0);\n\n\t/**\n\t * Observable to get the window-width, defaults to 1200 when no window is defined\n\t */\n\tpublic width$: Observable = this.widthSubject$.asObservable();\n\n\t/**\n\t * Observable to track when the scroll has ended\n\t */\n\tpublic scrollingUp$: Observable = this.scrollingUpSubject$.asObservable();\n\n\t/**\n\t * Observable of the current scroll position after the scroll has ended\n\t */\n\tpublic currentScrollPosition$: Observable =\n\t\tthis.currentScrollPositionSubject$.asObservable();\n\n\t/**\n\t * Current scroll position after the scroll has ended\n\t */\n\tpublic currentScrollPosition: number = 0;\n\n\t/**\n\t * The platforms Window object\n\t */\n\tpublic window: Window;\n\n\tconstructor() {\n\t\t// Iben: Handle the initial setup of the service\n\t\tif (this.isBrowser() && this.hasDocument()) {\n\t\t\t// Iben: Set the window using the default view\n\t\t\tthis.window = this.document.defaultView as Window;\n\n\t\t\t// Iben: Listen to the scroll event of the document\n\t\t\tthis.document.addEventListener('scroll', this.handleContentScroll.bind(this));\n\n\t\t\t// Iben: Set the current window width\n\t\t\tthis.widthSubject$.next(this.window.innerWidth);\n\n\t\t\t// Iben: Listen to the resize event and update the window width\n\t\t\tthis.window.addEventListener('resize', () => {\n\t\t\t\tif (this.window.innerWidth && this.widthSubject$.getValue()) {\n\t\t\t\t\tthis.widthSubject$.next(this.window.innerWidth);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Scrolls to the provided position of the page\n\t *\n\t * @param offset - Offset to which we want to scroll, scrolls to top when no offset is provided\n\t */\n\tpublic scrollTo(offset: number = 0): void {\n\t\tif (!this.window) {\n\t\t\treturn;\n\t\t}\n\t\tthis.window.scrollTo(0, offset);\n\t}\n\n\t/**\n\t * Returns whether there is a document present\n\t */\n\tpublic hasDocument(): boolean {\n\t\treturn !!this.document;\n\t}\n\n\t/**\n\t * Returns whether the current platform is a browser\n\t */\n\tpublic isBrowser(): boolean {\n\t\treturn isPlatformBrowser(this.platformId);\n\t}\n\n\t/**\n\t * Run a provided function only when we're in the browser and not in a server side rendered application\n\t *\n\t * @param action - Function we want to run in the browser\n\t */\n\tpublic runInBrowser(\n\t\taction: (data: { browserWindow: Window; browserDocument: Document }) => ReturnType\n\t): ReturnType {\n\t\tif (this.isBrowser()) {\n\t\t\treturn action({\n\t\t\t\tbrowserWindow: this.window,\n\t\t\t\tbrowserDocument: this.document,\n\t\t\t});\n\t\t}\n\n\t\tconsole.warn('Browser depended function has not run.');\n\n\t\treturn undefined as ReturnType;\n\t}\n\n\t/**\n\t *\n\t *\n\t * @private\n\t * @memberof NgxWindowService\n\t */\n\tprivate handleContentScroll(): void {\n\t\t// Iben: Update the scrollUp subject\n\t\tif (window.scrollY > this.currentScrollPosition) {\n\t\t\tthis.scrollingUpSubject$.next(false);\n\t\t} else {\n\t\t\tthis.scrollingUpSubject$.next(true);\n\t\t}\n\n\t\t// Iben: Update the current scroll position\n\t\tthis.currentScrollPosition = window.scrollY \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpecStoreAssets.html":{"url":"interfaces/SpecStoreAssets.html","title":"interface - SpecStoreAssets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpecStoreAssets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-assets.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            StoreFlowAssets\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            channel\n                                        \n                                \n                                \n                                        \n                                            darkMode\n                                        \n                                \n                                \n                                        \n                                            subscriberCount\n                                        \n                                \n                                \n                                        \n                                            videos\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        channel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        channel:         BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        darkMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        darkMode:     BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscriberCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subscriberCount:     BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        videos\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        videos:         EntityStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseStoreAssets, EntityStoreAssets, StoreFlowAssets } from '../interfaces';\nimport { createBaseStoreAssets, createEntityAdapterStoreAssets, createStoreAssets } from '../utils';\n\nexport type DataType = { id: string; url: string };\n\ninterface SpecStoreAssets extends StoreFlowAssets {\n\tchannel: BaseStoreAssets;\n\tvideos: EntityStoreAssets;\n\tsubscriberCount: BaseStoreAssets;\n\tdarkMode: BaseStoreAssets;\n}\n\nexport const StoreSlice = 'YouTube';\n\nexport const { actions, reducers, selectors } = createStoreAssets(StoreSlice, [\n\t{\n\t\tsubSlice: 'channel',\n\t\tgenerator: createBaseStoreAssets,\n\t},\n\t{\n\t\tsubSlice: 'videos',\n\t\tgenerator: createEntityAdapterStoreAssets,\n\t},\n\t{\n\t\tsubSlice: 'subscriberCount',\n\t\tgenerator: createBaseStoreAssets,\n\t\tinitialValue: 0,\n\t},\n\t{\n\t\tsubSlice: 'darkMode',\n\t\tgenerator: createBaseStoreAssets,\n\t\tinitialValue: false,\n\t},\n]);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpecStoreService.html":{"url":"injectables/SpecStoreService.html","title":"injectable - SpecStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SpecStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStoreService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                channel$\n                            \n                            \n                                    Public\n                                    Readonly\n                                channelError$\n                            \n                            \n                                    Public\n                                    Readonly\n                                channelErrorMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                channelLoading$\n                            \n                            \n                                    Public\n                                    Readonly\n                                darkMode$\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpClient\n                            \n                            \n                                    Public\n                                    Readonly\n                                subscriberCount$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videos$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videosError$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videosErrorMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videosLoading$\n                            \n                            \n                                    Private\n                                stateWrapper\n                            \n                            \n                                    Protected\n                                    Readonly\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clearChannel\n                            \n                            \n                                    Public\n                                clearVideos\n                            \n                            \n                                    Public\n                                fetchChannel\n                            \n                            \n                                    Public\n                                fetchVideos\n                            \n                            \n                                    Public\n                                getChannel\n                            \n                            \n                                    Public\n                                getVideos\n                            \n                            \n                                    Public\n                                selectErrorFromStore\n                            \n                            \n                                    Public\n                                selectErrorMessageFromStore\n                            \n                            \n                                    Public\n                                selectFromStore\n                            \n                            \n                                    Public\n                                selectLoadingFromStore\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearVideos()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:65\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchVideos()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVideos(actionType: \"set\" | \"add\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                actionType\n                                            \n                                                        \"set\" | \"add\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'set'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:60\n\n                        \n                    \n\n\n            \n                \n                        Select the error state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorMessageFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorMessageFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:69\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ErrorMessage\n                            \n                        \n                    \n\n            \n                \n                        Select the error message state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:42\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    StoreItem\n                            \n                        \n                    \n\n            \n                \n                        Select the data of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectLoadingFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectLoadingFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:51\n\n                        \n                    \n\n\n            \n                \n                        Select the loading state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channel$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channelError$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channelErrorMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorMessageFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channelLoading$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectLoadingFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        darkMode$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(selectors.darkMode)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient\n\n                    \n                \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        subscriberCount$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(\n\t\tselectors.subscriberCount\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videos$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(\n\t\tselectors.videos\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videosError$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorFromStore(selectors.videos)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videosErrorMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorMessageFromStore(\n\t\tselectors.videos\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videosLoading$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectLoadingFromStore(\n\t\tselectors.videos\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StoreState\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:13\n\n                        \n                    \n\n            \n                \n                    A wrapper object for the store state selectors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:15\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { NgxStoreService } from '../abstracts';\nimport { dispatchDataToStore } from '../utils';\n\nimport { DataType, actions, selectors } from './store-assets';\n\n@Injectable()\nexport class SpecStoreService extends NgxStoreService {\n\tpublic readonly channel$: Observable = this.selectFromStore(\n\t\tselectors.channel\n\t);\n\tpublic readonly channelLoading$: Observable = this.selectLoadingFromStore(\n\t\tselectors.channel\n\t);\n\tpublic readonly channelError$: Observable = this.selectErrorFromStore(\n\t\tselectors.channel\n\t);\n\tpublic readonly channelErrorMessage$: Observable = this.selectErrorMessageFromStore(\n\t\tselectors.channel\n\t);\n\n\tpublic readonly videos$: Observable = this.selectFromStore(\n\t\tselectors.videos\n\t);\n\tpublic readonly videosLoading$: Observable = this.selectLoadingFromStore(\n\t\tselectors.videos\n\t);\n\tpublic readonly videosError$: Observable = this.selectErrorFromStore(selectors.videos);\n\tpublic readonly videosErrorMessage$: Observable = this.selectErrorMessageFromStore(\n\t\tselectors.videos\n\t);\n\tpublic readonly subscriberCount$: Observable = this.selectFromStore(\n\t\tselectors.subscriberCount\n\t);\n\tpublic readonly darkMode$: Observable = this.selectFromStore(selectors.darkMode);\n\n\tprivate readonly httpClient: HttpClient = inject(HttpClient);\n\n\tpublic getChannel(): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.channel,\n\t\t\tthis.httpClient.get('test'),\n\t\t\tthis.store\n\t\t).pipe(switchMap(() => this.channel$));\n\t}\n\n\tpublic clearChannel(): void {\n\t\tthis.store.dispatch(actions.channel.clear());\n\t}\n\n\tpublic getVideos(actionType: 'set' | 'add' = 'set'): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.videos,\n\t\t\tthis.httpClient.get('test'),\n\t\t\tthis.store,\n\t\t\tactionType\n\t\t).pipe(switchMap(() => this.videos$));\n\t}\n\n\tpublic clearVideos(): void {\n\t\tthis.store.dispatch(actions.videos.clear());\n\t}\n\n\tpublic fetchChannel() {\n\t\tthis.store.dispatch(actions.channel.effects.set({ payload: false }));\n\t}\n\n\tpublic fetchVideos() {\n\t\tthis.store.dispatch(actions.videos.effects.set({ payload: 'test' }));\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StoreAssetsOptions.html":{"url":"interfaces/StoreAssetsOptions.html","title":"interface - StoreAssetsOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StoreAssetsOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-generator.ts\n        \n\n\n            \n                Description\n            \n            \n                These objects will be used as a blueprint for our store slices\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            generator\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            initialValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            selectId\n                                        \n                                \n                                \n                                        \n                                            subSlice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        generator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        generator:      | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | \n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        initialValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialValue:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectId:     IdSelector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IdSelector\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subSlice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subSlice:     SliceKey\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SliceKey\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\nimport { ActionReducer, Action } from '@ngrx/store';\n\nimport { BaseStoreAssets } from './base-store';\nimport { EntityStoreAssets } from './entity-store-assets';\nimport {\n\tBaseStoreAssetsGeneratorOptions,\n\tEntityStoreAssetsGeneratorOptions,\n} from './store-assets-generator-options';\n\n/**\n * These objects will be used as a blueprint for our store slices\n *\n * @template SliceKey - The keys of our store\n */\nexport interface StoreAssetsOptions {\n\tsubSlice: SliceKey;\n\tgenerator:\n\t\t| ((options: EntityStoreAssetsGeneratorOptions) => EntityStoreAssets)\n\t\t| ((options: BaseStoreAssetsGeneratorOptions) => BaseStoreAssets);\n\n\tselectId?: IdSelector;\n\tinitialValue?: any;\n}\n\n// Iben: The base type for our flow assets which we'll pass to the create generator\nexport type StoreFlowAssets = Record | BaseStoreAssets>;\n\n// Iben: Type to extract the selectors from the provided ResultType, so that we know if we have a BaseStoreSelector or an EntityStoreSelector, this way\n// we get correct typing in our services\nexport type NgxStoreSelectors = {\n\t[Key in keyof ResultType]: ResultType[Key]['selectors'];\n};\n\n// Iben: Type to extract the actions from the provided ResultType, so that we know if we have a BaseStoreAction or an EntityStoreAction, this way\n// we get correct typing in our services\ntype NgxStoreActions = {\n\t[Key in keyof ResultType]: ResultType[Key]['actions'];\n};\n\n/**\n * The typing of the store of all sub slices\n *\n * @template ResultType - The typing we wish to see for our actions, reducers and selectors\n */\nexport interface NgxStore {\n\tselectors: NgxStoreSelectors;\n\tactions: NgxStoreActions;\n\treducers: ActionReducer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StoreEffects.html":{"url":"injectables/StoreEffects.html","title":"injectable - StoreEffects","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StoreEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/effects.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                actions$\n                            \n                            \n                                    Private\n                                    Readonly\n                                effectsService\n                            \n                            \n                                    Public\n                                fetchChannel$\n                            \n                            \n                                    Public\n                                fetchVideos$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        actions$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Actions\n\n                    \n                \n                \n                    \n                        Default value : inject(Actions)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        effectsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EffectsService\n\n                    \n                \n                \n                    \n                        Default value : inject(EffectsService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchChannel$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(\n\t\t\t\tactions.channel,\n\t\t\t\t'set',\n\t\t\t\tthis.effectsService.fetchChannel\n\t\t\t)\n\t\t);\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchVideos$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(actions.videos, 'set', this.effectsService.fetchVideos)\n\t\t);\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:24\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { Actions, createEffect } from '@ngrx/effects';\n\nimport { handleEffect } from '../operators';\n\nimport { EffectsService } from './effects.service';\nimport { DataType, actions } from './store-assets';\n\n@Injectable()\nexport class StoreEffects {\n\tprivate readonly actions$: Actions = inject(Actions);\n\tprivate readonly effectsService: EffectsService = inject(EffectsService);\n\n\tpublic fetchChannel$ = createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(\n\t\t\t\tactions.channel,\n\t\t\t\t'set',\n\t\t\t\tthis.effectsService.fetchChannel\n\t\t\t)\n\t\t);\n\t});\n\n\tpublic fetchVideos$ = createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(actions.videos, 'set', this.effectsService.fetchVideos)\n\t\t);\n\t});\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StoreState.html":{"url":"interfaces/StoreState.html","title":"interface - StoreState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StoreState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-state.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            StoreFlowAssets\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            isCompleted\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         EntityStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isCompleted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isCompleted:     BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of, throwError, switchMap } from 'rxjs';\n\nimport { NgxStoreService } from '../abstracts';\nimport { BaseStoreAssets, EntityStoreAssets, StoreFlowAssets } from '../interfaces';\nimport {\n\tcreateBaseStoreAssets,\n\tcreateEntityAdapterStoreAssets,\n\tcreateStoreAssets,\n\tdispatchDataToStore,\n} from '../utils';\n\ninterface StoreState extends StoreFlowAssets {\n\tdata: EntityStoreAssets;\n\tisCompleted: BaseStoreAssets;\n}\n\nexport const { actions, reducers, selectors } = createStoreAssets('state', [\n\t{\n\t\tsubSlice: 'data',\n\t\tgenerator: createEntityAdapterStoreAssets,\n\t\tselectId: (item) => item,\n\t},\n\t{\n\t\tsubSlice: 'isCompleted',\n\t\tgenerator: createBaseStoreAssets,\n\t},\n]);\n\n@Injectable()\nexport class StoreStateService extends NgxStoreService {\n\tconstructor() {\n\t\tsuper(selectors);\n\t}\n\n\tsetWithError(): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.data,\n\t\t\tthrowError(() => new Error('This is an error')),\n\t\t\tthis.store\n\t\t).pipe(switchMap(() => throwError(() => new Error('This is an error'))));\n\t}\n\n\tsetData(payload: string[]): Observable {\n\t\treturn dispatchDataToStore(actions.data, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.data$)\n\t\t);\n\t}\n\n\tsetCompleted(payload: boolean): Observable {\n\t\treturn dispatchDataToStore(actions.isCompleted, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.isCompleted$)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StoreStateService.html":{"url":"injectables/StoreStateService.html","title":"injectable - StoreStateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StoreStateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-state.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStoreService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stateWrapper\n                            \n                            \n                                    Protected\n                                    Readonly\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setCompleted\n                            \n                            \n                                setData\n                            \n                            \n                                setWithError\n                            \n                            \n                                    Public\n                                selectErrorFromStore\n                            \n                            \n                                    Public\n                                selectErrorMessageFromStore\n                            \n                            \n                                    Public\n                                selectFromStore\n                            \n                            \n                                    Public\n                                selectLoadingFromStore\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:31\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setCompleted\n                        \n                    \n                \n            \n            \n                \nsetCompleted(payload: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setData\n                        \n                    \n                \n            \n            \n                \nsetData(payload: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setWithError\n                        \n                    \n                \n            \n            \n                \nsetWithError()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:60\n\n                        \n                    \n\n\n            \n                \n                        Select the error state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorMessageFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorMessageFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:69\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ErrorMessage\n                            \n                        \n                    \n\n            \n                \n                        Select the error message state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:42\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    StoreItem\n                            \n                        \n                    \n\n            \n                \n                        Select the data of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectLoadingFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectLoadingFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:51\n\n                        \n                    \n\n\n            \n                \n                        Select the loading state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StoreState\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:13\n\n                        \n                    \n\n            \n                \n                    A wrapper object for the store state selectors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:15\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of, throwError, switchMap } from 'rxjs';\n\nimport { NgxStoreService } from '../abstracts';\nimport { BaseStoreAssets, EntityStoreAssets, StoreFlowAssets } from '../interfaces';\nimport {\n\tcreateBaseStoreAssets,\n\tcreateEntityAdapterStoreAssets,\n\tcreateStoreAssets,\n\tdispatchDataToStore,\n} from '../utils';\n\ninterface StoreState extends StoreFlowAssets {\n\tdata: EntityStoreAssets;\n\tisCompleted: BaseStoreAssets;\n}\n\nexport const { actions, reducers, selectors } = createStoreAssets('state', [\n\t{\n\t\tsubSlice: 'data',\n\t\tgenerator: createEntityAdapterStoreAssets,\n\t\tselectId: (item) => item,\n\t},\n\t{\n\t\tsubSlice: 'isCompleted',\n\t\tgenerator: createBaseStoreAssets,\n\t},\n]);\n\n@Injectable()\nexport class StoreStateService extends NgxStoreService {\n\tconstructor() {\n\t\tsuper(selectors);\n\t}\n\n\tsetWithError(): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.data,\n\t\t\tthrowError(() => new Error('This is an error')),\n\t\t\tthis.store\n\t\t).pipe(switchMap(() => throwError(() => new Error('This is an error'))));\n\t}\n\n\tsetData(payload: string[]): Observable {\n\t\treturn dispatchDataToStore(actions.data, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.data$)\n\t\t);\n\t}\n\n\tsetCompleted(payload: boolean): Observable {\n\t\treturn dispatchDataToStore(actions.isCompleted, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.isCompleted$)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TableCellTemplate.html":{"url":"interfaces/TableCellTemplate.html","title":"interface - TableCellTemplate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TableCellTemplate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/components/table/ngx-table.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cellClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cellTemplate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footerTemplate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headerTemplate\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cellClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cellClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cellTemplate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cellTemplate:     TemplateRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footerTemplate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footerTemplate:     TemplateRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headerTemplate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headerTemplate:     TemplateRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CdkTableModule } from '@angular/cdk/table';\nimport { NgTemplateOutlet, NgClass, NgComponentOutlet } from '@angular/common';\nimport {\n\tAfterContentChecked,\n\tChangeDetectionStrategy,\n\tChangeDetectorRef,\n\tComponent,\n\tHostBinding,\n\tInject,\n\tOnDestroy,\n\tOnInit,\n\tTemplateRef,\n\tWritableSignal,\n\tinject,\n\tsignal,\n\tinput,\n\tOutputEmitterRef,\n\toutput,\n\tcontentChildren,\n\tcontentChild,\n\teffect,\n\tInputSignal,\n} from '@angular/core';\nimport {\n\tControlValueAccessor,\n\tFormControl,\n\tFormRecord,\n\tNG_VALUE_ACCESSOR,\n\tReactiveFormsModule,\n} from '@angular/forms';\nimport { isEmpty } from 'lodash';\nimport { Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\nimport { NgxTreeGrid } from '../../directives';\nimport {\n\tNgxAriaSortPipe,\n\tNgxTableHasObserversPipe,\n\tNgxTableShowHeaderPipe,\n\tNgxTableSortIconPipe,\n} from '../../pipes';\nimport {\n\tHideHeaderRowOption,\n\tNgxTableConfiguration,\n\tNgxTableConfigurationToken,\n\tShowDetailRowOption,\n} from '../../tokens';\nimport { NgxTableCypressDataTags, NgxTableSortEvent } from '../../types';\nimport {\n\tgenerateNgxTableForm,\n\thandleNgxTableHeaderValueChanges,\n\thandleNgxTableValueChanges,\n\tresetNgxTableForm,\n\twriteNgxTableValue,\n} from '../../utils';\nimport { NgxAbstractTableCellDirective } from '../cell';\n\ninterface TableCellTemplate {\n\theaderTemplate?: TemplateRef;\n\tcellTemplate?: TemplateRef;\n\tfooterTemplate?: TemplateRef;\n\tcellClass?: string;\n}\n\n@Component({\n\tselector: 'ngx-table',\n\ttemplateUrl: './ngx-table.component.html',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tstyleUrls: ['./ngx-table.component.scss'],\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tmulti: true,\n\t\t\tuseExisting: NgxTableComponent,\n\t\t},\n\t],\n\timports: [\n\t\tCdkTableModule,\n\t\tNgTemplateOutlet,\n\t\tNgClass,\n\t\tReactiveFormsModule,\n\t\tNgxTableHasObserversPipe,\n\t\tNgxTableSortIconPipe,\n\t\tNgxTableShowHeaderPipe,\n\t\tNgxAriaSortPipe,\n\t\tNgxTreeGrid,\n\t\tNgComponentOutlet,\n\t],\n\thost: {\n\t\t'class.ngx-table-loading': 'loading()',\n\t},\n})\nexport class NgxTableComponent\n\timplements AfterContentChecked, ControlValueAccessor, OnInit, OnDestroy\n{\n\tprivate cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\t@Inject(NgxTableConfigurationToken)\n\tpublic readonly ngxTableConfiguration: NgxTableConfiguration = inject(\n\t\tNgxTableConfigurationToken,\n\t\t{ optional: true }\n\t);\n\t/**\n\t * Default class that will be put on the ngx-table component\n\t */\n\t@HostBinding('class') public readonly componentClass =\n\t\tthis.ngxTableConfiguration?.ngxTableClass || '';\n\n\t/**\n\t * A subject to handle the observables when the component gets destroyed\n\t */\n\tprivate readonly destroyed$ = new Subject();\n\t/**\n\t * onTouch function for the control value accessor\n\t */\n\tprivate onTouch: Function = () => {};\n\t/**\n\t * onChanged function for the control value accessor\n\t */\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tprivate onChanged: Function = (_: any) => {};\n\n\t/**\n\t * Whether or not the form was generated\n\t */\n\tprivate formGenerated: WritableSignal = signal(false);\n\n\t/**\n\t * The loading state of our table\n\t */\n\tpublic loading = input(false);\n\n\t/**\n\t * An optional set of data we pass if the loading state is shown\n\t */\n\tpublic loadingData = input();\n\n\t/**\n\t * An optional set of data we pass if the empty state is shown\n\t */\n\tpublic emptyData = input();\n\n\t/**\n\t * The current sorting event\n\t */\n\tpublic currentSortingEvent: WritableSignal = signal(undefined);\n\n\t/**\n\t * Keeps a record with the column and it's templates\n\t */\n\tpublic tableCellTemplateRecord: WritableSignal> = signal({});\n\t/**\n\t * Keeps a record of which columns are sortable\n\t */\n\tpublic sortableTableCellRecord: WritableSignal> =\n\t\tsignal({});\n\t/**\n\t * Keeps a record of which cells have a cypress tag\n\t */\n\tpublic tableCypressRecord: WritableSignal> = signal({});\n\t/**\n\t * Keeps a record of which cells are editable\n\t */\n\tpublic editableTableCellRecord: WritableSignal> =\n\t\tsignal({});\n\n\t/**\n\t * A set with all the open rows\n\t */\n\t// Iben: Sets are not supported in signals as signals are no longer mutable, hence why we keep them as is\n\tpublic openRows: Set = new Set();\n\n\t/**\n\t * A FormGroup that adds a control for each row\n\t */\n\tpublic readonly rowsFormGroup = new FormRecord>({});\n\n\t/**\n\t * A control for the select all option in the header of the table\n\t */\n\tpublic readonly headerControl = new FormControl();\n\n\t/**\n\t * A control for when we use a radio button\n\t */\n\tpublic readonly radioControl = new FormControl();\n\n\t/**\n\t * A list of all defined columns\n\t */\n\tpublic definedColumns: WritableSignal = signal([]);\n\n\t/**\n\t * Whether or not there was a footer template set somewhere in one of the cells\n\t */\n\tpublic hasFooterTemplates: WritableSignal = signal(false);\n\n\t/**\n\t * Whether or not there was a row selected\n\t */\n\tpublic selectedRow: WritableSignal = signal(undefined);\n\n\t/**\n\t * An array of table columns\n\t */\n\tpublic tableColumns: WritableSignal = signal([]);\n\n\t/**\n\t * The currently focussed row\n\t */\n\tpublic focussedRow: string;\n\n\t/**\n\t * The currently focussed cell\n\t */\n\tpublic focussedCell: string;\n\n\t/**\n\t * A QueryList of all the table cell templates\n\t */\n\tpublic readonly tableCellTemplates = contentChildren(NgxAbstractTableCellDirective);\n\n\t/**\n\t * A template to provide a detail row\n\t */\n\tpublic readonly detailRowTemplate = contentChild>('detailRowTmpl');\n\n\t/**\n\t * A template to provide an empty view\n\t */\n\tpublic readonly emptyTemplate = contentChild>('emptyTmpl');\n\n\t/**\n\t * A template to provide a loading view\n\t */\n\tpublic readonly loadingTemplate = contentChild>('loadingTmpl');\n\n\t/**\n\t * A template to provide a checkbox template\n\t */\n\n\tpublic checkboxTemplate = contentChild>('checkboxTmpl');\n\n\t/**\n\t * A template to provide a radio button template\n\t */\n\n\tpublic radioTemplate = contentChild>('radioTmpl');\n\n\t/**\n\t * A template to provide a sort template\n\t */\n\n\tpublic sortTemplate = contentChild>('sortTmpl');\n\n\t/**\n\t * A template to provide a open state template\n\t */\n\tpublic readonly openRowStateTemplate = contentChild>('openRowStateTmpl');\n\n\t/**\n\t * A list of all column names we want to represent in the table\n\t */\n\tpublic readonly columns = input([]);\n\n\t/**\n\t * An optional list of all columns we wish to attribute to row actions, which are sorted to the end of the row by default\n\t */\n\tpublic readonly actions = input([]);\n\n\t/**\n\t * The data we wish to render in the table\n\t */\n\tpublic readonly data = input([]);\n\n\t/**\n\t * An optional property that defines whether multiple rows can be open at once.\n\t * By default, this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly allowMultipleOpenRows = input(\n\t\tthis.ngxTableConfiguration?.allowMultipleRowsOpen || false\n\t);\n\n\t/**\n\t * Whether or not rows in the table are selectable\n\t */\n\tpublic readonly selectable = input(false);\n\n\t/**\n\t * In case the rows are selectable, we can pass a key we want to use as return value instead of the index of the row\n\t */\n\tpublic readonly selectableKey = input();\n\n\t/**\n\t * In case the rows are selectable, we pass whether we want a radio button or a checkbox. By default, this is a checkbox\n\t */\n\tpublic readonly selectableType = input('checkbox');\n\n\t/**\n\t * In case the rows are selectable, we can determine whether we want to reset the form based on new data. Setting this to false will add new controls to the FormGroup; but will not remove the earlier controls from the form.\n\t * This is a useful feature for when the data is being filtered or new data is added through a load more mechanic\n\t *\n\t * By default, this is true. This default cannot be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly resetFormOnNewData = input(true);\n\n\t/**\n\t * SETTER\n\t *\n\t * The current sorting event.\n\t */\n\tpublic currentSorting: InputSignal = input();\n\n\t/**\n\t * An optional property to define whether we want to add a class to the currently opened row.\n\t * By default this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly showSelectedOpenRow = input(\n\t\tthis.ngxTableConfiguration?.showSelectedOpenRow || false\n\t);\n\n\t/**\n\t * An optional class to add to the rows of the table\n\t */\n\tpublic readonly rowClass = input();\n\n\t/**\n\t * An optional key that can be used in the data in order to highlight a row. If this property is present and true, the highlight class will be provided.\n\t * By default, this key is ngx-highlight. The default can be overwritten in the NgxTableConfiguration\n\t */\n\tpublic readonly highlightKey = input(\n\t\tthis.ngxTableConfiguration?.highlightKey || 'ngx-highlight'\n\t);\n\n\t/**\n\t * An optional property to define whether we want to show a visual indicator of the open and closed state of a detail row.\n\t * By default this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly showOpenRowState = input(\n\t\tthis.ngxTableConfiguration?.showOpenRowState || false\n\t);\n\n\t/**\n\t * An optional property to define the default open state of the detail row.\n\t * By default this is 'on-click'. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly showDetailRow = input(\n\t\tthis.ngxTableConfiguration?.showDetailRow || 'on-click'\n\t);\n\n\t/**\n\t * An optional property to define whether we want to emit the row when there's only one item in the table and the showDetailRow is set to `on-single-item`\n\t * By default this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly emitValueOnSingleItem = input(\n\t\tthis.ngxTableConfiguration?.showDetailRow === 'on-single-item' &&\n\t\t\tthis.ngxTableConfiguration?.emitValueOnSingleItem\n\t);\n\n\t/**\n\t * An optional key to open a row by default upon rendering.\n\t */\n\tpublic defaultRowOpen: InputSignal = input();\n\n\t/**\n\t * An optional property to define whether we want the header to be hidden in certain cases.\n\t * By default this is never. The default can be overwritten in the NgxTableConfiguration\n\t */\n\tpublic readonly hideHeaderWhen = input(\n\t\tthis.ngxTableConfiguration?.hideHeaderWhen || 'never'\n\t);\n\n\t/**\n\t * Returns the data of the row that was clicked\n\t */\n\tpublic rowClicked: OutputEmitterRef = output();\n\n\tconstructor() {\n\t\teffect(() => {\n\t\t\tthis.currentSortingEvent.set(this.currentSorting());\n\t\t\tthis.handleCurrentSort(this.currentSorting());\n\t\t});\n\n\t\teffect(() => {\n\t\t\tconst openedIndex = this.defaultRowOpen();\n\t\t\t// Wouter: The function findIndex is most likely to be used. It returns\n\t\t\t// -1 if the index was not found.\n\t\t\tif (openedIndex  {\n\t\t\t\tthis.handleRowClicked(this.data()[openedIndex], openedIndex);\n\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t});\n\t\t});\n\n\t\t// Iben: Setup the form when the data or selectable state changes\n\t\teffect(() => {\n\t\t\tif (this.data() && this.selectable()) {\n\t\t\t\t// Iben: If no form was generated, first generate the form we need\n\t\t\t\tif (!this.formGenerated()) {\n\t\t\t\t\tgenerateNgxTableForm(this.rowsFormGroup, this.data(), this.selectableKey());\n\n\t\t\t\t\tthis.formGenerated.set(true);\n\t\t\t\t} else {\n\t\t\t\t\t// Iben: If a form was generated, reset it as required\n\t\t\t\t\tresetNgxTableForm(\n\t\t\t\t\t\tthis.rowsFormGroup,\n\t\t\t\t\t\tthis.data(),\n\t\t\t\t\t\tthis.selectableKey(),\n\t\t\t\t\t\tthis.resetFormOnNewData()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\teffect(() => {\n\t\t\tif (this.data()) {\n\t\t\t\t// Wouter: Deselect any row that was selected to prevent faulty class toggle.\n\t\t\t\tthis.selectedRow.set(undefined);\n\t\t\t}\n\t\t});\n\n\t\teffect(() => {\n\t\t\t// Iben: Add the selectableColumn if the rows are selectable and add an open row state when needed\n\t\t\tif (this.selectable() || this.columns() || this.showOpenRowState()) {\n\t\t\t\tthis.handleRowColumns();\n\t\t\t}\n\t\t});\n\n\t\t// Iben: If there's only one item in the data and we open the detail row by default, we emit the row clicked value\n\t\teffect(() => {\n\t\t\tif (\n\t\t\t\tthis.emitValueOnSingleItem() &&\n\t\t\t\tthis.data()?.length === 1 &&\n\t\t\t\tthis.showDetailRow() === 'on-single-item'\n\t\t\t) {\n\t\t\t\tthis.handleRowClicked(this.data()[0], 0);\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Reset the open rows if the amount of items are no longer the same\n\t\teffect(() => {\n\t\t\t// Wouter: If all detail rows should be shown by default, we add all indices to the open rows\n\t\t\tif (this.showDetailRow() === 'always') {\n\t\t\t\tthis.openRows = new Set(this.data().map((_, index) => index));\n\t\t\t} else if (\n\t\t\t\t// Wouter: If the detail row should be shown on single item and there is only one item, we add the first index to the open rows\n\t\t\t\tthis.showDetailRow() === 'on-single-item' &&\n\t\t\t\tthis.data().length === 1\n\t\t\t) {\n\t\t\t\tthis.openRows = new Set([0]);\n\t\t\t} else {\n\t\t\t\t// Iben: If no detail row should be shown due to global config, we reset the open rows\n\t\t\t\tthis.openRows = new Set();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * WriteValue method for the value accessor\n\t *\n\t * @param value - The value patched to the control\n\t */\n\tpublic writeValue(value: string[] | unknown): void {\n\t\t// Iben: In case we're using radio buttons, we set the radio control and early exit\n\t\tif (this.selectableType() === 'radio') {\n\t\t\tthis.radioControl.patchValue(value, { emitEvent: false });\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Reset the form\n\t\tthis.rowsFormGroup.reset({}, { emitEvent: false });\n\n\t\t// Iben: Early exit if the value is empty or not an array\n\t\tif (!Array.isArray(value) || value.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Patch the value to the form\n\t\tthis.rowsFormGroup.patchValue(writeNgxTableValue(value, this.selectableKey()), {\n\t\t\temitEvent: false,\n\t\t});\n\n\t\t// Wouter: Some rows are not selected, so uncheck the header checkbox\n\t\tif (\n\t\t\tObject.values(this.rowsFormGroup.controls).some(\n\t\t\t\t(control: FormControl) => !control?.value\n\t\t\t)\n\t\t) {\n\t\t\tthis.headerControl.patchValue(false, { emitEvent: false });\n\t\t\treturn;\n\t\t}\n\n\t\t// Wouter: Set the header checkbox to `checked`, because all rows are selected\n\t\tthis.headerControl.patchValue(true, { emitEvent: false });\n\t}\n\n\t/**\n\t * Register the onChange function\n\t */\n\tpublic registerOnChange(fn: any): void {\n\t\tthis.onChanged = fn;\n\t}\n\n\t/**\n\t * Register the onTouched function\n\t */\n\tpublic registerOnTouched(fn: any): void {\n\t\tthis.onTouch = fn;\n\t}\n\n\t/**\n\t * Handle the disabled state of the form\n\t *\n\t * @param  isDisabled - Whether or not the form is disabled\n\t */\n\tpublic setDisabledState?(isDisabled: boolean): void {\n\t\tif (isDisabled) {\n\t\t\tthis.rowsFormGroup.disable({ emitEvent: false });\n\t\t\tthis.headerControl.disable({ emitEvent: false });\n\t\t\tthis.radioControl.disable({ emitEvent: false });\n\t\t} else {\n\t\t\tthis.rowsFormGroup.enable({ emitEvent: false });\n\t\t\tthis.headerControl.enable({ emitEvent: false });\n\t\t\tthis.radioControl.enable({ emitEvent: false });\n\t\t}\n\t}\n\n\t/**\n\t * Handle a click on a row\n\t *\n\t * @param row - The data of the row that was clicked\n\t * @param index - The index of the row that was clicked\n\t */\n\tpublic handleRowClicked(row: any, index: number) {\n\t\t// Iben: Emit a row click event\n\t\tthis.rowClicked.emit(row);\n\n\t\t// Iben: Handle the selected open row if needed\n\t\tif (this.showSelectedOpenRow()) {\n\t\t\tif (this.selectedRow() === index) {\n\t\t\t\t// Benoit: If you close the selected row, unselect that row\n\t\t\t\tthis.selectedRow.set(undefined);\n\t\t\t} else {\n\t\t\t\tthis.selectedRow.set(index);\n\t\t\t}\n\t\t}\n\t\tthis.handleRowState(index, !this.openRows.has(index) ? 'open' : 'close');\n\t}\n\n\t/**\n\t * Handle the expanded state of a row\n\t *\n\t * @param index - The index of the row\n\t * @param action - Whether the row needs to be opened or closed\n\t */\n\tpublic handleRowState(index: number, action: 'open' | 'close'): void {\n\t\t// Iben: If there's no detail row we early exit\n\t\tif (!this.detailRowTemplate()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Wouter: When the detail row should be shown due to global config, we add the index to the open rows\n\t\tif (\n\t\t\tthis.showDetailRow() === 'always' ||\n\t\t\t(this.showDetailRow() === 'on-single-item' && this.data.length === 1)\n\t\t) {\n\t\t\tthis.openRows.add(index);\n\t\t\t// Iben: Depending on whether we allow multiple rows to be open at the same time, we toggle the open rows accordingly\n\t\t}\n\t\t// Iben: Depending on whether we allow multiple rows to be open at the same time, we toggle the open rows accordingly\n\t\telse if (this.allowMultipleOpenRows()) {\n\t\t\taction === 'open' ? this.openRows.add(index) : this.openRows.delete(index);\n\t\t} else {\n\t\t\tthis.openRows = action === 'open' ? new Set([index]) : new Set();\n\t\t}\n\t}\n\n\t/**\n\t * Assigns the templates of each cell to the correct columns\n\t */\n\tprivate handleTableCellTemplates(): void {\n\t\t// Iben: Reset the provided records\n\t\tthis.tableCellTemplateRecord.set({});\n\t\tthis.sortableTableCellRecord.set({});\n\t\tthis.tableCypressRecord.set({});\n\t\tthis.editableTableCellRecord.set({});\n\n\t\t// Iben: Loop over all provided table cell templates\n\t\tArray.from(this.tableCellTemplates()).forEach((tableCellTemplate) => {\n\t\t\t// Iben: Early exit in case for some reason the template is undefined\n\t\t\tif (!tableCellTemplate) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Iben: Add the template to the template record for easy access in the table template\n\t\t\tconst {\n\t\t\t\tcolumn: columnInput,\n\t\t\t\theaderTemplate,\n\t\t\t\tcellTemplate,\n\t\t\t\tfooterTemplate,\n\t\t\t\tsortable: sortableInput,\n\t\t\t\tcellClass,\n\t\t\t\tcypressDataTags: cypressDataTagsInput,\n\t\t\t\teditable: editableInput,\n\t\t\t} = tableCellTemplate;\n\t\t\tconst column = columnInput();\n\t\t\tconst sortable = sortableInput();\n\t\t\tconst cypressDataTags = cypressDataTagsInput();\n\t\t\tconst editable = editableInput();\n\n\t\t\tthis.tableCellTemplateRecord.update((value) => {\n\t\t\t\treturn {\n\t\t\t\t\t...value,\n\t\t\t\t\t[column]: {\n\t\t\t\t\t\theaderTemplate,\n\t\t\t\t\t\tcellTemplate,\n\t\t\t\t\t\tfooterTemplate,\n\t\t\t\t\t\tcellClass,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// Iben: If the column is sortable, we add it to the sortable record\n\t\t\tif (sortable) {\n\t\t\t\tthis.sortableTableCellRecord.update((value) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\t[column]: tableCellTemplate,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Iben: If the column has cypress tags, we add them to the record\n\t\t\tif (cypressDataTags) {\n\t\t\t\tthis.tableCypressRecord.update((value) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\t[column]: cypressDataTags,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Iben: If the cell is editable, we add it to the record\n\t\t\tif (editable) {\n\t\t\t\tthis.editableTableCellRecord.update((value) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\t[column]: tableCellTemplate,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Check if at least one template has a footer template, so that we know whether or not we have to render the footer row\n\t\tthis.hasFooterTemplates.set(\n\t\t\tArray.from(this.tableCellTemplates()).some((cellTemplate) =>\n\t\t\t\tBoolean(cellTemplate.footerTemplate)\n\t\t\t)\n\t\t);\n\n\t\t// Iben:\n\t\tthis.handleCurrentSort(this.currentSortingEvent());\n\n\t\t// Iben: Detect changes to update the view\n\t\tthis.cdRef.detectChanges();\n\t}\n\n\t/**\n\t * Respond to a click on the sort of a column\n\t *\n\t * @param column - The column we clicked on\n\t */\n\tpublic handleSort(column: string): void {\n\t\t// Iben: If the column is not sortable we early exit\n\t\tif (!this.sortableTableCellRecord()[column]) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Loop over the sortable columns and reset all columns that don't match with the clicked column\n\t\tObject.entries(this.sortableTableCellRecord()).forEach(([cellName, cell]) => {\n\t\t\tif (cellName === column) {\n\t\t\t\tthis.sortableTableCellRecord()[column].handleSort();\n\t\t\t} else {\n\t\t\t\tcell.resetSortDirection();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic selectRow(index: number): void {\n\t\tconst selectableKey = this.selectableKey();\n\t\tthis.rowsFormGroup\n\t\t\t.get(selectableKey ? `${this.data()[index][selectableKey]}` : `${index}`)\n\t\t\t.patchValue(true);\n\t}\n\n\t/**\n\t * Handle the changes in sort events\n\t *\n\t * @param event - The new sorting event\n\t */\n\tprivate handleCurrentSort(event: NgxTableSortEvent): void {\n\t\t// Iben: Early exit if the sortable cell record is empty or if the cell already has the sortDirection of the event\n\t\tif (\n\t\t\tisEmpty(\n\t\t\t\tthis.sortableTableCellRecord() ||\n\t\t\t\t\t(event &&\n\t\t\t\t\t\tthis.sortableTableCellRecord()[event.column].sortDirection ===\n\t\t\t\t\t\t\tevent.direction)\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: We reset all the sort directions by default, so all of them are unsorted.\n\t\tObject.values(this.sortableTableCellRecord()).forEach((cell) => cell.resetSortDirection());\n\n\t\t// Iben: If there's no sort event passed, we early exit\n\t\tif (!event) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: In case there was a sorting provided and we set the sorting to the provided column and direction\n\t\tthis.sortableTableCellRecord()[event.column].setSortDirection(event.direction);\n\t}\n\n\t/**\n\t * Setup the columns array\n\t */\n\tprivate handleRowColumns(): void {\n\t\t// Iben: Make sure that the select option, the open row state and the defined actions are correctly placed\n\t\tconst columns = this.columns();\n\t\tconst actions = this.actions();\n\t\tthis.definedColumns.set([\n\t\t\t...(this.selectable() ? ['ngxTableSelectColumn'] : []),\n\t\t\t...(columns || []),\n\t\t\t...(actions || []),\n\t\t\t...(this.showOpenRowState() && this.detailRowTemplate()\n\t\t\t\t? ['ngxOpenRowStateColumn']\n\t\t\t\t: []),\n\t\t]);\n\n\t\t// Iben: Set the actual table columns\n\t\tthis.tableColumns.set([...(columns || []), ...(actions || [])]);\n\t}\n\n\t// Lifecycle methods\n\t// ==============================\n\tpublic ngAfterContentChecked(): void {\n\t\t// Iben: Run with content check so that we can dynamically add templates/columns\n\t\tthis.handleRowColumns();\n\t\tthis.handleTableCellTemplates();\n\t}\n\n\tpublic ngOnInit() {\n\t\t// Iben: Subscribe to the form to handle the selectable behavior\n\t\tthis.rowsFormGroup.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: If not all items are selected, we uncheck the headerControl without emitting a value to prevent an infinite loop in the next subscription\n\t\t\t\t\tthis.headerControl.setValue(\n\t\t\t\t\t\tObject.values(value).every((selected) => selected),\n\t\t\t\t\t\t{ emitEvent: false }\n\t\t\t\t\t);\n\n\t\t\t\t\t// Iben: Emit the current selection and mark the form as touched\\\n\t\t\t\t\tthis.onChanged(handleNgxTableValueChanges(value));\n\t\t\t\t\tthis.onTouch();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Listen to the radio control and update the value accordingly\n\t\tthis.radioControl.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\tthis.onChanged(value);\n\t\t\t\t\tthis.onTouch();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Subscribe to the headerControl to handle multiSelect behaviour\n\t\tthis.headerControl.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((selected) => {\n\t\t\t\t\t// Iben: Select all items when this control is selected, if not, unselect them all\n\t\t\t\t\tif (selected) {\n\t\t\t\t\t\tthis.rowsFormGroup.patchValue(\n\t\t\t\t\t\t\thandleNgxTableHeaderValueChanges(this.rowsFormGroup)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.rowsFormGroup.reset();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\tpublic ngOnDestroy() {\n\t\tthis.destroyed$.next(null);\n\t\tthis.destroyed$.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestDisplayContentComponent.html":{"url":"components/TestDisplayContentComponent.html","title":"component - TestDisplayContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestDisplayContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-data\n            \n\n\n            \n                imports\n                \n                                NgxDisplayContentDirective\n                \n            \n\n\n\n            \n                template\n                Content\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                conditions\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                conditions\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        conditions\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:41\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        conditions\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Content'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestDisplayContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestErrorComponent.html":{"url":"components/TestErrorComponent.html","title":"component - TestErrorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestErrorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-error\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Error\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:11\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:11\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Error'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestErrorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestErrorDataComponent.html":{"url":"components/TestErrorDataComponent.html","title":"component - TestErrorDataComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestErrorDataComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-data-error\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Error {{data()}}\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:11\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:11\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Error {{data()}}'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestErrorDataComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestLoadingComponent.html":{"url":"components/TestLoadingComponent.html","title":"component - TestLoadingComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestLoadingComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-loading\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Loading\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:11\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:11\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Loading'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestLoadingComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestOfflineComponent.html":{"url":"components/TestOfflineComponent.html","title":"component - TestOfflineComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestOfflineComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-offline\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Offline\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:11\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:11\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Offline'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestOfflineComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestOverrideDisplayContentComponent.html":{"url":"components/TestOverrideDisplayContentComponent.html","title":"component - TestOverrideDisplayContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestOverrideDisplayContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-override-data\n            \n\n\n            \n                imports\n                \n                                NgxDisplayContentDirective\n                            CommonModule\n                \n            \n\n\n\n            \n                template\n                \n\tContent\n\n\nCustom loading\n\t\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                conditions\n                            \n                            \n                                    Readonly\n                                errorData\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                conditions\n                            \n                            \n                                errorData\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        conditions\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:62\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        errorData\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:63\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        conditions\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        errorData\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\tContentCustom loading\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestOverrideDisplayContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/TransformPipe.html":{"url":"pipes/TransformPipe.html","title":"pipe - TransformPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  TransformPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe to pass a transformer function to. By using this setup, we can use functions without causing rerender issues\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        transform\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: any, transformer: Function)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts:17\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TransformerType\n                            \n                        \n                    \n\n            \n                \n                        Transforms a value based on a provided transform function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided value we wish to transform\n\n\n                                            \n                                        \n                                        \n                                                transformer\n                                            \n                                                            Function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA provided transform function\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     TransformerType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        TransformPipe\nThe TransformPipe will transform a given value with the provided transform-function.\nHow to use\nExample :\n  {{ value | transform: toUpperCase }}\nWith a given value 'my text', will result in the following:\nExample :MY TEXT\n    \n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * A pipe to pass a transformer function to. By using this setup, we can use functions without causing rerender issues\n */\n@Pipe({\n\tname: 'transform',\n\tstandalone: true,\n})\nexport class TransformPipe implements PipeTransform {\n\t/**\n\t * Transforms a value based on a provided transform function\n\t *\n\t * @param value - The provided value we wish to transform\n\t * @param transformer - A provided transform function\n\t */\n\tpublic transform(value: any, transformer: Function): TransformerType {\n\t\t// Iben: If no transformer is passed, we return the original value\n\t\tif (!transformer) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: Transform the value and return\n\t\treturn transformer(value);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TranslationLoaderActionEntity.html":{"url":"interfaces/TranslationLoaderActionEntity.html","title":"interface - TranslationLoaderActionEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TranslationLoaderActionEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.types.ts\n        \n\n\n            \n                Description\n            \n            \n                A translation loading action, in which we indicate whether a file has been loaded or not\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TranslationLoaderActionEntity {\n\tid: string;\n\tstate: keyof typeof TranslationLoaderActionStateEnum;\n}\n\n/**\n * The state of a translation loading action\n */\nenum TranslationLoaderActionStateEnum {\n\tLOADING = 'LOADING',\n\tLOADED = 'LOADED',\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/cdk : 20.1.2\n        \n            @angular/common : 20.1.2\n        \n            @angular/compiler : 20.1.2\n        \n            @angular/core : 20.1.2\n        \n            @angular/forms : 20.1.2\n        \n            @angular/platform-browser : 20.1.2\n        \n            @angular/platform-browser-dynamic : 20.1.2\n        \n            @angular/router : 20.1.2\n        \n            @ibenvandeveire/ngx-core : 20.1.0\n        \n            @ibenvandeveire/types-authentication : ^1.0.0\n        \n            @ngrx/effects : ^19.2.1\n        \n            @ngrx/entity : ^19.2.1\n        \n            @ngrx/signals : ^19.2.1\n        \n            @ngrx/store : ^19.2.1\n        \n            @ngx-translate/core : ^16.0.4\n        \n            date-fns : ^4.1.0\n        \n            deepmerge-ts : ^7.1.5\n        \n            dot-prop : ^9.0.0\n        \n            lodash : ^4.17.21\n        \n            markerjs-live : ^1.2.1\n        \n            markerjs2 : ^2.32.4\n        \n            obj-clean : ^3.0.1\n        \n            rxjs : ~7.8.0\n        \n            uuid : ^11.1.0\n        \n            vanilla-cookieconsent : ^3.1.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NgxTableSortDirection   (libs/.../sort-direction.enum.ts)\n                        \n                        \n                            TranslationLoaderActionStateEnum   (libs/.../i18n-loading.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/angular/layout/src/lib/enums/sort-direction.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NgxTableSortDirection\n                    \n                \n                        \n                            \n                                 ASCENDING\n                            \n                        \n                        \n                            \n                                Value : ASCENDING\n                            \n                        \n                        \n                            \n                                 DESCENDING\n                            \n                        \n                        \n                            \n                                Value : DESCENDING\n                            \n                        \n            \n        \n\n    libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.types.ts\n    \n        \n            \n                \n                    \n                        \n                        TranslationLoaderActionStateEnum\n                    \n                \n                    \n                        \n                            The state of a translation loading action\n\n                        \n                    \n                        \n                            \n                                 LOADING\n                            \n                        \n                        \n                            \n                                Value : LOADING\n                            \n                        \n                        \n                            \n                                 LOADED\n                            \n                        \n                        \n                            \n                                Value : LOADED\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            authentication   (libs/.../authentication.ts)\n                        \n                        \n                            core   (libs/.../core.ts)\n                        \n                        \n                            FallBackTranslationLoader   (libs/.../i18n.module.ts)\n                        \n                        \n                            NgxAuthenticatedHttpInterceptor   (libs/.../authentication.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/javascript/types/authentication/src/lib/authentication.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        authentication\n                        \n                    \n                \n            \n            \n                \nauthentication()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    libs/javascript/core/src/lib/core.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        core\n                        \n                    \n                \n            \n            \n                \ncore()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    libs/angular/i18n/src/lib/i18n.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FallBackTranslationLoader\n                        \n                    \n                \n            \n            \n                \nFallBackTranslationLoader(http: HttpBackend)\n                \n            \n\n\n\n\n            \n                \n                        A fallback loader in case no translation loader has been provided\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                http\n                                            \n                                                        HttpBackend\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe HttpBackend\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    libs/angular/authentication/src/lib/interceptors/authentication/authentication.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NgxAuthenticatedHttpInterceptor\n                        \n                    \n                \n            \n            \n                \nNgxAuthenticatedHttpInterceptor(request: HttpRequest, next: HttpHandlerFn)\n                \n            \n\n\n\n\n            \n                \n                        An interceptor that will handle any request that needs to be authenticated\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        HttpRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided request\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        HttpHandlerFn\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe HttpHandler\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n@ibenvandeveire open-source\n@ibenvandeveire open source is a mono-repo providing several of Angular and non-Angular based packages created and maintained by Iben Van de Veire.\nInstallation\nTo setup this project, clone the repo and run npm i to install the dependencies.\nDocumentation\nYou can find the documentation for all of the packages on the Wiki.\nFor more in depth documentation relating to individual components of each package, please consult the Compodoc Documentation\nPackages\n\nutils (@ibenvandeveire/ngx-utils) :\n\nThis Angular package provides several independent utilities to facilitate common use-cases for users and developers.\n\n\nforms (@ibenvandeveire/ngx-forms):\n\nThis Angular package provides multiple utilities for complex form use-cases.\n\n\nstore (@ibenvandeveire/ngx-store):\n\nThis Angular package provides several utils and abstractions to improve the Redux workflow\n\n\ni18n (@ibenvandeveire/ngx-i18n):\n\nThis Angular package provides a lazy-loaded modular approach to translations.\n\n\ncookies (@ibenvandeveire/ngx-cookies):\n\nThis Angular package provides a quick and easy wrapper for CookieConsent V3.\n\n\nlayout (@ibenvandeveire/ngx-layout):\n\nThis Angular package is a collection of Angular components related to layout.\n\n\ntour (@ibenvandeveire/ngx-inform):\n\nThis Angular package provides the tools to build a guided walkthrough of one or more pages, tooltips, modals etc.\n\n\ncore (@ibenvandeveire/ngx-core):\n\nThis Angular package provides the core functionalities for the other packages.\n\n\nrxjs-utils (@ibenvandeveire/rxjs-utils):\n\nThis package provides the common use-cases for RXJS based projects.\n\n\n\nYou can find detailed explanations in their respective README’s.\nContributions\nIn order to contribute to this repository you must:\n\nStart a new branch from main named either fix/PACKAGE/FEATURE-NAME or feat/PACKAGE/FEATURE-NAME.\nCommit all code regarding the fix or feature to this branch, but do not include a version bump. Your commit message should start with either fix(PACKAGE) or feat(PACKAGE) for a fix or feature respectively.\nOpen a PR and add the correct package label, an enhancement or bug tag, the project and milestone.\n\nContributors\n\nBenoît Dossoine\nDenis Valcke\nIben Van de Veire\nWouter Heirstrate\nAbdurrahman Ekinci\nIan Emsens\nFemke Reunes\n\nLicense\nMIT License\nCopyright (c) 2023 Studio Hyperdrive\nCopyright (c) 2025 Iben Van de Veire\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 Studio Hyperdrive\nCopyright (c) 2025 Iben Van de Veire\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxI18nModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    18 Components\n                \n            \n        \n        \n            \n                \n                    \n                    37 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    22 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    79 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArrayElementType   (libs/.../signal-store-generator.types.ts)\n                        \n                        \n                            ArraySignal   (libs/.../signals.ts)\n                        \n                        \n                            BaseStoreEffectsInterface   (libs/.../effects.ts)\n                        \n                        \n                            BasicEntityAdapterActions   (libs/.../entity-adapter-reducers.ts)\n                        \n                        \n                            BooleanRecord   (libs/.../observable.types.ts)\n                        \n                        \n                            BooleanSignal   (libs/.../signals.ts)\n                        \n                        \n                            ComponentType   (libs/.../mobile-layout.types.ts)\n                        \n                        \n                            ControlPaths   (libs/.../form-accessor-control-keys.ts)\n                        \n                        \n                            CypressLeafObject   (libs/.../cypress-tags.token.ts)\n                        \n                        \n                            CypressObject   (libs/.../cypress-tags.token.ts)\n                        \n                        \n                            DataType   (libs/.../store-assets.ts)\n                        \n                        \n                            DateRangeErrorCodes   (libs/.../date-range.validator.ts)\n                        \n                        \n                            EffectActions   (libs/.../effects.ts)\n                        \n                        \n                            EntityStoreEffectsInterface   (libs/.../effects.ts)\n                        \n                        \n                            extractStoreAssetType   (libs/.../store-state.ts)\n                        \n                        \n                            FormAccessorControlsEntity   (libs/.../form-accessor-control-keys.ts)\n                        \n                        \n                            HideHeaderRowOption   (libs/.../ngx-table-config.token.ts)\n                        \n                        \n                            HideHeaderRowOptions   (libs/.../ngx-table-config.token.ts)\n                        \n                        \n                            Join   (libs/.../form-accessor-control-keys.ts)\n                        \n                        \n                            Join   (libs/.../cypress.types.ts)\n                        \n                        \n                            KeyValuePair   (libs/.../merge.util.ts)\n                        \n                        \n                            NgxAccessibleDragAndDropFromToMessage   (libs/.../drag-and-drop.types.ts)\n                        \n                        \n                            NgxAccessibleDragAndDropMessage   (libs/.../drag-and-drop.types.ts)\n                        \n                        \n                            NgxAccessibleDragAndDropMoveType   (libs/.../drag-and-drop.types.ts)\n                        \n                        \n                            NgxAccordionOpenBehavior   (libs/.../accordion.types.ts)\n                        \n                        \n                            NgxAuthenticatedRoutes   (libs/.../authenticated-route.types.ts)\n                        \n                        \n                            NgxAuthenticationResponseFeature   (libs/.../authentication.types.ts)\n                        \n                        \n                            NgxAuthenticationStatus   (libs/.../authentication-status.types.ts)\n                        \n                        \n                            NgxConfigurableLayoutGrid   (libs/.../configurable-layout.ts)\n                        \n                        \n                            NgxConfigurableLayoutItemSizeOption   (libs/.../configurable-layout.ts)\n                        \n                        \n                            NgxConfigurableLayoutType   (libs/.../configurable-layout.ts)\n                        \n                        \n                            NgxCookieCategories   (libs/.../cookie-configuration.ts)\n                        \n                        \n                            NgxDisplayContentAriaLive   (libs/.../display-content.types.ts)\n                        \n                        \n                            NgxDisplayContentComponentConfiguration   (libs/.../display-content.types.ts)\n                        \n                        \n                            NgxDisplayContentConditions   (libs/.../display-content.types.ts)\n                        \n                        \n                            NgxDisplayContentOverrideConfiguration   (libs/.../display-content.types.ts)\n                        \n                        \n                            NgxDisplayContentRecord   (libs/.../display-content.types.ts)\n                        \n                        \n                            NgxDisplayContentStatus   (libs/.../display-content.types.ts)\n                        \n                        \n                            NgxFormsErrorShowSettings   (libs/.../errors.interface.ts)\n                        \n                        \n                            NgxFormsErrorShowWhenSettings   (libs/.../errors.interface.ts)\n                        \n                        \n                            NgxImageMarker   (libs/.../image-marker.types.ts)\n                        \n                        \n                            NgxImageMarkerItem   (libs/.../image-marker.types.ts)\n                        \n                        \n                            NgxImageMarkerState   (libs/.../image-marker.types.ts)\n                        \n                        \n                            NgxModalActionType   (libs/.../modal.types.ts)\n                        \n                        \n                            NgxModalConfiguration   (libs/.../modal.types.ts)\n                        \n                        \n                            NgxModalLabelAriaOptions   (libs/.../modal.types.ts)\n                        \n                        \n                            NgxModalOptions   (libs/.../modal.types.ts)\n                        \n                        \n                            NgxModalRole   (libs/.../modal.types.ts)\n                        \n                        \n                            NgxReplaceElementsConfiguration   (libs/.../replace-elements.types.ts)\n                        \n                        \n                            NgxReplaceElementsSelector   (libs/.../replace-elements.types.ts)\n                        \n                        \n                            NgxSignalStore   (libs/.../signal-store.types.ts)\n                        \n                        \n                            NgxSignalStoreConfiguration   (libs/.../signal-store.types.ts)\n                        \n                        \n                            NgxSignalStoreDispatchActions   (libs/.../signal-store.types.ts)\n                        \n                        \n                            NgxSignalStoreRecord   (libs/.../signal-store.types.ts)\n                        \n                        \n                            NgxSignalStoreSelectFunction   (libs/.../signal-store-generator.types.ts)\n                        \n                        \n                            NgxSignalStoreSliceArrayGenerator   (libs/.../signal-store-generator.types.ts)\n                        \n                        \n                            NgxSignalStoreSliceConfiguration   (libs/.../signal-store.types.ts)\n                        \n                        \n                            NgxSignalStoreSliceDataType   (libs/.../signal-store.types.ts)\n                        \n                        \n                            NgxSignalStoreSliceGenerator   (libs/.../signal-store-generator.types.ts)\n                        \n                        \n                            NgxSignalStoreSliceMethods   (libs/.../signal-store.types.ts)\n                        \n                        \n                            NgxSignalStoreState   (libs/.../signal-store.types.ts)\n                        \n                        \n                            NgxSignalStoreViewState   (libs/.../signal-store.types.ts)\n                        \n                        \n                            NgxStorageEvent   (libs/.../storage.types.ts)\n                        \n                        \n                            NgxStorageRecord   (libs/.../storage.types.ts)\n                        \n                        \n                            NgxStorageType   (libs/.../storage.types.ts)\n                        \n                        \n                            NgxStoreActions   (libs/.../store-generator.ts)\n                        \n                        \n                            NgxStoreSelectors   (libs/.../store-generator.ts)\n                        \n                        \n                            NgxTableCypressDataTags   (libs/.../show-header-requirements.ts)\n                        \n                        \n                            NgxTooltipEvent   (libs/.../tooltip.types.ts)\n                        \n                        \n                            NgxTooltipPosition   (libs/.../tooltip.types.ts)\n                        \n                        \n                            NgxTooltipPositionClass   (libs/.../tooltip.types.ts)\n                        \n                        \n                            NgxTourAction   (libs/.../tour.types.ts)\n                        \n                        \n                            NgxTourDirection   (libs/.../tour.types.ts)\n                        \n                        \n                            NgxTourInteraction   (libs/.../tour.types.ts)\n                        \n                        \n                            NgxTourRegistrationEvent   (libs/.../tour.types.ts)\n                        \n                        \n                            NgxTourStepOffset   (libs/.../tour.types.ts)\n                        \n                        \n                            NgxTourStepPosition   (libs/.../tour.types.ts)\n                        \n                        \n                            NgxTourTokenType   (libs/.../tour.token.type.ts)\n                        \n                        \n                            NgxTreeGridCellTarget   (libs/.../tree-grid.types.ts)\n                        \n                        \n                            NgxTreeGridRowTarget   (libs/.../tree-grid.types.ts)\n                        \n                        \n                            NumberSignal   (libs/.../signals.ts)\n                        \n                        \n                            ObservableArray   (libs/.../observable.types.ts)\n                        \n                        \n                            ObservableBlob   (libs/.../observable.types.ts)\n                        \n                        \n                            ObservableBoolean   (libs/.../observable.types.ts)\n                        \n                        \n                            ObservableBooleanRecord   (libs/.../observable.types.ts)\n                        \n                        \n                            ObservableNumber   (libs/.../observable.types.ts)\n                        \n                        \n                            ObservableRecord   (libs/.../observable.types.ts)\n                        \n                        \n                            ObservableString   (libs/.../observable.types.ts)\n                        \n                        \n                            ObservableStringRecord   (libs/.../observable.types.ts)\n                        \n                        \n                            Paths   (libs/.../cypress.types.ts)\n                        \n                        \n                            Prev   (libs/.../cypress.types.ts)\n                        \n                        \n                            Previous   (libs/.../form-accessor-control-keys.ts)\n                        \n                        \n                            RequireAtLeastOne   (libs/.../internal-helpers.ts)\n                        \n                        \n                            RequireAtLeastOne   (libs/.../require-at-least-one.ts)\n                        \n                        \n                            ShowDetailRowOption   (libs/.../ngx-table-config.token.ts)\n                        \n                        \n                            StoreActions   (libs/.../store.ts)\n                        \n                        \n                            StoreFlowAssets   (libs/.../store-generator.ts)\n                        \n                        \n                            StoreSelectors   (libs/.../store.ts)\n                        \n                        \n                            StoreState   (libs/.../store-state.ts)\n                        \n                        \n                            StoreStateData   (libs/.../store-state.ts)\n                        \n                        \n                            StoreStateError   (libs/.../store-state.ts)\n                        \n                        \n                            StoreStateErrorMessage   (libs/.../store-state.ts)\n                        \n                        \n                            StoreStateLoading   (libs/.../store-state.ts)\n                        \n                        \n                            StringifiedQueryParamsType   (libs/.../query-param-form-sync.component.abstract.ts)\n                        \n                        \n                            StringSignal   (libs/.../signals.ts)\n                        \n                        \n                            WritableArraySignal   (libs/.../signals.ts)\n                        \n                        \n                            WritableBooleanSignal   (libs/.../signals.ts)\n                        \n                        \n                            WritableNumberSignal   (libs/.../signals.ts)\n                        \n                        \n                            WritableStringSignal   (libs/.../signals.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/angular/store/src/lib/signal/types/signal-store-generator.types.ts\n    \n    \n        \n            \n                \n                    \n                    ArrayElementType\n                \n            \n            \n                \n                    An extraction type to get the type of an element in an array type\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxSignalStoreSelectFunction\n                \n            \n            \n                \n                    The function we use to select an unique element in a slice with array data\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxSignalStoreSliceArrayGenerator\n                \n            \n            \n                \n                    The generator function we use to create slices with array data\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxSignalStoreSliceGenerator\n                \n            \n            \n                \n                    The generator function we use to create slices with non array data\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    libs/angular/utils/src/lib/types/signals.ts\n    \n    \n        \n            \n                \n                    \n                    ArraySignal\n                \n            \n            \n                \n                            Signal\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BooleanSignal\n                \n            \n            \n                \n                        Signal\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NumberSignal\n                \n            \n            \n                \n                        Signal\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StringSignal\n                \n            \n            \n                \n                        Signal\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WritableArraySignal\n                \n            \n            \n                \n                            WritableSignal\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WritableBooleanSignal\n                \n            \n            \n                \n                        WritableSignal\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WritableNumberSignal\n                \n            \n            \n                \n                        WritableSignal\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WritableStringSignal\n                \n            \n            \n                \n                        WritableSignal\n\n                \n            \n        \n    \n    libs/angular/store/src/lib/rxjs/interfaces/effects.ts\n    \n    \n        \n            \n                \n                    \n                    BaseStoreEffectsInterface\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EffectActions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntityStoreEffectsInterface\n                \n            \n            \n                \n                        RequireAtLeastOne\n\n                \n            \n        \n    \n    libs/angular/store/src/lib/rxjs/interfaces/entity-adapter-reducers.ts\n    \n    \n        \n            \n                \n                    \n                    BasicEntityAdapterActions\n                \n            \n            \n                \n                            Partial\n\n                \n            \n        \n    \n    libs/javascript/rxjs/src/lib/types/observable/observable.types.ts\n    \n    \n        \n            \n                \n                    \n                    BooleanRecord\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableArray\n                \n            \n            \n                \n                        Observable\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableBlob\n                \n            \n            \n                \n                        Observable\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableBoolean\n                \n            \n            \n                \n                        Observable\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableBooleanRecord\n                \n            \n            \n                \n                            Observable\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableNumber\n                \n            \n            \n                \n                        Observable\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableRecord\n                \n            \n            \n                \n                            Observable>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableString\n                \n            \n            \n                \n                        Observable\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ObservableStringRecord\n                \n            \n            \n                \n                        Observable>\n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/mobile-layout.types.ts\n    \n    \n        \n            \n                \n                    \n                    ComponentType\n                \n            \n            \n                \n                        Type | null\n\n                \n            \n        \n    \n    libs/angular/forms/src/lib/interfaces/form-accessor-control-keys.ts\n    \n    \n        \n            \n                \n                    \n                    ControlPaths\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FormAccessorControlsEntity\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Join\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Previous\n                \n            \n            \n                \n                        [never, \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", ...[]]\n\n                \n            \n        \n    \n    libs/angular/utils/src/lib/tokens/cypress-tags.token.ts\n    \n    \n        \n            \n                \n                    \n                    CypressLeafObject\n                \n            \n            \n                \n                        Record | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CypressObject\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n    libs/angular/store/src/lib/rxjs/spec/store-assets.ts\n    \n    \n        \n            \n                \n                    \n                    DataType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    libs/angular/forms/src/lib/validators/date-range/date-range.validator.ts\n    \n    \n        \n            \n                \n                    \n                    DateRangeErrorCodes\n                \n            \n            \n                \n                        \"invalidMaxDate\" | \"invalidMinDate\" | \"dateAfterMaxDate\" | \"dateBeforeMinDate\"\n\n                \n            \n        \n    \n    libs/angular/store/src/lib/rxjs/interfaces/store-state.ts\n    \n    \n        \n            \n                \n                    \n                    extractStoreAssetType\n                \n            \n            \n                \n                    A type to extract the original generic DataType from a BaseStoreAssets or EntityStoreAssets\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoreState\n                \n            \n            \n                \n                    A type to map a StoreFlowAssets to a StoreState object\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoreStateData\n                \n            \n            \n                \n                    A type to map a StoreFlowAsset key to it's corresponding Observable\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoreStateError\n                \n            \n            \n                \n                    A type to map a StoreFlowAsset key to it's corresponding error Observable\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoreStateErrorMessage\n                \n            \n            \n                \n                    A type to map a StoreFlowAsset key to it's corresponding error message Observable\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoreStateLoading\n                \n            \n            \n                \n                    A type to map a StoreFlowAsset key to it's corresponding loading Observable\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/tokens/ngx-table-config.token.ts\n    \n    \n        \n            \n                \n                    \n                    HideHeaderRowOption\n                \n            \n            \n                \n                        \"never\" |  | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HideHeaderRowOptions\n                \n            \n            \n                \n                        \"when-loading\" | \"when-empty\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ShowDetailRowOption\n                \n            \n            \n                \n                        \"always\" | \"on-click\" | \"on-single-item\"\n\n                \n            \n        \n    \n    libs/angular/utils/src/lib/types/cypress.types.ts\n    \n    \n        \n            \n                \n                    \n                    Join\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Paths\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Prev\n                \n            \n            \n                \n                        [never, \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", ...[]]\n\n                \n            \n        \n    \n    libs/javascript/utils/src/lib/object/merge/merge.util.ts\n    \n    \n        \n            \n                \n                    \n                    KeyValuePair\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxAccessibleDragAndDropFromToMessage\n                \n            \n            \n                \n                        template literal type | template literal type | template literal type | template literal type | template literal type | template literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxAccessibleDragAndDropMessage\n                \n            \n            \n                \n                            NgxAccessibleDragAndDropBaseMessage | NgxAccessibleDragAndDropBaseMessage\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxAccessibleDragAndDropMoveType\n                \n            \n            \n                \n                        \"reordered\" | \"moved\"\n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/accordion.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxAccordionOpenBehavior\n                \n            \n            \n                \n                        \"first\" | \"all\" | number | number[]\n\n                \n            \n        \n    \n    libs/angular/authentication/src/lib/types/authenticated-route.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxAuthenticatedRoutes\n                \n            \n            \n                \n                            NgxAuthenticatedRoute[]\n\n                \n            \n        \n    \n    libs/angular/authentication/src/lib/types/authentication.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxAuthenticationResponseFeature\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    libs/angular/authentication/src/lib/types/authentication-status.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxAuthenticationStatus\n                \n            \n            \n                \n                        \"unset\" | \"signed-in\" | \"signed-out\"\n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/configurable-layout.ts\n    \n    \n        \n            \n                \n                    \n                    NgxConfigurableLayoutGrid\n                \n            \n            \n                \n                            NgxConfigurableLayoutItemEntity[][]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxConfigurableLayoutItemSizeOption\n                \n            \n            \n                \n                        \"fit-content\" | \"fill\" | \"equal\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxConfigurableLayoutType\n                \n            \n            \n                \n                        \"static\" | \"editable\"\n\n                \n            \n        \n    \n    libs/angular/cookies/src/lib/types/cookie-configuration.ts\n    \n    \n        \n            \n                \n                    \n                    NgxCookieCategories\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/display-content.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxDisplayContentAriaLive\n                \n            \n            \n                \n                        \"polite\" | \"assertive\" | \"off\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxDisplayContentComponentConfiguration\n                \n            \n            \n                \n                            NgxDisplayContentRecord>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxDisplayContentConditions\n                \n            \n            \n                \n                            NgxDisplayContentRecord\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxDisplayContentOverrideConfiguration\n                \n            \n            \n                \n                            NgxDisplayContentRecord\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxDisplayContentRecord\n                \n            \n            \n                \n                        Partial>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxDisplayContentStatus\n                \n            \n            \n                \n                        \"loading\" | \"error\" | \"offline\"\n\n                \n            \n        \n    \n    libs/angular/forms/src/lib/interfaces/errors.interface.ts\n    \n    \n        \n            \n                \n                    \n                    NgxFormsErrorShowSettings\n                \n            \n            \n                \n                        \"all\" | number\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxFormsErrorShowWhenSettings\n                \n            \n            \n                \n                        \"touched\" | \"dirty\"\n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/image-marker.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxImageMarker\n                \n            \n            \n                \n                    An Angular wrapper for markerjs views\n\n                \n            \n            \n                \n                            NgxImageMarkerEdit | NgxImageMarkerView\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxImageMarkerItem\n                \n            \n            \n                \n                    A marker on the marker view\n\n                \n            \n            \n                \n                        MarkerBase\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxImageMarkerState\n                \n            \n            \n                \n                    The state of the marker view\n\n                \n            \n            \n                \n                        MarkerAreaState\n\n                \n            \n        \n    \n    libs/angular/inform/src/lib/types/modal.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxModalActionType\n                \n            \n            \n                \n                    The type of action that should be emitted by the modal.\n\n                \n            \n            \n                \n                        StringType | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxModalConfiguration\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxModalLabelAriaOptions\n                \n            \n            \n                \n                        NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxModalOptions\n                \n            \n            \n                \n                         | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxModalRole\n                \n            \n            \n                \n                        \"dialog\" | \"alertdialog\"\n\n                \n            \n        \n    \n    libs/angular/utils/src/lib/types/replace-elements.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxReplaceElementsConfiguration\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxReplaceElementsSelector\n                \n            \n            \n                \n                         `${string}{{id}}${string}`\n\n                \n            \n        \n    \n    libs/angular/store/src/lib/signal/types/signal-store.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxSignalStore\n                \n            \n            \n                \n                    A writable version of the NgxSignalStore\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxSignalStoreConfiguration\n                \n            \n            \n                \n                    The configuration to setup a slice in the NgxSignalStore\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxSignalStoreDispatchActions\n                \n            \n            \n                \n                    The methods that are available to the dispatchDataToSignalStore method\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxSignalStoreRecord\n                \n            \n            \n                \n                    A record of the NgxSignalStore slices\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxSignalStoreSliceConfiguration\n                \n            \n            \n                \n                    The configuration of a slice in the NgxSignalStore\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxSignalStoreSliceDataType\n                \n            \n            \n                \n                    Extracts the data type out of a NgxSignalStoreSlice\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxSignalStoreSliceMethods\n                \n            \n            \n                \n                    The methods that are available in the store\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxSignalStoreState\n                \n            \n            \n                \n                    The state of a store\n\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxSignalStoreViewState\n                \n            \n            \n                \n                    A readonly version of the NgxSignalStore\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    libs/angular/utils/src/lib/types/storage.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxStorageEvent\n                \n            \n            \n                \n                        NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxStorageRecord\n                \n            \n            \n                \n                        Record>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxStorageType\n                \n            \n            \n                \n                        \"local\" | \"session\"\n\n                \n            \n        \n    \n    libs/angular/store/src/lib/rxjs/interfaces/store-generator.ts\n    \n    \n        \n            \n                \n                    \n                    NgxStoreActions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxStoreSelectors\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoreFlowAssets\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/show-header-requirements.ts\n    \n    \n        \n            \n                \n                    \n                    NgxTableCypressDataTags\n                \n            \n            \n                \n                            RequireAtLeastOne\n\n                \n            \n        \n    \n    libs/angular/inform/src/lib/types/tooltip.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxTooltipEvent\n                \n            \n            \n                \n                        NgxTooltipInactiveEvent | NgxTooltipActiveElementEvent | NgxTooltipActiveTooltipEvent\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTooltipPosition\n                \n            \n            \n                \n                        \"above\" | \"below\" | \"left\" | \"right\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTooltipPositionClass\n                \n            \n            \n                \n                             `ngx-tooltip-position-${NgxTooltipPosition}`\n\n                \n            \n        \n    \n    libs/angular/inform/src/lib/types/tour.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxTourAction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTourDirection\n                \n            \n            \n                \n                        \"next\" | \"back\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTourInteraction\n                \n            \n            \n                \n                            NgxTourDirection | \"close\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTourRegistrationEvent\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTourStepOffset\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTourStepPosition\n                \n            \n            \n                \n                        \"above\" | \"below\" | \"right\" | \"left\"\n\n                \n            \n        \n    \n    libs/angular/inform/src/lib/types/tour.token.type.ts\n    \n    \n        \n            \n                \n                    \n                    NgxTourTokenType\n                \n            \n            \n                \n                    The token type for the tour provider\n\n                \n            \n            \n                \n                            Type | NgxTourTokenConfiguration\n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/tree-grid.types.ts\n    \n    \n        \n            \n                \n                    \n                    NgxTreeGridCellTarget\n                \n            \n            \n                \n                        number | \"first\" | \"last\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NgxTreeGridRowTarget\n                \n            \n            \n                \n                        \"current\" | \"above\" | \"below\" | \"first\" | \"last\"\n\n                \n            \n        \n    \n    libs/angular/layout/src/lib/types/internal-helpers.ts\n    \n    \n        \n            \n                \n                    \n                    RequireAtLeastOne\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    libs/angular/store/src/lib/rxjs/interfaces/require-at-least-one.ts\n    \n    \n        \n            \n                \n                    \n                    RequireAtLeastOne\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    libs/angular/store/src/lib/rxjs/interfaces/store.ts\n    \n    \n        \n            \n                \n                    \n                    StoreActions\n                \n            \n            \n                \n                            BaseStoreActions | EntityStoreActions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoreSelectors\n                \n            \n            \n                \n                            BaseStoreSelectors | EntityStoreSelectors\n\n                \n            \n        \n    \n    libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts\n    \n    \n        \n            \n                \n                    \n                    StringifiedQueryParamsType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
